
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c8c  0800dbe0  0800dbe0  0001dbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e86c  0800e86c  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e86c  0800e86c  0001e86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e874  0800e874  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e87c  0800e87c  0001e87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e880  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f0  20000210  0800ea90  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0800ea90  00020800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8e0  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004010  00000000  00000000  0003fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00043b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00045020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a8f  00000000  00000000  00046388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a44a  00000000  00000000  0006ee17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5692  00000000  00000000  00089261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e8f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000709c  00000000  00000000  0016e944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dbc4 	.word	0x0800dbc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800dbc4 	.word	0x0800dbc4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_DMA_Init+0x38>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <MX_DMA_Init+0x38>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6493      	str	r3, [r2, #72]	; 0x48
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_DMA_Init+0x38>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2010      	movs	r0, #16
 800103c:	f002 fbe7 	bl	800380e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001040:	2010      	movs	r0, #16
 8001042:	f002 fc00 	bl	8003846 <HAL_NVIC_EnableIRQ>

}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b5c      	ldr	r3, [pc, #368]	; (80011dc <MX_GPIO_Init+0x188>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106e:	4a5b      	ldr	r2, [pc, #364]	; (80011dc <MX_GPIO_Init+0x188>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001076:	4b59      	ldr	r3, [pc, #356]	; (80011dc <MX_GPIO_Init+0x188>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b56      	ldr	r3, [pc, #344]	; (80011dc <MX_GPIO_Init+0x188>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <MX_GPIO_Init+0x188>)
 8001088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <MX_GPIO_Init+0x188>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b50      	ldr	r3, [pc, #320]	; (80011dc <MX_GPIO_Init+0x188>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <MX_GPIO_Init+0x188>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a6:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <MX_GPIO_Init+0x188>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <MX_GPIO_Init+0x188>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	4a49      	ldr	r2, [pc, #292]	; (80011dc <MX_GPIO_Init+0x188>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010be:	4b47      	ldr	r3, [pc, #284]	; (80011dc <MX_GPIO_Init+0x188>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010ca:	2200      	movs	r2, #0
 80010cc:	f248 11b0 	movw	r1, #33200	; 0x81b0
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f002 ff32 	bl	8003f3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f242 0160 	movw	r1, #8288	; 0x2060
 80010de:	4840      	ldr	r0, [pc, #256]	; (80011e0 <MX_GPIO_Init+0x18c>)
 80010e0:	f002 ff2c 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	483e      	ldr	r0, [pc, #248]	; (80011e4 <MX_GPIO_Init+0x190>)
 80010ea:	f002 ff27 	bl	8003f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4837      	ldr	r0, [pc, #220]	; (80011e4 <MX_GPIO_Init+0x190>)
 8001106:	f002 fd9f 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 800110a:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800110e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f002 fd8f 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800112a:	2340      	movs	r3, #64	; 0x40
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001140:	f002 fd82 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8001144:	f242 0360 	movw	r3, #8288	; 0x2060
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4820      	ldr	r0, [pc, #128]	; (80011e0 <MX_GPIO_Init+0x18c>)
 800115e:	f002 fd73 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	2303      	movs	r3, #3
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001174:	2305      	movs	r3, #5
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4818      	ldr	r0, [pc, #96]	; (80011e0 <MX_GPIO_Init+0x18c>)
 8001180:	f002 fd62 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <MX_GPIO_Init+0x190>)
 800119c:	f002 fd54 	bl	8003c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80011b2:	230e      	movs	r3, #14
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <MX_GPIO_Init+0x18c>)
 80011be:	f002 fd43 	bl	8003c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2101      	movs	r1, #1
 80011c6:	2028      	movs	r0, #40	; 0x28
 80011c8:	f002 fb21 	bl	800380e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011cc:	2028      	movs	r0, #40	; 0x28
 80011ce:	f002 fb3a 	bl	8003846 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800

080011e8 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int tim_channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), tim_channel(0) {}
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	809a      	strh	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	719a      	strb	r2, [r3, #6]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), tim_channel(0) {} // no timer
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	809a      	strh	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2201      	movs	r2, #1
 800123a:	719a      	strb	r2, [r3, #6]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), tim_channel(c) {}
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4613      	mov	r3, r2
 8001264:	80fb      	strh	r3, [r7, #6]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	88fa      	ldrh	r2, [r7, #6]
 8001270:	809a      	strh	r2, [r3, #4]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	719a      	strb	r2, [r3, #6]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7fe ffa1 	bl	80001e4 <strlen>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <_Z5printPKc+0x2c>)
 80012ae:	f005 fcf7 	bl	8006ca0 <HAL_UART_Transmit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000071c 	.word	0x2000071c

080012c4 <printf>:
int printf(const char* s, ...){
 80012c4:	b40f      	push	{r0, r1, r2, r3}
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b0c2      	sub	sp, #264	; 0x108
 80012ca:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80012cc:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80012d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012d8:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 80012da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80012de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80012e2:	f107 0008 	add.w	r0, r7, #8
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80012ec:	f009 fa80 	bl	800a7f0 <vsiprintf>
	perror(buffer);
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	4618      	mov	r0, r3
 80012f6:	f008 f8db 	bl	80094b0 <perror>
	print(buffer);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffc8 	bl	8001294 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff6b 	bl	80001e4 <strlen>
 800130e:	4603      	mov	r3, r0
}
 8001310:	4618      	mov	r0, r3
 8001312:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr

08001320 <_Z12print_CYTRONPc>:
//Pin AMT22_1(GPIOC, GPIO_PIN_7);
RoverArmMotor Waist(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.99f);



void print_CYTRON(char* msg){
 8001320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001324:	b08f      	sub	sp, #60	; 0x3c
 8001326:	af0a      	add	r7, sp, #40	; 0x28
 8001328:	60f8      	str	r0, [r7, #12]
  current_angle = Wrist_Roll.get_current_angle();
 800132a:	481f      	ldr	r0, [pc, #124]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 800132c:	f001 fc9e 	bl	8002c6c <_ZN13RoverArmMotor17get_current_angleEv>
 8001330:	eeb0 7a40 	vmov.f32	s14, s0
 8001334:	eef0 7a60 	vmov.f32	s15, s1
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <_Z12print_CYTRONPc+0x8c>)
 800133a:	ed83 7b00 	vstr	d7, [r3]
  current_angle_sw = Wrist_Roll.get_current_angle_sw();
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 8001340:	f001 fcda 	bl	8002cf8 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8001344:	eeb0 7a40 	vmov.f32	s14, s0
 8001348:	eef0 7a60 	vmov.f32	s15, s1
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <_Z12print_CYTRONPc+0x90>)
 800134e:	ed83 7b00 	vstr	d7, [r3]
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <_Z12print_CYTRONPc+0x8c>)
 8001354:	ed93 7b00 	vldr	d7, [r3]
 8001358:	ed87 7b00 	vstr	d7, [r7]
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <_Z12print_CYTRONPc+0x90>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	4911      	ldr	r1, [pc, #68]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 8001364:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 8001368:	4c0f      	ldr	r4, [pc, #60]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 800136a:	e9d4 4558 	ldrd	r4, r5, [r4, #352]	; 0x160
 800136e:	4e0e      	ldr	r6, [pc, #56]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 8001370:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
    msg, current_angle, current_angle_sw, Wrist_Roll.setpoint, Wrist_Roll.zero_angle_sw,
    Wrist_Roll.internalPIDInstance._outputSum, *Wrist_Roll.internalPIDInstance._myOutput);
 8001374:	4e0c      	ldr	r6, [pc, #48]	; (80013a8 <_Z12print_CYTRONPc+0x88>)
 8001376:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 8001378:	e9d6 ab00 	ldrd	sl, fp, [r6]
 800137c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001380:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001384:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800138c:	e9cd 2300 	strd	r2, r3, [sp]
 8001390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	4807      	ldr	r0, [pc, #28]	; (80013b4 <_Z12print_CYTRONPc+0x94>)
 8001398:	f7ff ff94 	bl	80012c4 <printf>
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013a6:	bf00      	nop
 80013a8:	20000278 	.word	0x20000278
 80013ac:	20000230 	.word	0x20000230
 80013b0:	20000238 	.word	0x20000238
 80013b4:	0800dbe0 	.word	0x0800dbe0

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013be:	f002 f8ab 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c2:	f000 f89d 	bl	8001500 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c6:	f7ff fe45 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ca:	f7ff fe25 	bl	8001018 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ce:	f000 feb5 	bl	800213c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80013d2:	f000 faab 	bl	800192c <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_SPI3_Init();
 80013d6:	f000 fae7 	bl	80019a8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80013da:	f000 fcdb 	bl	8001d94 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013de:	f000 fd85 	bl	8001eec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 80013e2:	2363      	movs	r3, #99	; 0x63
 80013e4:	82fb      	strh	r3, [r7, #22]
  uint16_t encoderData_2 = 99;
 80013e6:	2363      	movs	r3, #99	; 0x63
 80013e8:	82bb      	strh	r3, [r7, #20]
  uint16_t encoderData_3 = 99;
 80013ea:	2363      	movs	r3, #99	; 0x63
 80013ec:	827b      	strh	r3, [r7, #18]
  uint16_t encoder_max = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	823b      	strh	r3, [r7, #16]
  uint16_t encoder_min = 4100;
 80013f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80013f6:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Base_Start(&htim1);
 80013f8:	4833      	ldr	r0, [pc, #204]	; (80014c8 <main+0x110>)
 80013fa:	f004 fc19 	bl	8005c30 <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---SERVO setup---*/
  int32_t  CH2_ESC = 1500-1;
 80013fe:	f240 53db 	movw	r3, #1499	; 0x5db
 8001402:	60bb      	str	r3, [r7, #8]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001404:	2104      	movs	r1, #4
 8001406:	4830      	ldr	r0, [pc, #192]	; (80014c8 <main+0x110>)
 8001408:	f004 fcc0 	bl	8005d8c <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800140c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001410:	f002 f8fe 	bl	8003610 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 8001414:	4b2c      	ldr	r3, [pc, #176]	; (80014c8 <main+0x110>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f240 52db 	movw	r2, #1499	; 0x5db
 800141c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 800141e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001422:	f002 f8f5 	bl	8003610 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
  HAL_Delay(10);
 800142a:	200a      	movs	r0, #10
 800142c:	f002 f8f0 	bl	8003610 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <main+0x114>)
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 8001438:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <main+0x118>)
 800143a:	ed93 7b00 	vldr	d7, [r3]
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <main+0x11c>)
 8001440:	ed93 6b00 	vldr	d6, [r3]
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <main+0x120>)
 8001446:	ed93 2b00 	vldr	d2, [r3]
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <main+0x124>)
 800144c:	ed93 3b00 	vldr	d3, [r3]
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <main+0x128>)
 8001452:	ed93 4b00 	vldr	d4, [r3]
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <main+0x12c>)
 8001458:	ed93 5b00 	vldr	d5, [r3]
 800145c:	eeb0 1a46 	vmov.f32	s2, s12
 8001460:	eef0 1a66 	vmov.f32	s3, s13
 8001464:	eeb0 0a47 	vmov.f32	s0, s14
 8001468:	eef0 0a67 	vmov.f32	s1, s15
 800146c:	4817      	ldr	r0, [pc, #92]	; (80014cc <main+0x114>)
 800146e:	f001 f80b 	bl	8002488 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(0.5, 120.0f); //TODO check good angle limits
 8001472:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80014b8 <main+0x100>
 8001476:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80014c0 <main+0x108>
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <main+0x114>)
 800147c:	f001 fba8 	bl	8002bd0 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <main+0x130>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	221e      	movs	r2, #30
 8001486:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <main+0x134>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d103      	bne.n	8001498 <main+0xe0>
    print_CYTRON("BRAKE");
 8001490:	4817      	ldr	r0, [pc, #92]	; (80014f0 <main+0x138>)
 8001492:	f7ff ff45 	bl	8001320 <_Z12print_CYTRONPc>
  while(!brakeSet){
 8001496:	e7f7      	b.n	8001488 <main+0xd0>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <main+0x130>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	639a      	str	r2, [r3, #56]	; 0x38

  /*---UART setup---*/
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80014a0:	2201      	movs	r2, #1
 80014a2:	4914      	ldr	r1, [pc, #80]	; (80014f4 <main+0x13c>)
 80014a4:	4814      	ldr	r0, [pc, #80]	; (80014f8 <main+0x140>)
 80014a6:	f005 fc8f 	bl	8006dc8 <HAL_UART_Receive_IT>
    //     Wrist_Roll.tick();
    // }
    // Wrist_Roll.stop();

    /*--------------------------------------CYTRON setpoint test--------------------------------------*/
    print_CYTRON("SETPOINT");
 80014aa:	4814      	ldr	r0, [pc, #80]	; (80014fc <main+0x144>)
 80014ac:	f7ff ff38 	bl	8001320 <_Z12print_CYTRONPc>
    Wrist_Roll.tick();
 80014b0:	4806      	ldr	r0, [pc, #24]	; (80014cc <main+0x114>)
 80014b2:	f001 f8e1 	bl	8002678 <_ZN13RoverArmMotor4tickEv>
    print_CYTRON("SETPOINT");
 80014b6:	e7f8      	b.n	80014aa <main+0xf2>
 80014b8:	00000000 	.word	0x00000000
 80014bc:	405e0000 	.word	0x405e0000
 80014c0:	00000000 	.word	0x00000000
 80014c4:	3fe00000 	.word	0x3fe00000
 80014c8:	20000684 	.word	0x20000684
 80014cc:	20000278 	.word	0x20000278
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000008 	.word	0x20000008
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000018 	.word	0x20000018
 80014e0:	20000020 	.word	0x20000020
 80014e4:	20000028 	.word	0x20000028
 80014e8:	200006d0 	.word	0x200006d0
 80014ec:	20000240 	.word	0x20000240
 80014f0:	0800dc40 	.word	0x0800dc40
 80014f4:	20000560 	.word	0x20000560
 80014f8:	2000071c 	.word	0x2000071c
 80014fc:	0800dc48 	.word	0x0800dc48

08001500 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b096      	sub	sp, #88	; 0x58
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	2244      	movs	r2, #68	; 0x44
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f006 ffd2 	bl	80084b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001522:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001526:	f002 fd47 	bl	8003fb8 <HAL_PWREx_ControlVoltageScaling>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	bf14      	ite	ne
 8001530:	2301      	movne	r3, #1
 8001532:	2300      	moveq	r3, #0
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800153a:	f000 f949 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001548:	2310      	movs	r3, #16
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154c:	2302      	movs	r3, #2
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001550:	2302      	movs	r3, #2
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800155c:	2307      	movs	r3, #7
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001560:	2302      	movs	r3, #2
 8001562:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fd79 	bl	8004064 <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001582:	f000 f925 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001586:	230f      	movs	r3, #15
 8001588:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158a:	2303      	movs	r3, #3
 800158c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800159a:	463b      	mov	r3, r7
 800159c:	2104      	movs	r1, #4
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 f974 	bl	800488c <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bf14      	ite	ne
 80015aa:	2301      	movne	r3, #1
 80015ac:	2300      	moveq	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 80015b4:	f000 f90c 	bl	80017d0 <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3758      	adds	r7, #88	; 0x58
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d0:	d11d      	bne.n	800160e <HAL_GPIO_EXTI_Callback+0x4e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_GPIO_EXTI_Callback+0x60>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 80015da:	2064      	movs	r0, #100	; 0x64
 80015dc:	f002 f818 	bl	8003610 <HAL_Delay>
      button_counter++;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_GPIO_EXTI_Callback+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <HAL_GPIO_EXTI_Callback+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <HAL_GPIO_EXTI_Callback+0x68>)
 80015ec:	f001 fb14 	bl	8002c18 <_ZN13RoverArmMotor17set_zero_angle_swEv>
      
      HAL_Delay(100);
 80015f0:	2064      	movs	r0, #100	; 0x64
 80015f2:	f002 f80d 	bl	8003610 <HAL_Delay>
      Wrist_Roll.newSetpoint(1.0);  //TODO check this?
 80015f6:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001618 <HAL_GPIO_EXTI_Callback+0x58>
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <HAL_GPIO_EXTI_Callback+0x68>)
 80015fc:	f001 fab7 	bl	8002b6e <_ZN13RoverArmMotor11newSetpointEd>
      
      brakeSet = 1;
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 8001606:	2064      	movs	r0, #100	; 0x64
 8001608:	f002 f802 	bl	8003610 <HAL_Delay>
      return;
 800160c:	bf00      	nop
    }
  // }
}
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	00000000 	.word	0x00000000
 800161c:	3ff00000 	.word	0x3ff00000
 8001620:	200006d0 	.word	0x200006d0
 8001624:	200003e0 	.word	0x200003e0
 8001628:	20000278 	.word	0x20000278
 800162c:	20000240 	.word	0x20000240

08001630 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
 8001636:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
    if(rx_index < RX_BUFFER_SIZE - 1) // check if buffer is not full
 8001638:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b1c      	cmp	r3, #28
 800163e:	d876      	bhi.n	800172e <HAL_UART_RxCpltCallback+0xfe>
    {
      rx_buffer[rx_index++] = (uint8_t)rx_data[0]; // add received byte to buffer
 8001640:	4b54      	ldr	r3, [pc, #336]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4953      	ldr	r1, [pc, #332]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001648:	600a      	str	r2, [r1, #0]
 800164a:	4a53      	ldr	r2, [pc, #332]	; (8001798 <HAL_UART_RxCpltCallback+0x168>)
 800164c:	7811      	ldrb	r1, [r2, #0]
 800164e:	4a53      	ldr	r2, [pc, #332]	; (800179c <HAL_UART_RxCpltCallback+0x16c>)
 8001650:	54d1      	strb	r1, [r2, r3]
      if(rx_data[0] == '\n' || rx_data[0] == '\r') // check for Enter key
 8001652:	4b51      	ldr	r3, [pc, #324]	; (8001798 <HAL_UART_RxCpltCallback+0x168>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0a      	cmp	r3, #10
 8001658:	d003      	beq.n	8001662 <HAL_UART_RxCpltCallback+0x32>
 800165a:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_UART_RxCpltCallback+0x168>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b0d      	cmp	r3, #13
 8001660:	d160      	bne.n	8001724 <HAL_UART_RxCpltCallback+0xf4>
      {
        rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4d      	ldr	r2, [pc, #308]	; (800179c <HAL_UART_RxCpltCallback+0x16c>)
 8001668:	2100      	movs	r1, #0
 800166a:	54d1      	strb	r1, [r2, r3]
        rx_index = 0; // reset buffer index
 800166c:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
        // do something with the received data
        sscanf(rx_buffer, "%s %lf %lf %lf", command_buffer, &param1, &param2, &param3);
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	4b4b      	ldr	r3, [pc, #300]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4b4b      	ldr	r3, [pc, #300]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 800167c:	4a4b      	ldr	r2, [pc, #300]	; (80017ac <HAL_UART_RxCpltCallback+0x17c>)
 800167e:	494c      	ldr	r1, [pc, #304]	; (80017b0 <HAL_UART_RxCpltCallback+0x180>)
 8001680:	4846      	ldr	r0, [pc, #280]	; (800179c <HAL_UART_RxCpltCallback+0x16c>)
 8001682:	f007 ff97 	bl	80095b4 <siscanf>
        //check if commmand_buffer is "pid"
        if(strcmp(command_buffer, "pid") == 0)
 8001686:	494b      	ldr	r1, [pc, #300]	; (80017b4 <HAL_UART_RxCpltCallback+0x184>)
 8001688:	4848      	ldr	r0, [pc, #288]	; (80017ac <HAL_UART_RxCpltCallback+0x17c>)
 800168a:	f7fe fda1 	bl	80001d0 <strcmp>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d12f      	bne.n	80016f4 <HAL_UART_RxCpltCallback+0xc4>
        {
          Wrist_Roll.set_PID_params(param1, param2, param3, param1, param2, param3);
 8001694:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 8001696:	ed93 7b00 	vldr	d7, [r3]
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 800169c:	ed93 6b00 	vldr	d6, [r3]
 80016a0:	4b3f      	ldr	r3, [pc, #252]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 80016a2:	ed93 2b00 	vldr	d2, [r3]
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 80016a8:	ed93 3b00 	vldr	d3, [r3]
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 80016ae:	ed93 4b00 	vldr	d4, [r3]
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 80016b4:	ed93 5b00 	vldr	d5, [r3]
 80016b8:	eeb0 1a46 	vmov.f32	s2, s12
 80016bc:	eef0 1a66 	vmov.f32	s3, s13
 80016c0:	eeb0 0a47 	vmov.f32	s0, s14
 80016c4:	eef0 0a67 	vmov.f32	s1, s15
 80016c8:	483b      	ldr	r0, [pc, #236]	; (80017b8 <HAL_UART_RxCpltCallback+0x188>)
 80016ca:	f001 fa05 	bl	8002ad8 <_ZN13RoverArmMotor14set_PID_paramsEdddddd>
          printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", param1, param2, param3);
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 80016d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	4931      	ldr	r1, [pc, #196]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 80016dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80016e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80016e4:	e9cd 2300 	strd	r2, r3, [sp]
 80016e8:	4622      	mov	r2, r4
 80016ea:	462b      	mov	r3, r5
 80016ec:	4833      	ldr	r0, [pc, #204]	; (80017bc <HAL_UART_RxCpltCallback+0x18c>)
 80016ee:	f7ff fde9 	bl	80012c4 <printf>
        if(strcmp(command_buffer, "pid") == 0)
 80016f2:	e045      	b.n	8001780 <HAL_UART_RxCpltCallback+0x150>
        }
        else if (strcmp(command_buffer, "sp") == 0) 
 80016f4:	4932      	ldr	r1, [pc, #200]	; (80017c0 <HAL_UART_RxCpltCallback+0x190>)
 80016f6:	482d      	ldr	r0, [pc, #180]	; (80017ac <HAL_UART_RxCpltCallback+0x17c>)
 80016f8:	f7fe fd6a 	bl	80001d0 <strcmp>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d13e      	bne.n	8001780 <HAL_UART_RxCpltCallback+0x150>
        {
          Wrist_Roll.newSetpoint(param1);
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 8001704:	ed93 7b00 	vldr	d7, [r3]
 8001708:	eeb0 0a47 	vmov.f32	s0, s14
 800170c:	eef0 0a67 	vmov.f32	s1, s15
 8001710:	4829      	ldr	r0, [pc, #164]	; (80017b8 <HAL_UART_RxCpltCallback+0x188>)
 8001712:	f001 fa2c 	bl	8002b6e <_ZN13RoverArmMotor11newSetpointEd>
          printf("new Setpoint at %lf\r\n", param1);
 8001716:	4b24      	ldr	r3, [pc, #144]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	4829      	ldr	r0, [pc, #164]	; (80017c4 <HAL_UART_RxCpltCallback+0x194>)
 800171e:	f7ff fdd1 	bl	80012c4 <printf>
        if(strcmp(command_buffer, "pid") == 0)
 8001722:	e02d      	b.n	8001780 <HAL_UART_RxCpltCallback+0x150>
        } 
      }
      else {
          printf("invalid command %s\r\n", command_buffer);
 8001724:	4921      	ldr	r1, [pc, #132]	; (80017ac <HAL_UART_RxCpltCallback+0x17c>)
 8001726:	4828      	ldr	r0, [pc, #160]	; (80017c8 <HAL_UART_RxCpltCallback+0x198>)
 8001728:	f7ff fdcc 	bl	80012c4 <printf>
 800172c:	e029      	b.n	8001782 <HAL_UART_RxCpltCallback+0x152>
        }
        
    }
    else if (rx_index == RX_BUFFER_SIZE - 1) // buffer is full
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b1d      	cmp	r3, #29
 8001734:	d125      	bne.n	8001782 <HAL_UART_RxCpltCallback+0x152>
    {
      rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <HAL_UART_RxCpltCallback+0x16c>)
 800173c:	2100      	movs	r1, #0
 800173e:	54d1      	strb	r1, [r2, r3]
      rx_index = 0; // reset buffer index
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_UART_RxCpltCallback+0x164>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
      // do something with the received data
      sscanf(rx_buffer, "%s %lf %lf %lf", command_buffer, &param1, &param2, &param3);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HAL_UART_RxCpltCallback+0x17c>)
 8001752:	4917      	ldr	r1, [pc, #92]	; (80017b0 <HAL_UART_RxCpltCallback+0x180>)
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <HAL_UART_RxCpltCallback+0x16c>)
 8001756:	f007 ff2d 	bl	80095b4 <siscanf>
      printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", param1, param2, param3);
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_UART_RxCpltCallback+0x178>)
 800175c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_UART_RxCpltCallback+0x174>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_UART_RxCpltCallback+0x170>)
 8001768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800176c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001770:	e9cd 2300 	strd	r2, r3, [sp]
 8001774:	4622      	mov	r2, r4
 8001776:	462b      	mov	r3, r5
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <HAL_UART_RxCpltCallback+0x18c>)
 800177a:	f7ff fda3 	bl	80012c4 <printf>
 800177e:	e000      	b.n	8001782 <HAL_UART_RxCpltCallback+0x152>
        if(strcmp(command_buffer, "pid") == 0)
 8001780:	bf00      	nop
    }
  // }
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // start listening for next byte
 8001782:	2201      	movs	r2, #1
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <HAL_UART_RxCpltCallback+0x168>)
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <HAL_UART_RxCpltCallback+0x19c>)
 8001788:	f005 fb1e 	bl	8006dc8 <HAL_UART_Receive_IT>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bdb0      	pop	{r4, r5, r7, pc}
 8001794:	20000588 	.word	0x20000588
 8001798:	20000560 	.word	0x20000560
 800179c:	20000568 	.word	0x20000568
 80017a0:	200005b0 	.word	0x200005b0
 80017a4:	200005a8 	.word	0x200005a8
 80017a8:	200005a0 	.word	0x200005a0
 80017ac:	2000058c 	.word	0x2000058c
 80017b0:	0800dc54 	.word	0x0800dc54
 80017b4:	0800dc64 	.word	0x0800dc64
 80017b8:	20000278 	.word	0x20000278
 80017bc:	0800dc68 	.word	0x0800dc68
 80017c0:	0800dc8c 	.word	0x0800dc8c
 80017c4:	0800dc90 	.word	0x0800dc90
 80017c8:	0800dca8 	.word	0x0800dca8
 80017cc:	2000071c 	.word	0x2000071c

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <Error_Handler+0x8>
 80017da:	0000      	movs	r0, r0
 80017dc:	0000      	movs	r0, r0
	...

080017e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b09a      	sub	sp, #104	; 0x68
 80017e4:	af10      	add	r7, sp, #64	; 0x40
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d172      	bne.n	80018d6 <_Z41__static_initialization_and_destruction_0ii+0xf6>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d16d      	bne.n	80018d6 <_Z41__static_initialization_and_destruction_0ii+0xf6>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 80017fa:	2220      	movs	r2, #32
 80017fc:	493c      	ldr	r1, [pc, #240]	; (80018f0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 80017fe:	483d      	ldr	r0, [pc, #244]	; (80018f4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001800:	f7ff fd0c 	bl	800121c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 8001804:	2304      	movs	r3, #4
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 800180a:	2208      	movs	r2, #8
 800180c:	4938      	ldr	r1, [pc, #224]	; (80018f0 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 800180e:	483b      	ldr	r0, [pc, #236]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001810:	f7ff fd21 	bl	8001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	493a      	ldr	r1, [pc, #232]	; (8001900 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001818:	483a      	ldr	r0, [pc, #232]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800181a:	f7ff fcff 	bl	800121c <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.99f);
 800181e:	f107 0308 	add.w	r3, r7, #8
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fce0 	bl	80011e8 <_ZN3PinC1Ev>
 8001828:	4c34      	ldr	r4, [pc, #208]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 800182a:	ad0b      	add	r5, sp, #44	; 0x2c
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001832:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001836:	2300      	movs	r3, #0
 8001838:	930a      	str	r3, [sp, #40]	; 0x28
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 800183c:	ad06      	add	r5, sp, #24
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001846:	ad02      	add	r5, sp, #8
 8001848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800184e:	466a      	mov	r2, sp
 8001850:	f104 0308 	add.w	r3, r4, #8
 8001854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001858:	e882 0003 	stmia.w	r2, {r0, r1}
 800185c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001860:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80018e0 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8001864:	ed9f 0b20 	vldr	d0, [pc, #128]	; 80018e8 <_Z41__static_initialization_and_destruction_0ii+0x108>
 8001868:	4927      	ldr	r1, [pc, #156]	; (8001908 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 800186a:	4828      	ldr	r0, [pc, #160]	; (800190c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 800186c:	f000 fd65 	bl	800233a <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
Pin SERVO_PWM_1(SERVO_PWM_1_GPIO_Port, SERVO_PWM_1_Pin, &htim1, TIM_CHANNEL_2);
 8001870:	2304      	movs	r3, #4
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 8001876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800187e:	4825      	ldr	r0, [pc, #148]	; (8001914 <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001880:	f7ff fce9 	bl	8001256 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
RoverArmMotor Waist(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.99f);
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fcad 	bl	80011e8 <_ZN3PinC1Ev>
 800188e:	4c1b      	ldr	r4, [pc, #108]	; (80018fc <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001890:	ad0b      	add	r5, sp, #44	; 0x2c
 8001892:	f107 0318 	add.w	r3, r7, #24
 8001896:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001898:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800189c:	2300      	movs	r3, #0
 800189e:	930a      	str	r3, [sp, #40]	; 0x28
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80018a2:	ad06      	add	r5, sp, #24
 80018a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80018ac:	ad02      	add	r5, sp, #8
 80018ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018b4:	466a      	mov	r2, sp
 80018b6:	f104 0308 	add.w	r3, r4, #8
 80018ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018be:	e882 0003 	stmia.w	r2, {r0, r1}
 80018c2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80018c6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80018e0 <_Z41__static_initialization_and_destruction_0ii+0x100>
 80018ca:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80018e8 <_Z41__static_initialization_and_destruction_0ii+0x108>
 80018ce:	490e      	ldr	r1, [pc, #56]	; (8001908 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 80018d2:	f000 fd32 	bl	800233a <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bdb0      	pop	{r4, r5, r7, pc}
 80018de:	bf00      	nop
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40767fd7 	.word	0x40767fd7
	...
 80018f0:	48000400 	.word	0x48000400
 80018f4:	20000244 	.word	0x20000244
 80018f8:	200006d0 	.word	0x200006d0
 80018fc:	20000254 	.word	0x20000254
 8001900:	48000800 	.word	0x48000800
 8001904:	20000264 	.word	0x20000264
 8001908:	200005b8 	.word	0x200005b8
 800190c:	20000278 	.word	0x20000278
 8001910:	20000684 	.word	0x20000684
 8001914:	200003e4 	.word	0x200003e4
 8001918:	200003f8 	.word	0x200003f8

0800191c <_GLOBAL__sub_I_aggKp>:
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
 8001920:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001924:	2001      	movs	r0, #1
 8001926:	f7ff ff5b 	bl	80017e0 <_Z41__static_initialization_and_destruction_0ii>
 800192a:	bd80      	pop	{r7, pc}

0800192c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <MX_SPI1_Init+0x78>)
 8001934:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800193c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001946:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800194a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_SPI1_Init+0x74>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI1_Init+0x74>)
 800195a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001962:	2228      	movs	r2, #40	; 0x28
 8001964:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_SPI1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_SPI1_Init+0x74>)
 800197a:	2207      	movs	r2, #7
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_SPI1_Init+0x74>)
 8001986:	2208      	movs	r2, #8
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_SPI1_Init+0x74>)
 800198c:	f003 fcde 	bl	800534c <HAL_SPI_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001996:	f7ff ff1b 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200005b8 	.word	0x200005b8
 80019a4:	40013000 	.word	0x40013000

080019a8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019ae:	4a1c      	ldr	r2, [pc, #112]	; (8001a20 <MX_SPI3_Init+0x78>)
 80019b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019c6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019de:	2220      	movs	r2, #32
 80019e0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019f6:	2207      	movs	r2, #7
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019fa:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <MX_SPI3_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_SPI3_Init+0x74>)
 8001a02:	2208      	movs	r2, #8
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_SPI3_Init+0x74>)
 8001a08:	f003 fca0 	bl	800534c <HAL_SPI_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f7ff fedd 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000061c 	.word	0x2000061c
 8001a20:	40003c00 	.word	0x40003c00

08001a24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <HAL_SPI_MspInit+0xdc>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12a      	bne.n	8001a9c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	4b2f      	ldr	r3, [pc, #188]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4a:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a50:	6613      	str	r3, [r2, #96]	; 0x60
 8001a52:	4b2c      	ldr	r3, [pc, #176]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6a:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001a76:	f641 0302 	movw	r3, #6146	; 0x1802
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a88:	2305      	movs	r3, #5
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f002 f8d7 	bl	8003c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a9a:	e02d      	b.n	8001af8 <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a19      	ldr	r2, [pc, #100]	; (8001b08 <HAL_SPI_MspInit+0xe4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d128      	bne.n	8001af8 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001abe:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a10      	ldr	r2, [pc, #64]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <HAL_SPI_MspInit+0xe0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001ad6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <HAL_SPI_MspInit+0xe8>)
 8001af4:	f002 f8a8 	bl	8003c48 <HAL_GPIO_Init>
}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40013000 	.word	0x40013000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40003c00 	.word	0x40003c00
 8001b0c:	48000800 	.word	0x48000800

08001b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x44>)
 8001b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x44>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6613      	str	r3, [r2, #96]	; 0x60
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x44>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_MspInit+0x44>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_MspInit+0x44>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40021000 	.word	0x40021000

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f001 fd14 	bl	80035d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <DMA1_Channel6_IRQHandler+0x10>)
 8001bb2:	f001 ff9a 	bl	8003aea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200007a0 	.word	0x200007a0

08001bc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <USART2_IRQHandler+0x10>)
 8001bc6:	f005 f955 	bl	8006e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000071c 	.word	0x2000071c

08001bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001bd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bdc:	f002 f9c6 	bl	8003f6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return 1;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_kill>:

int _kill(int pid, int sig)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bfe:	f006 fc29 	bl	8008454 <__errno>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2216      	movs	r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
  return -1;
 8001c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_exit>:

void _exit (int status)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f7ff ffe7 	bl	8001bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c26:	e7fe      	b.n	8001c26 <_exit+0x12>

08001c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
  }

  return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
  }
  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f006 fb8e 	bl	8008454 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20010000 	.word	0x20010000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	20000680 	.word	0x20000680
 8001d6c:	20000800 	.word	0x20000800

08001d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b09a      	sub	sp, #104	; 0x68
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	615a      	str	r2, [r3, #20]
 8001dc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	222c      	movs	r2, #44	; 0x2c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 fb72 	bl	80084b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dd4:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001dd6:	4a44      	ldr	r2, [pc, #272]	; (8001ee8 <MX_TIM1_Init+0x154>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001dda:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001ddc:	224f      	movs	r2, #79	; 0x4f
 8001dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001de8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001dec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001df4:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e00:	4838      	ldr	r0, [pc, #224]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001e02:	f003 febd 	bl	8005b80 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001e0c:	f7ff fce0 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e14:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4831      	ldr	r0, [pc, #196]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001e1e:	f004 f9a7 	bl	8006170 <HAL_TIM_ConfigClockSource>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e28:	f7ff fcd2 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e2c:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001e2e:	f003 ff4b 	bl	8005cc8 <HAL_TIM_PWM_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e38:	f7ff fcca 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e40:	2300      	movs	r3, #0
 8001e42:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e48:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001e50:	f004 fdfa 	bl	8006a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e5a:	f7ff fcb9 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5e:	2360      	movs	r3, #96	; 0x60
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	2300      	movs	r3, #0
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001e84:	f004 f860 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e8e:	f7ff fc9f 	bl	80017d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001ec8:	f004 fe24 	bl	8006b14 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001ed2:	f7ff fc7d 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ed6:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <MX_TIM1_Init+0x150>)
 8001ed8:	f000 f8d4 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001edc:	bf00      	nop
 8001ede:	3768      	adds	r7, #104	; 0x68
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000684 	.word	0x20000684
 8001ee8:	40012c00 	.word	0x40012c00

08001eec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08e      	sub	sp, #56	; 0x38
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f28:	224f      	movs	r2, #79	; 0x4f
 8001f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f34:	2263      	movs	r2, #99	; 0x63
 8001f36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f38:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f40:	2280      	movs	r2, #128	; 0x80
 8001f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f44:	4823      	ldr	r0, [pc, #140]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f46:	f003 fe1b 	bl	8005b80 <HAL_TIM_Base_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f50:	f7ff fc3e 	bl	80017d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f62:	f004 f905 	bl	8006170 <HAL_TIM_ConfigClockSource>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f6c:	f7ff fc30 	bl	80017d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f70:	4818      	ldr	r0, [pc, #96]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f72:	f003 fea9 	bl	8005cc8 <HAL_TIM_PWM_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f7c:	f7ff fc28 	bl	80017d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4811      	ldr	r0, [pc, #68]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001f90:	f004 fd5a 	bl	8006a48 <HAL_TIMEx_MasterConfigSynchronization>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f9a:	f7ff fc19 	bl	80017d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9e:	2360      	movs	r3, #96	; 0x60
 8001fa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001fb6:	f003 ffc7 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fc0:	f7ff fc06 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fc4:	4803      	ldr	r0, [pc, #12]	; (8001fd4 <MX_TIM2_Init+0xe8>)
 8001fc6:	f000 f85d 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001fca:	bf00      	nop
 8001fcc:	3738      	adds	r7, #56	; 0x38
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200006d0 	.word	0x200006d0

08001fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_TIM_Base_MspInit+0xa0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10c      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	6613      	str	r3, [r2, #96]	; 0x60
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002012:	e02d      	b.n	8002070 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d128      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201e:	4b17      	ldr	r3, [pc, #92]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002022:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6593      	str	r3, [r2, #88]	; 0x58
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b11      	ldr	r3, [pc, #68]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <HAL_TIM_Base_MspInit+0xa4>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800204e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002060:	2301      	movs	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_TIM_Base_MspInit+0xa8>)
 800206c:	f001 fdec 	bl	8003c48 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3728      	adds	r7, #40	; 0x28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40012c00 	.word	0x40012c00
 800207c:	40021000 	.word	0x40021000
 8002080:	48000400 	.word	0x48000400

08002084 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_TIM_MspPostInit+0xac>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11e      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a22      	ldr	r2, [pc, #136]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 80020be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d0:	2301      	movs	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4619      	mov	r1, r3
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f001 fdb3 	bl	8003c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e2:	e020      	b.n	8002126 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d11b      	bne.n	8002126 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_MspPostInit+0xb0>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8002106:	2308      	movs	r3, #8
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 0314 	add.w	r3, r7, #20
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_TIM_MspPostInit+0xb4>)
 8002122:	f001 fd91 	bl	8003c48 <HAL_GPIO_Init>
}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	; 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40012c00 	.word	0x40012c00
 8002134:	40021000 	.word	0x40021000
 8002138:	48000400 	.word	0x48000400

0800213c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002140:	4b14      	ldr	r3, [pc, #80]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002142:	4a15      	ldr	r2, [pc, #84]	; (8002198 <MX_USART2_UART_Init+0x5c>)
 8002144:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800214c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002162:	220c      	movs	r2, #12
 8002164:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART2_UART_Init+0x58>)
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART2_UART_Init+0x58>)
 8002180:	f004 fd40 	bl	8006c04 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800218a:	f7ff fb21 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000071c 	.word	0x2000071c
 8002198:	40004400 	.word	0x40004400

0800219c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b0a2      	sub	sp, #136	; 0x88
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	2260      	movs	r2, #96	; 0x60
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f006 f97b 	bl	80084b8 <memset>
  if(uartHandle->Instance==USART2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a38      	ldr	r2, [pc, #224]	; (80022a8 <HAL_UART_MspInit+0x10c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d169      	bne.n	80022a0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021cc:	2302      	movs	r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fd7b 	bl	8004cd4 <HAL_RCCEx_PeriphCLKConfig>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021e4:	f7ff faf4 	bl	80017d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_UART_MspInit+0x110>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <HAL_UART_MspInit+0x110>)
 80021ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_UART_MspInit+0x110>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_UART_MspInit+0x110>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_UART_MspInit+0x110>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_UART_MspInit+0x110>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002218:	230c      	movs	r3, #12
 800221a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222a:	2307      	movs	r3, #7
 800222c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223a:	f001 fd05 	bl	8003c48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002240:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_UART_MspInit+0x118>)
 8002242:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002246:	2202      	movs	r2, #2
 8002248:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_UART_MspInit+0x114>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002258:	2280      	movs	r2, #128	; 0x80
 800225a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <HAL_UART_MspInit+0x114>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_UART_MspInit+0x114>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002274:	480e      	ldr	r0, [pc, #56]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002276:	f001 fb01 	bl	800387c <HAL_DMA_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002280:	f7ff faa6 	bl	80017d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <HAL_UART_MspInit+0x114>)
 8002288:	671a      	str	r2, [r3, #112]	; 0x70
 800228a:	4a09      	ldr	r2, [pc, #36]	; (80022b0 <HAL_UART_MspInit+0x114>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	2026      	movs	r0, #38	; 0x26
 8002296:	f001 faba 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800229a:	2026      	movs	r0, #38	; 0x26
 800229c:	f001 fad3 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022a0:	bf00      	nop
 80022a2:	3788      	adds	r7, #136	; 0x88
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40004400 	.word	0x40004400
 80022ac:	40021000 	.word	0x40021000
 80022b0:	200007a0 	.word	0x200007a0
 80022b4:	4002006c 	.word	0x4002006c

080022b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022bc:	f7ff fd58 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c4:	4a0d      	ldr	r2, [pc, #52]	; (80022fc <LoopForever+0xe>)
  movs r3, #0
 80022c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c8:	e002      	b.n	80022d0 <LoopCopyDataInit>

080022ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ce:	3304      	adds	r3, #4

080022d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d4:	d3f9      	bcc.n	80022ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d8:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <LoopForever+0x16>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022dc:	e001      	b.n	80022e2 <LoopFillZerobss>

080022de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022e0:	3204      	adds	r2, #4

080022e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e4:	d3fb      	bcc.n	80022de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022e6:	f006 f8bb 	bl	8008460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ea:	f7ff f865 	bl	80013b8 <main>

080022ee <LoopForever>:

LoopForever:
    b LoopForever
 80022ee:	e7fe      	b.n	80022ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80022fc:	0800e880 	.word	0x0800e880
  ldr r2, =_sbss
 8002300:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002304:	20000800 	.word	0x20000800

08002308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_IRQHandler>

0800230a <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:
 * @param  minimum_angle: minimum angle of the motor
 * @param  maximum_angle: maximum angle of the motor
 * @param  brake_pin: pin for the brake or limit switch
 * @retval None
 */
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 800233a:	b082      	sub	sp, #8
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b089      	sub	sp, #36	; 0x24
 8002340:	af02      	add	r7, sp, #8
 8002342:	6178      	str	r0, [r7, #20]
 8002344:	6139      	str	r1, [r7, #16]
 8002346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800234a:	e881 000c 	stmia.w	r1, {r2, r3}
 800234e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002352:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	eeb0 2a45 	vmov.f32	s4, s10
 8002384:	eef0 2a65 	vmov.f32	s5, s11
 8002388:	eeb0 1a46 	vmov.f32	s2, s12
 800238c:	eef0 1a66 	vmov.f32	s3, s13
 8002390:	eeb0 0a47 	vmov.f32	s0, s14
 8002394:	eef0 0a67 	vmov.f32	s1, s15
 8002398:	4623      	mov	r3, r4
 800239a:	f000 fdb9 	bl	8002f10 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3370      	adds	r3, #112	; 0x70
 80023a2:	210f      	movs	r1, #15
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ffb0 	bl	800230a <_ZN9movingAvgC1Ei>
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	33b8      	adds	r3, #184	; 0xb8
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff1a 	bl	80011e8 <_ZN3PinC1Ev>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	33c8      	adds	r3, #200	; 0xc8
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe ff15 	bl	80011e8 <_ZN3PinC1Ev>
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	33d8      	adds	r3, #216	; 0xd8
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe ff10 	bl	80011e8 <_ZN3PinC1Ev>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	33e8      	adds	r3, #232	; 0xe8
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ff0b 	bl	80011e8 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80023e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 80023f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8002400:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002406:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002410:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800241e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 8002422:	6979      	ldr	r1, [r7, #20]
 8002424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002428:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 800242c:	6979      	ldr	r1, [r7, #20]
 800242e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002432:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 8002436:	6979      	ldr	r1, [r7, #20]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 8002444:	6979      	ldr	r1, [r7, #20]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 8002452:	6979      	ldr	r1, [r7, #20]
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2201      	movs	r2, #1
 8002464:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 8002468:	6979      	ldr	r1, [r7, #20]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002482:	b002      	add	sp, #8
 8002484:	4770      	bx	lr
	...

08002488 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	6378      	str	r0, [r7, #52]	; 0x34
 8002490:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002494:	ed87 1b08 	vstr	d1, [r7, #32]
 8002498:	ed87 2b06 	vstr	d2, [r7, #24]
 800249c:	ed87 3b04 	vstr	d3, [r7, #16]
 80024a0:	ed87 4b02 	vstr	d4, [r7, #8]
 80024a4:	ed87 5b00 	vstr	d5, [r7]


    /*------------------Initialize timers------------------*/ 
    HAL_TIM_PWM_Start(pwm.p_tim, pwm.tim_channel);
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f003 fc68 	bl	8005d8c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, 0); // stop motor
 80024bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <_ZN13RoverArmMotor5beginEdddddd+0x4c>
 80024c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	635a      	str	r2, [r3, #52]	; 0x34
 80024d2:	e035      	b.n	8002540 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d106      	bne.n	80024ec <_ZN13RoverArmMotor5beginEdddddd+0x64>
 80024de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2200      	movs	r2, #0
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
 80024ea:	e029      	b.n	8002540 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d106      	bne.n	8002504 <_ZN13RoverArmMotor5beginEdddddd+0x7c>
 80024f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	63da      	str	r2, [r3, #60]	; 0x3c
 8002502:	e01d      	b.n	8002540 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 8002504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002506:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d106      	bne.n	800251c <_ZN13RoverArmMotor5beginEdddddd+0x94>
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
 800251a:	e011      	b.n	8002540 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002522:	2b10      	cmp	r3, #16
 8002524:	d106      	bne.n	8002534 <_ZN13RoverArmMotor5beginEdddddd+0xac>
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	659a      	str	r2, [r3, #88]	; 0x58
 8002532:	e005      	b.n	8002540 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 8002534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002536:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2200      	movs	r2, #0
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c


    /*------------------set PID parameters------------------*/
    if(escType == CYTRON){
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <_ZN13RoverArmMotor5beginEdddddd+0xd4>
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 800254a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254c:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002650 <_ZN13RoverArmMotor5beginEdddddd+0x1c8>
 8002550:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8002658 <_ZN13RoverArmMotor5beginEdddddd+0x1d0>
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fe6f 	bl	8003238 <_ZN3PID15SetOutputLimitsEdd>
 800255a:	e00c      	b.n	8002576 <_ZN13RoverArmMotor5beginEdddddd+0xee>
    }
    else if(escType == BLUE_ROBOTICS){
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <_ZN13RoverArmMotor5beginEdddddd+0xee>
        internalPIDInstance.SetOutputLimits(0, 400); // 1500 +- 400 for BlueRobotics ESC
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002568:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002660 <_ZN13RoverArmMotor5beginEdddddd+0x1d8>
 800256c:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 8002668 <_ZN13RoverArmMotor5beginEdddddd+0x1e0>
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fe61 	bl	8003238 <_ZN3PID15SetOutputLimitsEdd>
    }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 8002576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002578:	3370      	adds	r3, #112	; 0x70
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fc61 	bl	8002e42 <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fce7 	bl	8002f56 <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fe35 	bl	80031fc <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 8002592:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002594:	f000 fb6a 	bl	8002c6c <_ZN13RoverArmMotor17get_current_angleEv>
 8002598:	eeb0 7a40 	vmov.f32	s14, s0
 800259c:	eef0 7a60 	vmov.f32	s15, s1
 80025a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a2:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 80025a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a8:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 80025ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025ae:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 80025b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80025b8:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 80025bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025c2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 80025c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025cc:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 80025d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 80025da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025e0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 80025e4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025ea:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80025ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f2:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002602:	eeb0 2a45 	vmov.f32	s4, s10
 8002606:	eef0 2a65 	vmov.f32	s5, s11
 800260a:	eeb0 1a46 	vmov.f32	s2, s12
 800260e:	eef0 1a66 	vmov.f32	s3, s13
 8002612:	eeb0 0a47 	vmov.f32	s0, s14
 8002616:	eef0 0a67 	vmov.f32	s1, s15
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fe7a 	bl	8003314 <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <_ZN13RoverArmMotor5beginEdddddd+0x1a8>
 800262a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800262c:	f000 fb06 	bl	8002c3c <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 8002638:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <_ZN13RoverArmMotor5beginEdddddd+0x1e8>)
 8002640:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 8002644:	bf00      	nop
 8002646:	3738      	adds	r7, #56	; 0x38
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f3af 8000 	nop.w
 8002650:	00000000 	.word	0x00000000
 8002654:	4058c000 	.word	0x4058c000
 8002658:	00000000 	.word	0x00000000
 800265c:	40140000 	.word	0x40140000
 8002660:	00000000 	.word	0x00000000
 8002664:	40790000 	.word	0x40790000
	...
 8002670:	3ff00000 	.word	0x3ff00000
 8002674:	00000000 	.word	0x00000000

08002678 <_ZN13RoverArmMotor4tickEv>:

int positive_rezeros = 0;
double real_angle = 0;

// Needs to be called in each loop
void RoverArmMotor::tick(){ // worry about currentAngle and setpoint
 8002678:	b5b0      	push	{r4, r5, r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

    /*------------------Get current angle------------------*/
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    if (sw_angle) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <_ZN13RoverArmMotor4tickEv+0x28>
        currentAngle = get_current_angle_sw(); 
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fb34 	bl	8002cf8 <_ZN13RoverArmMotor20get_current_angle_swEv>
 8002690:	eeb0 7a40 	vmov.f32	s14, s0
 8002694:	eef0 7a60 	vmov.f32	s15, s1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
 800269e:	e009      	b.n	80026b4 <_ZN13RoverArmMotor4tickEv+0x3c>
    }   else {
        currentAngle = get_current_angle(); 
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fae3 	bl	8002c6c <_ZN13RoverArmMotor17get_current_angleEv>
 80026a6:	eeb0 7a40 	vmov.f32	s14, s0
 80026aa:	eef0 7a60 	vmov.f32	s15, s1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    }

      // Measurement deadband - ignore sub-degree noise
    if(abs(currentAngle - lastAngle) < 1.0){
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80026c0:	f7fd fdf2 	bl	80002a8 <__aeabi_dsub>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa54 	bl	8000b78 <__aeabi_d2iz>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bfb8      	it	lt
 80026d6:	425b      	neglt	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff33 	bl	8000544 <__aeabi_i2d>
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	4ba5      	ldr	r3, [pc, #660]	; (8002978 <_ZN13RoverArmMotor4tickEv+0x300>)
 80026e4:	f7fe fa0a 	bl	8000afc <__aeabi_dcmplt>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <_ZN13RoverArmMotor4tickEv+0x82>
        currentAngle = lastAngle;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	; 0x120
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	e9c1 2346 	strd	r2, r3, [r1, #280]	; 0x118
    }
    input = currentAngle; // range [0,359]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
   //------------------Compute PID------------------//
    // Compute distance, retune PID if necessary. Less aggressive tuning params for small errors
    // Find the shortest from the current position to the set point
    double gap; //mn297 could be negative

    if(wrist_waist){
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3128 	ldrb.w	r3, [r3, #296]	; 0x128
 800270c:	2b00      	cmp	r3, #0
 800270e:	d052      	beq.n	80027b6 <_ZN13RoverArmMotor4tickEv+0x13e>
        // if(abs(setpoint-input) < abs((setpoint + 360.0f)-input)) { 
        //     gap = setpoint - input; 
        // } else {
        //     gap = (setpoint + 360.0f) - input; 
        // }
        if(abs(setpoint-input) > abs((setpoint + 360.0f)-input)) { 
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800271c:	f7fd fdc4 	bl	80002a8 <__aeabi_dsub>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	f7fe fa26 	bl	8000b78 <__aeabi_d2iz>
 800272c:	4603      	mov	r3, r0
 800272e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8002732:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b8e      	ldr	r3, [pc, #568]	; (800297c <_ZN13RoverArmMotor4tickEv+0x304>)
 8002742:	f7fd fdb3 	bl	80002ac <__adddf3>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8002754:	f7fd fda8 	bl	80002a8 <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa0a 	bl	8000b78 <__aeabi_d2iz>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	bfb8      	it	lt
 800276a:	425b      	neglt	r3, r3
 800276c:	429c      	cmp	r4, r3
 800276e:	dd15      	ble.n	800279c <_ZN13RoverArmMotor4tickEv+0x124>
            gap = input - (setpoint + 360.0f); 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	e9d3 454c 	ldrd	r4, r5, [r3, #304]	; 0x130
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	4b7e      	ldr	r3, [pc, #504]	; (800297c <_ZN13RoverArmMotor4tickEv+0x304>)
 8002782:	f7fd fd93 	bl	80002ac <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd fd8b 	bl	80002a8 <__aeabi_dsub>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800279a:	e018      	b.n	80027ce <_ZN13RoverArmMotor4tickEv+0x156>
        } else {
            gap = setpoint - input; 
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80027a8:	f7fd fd7e 	bl	80002a8 <__aeabi_dsub>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80027b4:	e00b      	b.n	80027ce <_ZN13RoverArmMotor4tickEv+0x156>
        }
        
    }
    else{
        gap = setpoint - input;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80027c2:	f7fd fd71 	bl	80002a8 <__aeabi_dsub>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    // if(input <= lowestAngle || input >= highestAngle){
    //     setpoint = gearRatio * (lowestAngle + highestAngle) / 2 ;
    // }

    // Tone down P and I as the motor hones onto position
    if (abs(gap) < 10){
 80027ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027d2:	f7fe f9d1 	bl	8000b78 <__aeabi_d2iz>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bfb8      	it	lt
 80027dc:	425b      	neglt	r3, r3
 80027de:	2b09      	cmp	r3, #9
 80027e0:	dc19      	bgt.n	8002816 <_ZN13RoverArmMotor4tickEv+0x19e>
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 80027f6:	eeb0 2a45 	vmov.f32	s4, s10
 80027fa:	eef0 2a65 	vmov.f32	s5, s11
 80027fe:	eeb0 1a46 	vmov.f32	s2, s12
 8002802:	eef0 1a66 	vmov.f32	s3, s13
 8002806:	eeb0 0a47 	vmov.f32	s0, s14
 800280a:	eef0 0a67 	vmov.f32	s1, s15
 800280e:	4610      	mov	r0, r2
 8002810:	f000 fd80 	bl	8003314 <_ZN3PID10SetTuningsEddd>
 8002814:	e018      	b.n	8002848 <_ZN13RoverArmMotor4tickEv+0x1d0>
    }else{  // TODO agressive tuning params
        internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800282a:	eeb0 2a45 	vmov.f32	s4, s10
 800282e:	eef0 2a65 	vmov.f32	s5, s11
 8002832:	eeb0 1a46 	vmov.f32	s2, s12
 8002836:	eef0 1a66 	vmov.f32	s3, s13
 800283a:	eeb0 0a47 	vmov.f32	s0, s14
 800283e:	eef0 0a67 	vmov.f32	s1, s15
 8002842:	4610      	mov	r0, r2
 8002844:	f000 fd66 	bl	8003314 <_ZN3PID10SetTuningsEddd>
        // internalPIDInstance.SetTunings(aggressiveKp, aggressiveKi, aggressiveKd);
    }
    internalPIDInstance.Compute(); // return value stored in output
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fbbe 	bl	8002fcc <_ZN3PID7ComputeEv>
    // Make sure we aren't snapping our tendons - move back a little bit if we are
    // if(currentAngle >= (highestAngle - 2) && currentAngle <= (lowestAngle + 2)) output = 0.0;


    //------------------Write to motor------------------//
    if(escType == CYTRON){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8092 	bne.w	8002980 <_ZN13RoverArmMotor4tickEv+0x308>

        // Interpret sign of the error signal as the direction pin value
        // (gap > 0) ? digitalWrite(dir, HIGH) : digitalWrite(dir, LOW); // invert if needed mn297
        if (gap > 0) {
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002868:	f7fe f966 	bl	8000b38 <__aeabi_dcmpgt>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <_ZN13RoverArmMotor4tickEv+0x210>
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_SET); //mn297
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800287e:	2201      	movs	r2, #1
 8002880:	4619      	mov	r1, r3
 8002882:	f001 fb5b 	bl	8003f3c <HAL_GPIO_WritePin>
 8002886:	e009      	b.n	800289c <_ZN13RoverArmMotor4tickEv+0x224>
        }
        else {
            HAL_GPIO_WritePin(dir.port, dir.pin, GPIO_PIN_RESET); //mn297
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8002894:	2200      	movs	r2, #0
 8002896:	4619      	mov	r1, r3
 8002898:	f001 fb50 	bl	8003f3c <HAL_GPIO_WritePin>
        }
        // Write to PWM pin
        //TODO port to HAL
        // analogWrite(pwm, abs(output)); //mn297 function execute quickly and jumps to next tick()
        double test_output = abs(output);     //smoothing
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f7fe f967 	bl	8000b78 <__aeabi_d2iz>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bfb8      	it	lt
 80028b0:	425b      	neglt	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fd fe46 	bl	8000544 <__aeabi_i2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
        __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, (int) test_output);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <_ZN13RoverArmMotor4tickEv+0x268>
 80028ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ce:	f7fe f953 	bl	8000b78 <__aeabi_d2iz>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
 80028de:	e0eb      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d10a      	bne.n	8002900 <_ZN13RoverArmMotor4tickEv+0x288>
 80028ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ee:	f7fe f943 	bl	8000b78 <__aeabi_d2iz>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
 80028fe:	e0db      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10a      	bne.n	8002920 <_ZN13RoverArmMotor4tickEv+0x2a8>
 800290a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800290e:	f7fe f933 	bl	8000b78 <__aeabi_d2iz>
 8002912:	4602      	mov	r2, r0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c
 800291e:	e0cb      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d10a      	bne.n	8002940 <_ZN13RoverArmMotor4tickEv+0x2c8>
 800292a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292e:	f7fe f923 	bl	8000b78 <__aeabi_d2iz>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40
 800293e:	e0bb      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002946:	2b10      	cmp	r3, #16
 8002948:	d10a      	bne.n	8002960 <_ZN13RoverArmMotor4tickEv+0x2e8>
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	f7fe f913 	bl	8000b78 <__aeabi_d2iz>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	659a      	str	r2, [r3, #88]	; 0x58
 800295e:	e0ab      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002960:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002964:	f7fe f908 	bl	8000b78 <__aeabi_d2iz>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	65da      	str	r2, [r3, #92]	; 0x5c
 8002974:	e0a0      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002976:	bf00      	nop
 8002978:	3ff00000 	.word	0x3ff00000
 800297c:	40768000 	.word	0x40768000

    }

    //TODO: Add support for other ESC types    
    else if(escType == BLUE_ROBOTICS){
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002986:	2b01      	cmp	r3, #1
 8002988:	f040 8096 	bne.w	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
        // This one is more straightforward since we already defined the output range
        // from 1100us to 1900us
        // internalServoInstance.writeMicroseconds(output);
        __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, 1500-1+output);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d114      	bne.n	80029c0 <_ZN13RoverArmMotor4tickEv+0x348>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 800299c:	a34c      	add	r3, pc, #304	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fc83 	bl	80002ac <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029b4:	681c      	ldr	r4, [r3, #0]
 80029b6:	f7fe f907 	bl	8000bc8 <__aeabi_d2uiz>
 80029ba:	4603      	mov	r3, r0
 80029bc:	6363      	str	r3, [r4, #52]	; 0x34
 80029be:	e07b      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d114      	bne.n	80029f4 <_ZN13RoverArmMotor4tickEv+0x37c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 80029d0:	a33f      	add	r3, pc, #252	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fc69 	bl	80002ac <__adddf3>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029e8:	681c      	ldr	r4, [r3, #0]
 80029ea:	f7fe f8ed 	bl	8000bc8 <__aeabi_d2uiz>
 80029ee:	4603      	mov	r3, r0
 80029f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80029f2:	e061      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d114      	bne.n	8002a28 <_ZN13RoverArmMotor4tickEv+0x3b0>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002a04:	a332      	add	r3, pc, #200	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fc4f 	bl	80002ac <__adddf3>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	f7fe f8d3 	bl	8000bc8 <__aeabi_d2uiz>
 8002a22:	4603      	mov	r3, r0
 8002a24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002a26:	e047      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d114      	bne.n	8002a5c <_ZN13RoverArmMotor4tickEv+0x3e4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002a38:	a325      	add	r3, pc, #148	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f7fd fc35 	bl	80002ac <__adddf3>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a50:	681c      	ldr	r4, [r3, #0]
 8002a52:	f7fe f8b9 	bl	8000bc8 <__aeabi_d2uiz>
 8002a56:	4603      	mov	r3, r0
 8002a58:	6423      	str	r3, [r4, #64]	; 0x40
 8002a5a:	e02d      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d114      	bne.n	8002a90 <_ZN13RoverArmMotor4tickEv+0x418>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002a6c:	a318      	add	r3, pc, #96	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fc1b 	bl	80002ac <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	f7fe f89f 	bl	8000bc8 <__aeabi_d2uiz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	65a3      	str	r3, [r4, #88]	; 0x58
 8002a8e:	e013      	b.n	8002ab8 <_ZN13RoverArmMotor4tickEv+0x440>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8002a96:	a30e      	add	r3, pc, #56	; (adr r3, 8002ad0 <_ZN13RoverArmMotor4tickEv+0x458>)
 8002a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9c:	f7fd fc06 	bl	80002ac <__adddf3>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aae:	681c      	ldr	r4, [r3, #0]
 8002ab0:	f7fe f88a 	bl	8000bc8 <__aeabi_d2uiz>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	65e3      	str	r3, [r4, #92]	; 0x5c

    }


    //------------------Update angle------------------//
    lastAngle = currentAngle;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    
}
 8002ac4:	bf00      	nop
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bdb0      	pop	{r4, r5, r7, pc}
 8002acc:	f3af 8000 	nop.w
 8002ad0:	00000000 	.word	0x00000000
 8002ad4:	40976c00 	.word	0x40976c00

08002ad8 <_ZN13RoverArmMotor14set_PID_paramsEdddddd>:
void RoverArmMotor::stop(){
    __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, (int) 0);
}
void RoverArmMotor::set_PID_params(double aggP, double aggI, double aggD, double regP, double regI, double regD) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6378      	str	r0, [r7, #52]	; 0x34
 8002ae0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002ae4:	ed87 1b08 	vstr	d1, [r7, #32]
 8002ae8:	ed87 2b06 	vstr	d2, [r7, #24]
 8002aec:	ed87 3b04 	vstr	d3, [r7, #16]
 8002af0:	ed87 4b02 	vstr	d4, [r7, #8]
 8002af4:	ed87 5b00 	vstr	d5, [r7]
    regularKp = regP;
 8002af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002afa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002afe:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002b0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b12:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002b16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b1c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002b20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b26:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 8002b2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b30:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002b34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3e:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002b48:	eeb0 2a45 	vmov.f32	s4, s10
 8002b4c:	eef0 2a65 	vmov.f32	s5, s11
 8002b50:	eeb0 1a46 	vmov.f32	s2, s12
 8002b54:	eef0 1a66 	vmov.f32	s3, s13
 8002b58:	eeb0 0a47 	vmov.f32	s0, s14
 8002b5c:	eef0 0a67 	vmov.f32	s1, s15
 8002b60:	4610      	mov	r0, r2
 8002b62:	f000 fbd7 	bl	8003314 <_ZN3PID10SetTuningsEddd>
}
 8002b66:	bf00      	nop
 8002b68:	3738      	adds	r7, #56	; 0x38
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_ZN13RoverArmMotor11newSetpointEd>:
// For display purposes
double RoverArmMotor::getSetpoint(){
    return setpoint / gearRatio;
}

bool RoverArmMotor::newSetpoint(double angl){
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	ed87 0b00 	vstr	d0, [r7]
    double setpoint_test = angl * gearRatio;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b84:	f7fd fd48 	bl	8000618 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(setpoint_test >= lowestAngle && setpoint_test <= highestAngle){
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	e9d3 2340 	ldrd	r2, r3, [r3, #256]	; 0x100
 8002b96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b9a:	f7fd ffc3 	bl	8000b24 <__aeabi_dcmpge>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <_ZN13RoverArmMotor11newSetpointEd+0x58>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
 8002baa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bae:	f7fd ffaf 	bl	8000b10 <__aeabi_dcmple>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d006      	beq.n	8002bc6 <_ZN13RoverArmMotor11newSetpointEd+0x58>
        setpoint = setpoint_test;
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bbe:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140
        return true;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <_ZN13RoverArmMotor11newSetpointEd+0x5a>
    }else{
        return false;
 8002bc6:	2300      	movs	r3, #0
    }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6178      	str	r0, [r7, #20]
 8002bd8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bdc:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bea:	f7fd fd15 	bl	8000618 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	6979      	ldr	r1, [r7, #20]
 8002bf4:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 8002bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c02:	f7fd fd09 	bl	8000618 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	6979      	ldr	r1, [r7, #20]
 8002c0c:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_ZN13RoverArmMotor17set_zero_angle_swEv>:
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::set_zero_angle_sw(){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f823 	bl	8002c6c <_ZN13RoverArmMotor17get_current_angleEv>
 8002c26:	eeb0 7a40 	vmov.f32	s14, s0
 8002c2a:	eef0 7a60 	vmov.f32	s15, s1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d009      	beq.n	8002c62 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f001 f96d 	bl	8003f3c <HAL_GPIO_WritePin>
    }
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002c86:	2300      	movs	r3, #0
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	f005 fb13 	bl	80082b6 <getPositionSPI>
 8002c90:	4603      	mov	r3, r0
 8002c92:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8002cec <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 8002ca2:	eddf 1a13 	vldr	s3, [pc, #76]	; 8002cf0 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002ca6:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8002cf4 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 8002caa:	eddf 0a11 	vldr	s1, [pc, #68]	; 8002cf0 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002cae:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f88a 	bl	8002dcc <_ZN13RoverArmMotor8mapFloatEfffff>
 8002cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8002cbc:	eef0 7a60 	vmov.f32	s15, s1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002cd2:	f7fd fdcb 	bl	800086c <__aeabi_ddiv>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	ec43 2b17 	vmov	d7, r2, r3
}
 8002cde:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce2:	eef0 0a67 	vmov.f32	s1, s15
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	43b38000 	.word	0x43b38000
 8002cf0:	00000000 	.word	0x00000000
 8002cf4:	457ff000 	.word	0x457ff000

08002cf8 <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	230c      	movs	r3, #12
 8002d18:	f005 facd 	bl	80082b6 <getPositionSPI>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2a:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8002dbc <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 8002d2e:	eddf 1a24 	vldr	s3, [pc, #144]	; 8002dc0 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 8002d32:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8002dc4 <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 8002d36:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002dc0 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 8002d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f844 	bl	8002dcc <_ZN13RoverArmMotor8mapFloatEfffff>
 8002d44:	eeb0 7a40 	vmov.f32	s14, s0
 8002d48:	eef0 7a60 	vmov.f32	s15, s1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8002d5e:	f7fd faa3 	bl	80002a8 <__aeabi_dsub>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d76:	f7fd fec1 	bl	8000afc <__aeabi_dcmplt>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 8002d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d8a:	f7fd fa8f 	bl	80002ac <__adddf3>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002d9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002da0:	f7fd fd64 	bl	800086c <__aeabi_ddiv>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002dac:	eeb0 0a47 	vmov.f32	s0, s14
 8002db0:	eef0 0a67 	vmov.f32	s1, s15
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	43b38000 	.word	0x43b38000
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	457ff000 	.word	0x457ff000
 8002dc8:	40768000 	.word	0x40768000

08002dcc <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6178      	str	r0, [r7, #20]
 8002dd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002dd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ddc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002de0:	edc7 1a01 	vstr	s3, [r7, #4]
 8002de4:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002de8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002df4:	edd7 6a00 	vldr	s13, [r7]
 8002df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e1c:	ee17 0a90 	vmov	r0, s15
 8002e20:	f7fd fba2 	bl	8000568 <__aeabi_f2d>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 8002e2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e30:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002e34:	eeb0 0a47 	vmov.f32	s0, s14
 8002e38:	eef0 0a67 	vmov.f32	s1, s15
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d201      	bcs.n	8002e5a <_ZN9movingAvg5beginEv+0x18>
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	e001      	b.n	8002e5e <_ZN9movingAvg5beginEv+0x1c>
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f005 fad4 	bl	800840c <_Znaj>
 8002e64:	4603      	mov	r3, r0
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	611a      	str	r2, [r3, #16]
}
 8002e6c:	bf00      	nop
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	0000      	movs	r0, r0
	...

08002e78 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6278      	str	r0, [r7, #36]	; 0x24
 8002e80:	6239      	str	r1, [r7, #32]
 8002e82:	61fa      	str	r2, [r7, #28]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	ed87 0b04 	vstr	d0, [r7, #16]
 8002e8a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002e8e:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	6a3a      	ldr	r2, [r7, #32]
 8002e9c:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002eaa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002f00 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8002eae:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002f08 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 8002eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb4:	f000 f9c0 	bl	8003238 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	2264      	movs	r2, #100	; 0x64
 8002ebc:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002ebe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec6:	f000 fae7 	bl	8003498 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002eca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ece:	4619      	mov	r1, r3
 8002ed0:	ed97 2b00 	vldr	d2, [r7]
 8002ed4:	ed97 1b02 	vldr	d1, [r7, #8]
 8002ed8:	ed97 0b04 	vldr	d0, [r7, #16]
 8002edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ede:	f000 fa33 	bl	8003348 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002ee2:	f000 fb89 	bl	80035f8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	605a      	str	r2, [r3, #4]
	
}
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3728      	adds	r7, #40	; 0x28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	f3af 8000 	nop.w
 8002f00:	00000000 	.word	0x00000000
 8002f04:	406fe000 	.word	0x406fe000
	...

08002f10 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	; 0x30
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6278      	str	r0, [r7, #36]	; 0x24
 8002f18:	6239      	str	r1, [r7, #32]
 8002f1a:	61fa      	str	r2, [r7, #28]
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f22:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f26:	ed87 2b00 	vstr	d2, [r7]
 8002f2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2301      	movs	r3, #1
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	ed97 2b00 	vldr	d2, [r7]
 8002f38:	ed97 1b02 	vldr	d1, [r7, #8]
 8002f3c:	ed97 0b04 	vldr	d0, [r7, #16]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f48:	f7ff ff96 	bl	8002e78 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f86:	f7fd fdd7 	bl	8000b38 <__aeabi_dcmpgt>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8002f9c:	e011      	b.n	8002fc2 <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002faa:	f7fd fda7 	bl	8000afc <__aeabi_dcmplt>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d100      	bne.n	8002fb6 <_ZN3PID4InitEv+0x60>
}
 8002fb4:	e005      	b.n	8002fc2 <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <_ZN3PID7ComputeEv>:
	PID::Init(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID::Compute(void)
{
 8002fcc:	b5b0      	push	{r4, r5, r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	double input;
	double error;
	double dInput;
	double output;
	// _outputSum = _outMin;	//mn297 hotfix1 TODO check if this is correct
	if (_outputSum > 50) _outputSum = 50;	//mn297 hotfix2 TODO check if this is correct
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	4b86      	ldr	r3, [pc, #536]	; (80031f8 <_ZN3PID7ComputeEv+0x22c>)
 8002fe0:	f7fd fdaa 	bl	8000b38 <__aeabi_dcmpgt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <_ZN3PID7ComputeEv+0x2a>
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	4b81      	ldr	r3, [pc, #516]	; (80031f8 <_ZN3PID7ComputeEv+0x22c>)
 8002ff2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!_inAuto)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <_ZN3PID7ComputeEv+0x36>
	{
		return _FALSE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	e0f5      	b.n	80031ee <_ZN3PID7ComputeEv+0x222>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8003002:	f000 faf9 	bl	80035f8 <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - _lastTime);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= _sampleTime)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	429a      	cmp	r2, r3
 800301a:	f0c0 80e7 	bcc.w	80031ec <_ZN3PID7ComputeEv+0x220>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *_myInput;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = abs(*_mySetpoint - input);	//mn297 fix
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003036:	f7fd f937 	bl	80002a8 <__aeabi_dsub>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f7fd fd99 	bl	8000b78 <__aeabi_d2iz>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfb8      	it	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fa78 	bl	8000544 <__aeabi_i2d>
 8003054:	4602      	mov	r2, r0
 8003056:	460b      	mov	r3, r1
 8003058:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = abs(input - _lastInput);		//mn297 fix TODO: check if this is correct
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8003062:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003066:	f7fd f91f 	bl	80002a8 <__aeabi_dsub>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	f7fd fd81 	bl	8000b78 <__aeabi_d2iz>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	bfb8      	it	lt
 800307c:	425b      	neglt	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fa60 	bl	8000544 <__aeabi_i2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		_outputSum += (_ki * error);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8003098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800309c:	f7fd fabc 	bl	8000618 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f900 	bl	80002ac <__adddf3>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!_pOnE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d114      	bne.n	80030e8 <_ZN3PID7ComputeEv+0x11c>
		{
			_outputSum -= _kp * dInput;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80030ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030ce:	f7fd faa3 	bl	8000618 <__aeabi_dmul>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4620      	mov	r0, r4
 80030d8:	4629      	mov	r1, r5
 80030da:	f7fd f8e5 	bl	80002a8 <__aeabi_dsub>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (_outputSum > _outMax)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80030f4:	f7fd fd20 	bl	8000b38 <__aeabi_dcmpgt>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <_ZN3PID7ComputeEv+0x140>
		{
			_outputSum = _outMax;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800310a:	e010      	b.n	800312e <_ZN3PID7ComputeEv+0x162>
		}
		else if (_outputSum < _outMin)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003118:	f7fd fcf0 	bl	8000afc <__aeabi_dcmplt>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <_ZN3PID7ComputeEv+0x162>
		{
			_outputSum = _outMin;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (_pOnE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <_ZN3PID7ComputeEv+0x182>
		{
			output = _kp * error;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800313c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003140:	f7fd fa6a 	bl	8000618 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800314c:	e005      	b.n	800315a <_ZN3PID7ComputeEv+0x18e>
		}
		else
		{
			output = 0;
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += _outputSum - _kd * dInput;		//TODO check if this is correct mn297
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003166:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316a:	f7fd fa55 	bl	8000618 <__aeabi_dmul>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4620      	mov	r0, r4
 8003174:	4629      	mov	r1, r5
 8003176:	f7fd f897 	bl	80002a8 <__aeabi_dsub>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003182:	f7fd f893 	bl	80002ac <__adddf3>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > _outMax)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003194:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003198:	f7fd fcce 	bl	8000b38 <__aeabi_dcmpgt>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <_ZN3PID7ComputeEv+0x1e2>
		{
			output = _outMax;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80031a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80031ac:	e00e      	b.n	80031cc <_ZN3PID7ComputeEv+0x200>
		}
		else if (output < _outMin)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80031b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031b8:	f7fd fca0 	bl	8000afc <__aeabi_dcmplt>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <_ZN3PID7ComputeEv+0x200>
		{
			output = _outMin;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80031c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*_myOutput = output;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80031d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031d4:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		_lastInput = input;
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031de:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		_lastTime  = now;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <_ZN3PID7ComputeEv+0x222>
		
	}
	else
	{
		return _FALSE;
 80031ec:	2300      	movs	r3, #0
	}
	
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3730      	adds	r7, #48	; 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40490000 	.word	0x40490000

080031fc <_ZN3PID7SetModeE15PIDMode_TypeDef>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	2b01      	cmp	r3, #1
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fe96 	bl	8002f56 <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	705a      	strb	r2, [r3, #1]
	
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	6178      	str	r0, [r7, #20]
 8003240:	ed87 0b02 	vstr	d0, [r7, #8]
 8003244:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003248:	e9d7 2300 	ldrd	r2, r3, [r7]
 800324c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003250:	f7fd fc68 	bl	8000b24 <__aeabi_dcmpge>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d158      	bne.n	800330c <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003260:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8003264:	6979      	ldr	r1, [r7, #20]
 8003266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800326a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	785b      	ldrb	r3, [r3, #1]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d04b      	beq.n	800330e <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003284:	f7fd fc58 	bl	8000b38 <__aeabi_dcmpgt>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8003298:	e9c1 2300 	strd	r2, r3, [r1]
 800329c:	e012      	b.n	80032c4 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80032ac:	f7fd fc26 	bl	8000afc <__aeabi_dcmplt>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d006      	beq.n	80032c4 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80032c0:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80032d0:	f7fd fc32 	bl	8000b38 <__aeabi_dcmpgt>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d006      	beq.n	80032e8 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80032e0:	6979      	ldr	r1, [r7, #20]
 80032e2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80032e6:	e012      	b.n	800330e <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80032f4:	f7fd fc02 	bl	8000afc <__aeabi_dcmplt>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8003304:	6979      	ldr	r1, [r7, #20]
 8003306:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800330a:	e000      	b.n	800330e <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 800330c:	bf00      	nop
		}
		else { }
		
	}
	
}
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	61f8      	str	r0, [r7, #28]
 800331c:	ed87 0b04 	vstr	d0, [r7, #16]
 8003320:	ed87 1b02 	vstr	d1, [r7, #8]
 8003324:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	789b      	ldrb	r3, [r3, #2]
 800332c:	4619      	mov	r1, r3
 800332e:	ed97 2b00 	vldr	d2, [r7]
 8003332:	ed97 1b02 	vldr	d1, [r7, #8]
 8003336:	ed97 0b04 	vldr	d0, [r7, #16]
 800333a:	69f8      	ldr	r0, [r7, #28]
 800333c:	f000 f804 	bl	8003348 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8003340:	bf00      	nop
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	61f8      	str	r0, [r7, #28]
 8003350:	ed87 0b04 	vstr	d0, [r7, #16]
 8003354:	ed87 1b02 	vstr	d1, [r7, #8]
 8003358:	ed87 2b00 	vstr	d2, [r7]
 800335c:	460b      	mov	r3, r1
 800335e:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800336c:	f7fd fbc6 	bl	8000afc <__aeabi_dcmplt>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 8089 	bne.w	800348a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003384:	f7fd fbba 	bl	8000afc <__aeabi_dcmplt>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d17d      	bne.n	800348a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800339a:	f7fd fbaf 	bl	8000afc <__aeabi_dcmplt>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d172      	bne.n	800348a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	7efa      	ldrb	r2, [r7, #27]
 80033a8:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80033aa:	7efb      	ldrb	r3, [r7, #27]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 80033c6:	69f9      	ldr	r1, [r7, #28]
 80033c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 80033d0:	69f9      	ldr	r1, [r7, #28]
 80033d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8a0 	bl	8000524 <__aeabi_ui2d>
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 80033ea:	f7fd fa3f 	bl	800086c <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 80033f6:	69f9      	ldr	r1, [r7, #28]
 80033f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8003400:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003408:	f7fd f906 	bl	8000618 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	69f9      	ldr	r1, [r7, #28]
 8003412:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8003416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800341a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800341e:	f7fd fa25 	bl	800086c <__aeabi_ddiv>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	69f9      	ldr	r1, [r7, #28]
 8003428:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	78db      	ldrb	r3, [r3, #3]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d12b      	bne.n	800348c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	f7fc ff31 	bl	80002a8 <__aeabi_dsub>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	69f9      	ldr	r1, [r7, #28]
 800344c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	f7fc ff23 	bl	80002a8 <__aeabi_dsub>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	69f9      	ldr	r1, [r7, #28]
 8003468:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003472:	f04f 0000 	mov.w	r0, #0
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	f7fc ff15 	bl	80002a8 <__aeabi_dsub>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	69f9      	ldr	r1, [r7, #28]
 8003484:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8003488:	e000      	b.n	800348c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 800348a:	bf00      	nop
		
	}
	
}
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	408f4000 	.word	0x408f4000

08003498 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d02e      	beq.n	800350a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d029      	beq.n	800350a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	f7fc fef0 	bl	80002a8 <__aeabi_dsub>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f7fc fee2 	bl	80002a8 <__aeabi_dsub>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80034f4:	f04f 0000 	mov.w	r0, #0
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	f7fc fed4 	bl	80002a8 <__aeabi_dsub>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	70da      	strb	r2, [r3, #3]
	
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <HAL_Init+0x3c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a0b      	ldr	r2, [pc, #44]	; (8003554 <HAL_Init+0x3c>)
 8003528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800352e:	2003      	movs	r0, #3
 8003530:	f000 f962 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003534:	2000      	movs	r0, #0
 8003536:	f000 f80f 	bl	8003558 <HAL_InitTick>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	e001      	b.n	800354a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003546:	f7fe fae3 	bl	8001b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800354a:	79fb      	ldrb	r3, [r7, #7]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40022000 	.word	0x40022000

08003558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_InitTick+0x6c>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800356c:	4b16      	ldr	r3, [pc, #88]	; (80035c8 <HAL_InitTick+0x70>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_InitTick+0x6c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4619      	mov	r1, r3
 8003576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357a:	fbb3 f3f1 	udiv	r3, r3, r1
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f96d 	bl	8003862 <HAL_SYSTICK_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b0f      	cmp	r3, #15
 8003592:	d809      	bhi.n	80035a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003594:	2200      	movs	r2, #0
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f000 f937 	bl	800380e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_InitTick+0x74>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e007      	b.n	80035b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e004      	b.n	80035b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e001      	b.n	80035b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000038 	.word	0x20000038
 80035c8:	20000030 	.word	0x20000030
 80035cc:	20000034 	.word	0x20000034

080035d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x20>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_IncTick+0x24>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <HAL_IncTick+0x24>)
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000038 	.word	0x20000038
 80035f4:	200007e8 	.word	0x200007e8

080035f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return uwTick;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_GetTick+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200007e8 	.word	0x200007e8

08003610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff ffee 	bl	80035f8 <HAL_GetTick>
 800361c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d005      	beq.n	8003636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_Delay+0x44>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003636:	bf00      	nop
 8003638:	f7ff ffde 	bl	80035f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	d8f7      	bhi.n	8003638 <HAL_Delay+0x28>
  {
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000038 	.word	0x20000038

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c4:	d301      	bcc.n	80037ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <SysTick_Config+0x40>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d2:	210f      	movs	r1, #15
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f7ff ff8e 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <SysTick_Config+0x40>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <SysTick_Config+0x40>)
 80037e4:	2207      	movs	r2, #7
 80037e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	e000e010 	.word	0xe000e010

080037f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff29 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003820:	f7ff ff3e 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff8e 	bl	800374c <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff31 	bl	80036bc <__NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffa2 	bl	80037b4 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e098      	b.n	80039c0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b4d      	ldr	r3, [pc, #308]	; (80039cc <HAL_DMA_Init+0x150>)
 8003896:	429a      	cmp	r2, r3
 8003898:	d80f      	bhi.n	80038ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_DMA_Init+0x154>)
 80038a2:	4413      	add	r3, r2
 80038a4:	4a4b      	ldr	r2, [pc, #300]	; (80039d4 <HAL_DMA_Init+0x158>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	009a      	lsls	r2, r3, #2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_DMA_Init+0x15c>)
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
 80038b8:	e00e      	b.n	80038d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	4b46      	ldr	r3, [pc, #280]	; (80039dc <HAL_DMA_Init+0x160>)
 80038c2:	4413      	add	r3, r2
 80038c4:	4a43      	ldr	r2, [pc, #268]	; (80039d4 <HAL_DMA_Init+0x158>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a42      	ldr	r2, [pc, #264]	; (80039e0 <HAL_DMA_Init+0x164>)
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003908:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003914:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003932:	d039      	beq.n	80039a8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <HAL_DMA_Init+0x15c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d11a      	bne.n	8003974 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800393e:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <HAL_DMA_Init+0x168>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 031c 	and.w	r3, r3, #28
 800394a:	210f      	movs	r1, #15
 800394c:	fa01 f303 	lsl.w	r3, r1, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	4924      	ldr	r1, [pc, #144]	; (80039e4 <HAL_DMA_Init+0x168>)
 8003954:	4013      	ands	r3, r2
 8003956:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003958:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_DMA_Init+0x168>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	f003 031c 	and.w	r3, r3, #28
 8003968:	fa01 f303 	lsl.w	r3, r1, r3
 800396c:	491d      	ldr	r1, [pc, #116]	; (80039e4 <HAL_DMA_Init+0x168>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
 8003972:	e019      	b.n	80039a8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003974:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_DMA_Init+0x16c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f003 031c 	and.w	r3, r3, #28
 8003980:	210f      	movs	r1, #15
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	4917      	ldr	r1, [pc, #92]	; (80039e8 <HAL_DMA_Init+0x16c>)
 800398a:	4013      	ands	r3, r2
 800398c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800398e:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <HAL_DMA_Init+0x16c>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f003 031c 	and.w	r3, r3, #28
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <HAL_DMA_Init+0x16c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40020407 	.word	0x40020407
 80039d0:	bffdfff8 	.word	0xbffdfff8
 80039d4:	cccccccd 	.word	0xcccccccd
 80039d8:	40020000 	.word	0x40020000
 80039dc:	bffdfbf8 	.word	0xbffdfbf8
 80039e0:	40020400 	.word	0x40020400
 80039e4:	400200a8 	.word	0x400200a8
 80039e8:	400204a8 	.word	0x400204a8

080039ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d008      	beq.n	8003a16 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 020e 	bic.w	r2, r2, #14
 8003a24:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	f003 021c 	and.w	r2, r3, #28
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2101      	movs	r1, #1
 8003a44:	fa01 f202 	lsl.w	r2, r1, r2
 8003a48:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d005      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2204      	movs	r2, #4
 8003a84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	e029      	b.n	8003ae0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f003 021c 	and.w	r2, r3, #28
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
    }
  }
  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b084      	sub	sp, #16
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f003 031c 	and.w	r3, r3, #28
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d026      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x7a>
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d021      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0204 	bic.w	r2, r2, #4
 8003b3c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 021c 	and.w	r2, r3, #28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2104      	movs	r1, #4
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d071      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003b62:	e06c      	b.n	8003c3e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	f003 031c 	and.w	r3, r3, #28
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02e      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xec>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d029      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 020a 	bic.w	r2, r2, #10
 8003b9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f003 021c 	and.w	r2, r3, #28
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d038      	beq.n	8003c3e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003bd4:	e033      	b.n	8003c3e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f003 031c 	and.w	r3, r3, #28
 8003bde:	2208      	movs	r2, #8
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02a      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x156>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d025      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 020e 	bic.w	r2, r2, #14
 8003c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f003 021c 	and.w	r2, r3, #28
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	2101      	movs	r1, #1
 8003c12:	fa01 f202 	lsl.w	r2, r1, r2
 8003c16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c3e:	bf00      	nop
 8003c40:	bf00      	nop
}
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c56:	e154      	b.n	8003f02 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	4013      	ands	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8146 	beq.w	8003efc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <HAL_GPIO_Init+0x40>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d130      	bne.n	8003cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 0201 	and.w	r2, r3, #1
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d017      	beq.n	8003d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	6939      	ldr	r1, [r7, #16]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a0 	beq.w	8003efc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbc:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8003dc8:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <HAL_GPIO_Init+0x2d8>)
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dd4:	4a53      	ldr	r2, [pc, #332]	; (8003f24 <HAL_GPIO_Init+0x2dc>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	220f      	movs	r2, #15
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dfe:	d019      	beq.n	8003e34 <HAL_GPIO_Init+0x1ec>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a49      	ldr	r2, [pc, #292]	; (8003f28 <HAL_GPIO_Init+0x2e0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_GPIO_Init+0x1e8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a48      	ldr	r2, [pc, #288]	; (8003f2c <HAL_GPIO_Init+0x2e4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00d      	beq.n	8003e2c <HAL_GPIO_Init+0x1e4>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a47      	ldr	r2, [pc, #284]	; (8003f30 <HAL_GPIO_Init+0x2e8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <HAL_GPIO_Init+0x1e0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a46      	ldr	r2, [pc, #280]	; (8003f34 <HAL_GPIO_Init+0x2ec>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_GPIO_Init+0x1dc>
 8003e20:	2304      	movs	r3, #4
 8003e22:	e008      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e24:	2307      	movs	r3, #7
 8003e26:	e006      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e004      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e002      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_GPIO_Init+0x1ee>
 8003e34:	2300      	movs	r3, #0
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	f002 0203 	and.w	r2, r2, #3
 8003e3c:	0092      	lsls	r2, r2, #2
 8003e3e:	4093      	lsls	r3, r2
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e46:	4937      	ldr	r1, [pc, #220]	; (8003f24 <HAL_GPIO_Init+0x2dc>)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4013      	ands	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e78:	4a2f      	ldr	r2, [pc, #188]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ea2:	4a25      	ldr	r2, [pc, #148]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ea8:	4b23      	ldr	r3, [pc, #140]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ed2:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ef6:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <HAL_GPIO_Init+0x2f0>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	3301      	adds	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f aea3 	bne.w	8003c58 <HAL_GPIO_Init+0x10>
  }
}
 8003f12:	bf00      	nop
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40010000 	.word	0x40010000
 8003f28:	48000400 	.word	0x48000400
 8003f2c:	48000800 	.word	0x48000800
 8003f30:	48000c00 	.word	0x48000c00
 8003f34:	48001000 	.word	0x48001000
 8003f38:	40010400 	.word	0x40010400

08003f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	807b      	strh	r3, [r7, #2]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f76:	4b08      	ldr	r3, [pc, #32]	; (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d006      	beq.n	8003f90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f82:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd fb18 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f90:	bf00      	nop
 8003f92:	3708      	adds	r7, #8
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40010400 	.word	0x40010400

08003f9c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40007000 	.word	0x40007000

08003fb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fc6:	d130      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d038      	beq.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fde:	4a1e      	ldr	r2, [pc, #120]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2232      	movs	r2, #50	; 0x32
 8003fec:	fb02 f303 	mul.w	r3, r2, r3
 8003ff0:	4a1b      	ldr	r2, [pc, #108]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0c9b      	lsrs	r3, r3, #18
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ffc:	e002      	b.n	8004004 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b01      	subs	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004004:	4b14      	ldr	r3, [pc, #80]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d102      	bne.n	8004018 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f2      	bne.n	8003ffe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004024:	d110      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e00f      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800402a:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004036:	d007      	beq.n	8004048 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004046:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40007000 	.word	0x40007000
 800405c:	20000030 	.word	0x20000030
 8004060:	431bde83 	.word	0x431bde83

08004064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f000 bc02 	b.w	800487c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004078:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004082:	4b94      	ldr	r3, [pc, #592]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80e4 	beq.w	8004262 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4c>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	f040 808b 	bne.w	80041be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	f040 8087 	bne.w	80041be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b0:	4b88      	ldr	r3, [pc, #544]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x64>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e3d9      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_RCC_OscConfig+0x7e>
 80040d8:	4b7e      	ldr	r3, [pc, #504]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e0:	e005      	b.n	80040ee <HAL_RCC_OscConfig+0x8a>
 80040e2:	4b7c      	ldr	r3, [pc, #496]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80040e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d223      	bcs.n	800413a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fd8c 	bl	8004c14 <RCC_SetFlashLatencyFromMSIRange>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e3ba      	b.n	800487c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004106:	4b73      	ldr	r3, [pc, #460]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a72      	ldr	r2, [pc, #456]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b70      	ldr	r3, [pc, #448]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	496d      	ldr	r1, [pc, #436]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004124:	4b6b      	ldr	r3, [pc, #428]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	4968      	ldr	r1, [pc, #416]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
 8004138:	e025      	b.n	8004186 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800413a:	4b66      	ldr	r3, [pc, #408]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a65      	ldr	r2, [pc, #404]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b63      	ldr	r3, [pc, #396]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4960      	ldr	r1, [pc, #384]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004158:	4b5e      	ldr	r3, [pc, #376]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	69db      	ldr	r3, [r3, #28]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	495b      	ldr	r1, [pc, #364]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004168:	4313      	orrs	r3, r2
 800416a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d109      	bne.n	8004186 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fd4c 	bl	8004c14 <RCC_SetFlashLatencyFromMSIRange>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e37a      	b.n	800487c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004186:	f000 fc81 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 800418a:	4602      	mov	r2, r0
 800418c:	4b51      	ldr	r3, [pc, #324]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	4950      	ldr	r1, [pc, #320]	; (80042d8 <HAL_RCC_OscConfig+0x274>)
 8004198:	5ccb      	ldrb	r3, [r1, r3]
 800419a:	f003 031f 	and.w	r3, r3, #31
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <HAL_RCC_OscConfig+0x278>)
 80041a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041a6:	4b4e      	ldr	r3, [pc, #312]	; (80042e0 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f9d4 	bl	8003558 <HAL_InitTick>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d052      	beq.n	8004260 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	e35e      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d032      	beq.n	800422c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041c6:	4b43      	ldr	r3, [pc, #268]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a42      	ldr	r2, [pc, #264]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d2:	f7ff fa11 	bl	80035f8 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041da:	f7ff fa0d 	bl	80035f8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e347      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ec:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041f8:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80041fe:	f043 0308 	orr.w	r3, r3, #8
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4930      	ldr	r1, [pc, #192]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004216:	4b2f      	ldr	r3, [pc, #188]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	492b      	ldr	r1, [pc, #172]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004226:	4313      	orrs	r3, r2
 8004228:	604b      	str	r3, [r1, #4]
 800422a:	e01a      	b.n	8004262 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800422c:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004238:	f7ff f9de 	bl	80035f8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004240:	f7ff f9da 	bl	80035f8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e314      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004252:	4b20      	ldr	r3, [pc, #128]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1dc>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d073      	beq.n	8004356 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b08      	cmp	r3, #8
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x21c>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d10e      	bne.n	8004298 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d10b      	bne.n	8004298 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d063      	beq.n	8004354 <HAL_RCC_OscConfig+0x2f0>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15f      	bne.n	8004354 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e2f1      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_OscConfig+0x24c>
 80042a2:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e025      	b.n	80042fc <HAL_RCC_OscConfig+0x298>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b8:	d114      	bne.n	80042e4 <HAL_RCC_OscConfig+0x280>
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a02      	ldr	r2, [pc, #8]	; (80042d4 <HAL_RCC_OscConfig+0x270>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e013      	b.n	80042fc <HAL_RCC_OscConfig+0x298>
 80042d4:	40021000 	.word	0x40021000
 80042d8:	0800dccc 	.word	0x0800dccc
 80042dc:	20000030 	.word	0x20000030
 80042e0:	20000034 	.word	0x20000034
 80042e4:	4ba0      	ldr	r3, [pc, #640]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a9f      	ldr	r2, [pc, #636]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80042ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ee:	6013      	str	r3, [r2, #0]
 80042f0:	4b9d      	ldr	r3, [pc, #628]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a9c      	ldr	r2, [pc, #624]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80042f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d013      	beq.n	800432c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7ff f978 	bl	80035f8 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430c:	f7ff f974 	bl	80035f8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b64      	cmp	r3, #100	; 0x64
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e2ae      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800431e:	4b92      	ldr	r3, [pc, #584]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0f0      	beq.n	800430c <HAL_RCC_OscConfig+0x2a8>
 800432a:	e014      	b.n	8004356 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7ff f964 	bl	80035f8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004334:	f7ff f960 	bl	80035f8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	; 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e29a      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004346:	4b88      	ldr	r3, [pc, #544]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x2d0>
 8004352:	e000      	b.n	8004356 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d060      	beq.n	8004424 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d005      	beq.n	8004374 <HAL_RCC_OscConfig+0x310>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d119      	bne.n	80043a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d116      	bne.n	80043a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004374:	4b7c      	ldr	r3, [pc, #496]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_OscConfig+0x328>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e277      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b76      	ldr	r3, [pc, #472]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	061b      	lsls	r3, r3, #24
 800439a:	4973      	ldr	r1, [pc, #460]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a0:	e040      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d023      	beq.n	80043f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043aa:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7ff f91f 	bl	80035f8 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043be:	f7ff f91b 	bl	80035f8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e255      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d0:	4b65      	ldr	r3, [pc, #404]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b62      	ldr	r3, [pc, #392]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	061b      	lsls	r3, r3, #24
 80043ea:	495f      	ldr	r1, [pc, #380]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
 80043f0:	e018      	b.n	8004424 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a5c      	ldr	r2, [pc, #368]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80043f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7ff f8fb 	bl	80035f8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7ff f8f7 	bl	80035f8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e231      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004418:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d03c      	beq.n	80044aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01c      	beq.n	8004472 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004438:	4b4b      	ldr	r3, [pc, #300]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7ff f8d6 	bl	80035f8 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004450:	f7ff f8d2 	bl	80035f8 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e20c      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004462:	4b41      	ldr	r3, [pc, #260]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0ef      	beq.n	8004450 <HAL_RCC_OscConfig+0x3ec>
 8004470:	e01b      	b.n	80044aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004478:	4a3b      	ldr	r2, [pc, #236]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004482:	f7ff f8b9 	bl	80035f8 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448a:	f7ff f8b5 	bl	80035f8 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e1ef      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800449c:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1ef      	bne.n	800448a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 80a6 	beq.w	8004604 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044b8:	2300      	movs	r3, #0
 80044ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	6593      	str	r3, [r2, #88]	; 0x58
 80044d4:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 80044d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <HAL_RCC_OscConfig+0x508>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <HAL_RCC_OscConfig+0x508>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1d      	ldr	r2, [pc, #116]	; (800456c <HAL_RCC_OscConfig+0x508>)
 80044f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fc:	f7ff f87c 	bl	80035f8 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7ff f878 	bl	80035f8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1b2      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_RCC_OscConfig+0x508>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d108      	bne.n	800453c <HAL_RCC_OscConfig+0x4d8>
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800452c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004530:	4a0d      	ldr	r2, [pc, #52]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453a:	e029      	b.n	8004590 <HAL_RCC_OscConfig+0x52c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	d115      	bne.n	8004570 <HAL_RCC_OscConfig+0x50c>
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	4a03      	ldr	r2, [pc, #12]	; (8004568 <HAL_RCC_OscConfig+0x504>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004564:	e014      	b.n	8004590 <HAL_RCC_OscConfig+0x52c>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	40007000 	.word	0x40007000
 8004570:	4b9a      	ldr	r3, [pc, #616]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004576:	4a99      	ldr	r2, [pc, #612]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004580:	4b96      	ldr	r3, [pc, #600]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004586:	4a95      	ldr	r2, [pc, #596]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d016      	beq.n	80045c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7ff f82e 	bl	80035f8 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a0:	f7ff f82a 	bl	80035f8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e162      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0ed      	beq.n	80045a0 <HAL_RCC_OscConfig+0x53c>
 80045c4:	e015      	b.n	80045f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c6:	f7ff f817 	bl	80035f8 <HAL_GetTick>
 80045ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045cc:	e00a      	b.n	80045e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7ff f813 	bl	80035f8 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e14b      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e4:	4b7d      	ldr	r3, [pc, #500]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1ed      	bne.n	80045ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f2:	7ffb      	ldrb	r3, [r7, #31]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d105      	bne.n	8004604 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f8:	4b78      	ldr	r3, [pc, #480]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	4a77      	ldr	r2, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80045fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004602:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d03c      	beq.n	800468a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	d01c      	beq.n	8004652 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004618:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800461a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461e:	4a6f      	ldr	r2, [pc, #444]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fe ffe6 	bl	80035f8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004630:	f7fe ffe2 	bl	80035f8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e11c      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004642:	4b66      	ldr	r3, [pc, #408]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0ef      	beq.n	8004630 <HAL_RCC_OscConfig+0x5cc>
 8004650:	e01b      	b.n	800468a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004652:	4b62      	ldr	r3, [pc, #392]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004658:	4a60      	ldr	r2, [pc, #384]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800465a:	f023 0301 	bic.w	r3, r3, #1
 800465e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004662:	f7fe ffc9 	bl	80035f8 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466a:	f7fe ffc5 	bl	80035f8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0ff      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800467c:	4b57      	ldr	r3, [pc, #348]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ef      	bne.n	800466a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80f3 	beq.w	800487a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	2b02      	cmp	r3, #2
 800469a:	f040 80c9 	bne.w	8004830 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800469e:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d12c      	bne.n	800470c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	3b01      	subs	r3, #1
 80046be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d123      	bne.n	800470c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d11b      	bne.n	800470c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d113      	bne.n	800470c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ee:	085b      	lsrs	r3, r3, #1
 80046f0:	3b01      	subs	r3, #1
 80046f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d109      	bne.n	800470c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	3b01      	subs	r3, #1
 8004706:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d06b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d062      	beq.n	80047d8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004712:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e0ac      	b.n	800487c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2d      	ldr	r2, [pc, #180]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004728:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800472c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800472e:	f7fe ff63 	bl	80035f8 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004736:	f7fe ff5f 	bl	80035f8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e099      	b.n	800487c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004748:	4b24      	ldr	r3, [pc, #144]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f0      	bne.n	8004736 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004754:	4b21      	ldr	r3, [pc, #132]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <HAL_RCC_OscConfig+0x77c>)
 800475a:	4013      	ands	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004764:	3a01      	subs	r2, #1
 8004766:	0112      	lsls	r2, r2, #4
 8004768:	4311      	orrs	r1, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800476e:	0212      	lsls	r2, r2, #8
 8004770:	4311      	orrs	r1, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004776:	0852      	lsrs	r2, r2, #1
 8004778:	3a01      	subs	r2, #1
 800477a:	0552      	lsls	r2, r2, #21
 800477c:	4311      	orrs	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004782:	0852      	lsrs	r2, r2, #1
 8004784:	3a01      	subs	r2, #1
 8004786:	0652      	lsls	r2, r2, #25
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800478e:	06d2      	lsls	r2, r2, #27
 8004790:	430a      	orrs	r2, r1
 8004792:	4912      	ldr	r1, [pc, #72]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 8004794:	4313      	orrs	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004798:	4b10      	ldr	r3, [pc, #64]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0f      	ldr	r2, [pc, #60]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 800479e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a4:	4b0d      	ldr	r3, [pc, #52]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80047aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b0:	f7fe ff22 	bl	80035f8 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fe ff1e 	bl	80035f8 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e058      	b.n	800487c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ca:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCC_OscConfig+0x778>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d6:	e050      	b.n	800487a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e04f      	b.n	800487c <HAL_RCC_OscConfig+0x818>
 80047dc:	40021000 	.word	0x40021000
 80047e0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e4:	4b27      	ldr	r3, [pc, #156]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d144      	bne.n	800487a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a23      	ldr	r2, [pc, #140]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fc:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a20      	ldr	r2, [pc, #128]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 8004802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004808:	f7fe fef6 	bl	80035f8 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fe fef2 	bl	80035f8 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e02c      	b.n	800487c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x7ac>
 800482e:	e024      	b.n	800487a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	d01f      	beq.n	8004876 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 800483c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004842:	f7fe fed9 	bl	80035f8 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484a:	f7fe fed5 	bl	80035f8 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e00f      	b.n	800487c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485c:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	4905      	ldr	r1, [pc, #20]	; (8004884 <HAL_RCC_OscConfig+0x820>)
 800486e:	4b06      	ldr	r3, [pc, #24]	; (8004888 <HAL_RCC_OscConfig+0x824>)
 8004870:	4013      	ands	r3, r2
 8004872:	60cb      	str	r3, [r1, #12]
 8004874:	e001      	b.n	800487a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40021000 	.word	0x40021000
 8004888:	feeefffc 	.word	0xfeeefffc

0800488c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0e7      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a0:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d910      	bls.n	80048d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ae:	4b72      	ldr	r3, [pc, #456]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 0207 	bic.w	r2, r3, #7
 80048b6:	4970      	ldr	r1, [pc, #448]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b6e      	ldr	r3, [pc, #440]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0cf      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d908      	bls.n	80048fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4960      	ldr	r1, [pc, #384]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d04c      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004912:	4b5a      	ldr	r3, [pc, #360]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d121      	bne.n	8004962 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0a6      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d107      	bne.n	800493a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492a:	4b54      	ldr	r3, [pc, #336]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d115      	bne.n	8004962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e09a      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004942:	4b4e      	ldr	r3, [pc, #312]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e08e      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004952:	4b4a      	ldr	r3, [pc, #296]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e086      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b46      	ldr	r3, [pc, #280]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4943      	ldr	r1, [pc, #268]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004974:	f7fe fe40 	bl	80035f8 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fe fe3c 	bl	80035f8 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	; 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e06e      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b3a      	ldr	r3, [pc, #232]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049bc:	429a      	cmp	r2, r3
 80049be:	d208      	bcs.n	80049d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	492b      	ldr	r1, [pc, #172]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d2:	4b29      	ldr	r3, [pc, #164]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d210      	bcs.n	8004a02 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e0:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 0207 	bic.w	r2, r3, #7
 80049e8:	4923      	ldr	r1, [pc, #140]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_ClockConfig+0x1ec>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e036      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d008      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4918      	ldr	r1, [pc, #96]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d009      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4910      	ldr	r1, [pc, #64]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a40:	f000 f824 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	490b      	ldr	r1, [pc, #44]	; (8004a80 <HAL_RCC_ClockConfig+0x1f4>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5c:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <HAL_RCC_ClockConfig+0x1f8>)
 8004a5e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x1fc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe fd77 	bl	8003558 <HAL_InitTick>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800dccc 	.word	0x0800dccc
 8004a84:	20000030 	.word	0x20000030
 8004a88:	20000034 	.word	0x20000034

08004a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9a:	4b3e      	ldr	r3, [pc, #248]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d121      	bne.n	8004afe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d11e      	bne.n	8004afe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ac0:	4b34      	ldr	r3, [pc, #208]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004acc:	4b31      	ldr	r3, [pc, #196]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	0a1b      	lsrs	r3, r3, #8
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	e005      	b.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	091b      	lsrs	r3, r3, #4
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10d      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004afc:	e00a      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d102      	bne.n	8004b0a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b04:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b06:	61bb      	str	r3, [r7, #24]
 8004b08:	e004      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b10:	4b23      	ldr	r3, [pc, #140]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b12:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d134      	bne.n	8004b84 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0xac>
 8004b30:	e005      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b34:	617b      	str	r3, [r7, #20]
      break;
 8004b36:	e005      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b38:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b3a:	617b      	str	r3, [r7, #20]
      break;
 8004b3c:	e002      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	617b      	str	r3, [r7, #20]
      break;
 8004b42:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	0a1b      	lsrs	r3, r3, #8
 8004b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	fb03 f202 	mul.w	r2, r3, r2
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	0e5b      	lsrs	r3, r3, #25
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	3301      	adds	r3, #1
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b84:	69bb      	ldr	r3, [r7, #24]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800dce4 	.word	0x0800dce4
 8004b9c:	00f42400 	.word	0x00f42400
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b03      	ldr	r3, [pc, #12]	; (8004bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20000030 	.word	0x20000030

08004bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bc0:	f7ff fff0 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4904      	ldr	r1, [pc, #16]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	0800dcdc 	.word	0x0800dcdc

08004be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bec:	f7ff ffda 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0adb      	lsrs	r3, r3, #11
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4904      	ldr	r1, [pc, #16]	; (8004c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	0800dcdc 	.word	0x0800dcdc

08004c14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c20:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c2c:	f7ff f9b6 	bl	8003f9c <HAL_PWREx_GetVoltageRange>
 8004c30:	6178      	str	r0, [r7, #20]
 8004c32:	e014      	b.n	8004c5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c34:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c38:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c40:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c4c:	f7ff f9a6 	bl	8003f9c <HAL_PWREx_GetVoltageRange>
 8004c50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	4a1d      	ldr	r2, [pc, #116]	; (8004ccc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c64:	d10b      	bne.n	8004c7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d919      	bls.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c70:	d902      	bls.n	8004c78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c72:	2302      	movs	r3, #2
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	e013      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c78:	2301      	movs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
 8004c7c:	e010      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b80      	cmp	r3, #128	; 0x80
 8004c82:	d902      	bls.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c84:	2303      	movs	r3, #3
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e00a      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b80      	cmp	r3, #128	; 0x80
 8004c8e:	d102      	bne.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c90:	2302      	movs	r3, #2
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	e004      	b.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b70      	cmp	r3, #112	; 0x70
 8004c9a:	d101      	bne.n	8004ca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 0207 	bic.w	r2, r3, #7
 8004ca8:	4909      	ldr	r1, [pc, #36]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d001      	beq.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	40022000 	.word	0x40022000

08004cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cdc:	2300      	movs	r3, #0
 8004cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d031      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cf8:	d01a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cfe:	d814      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d08:	d10f      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d0a:	4b5d      	ldr	r3, [pc, #372]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a5c      	ldr	r2, [pc, #368]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d16:	e00c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fa22 	bl	8005168 <RCCEx_PLLSAI1_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d38:	4b51      	ldr	r3, [pc, #324]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	494e      	ldr	r1, [pc, #312]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d4e:	e001      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 809e 	beq.w	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d62:	2300      	movs	r3, #0
 8004d64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d66:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d80:	4a3f      	ldr	r2, [pc, #252]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6593      	str	r3, [r2, #88]	; 0x58
 8004d88:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d94:	2301      	movs	r3, #1
 8004d96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d98:	4b3a      	ldr	r3, [pc, #232]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a39      	ldr	r2, [pc, #228]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004da4:	f7fe fc28 	bl	80035f8 <HAL_GetTick>
 8004da8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004daa:	e009      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7fe fc24 	bl	80035f8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d902      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	74fb      	strb	r3, [r7, #19]
        break;
 8004dbe:	e005      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004dc0:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0ef      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d15a      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ddc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01e      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d019      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dee:	4b24      	ldr	r3, [pc, #144]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	4a1f      	ldr	r2, [pc, #124]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e10:	4a1b      	ldr	r2, [pc, #108]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e1a:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d016      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fbe4 	bl	80035f8 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e32:	e00b      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e34:	f7fe fbe0 	bl	80035f8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d902      	bls.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	74fb      	strb	r3, [r7, #19]
            break;
 8004e4a:	e006      	b.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ec      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10b      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6e:	4904      	ldr	r1, [pc, #16]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e76:	e009      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e78:	7cfb      	ldrb	r3, [r7, #19]
 8004e7a:	74bb      	strb	r3, [r7, #18]
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000
 8004e84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8c:	7c7b      	ldrb	r3, [r7, #17]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d105      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e92:	4b8d      	ldr	r3, [pc, #564]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	4a8c      	ldr	r2, [pc, #560]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eaa:	4b87      	ldr	r3, [pc, #540]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f023 0203 	bic.w	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	4983      	ldr	r1, [pc, #524]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ecc:	4b7e      	ldr	r3, [pc, #504]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 020c 	bic.w	r2, r3, #12
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	497b      	ldr	r1, [pc, #492]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004eee:	4b76      	ldr	r3, [pc, #472]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	4972      	ldr	r1, [pc, #456]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f10:	4b6d      	ldr	r3, [pc, #436]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	496a      	ldr	r1, [pc, #424]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f32:	4b65      	ldr	r3, [pc, #404]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	4961      	ldr	r1, [pc, #388]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f54:	4b5c      	ldr	r3, [pc, #368]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4959      	ldr	r1, [pc, #356]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f76:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f84:	4950      	ldr	r1, [pc, #320]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f98:	4b4b      	ldr	r3, [pc, #300]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	4948      	ldr	r1, [pc, #288]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fba:	4b43      	ldr	r3, [pc, #268]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	493f      	ldr	r1, [pc, #252]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d028      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fdc:	4b3a      	ldr	r3, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	4937      	ldr	r1, [pc, #220]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffa:	d106      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffc:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005006:	60d3      	str	r3, [r2, #12]
 8005008:	e011      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800500e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005012:	d10c      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3304      	adds	r3, #4
 8005018:	2101      	movs	r1, #1
 800501a:	4618      	mov	r0, r3
 800501c:	f000 f8a4 	bl	8005168 <RCCEx_PLLSAI1_Config>
 8005020:	4603      	mov	r3, r0
 8005022:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005024:	7cfb      	ldrb	r3, [r7, #19]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800502a:	7cfb      	ldrb	r3, [r7, #19]
 800502c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d028      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800503a:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	491f      	ldr	r1, [pc, #124]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005058:	d106      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800505a:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	4a1a      	ldr	r2, [pc, #104]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005064:	60d3      	str	r3, [r2, #12]
 8005066:	e011      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005070:	d10c      	bne.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3304      	adds	r3, #4
 8005076:	2101      	movs	r1, #1
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f875 	bl	8005168 <RCCEx_PLLSAI1_Config>
 800507e:	4603      	mov	r3, r0
 8005080:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005082:	7cfb      	ldrb	r3, [r7, #19]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02b      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a6:	4908      	ldr	r1, [pc, #32]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050b6:	d109      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b8:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	4a02      	ldr	r2, [pc, #8]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050c2:	60d3      	str	r3, [r2, #12]
 80050c4:	e014      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050d4:	d10c      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	2101      	movs	r1, #1
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f843 	bl	8005168 <RCCEx_PLLSAI1_Config>
 80050e2:	4603      	mov	r3, r0
 80050e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01c      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	4916      	ldr	r1, [pc, #88]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800511a:	d10c      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3304      	adds	r3, #4
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f000 f820 	bl	8005168 <RCCEx_PLLSAI1_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800512c:	7cfb      	ldrb	r3, [r7, #19]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005150:	4904      	ldr	r1, [pc, #16]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005158:	7cbb      	ldrb	r3, [r7, #18]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000

08005168 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005176:	4b74      	ldr	r3, [pc, #464]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d018      	beq.n	80051b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005182:	4b71      	ldr	r3, [pc, #452]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0203 	and.w	r2, r3, #3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d10d      	bne.n	80051ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
       ||
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800519a:	4b6b      	ldr	r3, [pc, #428]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
       ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d047      	beq.n	800523e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	e044      	b.n	800523e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d018      	beq.n	80051ee <RCCEx_PLLSAI1_Config+0x86>
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d825      	bhi.n	800520c <RCCEx_PLLSAI1_Config+0xa4>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d002      	beq.n	80051ca <RCCEx_PLLSAI1_Config+0x62>
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d009      	beq.n	80051dc <RCCEx_PLLSAI1_Config+0x74>
 80051c8:	e020      	b.n	800520c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d11d      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051da:	e01a      	b.n	8005212 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051dc:	4b5a      	ldr	r3, [pc, #360]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d116      	bne.n	8005216 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051ec:	e013      	b.n	8005216 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051ee:	4b56      	ldr	r3, [pc, #344]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051fa:	4b53      	ldr	r3, [pc, #332]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800520a:	e006      	b.n	800521a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e004      	b.n	800521c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005212:	bf00      	nop
 8005214:	e002      	b.n	800521c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800521a:	bf00      	nop
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10d      	bne.n	800523e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005222:	4b49      	ldr	r3, [pc, #292]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6819      	ldr	r1, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	430b      	orrs	r3, r1
 8005238:	4943      	ldr	r1, [pc, #268]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d17c      	bne.n	800533e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005244:	4b40      	ldr	r3, [pc, #256]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3f      	ldr	r2, [pc, #252]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800524a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800524e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005250:	f7fe f9d2 	bl	80035f8 <HAL_GetTick>
 8005254:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005256:	e009      	b.n	800526c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005258:	f7fe f9ce 	bl	80035f8 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d902      	bls.n	800526c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	73fb      	strb	r3, [r7, #15]
        break;
 800526a:	e005      	b.n	8005278 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800526c:	4b36      	ldr	r3, [pc, #216]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ef      	bne.n	8005258 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d15f      	bne.n	800533e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d110      	bne.n	80052a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005284:	4b30      	ldr	r3, [pc, #192]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800528c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6892      	ldr	r2, [r2, #8]
 8005294:	0211      	lsls	r1, r2, #8
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	06d2      	lsls	r2, r2, #27
 800529c:	430a      	orrs	r2, r1
 800529e:	492a      	ldr	r1, [pc, #168]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	610b      	str	r3, [r1, #16]
 80052a4:	e027      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d112      	bne.n	80052d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6892      	ldr	r2, [r2, #8]
 80052bc:	0211      	lsls	r1, r2, #8
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6912      	ldr	r2, [r2, #16]
 80052c2:	0852      	lsrs	r2, r2, #1
 80052c4:	3a01      	subs	r2, #1
 80052c6:	0552      	lsls	r2, r2, #21
 80052c8:	430a      	orrs	r2, r1
 80052ca:	491f      	ldr	r1, [pc, #124]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	610b      	str	r3, [r1, #16]
 80052d0:	e011      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052d2:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6892      	ldr	r2, [r2, #8]
 80052e2:	0211      	lsls	r1, r2, #8
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6952      	ldr	r2, [r2, #20]
 80052e8:	0852      	lsrs	r2, r2, #1
 80052ea:	3a01      	subs	r2, #1
 80052ec:	0652      	lsls	r2, r2, #25
 80052ee:	430a      	orrs	r2, r1
 80052f0:	4915      	ldr	r1, [pc, #84]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a13      	ldr	r2, [pc, #76]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005300:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005302:	f7fe f979 	bl	80035f8 <HAL_GetTick>
 8005306:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005308:	e009      	b.n	800531e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800530a:	f7fe f975 	bl	80035f8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d902      	bls.n	800531e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	73fb      	strb	r3, [r7, #15]
          break;
 800531c:	e005      	b.n	800532a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0ef      	beq.n	800530a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005332:	691a      	ldr	r2, [r3, #16]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	4903      	ldr	r1, [pc, #12]	; (8005348 <RCCEx_PLLSAI1_Config+0x1e0>)
 800533a:	4313      	orrs	r3, r2
 800533c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000

0800534c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e095      	b.n	800548a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	d108      	bne.n	8005378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d009      	beq.n	8005384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	61da      	str	r2, [r3, #28]
 8005376:	e005      	b.n	8005384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fb40 	bl	8001a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d902      	bls.n	80053cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e002      	b.n	80053d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053da:	d007      	beq.n	80053ec <HAL_SPI_Init+0xa0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
 8005420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	ea42 0103 	orr.w	r1, r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	f003 0204 	and.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005468:	ea42 0103 	orr.w	r1, r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}

08005492 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b08a      	sub	sp, #40	; 0x28
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054a0:	2301      	movs	r3, #1
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_SPI_TransmitReceive+0x26>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e1fb      	b.n	80058b0 <HAL_SPI_TransmitReceive+0x41e>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c0:	f7fe f89a 	bl	80035f8 <HAL_GetTick>
 80054c4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054cc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80054d4:	887b      	ldrh	r3, [r7, #2]
 80054d6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80054d8:	887b      	ldrh	r3, [r7, #2]
 80054da:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054dc:	7efb      	ldrb	r3, [r7, #27]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d00e      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x6e>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e8:	d106      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_SPI_TransmitReceive+0x66>
 80054f2:	7efb      	ldrb	r3, [r7, #27]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d003      	beq.n	8005500 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80054fe:	e1cd      	b.n	800589c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_SPI_TransmitReceive+0x80>
 800550c:	887b      	ldrh	r3, [r7, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005518:	e1c0      	b.n	800589c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b04      	cmp	r3, #4
 8005524:	d003      	beq.n	800552e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2205      	movs	r2, #5
 800552a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	887a      	ldrh	r2, [r7, #2]
 800553e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	887a      	ldrh	r2, [r7, #2]
 8005546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	887a      	ldrh	r2, [r7, #2]
 800555a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005570:	d802      	bhi.n	8005578 <HAL_SPI_TransmitReceive+0xe6>
 8005572:	8a3b      	ldrh	r3, [r7, #16]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d908      	bls.n	800558a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	e007      	b.n	800559a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d007      	beq.n	80055b8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055c0:	d97c      	bls.n	80056bc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_SPI_TransmitReceive+0x13e>
 80055ca:	8a7b      	ldrh	r3, [r7, #18]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d169      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	881a      	ldrh	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	1c9a      	adds	r2, r3, #2
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f4:	e056      	b.n	80056a4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d11b      	bne.n	800563c <HAL_SPI_TransmitReceive+0x1aa>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_SPI_TransmitReceive+0x1aa>
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	2b01      	cmp	r3, #1
 8005612:	d113      	bne.n	800563c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005618:	881a      	ldrh	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	1c9a      	adds	r2, r3, #2
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b01      	cmp	r3, #1
 8005648:	d11c      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x1f2>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68da      	ldr	r2, [r3, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	1c9a      	adds	r2, r3, #2
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005674:	b29b      	uxth	r3, r3
 8005676:	3b01      	subs	r3, #1
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005680:	2301      	movs	r3, #1
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005684:	f7fd ffb8 	bl	80035f8 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005690:	429a      	cmp	r2, r3
 8005692:	d807      	bhi.n	80056a4 <HAL_SPI_TransmitReceive+0x212>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d003      	beq.n	80056a4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056a2:	e0fb      	b.n	800589c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1a3      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x164>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d19d      	bne.n	80055f6 <HAL_SPI_TransmitReceive+0x164>
 80056ba:	e0df      	b.n	800587c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_SPI_TransmitReceive+0x23a>
 80056c4:	8a7b      	ldrh	r3, [r7, #18]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	f040 80cb 	bne.w	8005862 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d912      	bls.n	80056fc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	881a      	ldrh	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b02      	subs	r3, #2
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fa:	e0b2      	b.n	8005862 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005722:	e09e      	b.n	8005862 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d134      	bne.n	800579c <HAL_SPI_TransmitReceive+0x30a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d02f      	beq.n	800579c <HAL_SPI_TransmitReceive+0x30a>
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	2b01      	cmp	r3, #1
 8005740:	d12c      	bne.n	800579c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	d912      	bls.n	8005772 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	881a      	ldrh	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b02      	subs	r3, #2
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005770:	e012      	b.n	8005798 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d148      	bne.n	800583c <HAL_SPI_TransmitReceive+0x3aa>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d042      	beq.n	800583c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d923      	bls.n	800580a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	b292      	uxth	r2, r2
 80057ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	1c9a      	adds	r2, r3, #2
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	3b02      	subs	r3, #2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d81f      	bhi.n	8005838 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e016      	b.n	8005838 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f103 020c 	add.w	r2, r3, #12
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	7812      	ldrb	r2, [r2, #0]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005838:	2301      	movs	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800583c:	f7fd fedc 	bl	80035f8 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005848:	429a      	cmp	r2, r3
 800584a:	d803      	bhi.n	8005854 <HAL_SPI_TransmitReceive+0x3c2>
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <HAL_SPI_TransmitReceive+0x3c8>
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005860:	e01c      	b.n	800589c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	f47f af5b 	bne.w	8005724 <HAL_SPI_TransmitReceive+0x292>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	f47f af54 	bne.w	8005724 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f937 	bl	8005af4 <SPI_EndRxTxTransaction>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d006      	beq.n	800589a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2220      	movs	r2, #32
 8005896:	661a      	str	r2, [r3, #96]	; 0x60
 8005898:	e000      	b.n	800589c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800589a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3728      	adds	r7, #40	; 0x28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	603b      	str	r3, [r7, #0]
 80058c4:	4613      	mov	r3, r2
 80058c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058c8:	f7fd fe96 	bl	80035f8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4413      	add	r3, r2
 80058d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058d8:	f7fd fe8e 	bl	80035f8 <HAL_GetTick>
 80058dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058de:	4b39      	ldr	r3, [pc, #228]	; (80059c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	015b      	lsls	r3, r3, #5
 80058e4:	0d1b      	lsrs	r3, r3, #20
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ee:	e054      	b.n	800599a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d050      	beq.n	800599a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058f8:	f7fd fe7e 	bl	80035f8 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	429a      	cmp	r2, r3
 8005906:	d902      	bls.n	800590e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d13d      	bne.n	800598a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800591c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005926:	d111      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005930:	d004      	beq.n	800593c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d107      	bne.n	800594c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005954:	d10f      	bne.n	8005976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e017      	b.n	80059ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3b01      	subs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689a      	ldr	r2, [r3, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4013      	ands	r3, r2
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d19b      	bne.n	80058f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000030 	.word	0x20000030

080059c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059da:	f7fd fe0d 	bl	80035f8 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	4413      	add	r3, r2
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80059ea:	f7fd fe05 	bl	80035f8 <HAL_GetTick>
 80059ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	330c      	adds	r3, #12
 80059f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059f8:	4b3d      	ldr	r3, [pc, #244]	; (8005af0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	00da      	lsls	r2, r3, #3
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	0d1b      	lsrs	r3, r3, #20
 8005a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a10:	e060      	b.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a18:	d107      	bne.n	8005a2a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d050      	beq.n	8005ad4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a32:	f7fd fde1 	bl	80035f8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d902      	bls.n	8005a48 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d13d      	bne.n	8005ac4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a60:	d111      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6a:	d004      	beq.n	8005a76 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a74:	d107      	bne.n	8005a86 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8e:	d10f      	bne.n	8005ab0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e010      	b.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d196      	bne.n	8005a12 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3728      	adds	r7, #40	; 0x28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000030 	.word	0x20000030

08005af4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f7ff ff5b 	bl	80059c8 <SPI_WaitFifoStateUntilTimeout>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e027      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fec0 	bl	80058b8 <SPI_WaitFlagStateUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	f043 0220 	orr.w	r2, r3, #32
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e014      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f7ff ff34 	bl	80059c8 <SPI_WaitFifoStateUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d007      	beq.n	8005b76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e000      	b.n	8005b78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e049      	b.n	8005c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d106      	bne.n	8005bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7fc fa16 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f000 fba0 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d001      	beq.n	8005c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e033      	b.n	8005cb0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_TIM_Base_Start+0x8c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIM_Base_Start+0x3e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c62:	d004      	beq.n	8005c6e <HAL_TIM_Base_Start+0x3e>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_TIM_Base_Start+0x90>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d115      	bne.n	8005c9a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <HAL_TIM_Base_Start+0x94>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	d015      	beq.n	8005cac <HAL_TIM_Base_Start+0x7c>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c86:	d011      	beq.n	8005cac <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c98:	e008      	b.n	8005cac <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e000      	b.n	8005cae <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40012c00 	.word	0x40012c00
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	00010007 	.word	0x00010007

08005cc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e049      	b.n	8005d6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f841 	bl	8005d76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 fafc 	bl	8006304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d109      	bne.n	8005db0 <HAL_TIM_PWM_Start+0x24>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	bf14      	ite	ne
 8005da8:	2301      	movne	r3, #1
 8005daa:	2300      	moveq	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e03c      	b.n	8005e2a <HAL_TIM_PWM_Start+0x9e>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d109      	bne.n	8005dca <HAL_TIM_PWM_Start+0x3e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	bf14      	ite	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	2300      	moveq	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	e02f      	b.n	8005e2a <HAL_TIM_PWM_Start+0x9e>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d109      	bne.n	8005de4 <HAL_TIM_PWM_Start+0x58>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	bf14      	ite	ne
 8005ddc:	2301      	movne	r3, #1
 8005dde:	2300      	moveq	r3, #0
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	e022      	b.n	8005e2a <HAL_TIM_PWM_Start+0x9e>
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b0c      	cmp	r3, #12
 8005de8:	d109      	bne.n	8005dfe <HAL_TIM_PWM_Start+0x72>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	bf14      	ite	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	2300      	moveq	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	e015      	b.n	8005e2a <HAL_TIM_PWM_Start+0x9e>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b10      	cmp	r3, #16
 8005e02:	d109      	bne.n	8005e18 <HAL_TIM_PWM_Start+0x8c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	bf14      	ite	ne
 8005e10:	2301      	movne	r3, #1
 8005e12:	2300      	moveq	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	e008      	b.n	8005e2a <HAL_TIM_PWM_Start+0x9e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e07e      	b.n	8005f30 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_TIM_PWM_Start+0xb6>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e40:	e023      	b.n	8005e8a <HAL_TIM_PWM_Start+0xfe>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0xc6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e50:	e01b      	b.n	8005e8a <HAL_TIM_PWM_Start+0xfe>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0xd6>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_PWM_Start+0xfe>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xe6>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e70:	e00b      	b.n	8005e8a <HAL_TIM_PWM_Start+0xfe>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xf6>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e80:	e003      	b.n	8005e8a <HAL_TIM_PWM_Start+0xfe>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fdb2 	bl	80069fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <HAL_TIM_PWM_Start+0x1ac>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x12a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a25      	ldr	r2, [pc, #148]	; (8005f3c <HAL_TIM_PWM_Start+0x1b0>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0x12a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a23      	ldr	r2, [pc, #140]	; (8005f40 <HAL_TIM_PWM_Start+0x1b4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d101      	bne.n	8005eba <HAL_TIM_PWM_Start+0x12e>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <HAL_TIM_PWM_Start+0x130>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <HAL_TIM_PWM_Start+0x1ac>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_TIM_PWM_Start+0x162>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d004      	beq.n	8005eee <HAL_TIM_PWM_Start+0x162>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <HAL_TIM_PWM_Start+0x1b0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d115      	bne.n	8005f1a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_TIM_PWM_Start+0x1b8>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d015      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x1a0>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d011      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f18:	e008      	b.n	8005f2c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e000      	b.n	8005f2e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	00010007 	.word	0x00010007

08005f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f62:	2302      	movs	r3, #2
 8005f64:	e0ff      	b.n	8006166 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b14      	cmp	r3, #20
 8005f72:	f200 80f0 	bhi.w	8006156 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fd1 	.word	0x08005fd1
 8005f80:	08006157 	.word	0x08006157
 8005f84:	08006157 	.word	0x08006157
 8005f88:	08006157 	.word	0x08006157
 8005f8c:	08006011 	.word	0x08006011
 8005f90:	08006157 	.word	0x08006157
 8005f94:	08006157 	.word	0x08006157
 8005f98:	08006157 	.word	0x08006157
 8005f9c:	08006053 	.word	0x08006053
 8005fa0:	08006157 	.word	0x08006157
 8005fa4:	08006157 	.word	0x08006157
 8005fa8:	08006157 	.word	0x08006157
 8005fac:	08006093 	.word	0x08006093
 8005fb0:	08006157 	.word	0x08006157
 8005fb4:	08006157 	.word	0x08006157
 8005fb8:	08006157 	.word	0x08006157
 8005fbc:	080060d5 	.word	0x080060d5
 8005fc0:	08006157 	.word	0x08006157
 8005fc4:	08006157 	.word	0x08006157
 8005fc8:	08006157 	.word	0x08006157
 8005fcc:	08006115 	.word	0x08006115
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f9f8 	bl	80063cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0204 	bic.w	r2, r2, #4
 8005ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6999      	ldr	r1, [r3, #24]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	619a      	str	r2, [r3, #24]
      break;
 800600e:	e0a5      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fa54 	bl	80064c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6999      	ldr	r1, [r3, #24]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	619a      	str	r2, [r3, #24]
      break;
 8006050:	e084      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 faad 	bl	80065b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0208 	orr.w	r2, r2, #8
 800606c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0204 	bic.w	r2, r2, #4
 800607c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	69d9      	ldr	r1, [r3, #28]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	61da      	str	r2, [r3, #28]
      break;
 8006090:	e064      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 fb05 	bl	80066a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69da      	ldr	r2, [r3, #28]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69d9      	ldr	r1, [r3, #28]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	021a      	lsls	r2, r3, #8
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	430a      	orrs	r2, r1
 80060d0:	61da      	str	r2, [r3, #28]
      break;
 80060d2:	e043      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fb42 	bl	8006764 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0208 	orr.w	r2, r2, #8
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006112:	e023      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fb7a 	bl	8006814 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800612e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	021a      	lsls	r2, r3, #8
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006154:	e002      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
      break;
 800615a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006164:	7dfb      	ldrb	r3, [r7, #23]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop

08006170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_TIM_ConfigClockSource+0x1c>
 8006188:	2302      	movs	r3, #2
 800618a:	e0b6      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x18a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c8:	d03e      	beq.n	8006248 <HAL_TIM_ConfigClockSource+0xd8>
 80061ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ce:	f200 8087 	bhi.w	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 80061d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d6:	f000 8086 	beq.w	80062e6 <HAL_TIM_ConfigClockSource+0x176>
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d87f      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 80061e0:	2b70      	cmp	r3, #112	; 0x70
 80061e2:	d01a      	beq.n	800621a <HAL_TIM_ConfigClockSource+0xaa>
 80061e4:	2b70      	cmp	r3, #112	; 0x70
 80061e6:	d87b      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 80061e8:	2b60      	cmp	r3, #96	; 0x60
 80061ea:	d050      	beq.n	800628e <HAL_TIM_ConfigClockSource+0x11e>
 80061ec:	2b60      	cmp	r3, #96	; 0x60
 80061ee:	d877      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 80061f0:	2b50      	cmp	r3, #80	; 0x50
 80061f2:	d03c      	beq.n	800626e <HAL_TIM_ConfigClockSource+0xfe>
 80061f4:	2b50      	cmp	r3, #80	; 0x50
 80061f6:	d873      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d058      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x13e>
 80061fc:	2b40      	cmp	r3, #64	; 0x40
 80061fe:	d86f      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 8006200:	2b30      	cmp	r3, #48	; 0x30
 8006202:	d064      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x15e>
 8006204:	2b30      	cmp	r3, #48	; 0x30
 8006206:	d86b      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 8006208:	2b20      	cmp	r3, #32
 800620a:	d060      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x15e>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d867      	bhi.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05c      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x15e>
 8006214:	2b10      	cmp	r3, #16
 8006216:	d05a      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x15e>
 8006218:	e062      	b.n	80062e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6899      	ldr	r1, [r3, #8]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f000 fbc7 	bl	80069bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800623c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	609a      	str	r2, [r3, #8]
      break;
 8006246:	e04f      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	6899      	ldr	r1, [r3, #8]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f000 fbb0 	bl	80069bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800626a:	609a      	str	r2, [r3, #8]
      break;
 800626c:	e03c      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6859      	ldr	r1, [r3, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	461a      	mov	r2, r3
 800627c:	f000 fb24 	bl	80068c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2150      	movs	r1, #80	; 0x50
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fb7d 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 800628c:	e02c      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	461a      	mov	r2, r3
 800629c:	f000 fb43 	bl	8006926 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2160      	movs	r1, #96	; 0x60
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fb6d 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80062ac:	e01c      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f000 fb04 	bl	80068c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fb5d 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80062cc:	e00c      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	4610      	mov	r0, r2
 80062da:	f000 fb54 	bl	8006986 <TIM_ITRx_SetConfig>
      break;
 80062de:	e003      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
      break;
 80062e4:	e000      	b.n	80062e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <TIM_Base_SetConfig+0xbc>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x20>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_Base_SetConfig+0xbc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00b      	beq.n	8006356 <TIM_Base_SetConfig+0x52>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d007      	beq.n	8006356 <TIM_Base_SetConfig+0x52>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <TIM_Base_SetConfig+0xc0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d003      	beq.n	8006356 <TIM_Base_SetConfig+0x52>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <TIM_Base_SetConfig+0xc4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d108      	bne.n	8006368 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <TIM_Base_SetConfig+0xbc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <TIM_Base_SetConfig+0xa0>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a0b      	ldr	r2, [pc, #44]	; (80063c4 <TIM_Base_SetConfig+0xc0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_Base_SetConfig+0xa0>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <TIM_Base_SetConfig+0xc4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d103      	bne.n	80063ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	691a      	ldr	r2, [r3, #16]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	615a      	str	r2, [r3, #20]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400

080063cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f023 0201 	bic.w	r2, r3, #1
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f023 0302 	bic.w	r3, r3, #2
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a24      	ldr	r2, [pc, #144]	; (80064b8 <TIM_OC1_SetConfig+0xec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d007      	beq.n	800643c <TIM_OC1_SetConfig+0x70>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a23      	ldr	r2, [pc, #140]	; (80064bc <TIM_OC1_SetConfig+0xf0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC1_SetConfig+0x70>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <TIM_OC1_SetConfig+0xf4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10c      	bne.n	8006456 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0308 	bic.w	r3, r3, #8
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 0304 	bic.w	r3, r3, #4
 8006454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <TIM_OC1_SetConfig+0xec>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d007      	beq.n	800646e <TIM_OC1_SetConfig+0xa2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a16      	ldr	r2, [pc, #88]	; (80064bc <TIM_OC1_SetConfig+0xf0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d003      	beq.n	800646e <TIM_OC1_SetConfig+0xa2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a15      	ldr	r2, [pc, #84]	; (80064c0 <TIM_OC1_SetConfig+0xf4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d111      	bne.n	8006492 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400

080064c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0210 	bic.w	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0320 	bic.w	r3, r3, #32
 8006512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a22      	ldr	r2, [pc, #136]	; (80065ac <TIM_OC2_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10d      	bne.n	8006544 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	011b      	lsls	r3, r3, #4
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a19      	ldr	r2, [pc, #100]	; (80065ac <TIM_OC2_SetConfig+0xe8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_OC2_SetConfig+0x98>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <TIM_OC2_SetConfig+0xec>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC2_SetConfig+0x98>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <TIM_OC2_SetConfig+0xf0>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d113      	bne.n	8006584 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800656a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400

080065b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a21      	ldr	r2, [pc, #132]	; (800669c <TIM_OC3_SetConfig+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10d      	bne.n	8006636 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <TIM_OC3_SetConfig+0xe4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_OC3_SetConfig+0x96>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a17      	ldr	r2, [pc, #92]	; (80066a0 <TIM_OC3_SetConfig+0xe8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_OC3_SetConfig+0x96>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a16      	ldr	r2, [pc, #88]	; (80066a4 <TIM_OC3_SetConfig+0xec>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d113      	bne.n	8006676 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	4313      	orrs	r3, r2
 8006674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40012c00 	.word	0x40012c00
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400

080066a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	031b      	lsls	r3, r3, #12
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a14      	ldr	r2, [pc, #80]	; (8006758 <TIM_OC4_SetConfig+0xb0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d007      	beq.n	800671c <TIM_OC4_SetConfig+0x74>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <TIM_OC4_SetConfig+0xb4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_OC4_SetConfig+0x74>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a12      	ldr	r2, [pc, #72]	; (8006760 <TIM_OC4_SetConfig+0xb8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d109      	bne.n	8006730 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	019b      	lsls	r3, r3, #6
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	621a      	str	r2, [r3, #32]
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40012c00 	.word	0x40012c00
 800675c:	40014000 	.word	0x40014000
 8006760:	40014400 	.word	0x40014400

08006764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a13      	ldr	r2, [pc, #76]	; (8006808 <TIM_OC5_SetConfig+0xa4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d007      	beq.n	80067ce <TIM_OC5_SetConfig+0x6a>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a12      	ldr	r2, [pc, #72]	; (800680c <TIM_OC5_SetConfig+0xa8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d003      	beq.n	80067ce <TIM_OC5_SetConfig+0x6a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a11      	ldr	r2, [pc, #68]	; (8006810 <TIM_OC5_SetConfig+0xac>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d109      	bne.n	80067e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400

08006814 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800685a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	051b      	lsls	r3, r3, #20
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a14      	ldr	r2, [pc, #80]	; (80068bc <TIM_OC6_SetConfig+0xa8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <TIM_OC6_SetConfig+0x6c>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <TIM_OC6_SetConfig+0xac>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC6_SetConfig+0x6c>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <TIM_OC6_SetConfig+0xb0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	029b      	lsls	r3, r3, #10
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400

080068c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 030a 	bic.w	r3, r3, #10
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	f023 0210 	bic.w	r2, r3, #16
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	031b      	lsls	r3, r3, #12
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4313      	orrs	r3, r2
 800695a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f043 0307 	orr.w	r3, r3, #7
 80069a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	609a      	str	r2, [r3, #8]
}
 80069b0:	bf00      	nop
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	021a      	lsls	r2, r3, #8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	431a      	orrs	r2, r3
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	609a      	str	r2, [r3, #8]
}
 80069f0:	bf00      	nop
 80069f2:	371c      	adds	r7, #28
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2201      	movs	r2, #1
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a1a      	ldr	r2, [r3, #32]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	401a      	ands	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1a      	ldr	r2, [r3, #32]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f003 031f 	and.w	r3, r3, #31
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e04f      	b.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a21      	ldr	r2, [pc, #132]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d108      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a10      	ldr	r2, [pc, #64]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10c      	bne.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40014000 	.word	0x40014000

08006b14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e060      	b.n	8006bf2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a14      	ldr	r2, [pc, #80]	; (8006c00 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d115      	bne.n	8006be0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	051b      	lsls	r3, r3, #20
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40012c00 	.word	0x40012c00

08006c04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e040      	b.n	8006c98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fb fab8 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2224      	movs	r2, #36	; 0x24
 8006c30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fc18 	bl	8007478 <UART_SetConfig>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e022      	b.n	8006c98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fe66 	bl	800792c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 feed 	bl	8007a70 <UART_CheckIdleState>
 8006c96:	4603      	mov	r3, r0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08a      	sub	sp, #40	; 0x28
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	f040 8082 	bne.w	8006dbe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <HAL_UART_Transmit+0x26>
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e07a      	b.n	8006dc0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Transmit+0x38>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e073      	b.n	8006dc0 <HAL_UART_Transmit+0x120>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2221      	movs	r2, #33	; 0x21
 8006cec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cee:	f7fc fc83 	bl	80035f8 <HAL_GetTick>
 8006cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	88fa      	ldrh	r2, [r7, #6]
 8006cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	88fa      	ldrh	r2, [r7, #6]
 8006d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	d108      	bne.n	8006d20 <HAL_UART_Transmit+0x80>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e003      	b.n	8006d28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006d30:	e02d      	b.n	8006d8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	2180      	movs	r1, #128	; 0x80
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fee0 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e039      	b.n	8006dc0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10b      	bne.n	8006d6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5e:	b292      	uxth	r2, r2
 8006d60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	3302      	adds	r3, #2
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	e008      	b.n	8006d7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	781a      	ldrb	r2, [r3, #0]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	b292      	uxth	r2, r2
 8006d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1cb      	bne.n	8006d32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2140      	movs	r1, #64	; 0x40
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 feac 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e005      	b.n	8006dc0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3720      	adds	r7, #32
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	d142      	bne.n	8006e64 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d002      	beq.n	8006dea <HAL_UART_Receive_IT+0x22>
 8006de4:	88fb      	ldrh	r3, [r7, #6]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d101      	bne.n	8006dee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e03b      	b.n	8006e66 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Receive_IT+0x34>
 8006df8:	2302      	movs	r3, #2
 8006dfa:	e034      	b.n	8006e66 <HAL_UART_Receive_IT+0x9e>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_UART_Receive_IT+0xa8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01f      	beq.n	8006e54 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d018      	beq.n	8006e54 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e36:	627b      	str	r3, [r7, #36]	; 0x24
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e6      	bne.n	8006e22 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	461a      	mov	r2, r3
 8006e58:	68b9      	ldr	r1, [r7, #8]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 ff16 	bl	8007c8c <UART_Start_Receive_IT>
 8006e60:	4603      	mov	r3, r0
 8006e62:	e000      	b.n	8006e66 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40008000 	.word	0x40008000

08006e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0ba      	sub	sp, #232	; 0xe8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e9a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e9e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d115      	bne.n	8006edc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0320 	and.w	r3, r3, #32
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 82a6 	beq.w	800741e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
      }
      return;
 8006eda:	e2a0      	b.n	800741e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8117 	beq.w	8007114 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ef2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006ef6:	4b85      	ldr	r3, [pc, #532]	; (800710c <HAL_UART_IRQHandler+0x298>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 810a 	beq.w	8007114 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d011      	beq.n	8006f30 <HAL_UART_IRQHandler+0xbc>
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f26:	f043 0201 	orr.w	r2, r3, #1
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <HAL_UART_IRQHandler+0xec>
 8006f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d011      	beq.n	8006f90 <HAL_UART_IRQHandler+0x11c>
 8006f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f86:	f043 0202 	orr.w	r2, r3, #2
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d017      	beq.n	8006fcc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d105      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d012      	beq.n	8006ffe <HAL_UART_IRQHandler+0x18a>
 8006fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff4:	f043 0220 	orr.w	r2, r3, #32
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	f000 820c 	beq.w	8007422 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d005      	beq.n	8007056 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800704a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800704e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007052:	2b00      	cmp	r3, #0
 8007054:	d04f      	beq.n	80070f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fee2 	bl	8007e20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d141      	bne.n	80070ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007080:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007088:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007096:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800709a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1d9      	bne.n	800706a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d013      	beq.n	80070e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	4a13      	ldr	r2, [pc, #76]	; (8007110 <HAL_UART_IRQHandler+0x29c>)
 80070c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fc fccc 	bl	8003a68 <HAL_DMA_Abort_IT>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d017      	beq.n	8007106 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	e00f      	b.n	8007106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f9b0 	bl	800744c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ec:	e00b      	b.n	8007106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f9ac 	bl	800744c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f4:	e007      	b.n	8007106 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9a8 	bl	800744c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007104:	e18d      	b.n	8007422 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007106:	bf00      	nop
    return;
 8007108:	e18b      	b.n	8007422 <HAL_UART_IRQHandler+0x5ae>
 800710a:	bf00      	nop
 800710c:	04000120 	.word	0x04000120
 8007110:	08007ee7 	.word	0x08007ee7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007118:	2b01      	cmp	r3, #1
 800711a:	f040 8146 	bne.w	80073aa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 813f 	beq.w	80073aa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800712c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 8138 	beq.w	80073aa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2210      	movs	r2, #16
 8007140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	f040 80b4 	bne.w	80072ba <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800715e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 815f 	beq.w	8007426 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800716e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007172:	429a      	cmp	r2, r3
 8007174:	f080 8157 	bcs.w	8007426 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800717e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	f040 8085 	bne.w	800729e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071a0:	e853 3f00 	ldrex	r3, [r3]
 80071a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80071be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1da      	bne.n	8007194 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071f0:	f023 0301 	bic.w	r3, r3, #1
 80071f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007206:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800720a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e1      	bne.n	80071de <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800722a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800722c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	3308      	adds	r3, #8
 800723a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800723e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007240:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e3      	bne.n	800721a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007266:	e853 3f00 	ldrex	r3, [r3]
 800726a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800726c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800726e:	f023 0310 	bic.w	r3, r3, #16
 8007272:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	461a      	mov	r2, r3
 800727c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007280:	65bb      	str	r3, [r7, #88]	; 0x58
 8007282:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007288:	e841 2300 	strex	r3, r2, [r1]
 800728c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800728e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1e4      	bne.n	800725e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	4618      	mov	r0, r3
 800729a:	f7fc fba7 	bl	80039ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f8d4 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072b8:	e0b5      	b.n	8007426 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a7 	beq.w	800742a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80072dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 80a2 	beq.w	800742a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	e853 3f00 	ldrex	r3, [r3]
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
 800730a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800730e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e4      	bne.n	80072e6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	623b      	str	r3, [r7, #32]
   return(result);
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	f023 0301 	bic.w	r3, r3, #1
 8007332:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	3308      	adds	r3, #8
 800733c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007340:	633a      	str	r2, [r7, #48]	; 0x30
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e3      	bne.n	800731c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	60fb      	str	r3, [r7, #12]
   return(result);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f023 0310 	bic.w	r3, r3, #16
 800737a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	69b9      	ldr	r1, [r7, #24]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	617b      	str	r3, [r7, #20]
   return(result);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e4      	bne.n	8007366 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800739c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f85c 	bl	8007460 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073a8:	e03f      	b.n	800742a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00e      	beq.n	80073d4 <HAL_UART_IRQHandler+0x560>
 80073b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d008      	beq.n	80073d4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80073ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 ff2a 	bl	8008226 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073d2:	e02d      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00e      	beq.n	80073fe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d008      	beq.n	80073fe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01c      	beq.n	800742e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
    }
    return;
 80073fc:	e017      	b.n	800742e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d012      	beq.n	8007430 <HAL_UART_IRQHandler+0x5bc>
 800740a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fd7b 	bl	8007f12 <UART_EndTransmit_IT>
    return;
 800741c:	e008      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
      return;
 800741e:	bf00      	nop
 8007420:	e006      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007422:	bf00      	nop
 8007424:	e004      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
      return;
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <HAL_UART_IRQHandler+0x5bc>
    return;
 800742e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007430:	37e8      	adds	r7, #232	; 0xe8
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800747c:	b08a      	sub	sp, #40	; 0x28
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	689a      	ldr	r2, [r3, #8]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	431a      	orrs	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	4313      	orrs	r3, r2
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	4b9e      	ldr	r3, [pc, #632]	; (8007720 <UART_SetConfig+0x2a8>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	6812      	ldr	r2, [r2, #0]
 80074ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	68da      	ldr	r2, [r3, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a93      	ldr	r2, [pc, #588]	; (8007724 <UART_SetConfig+0x2ac>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e0:	4313      	orrs	r3, r2
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f4:	430a      	orrs	r2, r1
 80074f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a8a      	ldr	r2, [pc, #552]	; (8007728 <UART_SetConfig+0x2b0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d126      	bne.n	8007550 <UART_SetConfig+0xd8>
 8007502:	4b8a      	ldr	r3, [pc, #552]	; (800772c <UART_SetConfig+0x2b4>)
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	f003 0303 	and.w	r3, r3, #3
 800750c:	2b03      	cmp	r3, #3
 800750e:	d81b      	bhi.n	8007548 <UART_SetConfig+0xd0>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <UART_SetConfig+0xa0>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007529 	.word	0x08007529
 800751c:	08007539 	.word	0x08007539
 8007520:	08007531 	.word	0x08007531
 8007524:	08007541 	.word	0x08007541
 8007528:	2301      	movs	r3, #1
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800752e:	e0ab      	b.n	8007688 <UART_SetConfig+0x210>
 8007530:	2302      	movs	r3, #2
 8007532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007536:	e0a7      	b.n	8007688 <UART_SetConfig+0x210>
 8007538:	2304      	movs	r3, #4
 800753a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800753e:	e0a3      	b.n	8007688 <UART_SetConfig+0x210>
 8007540:	2308      	movs	r3, #8
 8007542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007546:	e09f      	b.n	8007688 <UART_SetConfig+0x210>
 8007548:	2310      	movs	r3, #16
 800754a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800754e:	e09b      	b.n	8007688 <UART_SetConfig+0x210>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a76      	ldr	r2, [pc, #472]	; (8007730 <UART_SetConfig+0x2b8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d138      	bne.n	80075cc <UART_SetConfig+0x154>
 800755a:	4b74      	ldr	r3, [pc, #464]	; (800772c <UART_SetConfig+0x2b4>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b0c      	cmp	r3, #12
 8007566:	d82d      	bhi.n	80075c4 <UART_SetConfig+0x14c>
 8007568:	a201      	add	r2, pc, #4	; (adr r2, 8007570 <UART_SetConfig+0xf8>)
 800756a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756e:	bf00      	nop
 8007570:	080075a5 	.word	0x080075a5
 8007574:	080075c5 	.word	0x080075c5
 8007578:	080075c5 	.word	0x080075c5
 800757c:	080075c5 	.word	0x080075c5
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080075c5 	.word	0x080075c5
 8007588:	080075c5 	.word	0x080075c5
 800758c:	080075c5 	.word	0x080075c5
 8007590:	080075ad 	.word	0x080075ad
 8007594:	080075c5 	.word	0x080075c5
 8007598:	080075c5 	.word	0x080075c5
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075aa:	e06d      	b.n	8007688 <UART_SetConfig+0x210>
 80075ac:	2302      	movs	r3, #2
 80075ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b2:	e069      	b.n	8007688 <UART_SetConfig+0x210>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e065      	b.n	8007688 <UART_SetConfig+0x210>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c2:	e061      	b.n	8007688 <UART_SetConfig+0x210>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ca:	e05d      	b.n	8007688 <UART_SetConfig+0x210>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a58      	ldr	r2, [pc, #352]	; (8007734 <UART_SetConfig+0x2bc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d125      	bne.n	8007622 <UART_SetConfig+0x1aa>
 80075d6:	4b55      	ldr	r3, [pc, #340]	; (800772c <UART_SetConfig+0x2b4>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075e0:	2b30      	cmp	r3, #48	; 0x30
 80075e2:	d016      	beq.n	8007612 <UART_SetConfig+0x19a>
 80075e4:	2b30      	cmp	r3, #48	; 0x30
 80075e6:	d818      	bhi.n	800761a <UART_SetConfig+0x1a2>
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d00a      	beq.n	8007602 <UART_SetConfig+0x18a>
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d814      	bhi.n	800761a <UART_SetConfig+0x1a2>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <UART_SetConfig+0x182>
 80075f4:	2b10      	cmp	r3, #16
 80075f6:	d008      	beq.n	800760a <UART_SetConfig+0x192>
 80075f8:	e00f      	b.n	800761a <UART_SetConfig+0x1a2>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007600:	e042      	b.n	8007688 <UART_SetConfig+0x210>
 8007602:	2302      	movs	r3, #2
 8007604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007608:	e03e      	b.n	8007688 <UART_SetConfig+0x210>
 800760a:	2304      	movs	r3, #4
 800760c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007610:	e03a      	b.n	8007688 <UART_SetConfig+0x210>
 8007612:	2308      	movs	r3, #8
 8007614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007618:	e036      	b.n	8007688 <UART_SetConfig+0x210>
 800761a:	2310      	movs	r3, #16
 800761c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007620:	e032      	b.n	8007688 <UART_SetConfig+0x210>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3f      	ldr	r2, [pc, #252]	; (8007724 <UART_SetConfig+0x2ac>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d12a      	bne.n	8007682 <UART_SetConfig+0x20a>
 800762c:	4b3f      	ldr	r3, [pc, #252]	; (800772c <UART_SetConfig+0x2b4>)
 800762e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007632:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800763a:	d01a      	beq.n	8007672 <UART_SetConfig+0x1fa>
 800763c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007640:	d81b      	bhi.n	800767a <UART_SetConfig+0x202>
 8007642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007646:	d00c      	beq.n	8007662 <UART_SetConfig+0x1ea>
 8007648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800764c:	d815      	bhi.n	800767a <UART_SetConfig+0x202>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <UART_SetConfig+0x1e2>
 8007652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007656:	d008      	beq.n	800766a <UART_SetConfig+0x1f2>
 8007658:	e00f      	b.n	800767a <UART_SetConfig+0x202>
 800765a:	2300      	movs	r3, #0
 800765c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007660:	e012      	b.n	8007688 <UART_SetConfig+0x210>
 8007662:	2302      	movs	r3, #2
 8007664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007668:	e00e      	b.n	8007688 <UART_SetConfig+0x210>
 800766a:	2304      	movs	r3, #4
 800766c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007670:	e00a      	b.n	8007688 <UART_SetConfig+0x210>
 8007672:	2308      	movs	r3, #8
 8007674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007678:	e006      	b.n	8007688 <UART_SetConfig+0x210>
 800767a:	2310      	movs	r3, #16
 800767c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007680:	e002      	b.n	8007688 <UART_SetConfig+0x210>
 8007682:	2310      	movs	r3, #16
 8007684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a25      	ldr	r2, [pc, #148]	; (8007724 <UART_SetConfig+0x2ac>)
 800768e:	4293      	cmp	r3, r2
 8007690:	f040 808a 	bne.w	80077a8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007694:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007698:	2b08      	cmp	r3, #8
 800769a:	d824      	bhi.n	80076e6 <UART_SetConfig+0x26e>
 800769c:	a201      	add	r2, pc, #4	; (adr r2, 80076a4 <UART_SetConfig+0x22c>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076e7 	.word	0x080076e7
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076e7 	.word	0x080076e7
 80076b4:	080076d7 	.word	0x080076d7
 80076b8:	080076e7 	.word	0x080076e7
 80076bc:	080076e7 	.word	0x080076e7
 80076c0:	080076e7 	.word	0x080076e7
 80076c4:	080076df 	.word	0x080076df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c8:	f7fd fa78 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 80076cc:	61f8      	str	r0, [r7, #28]
        break;
 80076ce:	e010      	b.n	80076f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <UART_SetConfig+0x2c0>)
 80076d2:	61fb      	str	r3, [r7, #28]
        break;
 80076d4:	e00d      	b.n	80076f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076d6:	f7fd f9d9 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80076da:	61f8      	str	r0, [r7, #28]
        break;
 80076dc:	e009      	b.n	80076f2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e2:	61fb      	str	r3, [r7, #28]
        break;
 80076e4:	e005      	b.n	80076f2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8109 	beq.w	800790c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	429a      	cmp	r2, r3
 8007708:	d305      	bcc.n	8007716 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	429a      	cmp	r2, r3
 8007714:	d912      	bls.n	800773c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800771c:	e0f6      	b.n	800790c <UART_SetConfig+0x494>
 800771e:	bf00      	nop
 8007720:	efff69f3 	.word	0xefff69f3
 8007724:	40008000 	.word	0x40008000
 8007728:	40013800 	.word	0x40013800
 800772c:	40021000 	.word	0x40021000
 8007730:	40004400 	.word	0x40004400
 8007734:	40004800 	.word	0x40004800
 8007738:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	2200      	movs	r2, #0
 8007740:	461c      	mov	r4, r3
 8007742:	4615      	mov	r5, r2
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	022b      	lsls	r3, r5, #8
 800774e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007752:	0222      	lsls	r2, r4, #8
 8007754:	68f9      	ldr	r1, [r7, #12]
 8007756:	6849      	ldr	r1, [r1, #4]
 8007758:	0849      	lsrs	r1, r1, #1
 800775a:	2000      	movs	r0, #0
 800775c:	4688      	mov	r8, r1
 800775e:	4681      	mov	r9, r0
 8007760:	eb12 0a08 	adds.w	sl, r2, r8
 8007764:	eb43 0b09 	adc.w	fp, r3, r9
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	603b      	str	r3, [r7, #0]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007776:	4650      	mov	r0, sl
 8007778:	4659      	mov	r1, fp
 800777a:	f7f9 fa95 	bl	8000ca8 <__aeabi_uldivmod>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	4613      	mov	r3, r2
 8007784:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778c:	d308      	bcc.n	80077a0 <UART_SetConfig+0x328>
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007794:	d204      	bcs.n	80077a0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	60da      	str	r2, [r3, #12]
 800779e:	e0b5      	b.n	800790c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077a6:	e0b1      	b.n	800790c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b0:	d15d      	bne.n	800786e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80077b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d827      	bhi.n	800780a <UART_SetConfig+0x392>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x348>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	0800780b 	.word	0x0800780b
 80077d0:	080077fb 	.word	0x080077fb
 80077d4:	0800780b 	.word	0x0800780b
 80077d8:	0800780b 	.word	0x0800780b
 80077dc:	0800780b 	.word	0x0800780b
 80077e0:	08007803 	.word	0x08007803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e4:	f7fd f9ea 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 80077e8:	61f8      	str	r0, [r7, #28]
        break;
 80077ea:	e014      	b.n	8007816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7fd f9fc 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 80077f0:	61f8      	str	r0, [r7, #28]
        break;
 80077f2:	e010      	b.n	8007816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f4:	4b4c      	ldr	r3, [pc, #304]	; (8007928 <UART_SetConfig+0x4b0>)
 80077f6:	61fb      	str	r3, [r7, #28]
        break;
 80077f8:	e00d      	b.n	8007816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fd f947 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80077fe:	61f8      	str	r0, [r7, #28]
        break;
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	61fb      	str	r3, [r7, #28]
        break;
 8007808:	e005      	b.n	8007816 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007814:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d077      	beq.n	800790c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	005a      	lsls	r2, r3, #1
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	085b      	lsrs	r3, r3, #1
 8007826:	441a      	add	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007830:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	2b0f      	cmp	r3, #15
 8007836:	d916      	bls.n	8007866 <UART_SetConfig+0x3ee>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783e:	d212      	bcs.n	8007866 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f023 030f 	bic.w	r3, r3, #15
 8007848:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	085b      	lsrs	r3, r3, #1
 800784e:	b29b      	uxth	r3, r3
 8007850:	f003 0307 	and.w	r3, r3, #7
 8007854:	b29a      	uxth	r2, r3
 8007856:	8afb      	ldrh	r3, [r7, #22]
 8007858:	4313      	orrs	r3, r2
 800785a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	8afa      	ldrh	r2, [r7, #22]
 8007862:	60da      	str	r2, [r3, #12]
 8007864:	e052      	b.n	800790c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800786c:	e04e      	b.n	800790c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800786e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007872:	2b08      	cmp	r3, #8
 8007874:	d827      	bhi.n	80078c6 <UART_SetConfig+0x44e>
 8007876:	a201      	add	r2, pc, #4	; (adr r2, 800787c <UART_SetConfig+0x404>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	080078a1 	.word	0x080078a1
 8007880:	080078a9 	.word	0x080078a9
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078c7 	.word	0x080078c7
 800788c:	080078b7 	.word	0x080078b7
 8007890:	080078c7 	.word	0x080078c7
 8007894:	080078c7 	.word	0x080078c7
 8007898:	080078c7 	.word	0x080078c7
 800789c:	080078bf 	.word	0x080078bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078a0:	f7fd f98c 	bl	8004bbc <HAL_RCC_GetPCLK1Freq>
 80078a4:	61f8      	str	r0, [r7, #28]
        break;
 80078a6:	e014      	b.n	80078d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078a8:	f7fd f99e 	bl	8004be8 <HAL_RCC_GetPCLK2Freq>
 80078ac:	61f8      	str	r0, [r7, #28]
        break;
 80078ae:	e010      	b.n	80078d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b0:	4b1d      	ldr	r3, [pc, #116]	; (8007928 <UART_SetConfig+0x4b0>)
 80078b2:	61fb      	str	r3, [r7, #28]
        break;
 80078b4:	e00d      	b.n	80078d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078b6:	f7fd f8e9 	bl	8004a8c <HAL_RCC_GetSysClockFreq>
 80078ba:	61f8      	str	r0, [r7, #28]
        break;
 80078bc:	e009      	b.n	80078d2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078c2:	61fb      	str	r3, [r7, #28]
        break;
 80078c4:	e005      	b.n	80078d2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80078d0:	bf00      	nop
    }

    if (pclk != 0U)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d019      	beq.n	800790c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	085a      	lsrs	r2, r3, #1
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b0f      	cmp	r3, #15
 80078f0:	d909      	bls.n	8007906 <UART_SetConfig+0x48e>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f8:	d205      	bcs.n	8007906 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	60da      	str	r2, [r3, #12]
 8007904:	e002      	b.n	800790c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800791c:	4618      	mov	r0, r3
 800791e:	3728      	adds	r7, #40	; 0x28
 8007920:	46bd      	mov	sp, r7
 8007922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007926:	bf00      	nop
 8007928:	00f42400 	.word	0x00f42400

0800792c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	f003 0308 	and.w	r3, r3, #8
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2a:	d10a      	bne.n	8007a42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a80:	f7fb fdba 	bl	80035f8 <HAL_GetTick>
 8007a84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b08      	cmp	r3, #8
 8007a92:	d10e      	bne.n	8007ab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f82d 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d001      	beq.n	8007ab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e023      	b.n	8007afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d10e      	bne.n	8007ade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f817 	bl	8007b02 <UART_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d001      	beq.n	8007ade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e00d      	b.n	8007afa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b09c      	sub	sp, #112	; 0x70
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	60f8      	str	r0, [r7, #12]
 8007b0a:	60b9      	str	r1, [r7, #8]
 8007b0c:	603b      	str	r3, [r7, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b12:	e0a5      	b.n	8007c60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1a:	f000 80a1 	beq.w	8007c60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1e:	f7fb fd6b 	bl	80035f8 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d302      	bcc.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d13e      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b48:	667b      	str	r3, [r7, #100]	; 0x64
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e6      	bne.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b70:	e853 3f00 	ldrex	r3, [r3]
 8007b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b86:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e5      	bne.n	8007b66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e067      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d04f      	beq.n	8007c60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bce:	d147      	bne.n	8007c60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3308      	adds	r3, #8
 8007c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	3308      	adds	r3, #8
 8007c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c2c:	623a      	str	r2, [r7, #32]
 8007c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	69f9      	ldr	r1, [r7, #28]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e5      	bne.n	8007c0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e010      	b.n	8007c82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	69da      	ldr	r2, [r3, #28]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	461a      	mov	r2, r3
 8007c78:	79fb      	ldrb	r3, [r7, #7]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	f43f af4a 	beq.w	8007b14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3770      	adds	r7, #112	; 0x70
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b097      	sub	sp, #92	; 0x5c
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	88fa      	ldrh	r2, [r7, #6]
 8007ca4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	88fa      	ldrh	r2, [r7, #6]
 8007cac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbe:	d10e      	bne.n	8007cde <UART_Start_Receive_IT+0x52>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <UART_Start_Receive_IT+0x48>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cd2:	e02d      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	22ff      	movs	r2, #255	; 0xff
 8007cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cdc:	e028      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10d      	bne.n	8007d02 <UART_Start_Receive_IT+0x76>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <UART_Start_Receive_IT+0x6c>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22ff      	movs	r2, #255	; 0xff
 8007cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007cf6:	e01b      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	227f      	movs	r2, #127	; 0x7f
 8007cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d00:	e016      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d0a:	d10d      	bne.n	8007d28 <UART_Start_Receive_IT+0x9c>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <UART_Start_Receive_IT+0x92>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	227f      	movs	r2, #127	; 0x7f
 8007d18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d1c:	e008      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	223f      	movs	r2, #63	; 0x3f
 8007d22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007d26:	e003      	b.n	8007d30 <UART_Start_Receive_IT+0xa4>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2222      	movs	r2, #34	; 0x22
 8007d3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	f043 0301 	orr.w	r3, r3, #1
 8007d54:	657b      	str	r3, [r7, #84]	; 0x54
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d66:	e841 2300 	strex	r3, r2, [r1]
 8007d6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1e5      	bne.n	8007d3e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d107      	bne.n	8007d8c <UART_Start_Receive_IT+0x100>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4a24      	ldr	r2, [pc, #144]	; (8007e18 <UART_Start_Receive_IT+0x18c>)
 8007d88:	665a      	str	r2, [r3, #100]	; 0x64
 8007d8a:	e002      	b.n	8007d92 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4a23      	ldr	r2, [pc, #140]	; (8007e1c <UART_Start_Receive_IT+0x190>)
 8007d90:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d019      	beq.n	8007dd6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007dc8:	e841 2300 	strex	r3, r2, [r1]
 8007dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1e6      	bne.n	8007da2 <UART_Start_Receive_IT+0x116>
 8007dd4:	e018      	b.n	8007e08 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f043 0320 	orr.w	r3, r3, #32
 8007dea:	653b      	str	r3, [r7, #80]	; 0x50
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	461a      	mov	r2, r3
 8007df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df4:	623b      	str	r3, [r7, #32]
 8007df6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	69f9      	ldr	r1, [r7, #28]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e6      	bne.n	8007dd6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	375c      	adds	r7, #92	; 0x5c
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	080080c7 	.word	0x080080c7
 8007e1c:	08007f67 	.word	0x08007f67

08007e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b095      	sub	sp, #84	; 0x54
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e46:	643b      	str	r3, [r7, #64]	; 0x40
 8007e48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e6      	bne.n	8007e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3308      	adds	r3, #8
 8007e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d118      	bne.n	8007ec8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	e853 3f00 	ldrex	r3, [r3]
 8007ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6979      	ldr	r1, [r7, #20]
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e6      	bne.n	8007e96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007eda:	bf00      	nop
 8007edc:	3754      	adds	r7, #84	; 0x54
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b084      	sub	sp, #16
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff faa1 	bl	800744c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f0a:	bf00      	nop
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b088      	sub	sp, #32
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	461a      	mov	r2, r3
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6979      	ldr	r1, [r7, #20]
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	613b      	str	r3, [r7, #16]
   return(result);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e6      	bne.n	8007f1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7ff fa6d 	bl	8007438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	bf00      	nop
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b096      	sub	sp, #88	; 0x58
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f7c:	2b22      	cmp	r3, #34	; 0x22
 8007f7e:	f040 8094 	bne.w	80080aa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f90:	b2d9      	uxtb	r1, r3
 8007f92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9c:	400a      	ands	r2, r1
 8007f9e:	b2d2      	uxtb	r2, r2
 8007fa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d179      	bne.n	80080be <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd2:	e853 3f00 	ldrex	r3, [r3]
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ff0:	e841 2300 	strex	r3, r2, [r1]
 8007ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e6      	bne.n	8007fca <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	e853 3f00 	ldrex	r3, [r3]
 800800a:	623b      	str	r3, [r7, #32]
   return(result);
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800801c:	633a      	str	r2, [r7, #48]	; 0x30
 800801e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008024:	e841 2300 	strex	r3, r2, [r1]
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e5      	bne.n	8007ffc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2220      	movs	r2, #32
 8008034:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008040:	2b01      	cmp	r3, #1
 8008042:	d12e      	bne.n	80080a2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	60fb      	str	r3, [r7, #12]
   return(result);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0310 	bic.w	r3, r3, #16
 800805e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e6      	bne.n	800804a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b10      	cmp	r3, #16
 8008088:	d103      	bne.n	8008092 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2210      	movs	r2, #16
 8008090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff f9e0 	bl	8007460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080a0:	e00d      	b.n	80080be <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7f9 fac4 	bl	8001630 <HAL_UART_RxCpltCallback>
}
 80080a8:	e009      	b.n	80080be <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	8b1b      	ldrh	r3, [r3, #24]
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0208 	orr.w	r2, r2, #8
 80080ba:	b292      	uxth	r2, r2
 80080bc:	831a      	strh	r2, [r3, #24]
}
 80080be:	bf00      	nop
 80080c0:	3758      	adds	r7, #88	; 0x58
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b096      	sub	sp, #88	; 0x58
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080dc:	2b22      	cmp	r3, #34	; 0x22
 80080de:	f040 8094 	bne.w	800820a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80080f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080f6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080fa:	4013      	ands	r3, r2
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008100:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008112:	b29b      	uxth	r3, r3
 8008114:	3b01      	subs	r3, #1
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008124:	b29b      	uxth	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d179      	bne.n	800821e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800813e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008148:	643b      	str	r3, [r7, #64]	; 0x40
 800814a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800814e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	61fb      	str	r3, [r7, #28]
   return(result);
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	f023 0301 	bic.w	r3, r3, #1
 8008172:	64bb      	str	r3, [r7, #72]	; 0x48
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3308      	adds	r3, #8
 800817a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800817c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800817e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e5      	bne.n	800815c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2220      	movs	r2, #32
 8008194:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d12e      	bne.n	8008202 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f023 0310 	bic.w	r3, r3, #16
 80081be:	647b      	str	r3, [r7, #68]	; 0x44
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6979      	ldr	r1, [r7, #20]
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	613b      	str	r3, [r7, #16]
   return(result);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e6      	bne.n	80081aa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d103      	bne.n	80081f2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2210      	movs	r2, #16
 80081f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff f930 	bl	8007460 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008200:	e00d      	b.n	800821e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f9 fa14 	bl	8001630 <HAL_UART_RxCpltCallback>
}
 8008208:	e009      	b.n	800821e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	8b1b      	ldrh	r3, [r3, #24]
 8008210:	b29a      	uxth	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0208 	orr.w	r2, r2, #8
 800821a:	b292      	uxth	r2, r2
 800821c:	831a      	strh	r2, [r3, #24]
}
 800821e:	bf00      	nop
 8008220:	3758      	adds	r7, #88	; 0x58
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	807b      	strh	r3, [r7, #2]
 8008246:	4613      	mov	r3, r2
 8008248:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 800824a:	787a      	ldrb	r2, [r7, #1]
 800824c:	887b      	ldrh	r3, [r7, #2]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fb fe73 	bl	8003f3c <HAL_GPIO_WritePin>
}
 8008256:	bf00      	nop
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b088      	sub	sp, #32
 8008262:	af02      	add	r7, sp, #8
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	461a      	mov	r2, r3
 800826a:	460b      	mov	r3, r1
 800826c:	72fb      	strb	r3, [r7, #11]
 800826e:	4613      	mov	r3, r2
 8008270:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8008272:	893b      	ldrh	r3, [r7, #8]
 8008274:	2200      	movs	r2, #0
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ffde 	bl	800823a <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 800827e:	200a      	movs	r0, #10
 8008280:	f000 f8aa 	bl	80083d8 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8008284:	f107 0217 	add.w	r2, r7, #23
 8008288:	f107 010b 	add.w	r1, r7, #11
 800828c:	230a      	movs	r3, #10
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	2301      	movs	r3, #1
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7fd f8fd 	bl	8005492 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8008298:	200a      	movs	r0, #10
 800829a:	f000 f89d 	bl	80083d8 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 800829e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80082a2:	893b      	ldrh	r3, [r7, #8]
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ffc7 	bl	800823a <setCSLine>

  return data;
 80082ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b08c      	sub	sp, #48	; 0x30
 80082ba:	af02      	add	r7, sp, #8
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	4611      	mov	r1, r2
 80082c2:	461a      	mov	r2, r3
 80082c4:	460b      	mov	r3, r1
 80082c6:	80fb      	strh	r3, [r7, #6]
 80082c8:	4613      	mov	r3, r2
 80082ca:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	2300      	movs	r3, #0
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4613      	mov	r3, r2
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	2100      	movs	r1, #0
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f7ff ffbe 	bl	800825e <spiWriteRead>
 80082e2:	4603      	mov	r3, r0
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80082ea:	200a      	movs	r0, #10
 80082ec:	f000 f874 	bl	80083d8 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 80082f0:	88fa      	ldrh	r2, [r7, #6]
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	9301      	str	r3, [sp, #4]
 80082f6:	2301      	movs	r3, #1
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	2100      	movs	r1, #0
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff ffac 	bl	800825e <spiWriteRead>
 8008306:	4603      	mov	r3, r0
 8008308:	b29a      	uxth	r2, r3
 800830a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800830c:	4313      	orrs	r3, r2
 800830e:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8008310:	2300      	movs	r3, #0
 8008312:	623b      	str	r3, [r7, #32]
 8008314:	e010      	b.n	8008338 <getPositionSPI+0x82>
 8008316:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	fa42 f303 	asr.w	r3, r2, r3
 800831e:	b2db      	uxtb	r3, r3
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	b2d9      	uxtb	r1, r3
 8008326:	f107 0210 	add.w	r2, r7, #16
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	4413      	add	r3, r2
 800832e:	460a      	mov	r2, r1
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	6a3b      	ldr	r3, [r7, #32]
 8008334:	3301      	adds	r3, #1
 8008336:	623b      	str	r3, [r7, #32]
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	ddeb      	ble.n	8008316 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 800833e:	7ffb      	ldrb	r3, [r7, #31]
 8008340:	4619      	mov	r1, r3
 8008342:	7f7a      	ldrb	r2, [r7, #29]
 8008344:	7efb      	ldrb	r3, [r7, #27]
 8008346:	4053      	eors	r3, r2
 8008348:	b2da      	uxtb	r2, r3
 800834a:	7e7b      	ldrb	r3, [r7, #25]
 800834c:	4053      	eors	r3, r2
 800834e:	b2da      	uxtb	r2, r3
 8008350:	7dfb      	ldrb	r3, [r7, #23]
 8008352:	4053      	eors	r3, r2
 8008354:	b2da      	uxtb	r2, r3
 8008356:	7d7b      	ldrb	r3, [r7, #21]
 8008358:	4053      	eors	r3, r2
 800835a:	b2da      	uxtb	r2, r3
 800835c:	7cfb      	ldrb	r3, [r7, #19]
 800835e:	4053      	eors	r3, r2
 8008360:	b2da      	uxtb	r2, r3
 8008362:	7c7b      	ldrb	r3, [r7, #17]
 8008364:	429a      	cmp	r2, r3
 8008366:	bf0c      	ite	eq
 8008368:	2301      	moveq	r3, #1
 800836a:	2300      	movne	r3, #0
 800836c:	b2db      	uxtb	r3, r3
 800836e:	4299      	cmp	r1, r3
 8008370:	d11e      	bne.n	80083b0 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8008372:	7fbb      	ldrb	r3, [r7, #30]
 8008374:	4619      	mov	r1, r3
 8008376:	7f3a      	ldrb	r2, [r7, #28]
 8008378:	7ebb      	ldrb	r3, [r7, #26]
 800837a:	4053      	eors	r3, r2
 800837c:	b2da      	uxtb	r2, r3
 800837e:	7e3b      	ldrb	r3, [r7, #24]
 8008380:	4053      	eors	r3, r2
 8008382:	b2da      	uxtb	r2, r3
 8008384:	7dbb      	ldrb	r3, [r7, #22]
 8008386:	4053      	eors	r3, r2
 8008388:	b2da      	uxtb	r2, r3
 800838a:	7d3b      	ldrb	r3, [r7, #20]
 800838c:	4053      	eors	r3, r2
 800838e:	b2da      	uxtb	r2, r3
 8008390:	7cbb      	ldrb	r3, [r7, #18]
 8008392:	4053      	eors	r3, r2
 8008394:	b2da      	uxtb	r2, r3
 8008396:	7c3b      	ldrb	r3, [r7, #16]
 8008398:	429a      	cmp	r2, r3
 800839a:	bf0c      	ite	eq
 800839c:	2301      	moveq	r3, #1
 800839e:	2300      	movne	r3, #0
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	4299      	cmp	r1, r3
 80083a4:	d104      	bne.n	80083b0 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 80083a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80083ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80083ae:	e002      	b.n	80083b6 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 80083b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 80083b6:	797b      	ldrb	r3, [r7, #5]
 80083b8:	2b0c      	cmp	r3, #12
 80083ba:	d107      	bne.n	80083cc <getPositionSPI+0x116>
 80083bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d002      	beq.n	80083cc <getPositionSPI+0x116>
 80083c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083c8:	089b      	lsrs	r3, r3, #2
 80083ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 80083cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80083e2:	4b09      	ldr	r3, [pc, #36]	; (8008408 <delay_us_AMT22+0x30>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80083ea:	bf00      	nop
 80083ec:	4b06      	ldr	r3, [pc, #24]	; (8008408 <delay_us_AMT22+0x30>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3f9      	bcc.n	80083ec <delay_us_AMT22+0x14>
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000684 	.word	0x20000684

0800840c <_Znaj>:
 800840c:	f000 b800 	b.w	8008410 <_Znwj>

08008410 <_Znwj>:
 8008410:	2801      	cmp	r0, #1
 8008412:	bf38      	it	cc
 8008414:	2001      	movcc	r0, #1
 8008416:	b510      	push	{r4, lr}
 8008418:	4604      	mov	r4, r0
 800841a:	4620      	mov	r0, r4
 800841c:	f000 f844 	bl	80084a8 <malloc>
 8008420:	b930      	cbnz	r0, 8008430 <_Znwj+0x20>
 8008422:	f000 f807 	bl	8008434 <_ZSt15get_new_handlerv>
 8008426:	b908      	cbnz	r0, 800842c <_Znwj+0x1c>
 8008428:	f000 f80c 	bl	8008444 <abort>
 800842c:	4780      	blx	r0
 800842e:	e7f4      	b.n	800841a <_Znwj+0xa>
 8008430:	bd10      	pop	{r4, pc}
	...

08008434 <_ZSt15get_new_handlerv>:
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <_ZSt15get_new_handlerv+0xc>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f3bf 8f5b 	dmb	ish
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	200007ec 	.word	0x200007ec

08008444 <abort>:
 8008444:	b508      	push	{r3, lr}
 8008446:	2006      	movs	r0, #6
 8008448:	f001 f878 	bl	800953c <raise>
 800844c:	2001      	movs	r0, #1
 800844e:	f7f9 fbe1 	bl	8001c14 <_exit>
	...

08008454 <__errno>:
 8008454:	4b01      	ldr	r3, [pc, #4]	; (800845c <__errno+0x8>)
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	2000003c 	.word	0x2000003c

08008460 <__libc_init_array>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4d0d      	ldr	r5, [pc, #52]	; (8008498 <__libc_init_array+0x38>)
 8008464:	4c0d      	ldr	r4, [pc, #52]	; (800849c <__libc_init_array+0x3c>)
 8008466:	1b64      	subs	r4, r4, r5
 8008468:	10a4      	asrs	r4, r4, #2
 800846a:	2600      	movs	r6, #0
 800846c:	42a6      	cmp	r6, r4
 800846e:	d109      	bne.n	8008484 <__libc_init_array+0x24>
 8008470:	4d0b      	ldr	r5, [pc, #44]	; (80084a0 <__libc_init_array+0x40>)
 8008472:	4c0c      	ldr	r4, [pc, #48]	; (80084a4 <__libc_init_array+0x44>)
 8008474:	f005 fba6 	bl	800dbc4 <_init>
 8008478:	1b64      	subs	r4, r4, r5
 800847a:	10a4      	asrs	r4, r4, #2
 800847c:	2600      	movs	r6, #0
 800847e:	42a6      	cmp	r6, r4
 8008480:	d105      	bne.n	800848e <__libc_init_array+0x2e>
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	f855 3b04 	ldr.w	r3, [r5], #4
 8008488:	4798      	blx	r3
 800848a:	3601      	adds	r6, #1
 800848c:	e7ee      	b.n	800846c <__libc_init_array+0xc>
 800848e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008492:	4798      	blx	r3
 8008494:	3601      	adds	r6, #1
 8008496:	e7f2      	b.n	800847e <__libc_init_array+0x1e>
 8008498:	0800e874 	.word	0x0800e874
 800849c:	0800e874 	.word	0x0800e874
 80084a0:	0800e874 	.word	0x0800e874
 80084a4:	0800e87c 	.word	0x0800e87c

080084a8 <malloc>:
 80084a8:	4b02      	ldr	r3, [pc, #8]	; (80084b4 <malloc+0xc>)
 80084aa:	4601      	mov	r1, r0
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	f000 b877 	b.w	80085a0 <_malloc_r>
 80084b2:	bf00      	nop
 80084b4:	2000003c 	.word	0x2000003c

080084b8 <memset>:
 80084b8:	4402      	add	r2, r0
 80084ba:	4603      	mov	r3, r0
 80084bc:	4293      	cmp	r3, r2
 80084be:	d100      	bne.n	80084c2 <memset+0xa>
 80084c0:	4770      	bx	lr
 80084c2:	f803 1b01 	strb.w	r1, [r3], #1
 80084c6:	e7f9      	b.n	80084bc <memset+0x4>

080084c8 <_free_r>:
 80084c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d044      	beq.n	8008558 <_free_r+0x90>
 80084ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084d2:	9001      	str	r0, [sp, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f1a1 0404 	sub.w	r4, r1, #4
 80084da:	bfb8      	it	lt
 80084dc:	18e4      	addlt	r4, r4, r3
 80084de:	f003 fdcb 	bl	800c078 <__malloc_lock>
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <_free_r+0x94>)
 80084e4:	9801      	ldr	r0, [sp, #4]
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	b933      	cbnz	r3, 80084f8 <_free_r+0x30>
 80084ea:	6063      	str	r3, [r4, #4]
 80084ec:	6014      	str	r4, [r2, #0]
 80084ee:	b003      	add	sp, #12
 80084f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084f4:	f003 bdc6 	b.w	800c084 <__malloc_unlock>
 80084f8:	42a3      	cmp	r3, r4
 80084fa:	d908      	bls.n	800850e <_free_r+0x46>
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	1961      	adds	r1, r4, r5
 8008500:	428b      	cmp	r3, r1
 8008502:	bf01      	itttt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	e7ed      	b.n	80084ea <_free_r+0x22>
 800850e:	461a      	mov	r2, r3
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	b10b      	cbz	r3, 8008518 <_free_r+0x50>
 8008514:	42a3      	cmp	r3, r4
 8008516:	d9fa      	bls.n	800850e <_free_r+0x46>
 8008518:	6811      	ldr	r1, [r2, #0]
 800851a:	1855      	adds	r5, r2, r1
 800851c:	42a5      	cmp	r5, r4
 800851e:	d10b      	bne.n	8008538 <_free_r+0x70>
 8008520:	6824      	ldr	r4, [r4, #0]
 8008522:	4421      	add	r1, r4
 8008524:	1854      	adds	r4, r2, r1
 8008526:	42a3      	cmp	r3, r4
 8008528:	6011      	str	r1, [r2, #0]
 800852a:	d1e0      	bne.n	80084ee <_free_r+0x26>
 800852c:	681c      	ldr	r4, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	6053      	str	r3, [r2, #4]
 8008532:	4421      	add	r1, r4
 8008534:	6011      	str	r1, [r2, #0]
 8008536:	e7da      	b.n	80084ee <_free_r+0x26>
 8008538:	d902      	bls.n	8008540 <_free_r+0x78>
 800853a:	230c      	movs	r3, #12
 800853c:	6003      	str	r3, [r0, #0]
 800853e:	e7d6      	b.n	80084ee <_free_r+0x26>
 8008540:	6825      	ldr	r5, [r4, #0]
 8008542:	1961      	adds	r1, r4, r5
 8008544:	428b      	cmp	r3, r1
 8008546:	bf04      	itt	eq
 8008548:	6819      	ldreq	r1, [r3, #0]
 800854a:	685b      	ldreq	r3, [r3, #4]
 800854c:	6063      	str	r3, [r4, #4]
 800854e:	bf04      	itt	eq
 8008550:	1949      	addeq	r1, r1, r5
 8008552:	6021      	streq	r1, [r4, #0]
 8008554:	6054      	str	r4, [r2, #4]
 8008556:	e7ca      	b.n	80084ee <_free_r+0x26>
 8008558:	b003      	add	sp, #12
 800855a:	bd30      	pop	{r4, r5, pc}
 800855c:	200007f0 	.word	0x200007f0

08008560 <sbrk_aligned>:
 8008560:	b570      	push	{r4, r5, r6, lr}
 8008562:	4e0e      	ldr	r6, [pc, #56]	; (800859c <sbrk_aligned+0x3c>)
 8008564:	460c      	mov	r4, r1
 8008566:	6831      	ldr	r1, [r6, #0]
 8008568:	4605      	mov	r5, r0
 800856a:	b911      	cbnz	r1, 8008572 <sbrk_aligned+0x12>
 800856c:	f000 ffa8 	bl	80094c0 <_sbrk_r>
 8008570:	6030      	str	r0, [r6, #0]
 8008572:	4621      	mov	r1, r4
 8008574:	4628      	mov	r0, r5
 8008576:	f000 ffa3 	bl	80094c0 <_sbrk_r>
 800857a:	1c43      	adds	r3, r0, #1
 800857c:	d00a      	beq.n	8008594 <sbrk_aligned+0x34>
 800857e:	1cc4      	adds	r4, r0, #3
 8008580:	f024 0403 	bic.w	r4, r4, #3
 8008584:	42a0      	cmp	r0, r4
 8008586:	d007      	beq.n	8008598 <sbrk_aligned+0x38>
 8008588:	1a21      	subs	r1, r4, r0
 800858a:	4628      	mov	r0, r5
 800858c:	f000 ff98 	bl	80094c0 <_sbrk_r>
 8008590:	3001      	adds	r0, #1
 8008592:	d101      	bne.n	8008598 <sbrk_aligned+0x38>
 8008594:	f04f 34ff 	mov.w	r4, #4294967295
 8008598:	4620      	mov	r0, r4
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	200007f4 	.word	0x200007f4

080085a0 <_malloc_r>:
 80085a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a4:	1ccd      	adds	r5, r1, #3
 80085a6:	f025 0503 	bic.w	r5, r5, #3
 80085aa:	3508      	adds	r5, #8
 80085ac:	2d0c      	cmp	r5, #12
 80085ae:	bf38      	it	cc
 80085b0:	250c      	movcc	r5, #12
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	4607      	mov	r7, r0
 80085b6:	db01      	blt.n	80085bc <_malloc_r+0x1c>
 80085b8:	42a9      	cmp	r1, r5
 80085ba:	d905      	bls.n	80085c8 <_malloc_r+0x28>
 80085bc:	230c      	movs	r3, #12
 80085be:	603b      	str	r3, [r7, #0]
 80085c0:	2600      	movs	r6, #0
 80085c2:	4630      	mov	r0, r6
 80085c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085c8:	4e2e      	ldr	r6, [pc, #184]	; (8008684 <_malloc_r+0xe4>)
 80085ca:	f003 fd55 	bl	800c078 <__malloc_lock>
 80085ce:	6833      	ldr	r3, [r6, #0]
 80085d0:	461c      	mov	r4, r3
 80085d2:	bb34      	cbnz	r4, 8008622 <_malloc_r+0x82>
 80085d4:	4629      	mov	r1, r5
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7ff ffc2 	bl	8008560 <sbrk_aligned>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	4604      	mov	r4, r0
 80085e0:	d14d      	bne.n	800867e <_malloc_r+0xde>
 80085e2:	6834      	ldr	r4, [r6, #0]
 80085e4:	4626      	mov	r6, r4
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	d140      	bne.n	800866c <_malloc_r+0xcc>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	4631      	mov	r1, r6
 80085ee:	4638      	mov	r0, r7
 80085f0:	eb04 0803 	add.w	r8, r4, r3
 80085f4:	f000 ff64 	bl	80094c0 <_sbrk_r>
 80085f8:	4580      	cmp	r8, r0
 80085fa:	d13a      	bne.n	8008672 <_malloc_r+0xd2>
 80085fc:	6821      	ldr	r1, [r4, #0]
 80085fe:	3503      	adds	r5, #3
 8008600:	1a6d      	subs	r5, r5, r1
 8008602:	f025 0503 	bic.w	r5, r5, #3
 8008606:	3508      	adds	r5, #8
 8008608:	2d0c      	cmp	r5, #12
 800860a:	bf38      	it	cc
 800860c:	250c      	movcc	r5, #12
 800860e:	4629      	mov	r1, r5
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff ffa5 	bl	8008560 <sbrk_aligned>
 8008616:	3001      	adds	r0, #1
 8008618:	d02b      	beq.n	8008672 <_malloc_r+0xd2>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	442b      	add	r3, r5
 800861e:	6023      	str	r3, [r4, #0]
 8008620:	e00e      	b.n	8008640 <_malloc_r+0xa0>
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	1b52      	subs	r2, r2, r5
 8008626:	d41e      	bmi.n	8008666 <_malloc_r+0xc6>
 8008628:	2a0b      	cmp	r2, #11
 800862a:	d916      	bls.n	800865a <_malloc_r+0xba>
 800862c:	1961      	adds	r1, r4, r5
 800862e:	42a3      	cmp	r3, r4
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	bf18      	it	ne
 8008634:	6059      	strne	r1, [r3, #4]
 8008636:	6863      	ldr	r3, [r4, #4]
 8008638:	bf08      	it	eq
 800863a:	6031      	streq	r1, [r6, #0]
 800863c:	5162      	str	r2, [r4, r5]
 800863e:	604b      	str	r3, [r1, #4]
 8008640:	4638      	mov	r0, r7
 8008642:	f104 060b 	add.w	r6, r4, #11
 8008646:	f003 fd1d 	bl	800c084 <__malloc_unlock>
 800864a:	f026 0607 	bic.w	r6, r6, #7
 800864e:	1d23      	adds	r3, r4, #4
 8008650:	1af2      	subs	r2, r6, r3
 8008652:	d0b6      	beq.n	80085c2 <_malloc_r+0x22>
 8008654:	1b9b      	subs	r3, r3, r6
 8008656:	50a3      	str	r3, [r4, r2]
 8008658:	e7b3      	b.n	80085c2 <_malloc_r+0x22>
 800865a:	6862      	ldr	r2, [r4, #4]
 800865c:	42a3      	cmp	r3, r4
 800865e:	bf0c      	ite	eq
 8008660:	6032      	streq	r2, [r6, #0]
 8008662:	605a      	strne	r2, [r3, #4]
 8008664:	e7ec      	b.n	8008640 <_malloc_r+0xa0>
 8008666:	4623      	mov	r3, r4
 8008668:	6864      	ldr	r4, [r4, #4]
 800866a:	e7b2      	b.n	80085d2 <_malloc_r+0x32>
 800866c:	4634      	mov	r4, r6
 800866e:	6876      	ldr	r6, [r6, #4]
 8008670:	e7b9      	b.n	80085e6 <_malloc_r+0x46>
 8008672:	230c      	movs	r3, #12
 8008674:	603b      	str	r3, [r7, #0]
 8008676:	4638      	mov	r0, r7
 8008678:	f003 fd04 	bl	800c084 <__malloc_unlock>
 800867c:	e7a1      	b.n	80085c2 <_malloc_r+0x22>
 800867e:	6025      	str	r5, [r4, #0]
 8008680:	e7de      	b.n	8008640 <_malloc_r+0xa0>
 8008682:	bf00      	nop
 8008684:	200007f0 	.word	0x200007f0

08008688 <__cvt>:
 8008688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	ec55 4b10 	vmov	r4, r5, d0
 8008690:	2d00      	cmp	r5, #0
 8008692:	460e      	mov	r6, r1
 8008694:	4619      	mov	r1, r3
 8008696:	462b      	mov	r3, r5
 8008698:	bfbb      	ittet	lt
 800869a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800869e:	461d      	movlt	r5, r3
 80086a0:	2300      	movge	r3, #0
 80086a2:	232d      	movlt	r3, #45	; 0x2d
 80086a4:	700b      	strb	r3, [r1, #0]
 80086a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086ac:	4691      	mov	r9, r2
 80086ae:	f023 0820 	bic.w	r8, r3, #32
 80086b2:	bfbc      	itt	lt
 80086b4:	4622      	movlt	r2, r4
 80086b6:	4614      	movlt	r4, r2
 80086b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086bc:	d005      	beq.n	80086ca <__cvt+0x42>
 80086be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80086c2:	d100      	bne.n	80086c6 <__cvt+0x3e>
 80086c4:	3601      	adds	r6, #1
 80086c6:	2102      	movs	r1, #2
 80086c8:	e000      	b.n	80086cc <__cvt+0x44>
 80086ca:	2103      	movs	r1, #3
 80086cc:	ab03      	add	r3, sp, #12
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	ab02      	add	r3, sp, #8
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	ec45 4b10 	vmov	d0, r4, r5
 80086d8:	4653      	mov	r3, sl
 80086da:	4632      	mov	r2, r6
 80086dc:	f002 f940 	bl	800a960 <_dtoa_r>
 80086e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80086e4:	4607      	mov	r7, r0
 80086e6:	d102      	bne.n	80086ee <__cvt+0x66>
 80086e8:	f019 0f01 	tst.w	r9, #1
 80086ec:	d022      	beq.n	8008734 <__cvt+0xac>
 80086ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80086f2:	eb07 0906 	add.w	r9, r7, r6
 80086f6:	d110      	bne.n	800871a <__cvt+0x92>
 80086f8:	783b      	ldrb	r3, [r7, #0]
 80086fa:	2b30      	cmp	r3, #48	; 0x30
 80086fc:	d10a      	bne.n	8008714 <__cvt+0x8c>
 80086fe:	2200      	movs	r2, #0
 8008700:	2300      	movs	r3, #0
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	f7f8 f9ef 	bl	8000ae8 <__aeabi_dcmpeq>
 800870a:	b918      	cbnz	r0, 8008714 <__cvt+0x8c>
 800870c:	f1c6 0601 	rsb	r6, r6, #1
 8008710:	f8ca 6000 	str.w	r6, [sl]
 8008714:	f8da 3000 	ldr.w	r3, [sl]
 8008718:	4499      	add	r9, r3
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7f8 f9e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8008726:	b108      	cbz	r0, 800872c <__cvt+0xa4>
 8008728:	f8cd 900c 	str.w	r9, [sp, #12]
 800872c:	2230      	movs	r2, #48	; 0x30
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	454b      	cmp	r3, r9
 8008732:	d307      	bcc.n	8008744 <__cvt+0xbc>
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008738:	1bdb      	subs	r3, r3, r7
 800873a:	4638      	mov	r0, r7
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	b004      	add	sp, #16
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	1c59      	adds	r1, r3, #1
 8008746:	9103      	str	r1, [sp, #12]
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e7f0      	b.n	800872e <__cvt+0xa6>

0800874c <__exponent>:
 800874c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800874e:	4603      	mov	r3, r0
 8008750:	2900      	cmp	r1, #0
 8008752:	bfb8      	it	lt
 8008754:	4249      	neglt	r1, r1
 8008756:	f803 2b02 	strb.w	r2, [r3], #2
 800875a:	bfb4      	ite	lt
 800875c:	222d      	movlt	r2, #45	; 0x2d
 800875e:	222b      	movge	r2, #43	; 0x2b
 8008760:	2909      	cmp	r1, #9
 8008762:	7042      	strb	r2, [r0, #1]
 8008764:	dd2a      	ble.n	80087bc <__exponent+0x70>
 8008766:	f10d 0407 	add.w	r4, sp, #7
 800876a:	46a4      	mov	ip, r4
 800876c:	270a      	movs	r7, #10
 800876e:	46a6      	mov	lr, r4
 8008770:	460a      	mov	r2, r1
 8008772:	fb91 f6f7 	sdiv	r6, r1, r7
 8008776:	fb07 1516 	mls	r5, r7, r6, r1
 800877a:	3530      	adds	r5, #48	; 0x30
 800877c:	2a63      	cmp	r2, #99	; 0x63
 800877e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008782:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008786:	4631      	mov	r1, r6
 8008788:	dcf1      	bgt.n	800876e <__exponent+0x22>
 800878a:	3130      	adds	r1, #48	; 0x30
 800878c:	f1ae 0502 	sub.w	r5, lr, #2
 8008790:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008794:	1c44      	adds	r4, r0, #1
 8008796:	4629      	mov	r1, r5
 8008798:	4561      	cmp	r1, ip
 800879a:	d30a      	bcc.n	80087b2 <__exponent+0x66>
 800879c:	f10d 0209 	add.w	r2, sp, #9
 80087a0:	eba2 020e 	sub.w	r2, r2, lr
 80087a4:	4565      	cmp	r5, ip
 80087a6:	bf88      	it	hi
 80087a8:	2200      	movhi	r2, #0
 80087aa:	4413      	add	r3, r2
 80087ac:	1a18      	subs	r0, r3, r0
 80087ae:	b003      	add	sp, #12
 80087b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80087ba:	e7ed      	b.n	8008798 <__exponent+0x4c>
 80087bc:	2330      	movs	r3, #48	; 0x30
 80087be:	3130      	adds	r1, #48	; 0x30
 80087c0:	7083      	strb	r3, [r0, #2]
 80087c2:	70c1      	strb	r1, [r0, #3]
 80087c4:	1d03      	adds	r3, r0, #4
 80087c6:	e7f1      	b.n	80087ac <__exponent+0x60>

080087c8 <_printf_float>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	ed2d 8b02 	vpush	{d8}
 80087d0:	b08d      	sub	sp, #52	; 0x34
 80087d2:	460c      	mov	r4, r1
 80087d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80087d8:	4616      	mov	r6, r2
 80087da:	461f      	mov	r7, r3
 80087dc:	4605      	mov	r5, r0
 80087de:	f003 fc11 	bl	800c004 <_localeconv_r>
 80087e2:	f8d0 a000 	ldr.w	sl, [r0]
 80087e6:	4650      	mov	r0, sl
 80087e8:	f7f7 fcfc 	bl	80001e4 <strlen>
 80087ec:	2300      	movs	r3, #0
 80087ee:	930a      	str	r3, [sp, #40]	; 0x28
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	9305      	str	r3, [sp, #20]
 80087f4:	f8d8 3000 	ldr.w	r3, [r8]
 80087f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80087fc:	3307      	adds	r3, #7
 80087fe:	f023 0307 	bic.w	r3, r3, #7
 8008802:	f103 0208 	add.w	r2, r3, #8
 8008806:	f8c8 2000 	str.w	r2, [r8]
 800880a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008812:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008816:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008820:	ee08 0a10 	vmov	s16, r0
 8008824:	4b9f      	ldr	r3, [pc, #636]	; (8008aa4 <_printf_float+0x2dc>)
 8008826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800882a:	f04f 32ff 	mov.w	r2, #4294967295
 800882e:	f7f8 f98d 	bl	8000b4c <__aeabi_dcmpun>
 8008832:	bb88      	cbnz	r0, 8008898 <_printf_float+0xd0>
 8008834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008838:	4b9a      	ldr	r3, [pc, #616]	; (8008aa4 <_printf_float+0x2dc>)
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
 800883e:	f7f8 f967 	bl	8000b10 <__aeabi_dcmple>
 8008842:	bb48      	cbnz	r0, 8008898 <_printf_float+0xd0>
 8008844:	2200      	movs	r2, #0
 8008846:	2300      	movs	r3, #0
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f8 f956 	bl	8000afc <__aeabi_dcmplt>
 8008850:	b110      	cbz	r0, 8008858 <_printf_float+0x90>
 8008852:	232d      	movs	r3, #45	; 0x2d
 8008854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008858:	4b93      	ldr	r3, [pc, #588]	; (8008aa8 <_printf_float+0x2e0>)
 800885a:	4894      	ldr	r0, [pc, #592]	; (8008aac <_printf_float+0x2e4>)
 800885c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008860:	bf94      	ite	ls
 8008862:	4698      	movls	r8, r3
 8008864:	4680      	movhi	r8, r0
 8008866:	2303      	movs	r3, #3
 8008868:	6123      	str	r3, [r4, #16]
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	f023 0204 	bic.w	r2, r3, #4
 8008870:	6022      	str	r2, [r4, #0]
 8008872:	f04f 0900 	mov.w	r9, #0
 8008876:	9700      	str	r7, [sp, #0]
 8008878:	4633      	mov	r3, r6
 800887a:	aa0b      	add	r2, sp, #44	; 0x2c
 800887c:	4621      	mov	r1, r4
 800887e:	4628      	mov	r0, r5
 8008880:	f000 f9d8 	bl	8008c34 <_printf_common>
 8008884:	3001      	adds	r0, #1
 8008886:	f040 8090 	bne.w	80089aa <_printf_float+0x1e2>
 800888a:	f04f 30ff 	mov.w	r0, #4294967295
 800888e:	b00d      	add	sp, #52	; 0x34
 8008890:	ecbd 8b02 	vpop	{d8}
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f8 f954 	bl	8000b4c <__aeabi_dcmpun>
 80088a4:	b140      	cbz	r0, 80088b8 <_printf_float+0xf0>
 80088a6:	464b      	mov	r3, r9
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfbc      	itt	lt
 80088ac:	232d      	movlt	r3, #45	; 0x2d
 80088ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80088b2:	487f      	ldr	r0, [pc, #508]	; (8008ab0 <_printf_float+0x2e8>)
 80088b4:	4b7f      	ldr	r3, [pc, #508]	; (8008ab4 <_printf_float+0x2ec>)
 80088b6:	e7d1      	b.n	800885c <_printf_float+0x94>
 80088b8:	6863      	ldr	r3, [r4, #4]
 80088ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80088be:	9206      	str	r2, [sp, #24]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	d13f      	bne.n	8008944 <_printf_float+0x17c>
 80088c4:	2306      	movs	r3, #6
 80088c6:	6063      	str	r3, [r4, #4]
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	6861      	ldr	r1, [r4, #4]
 80088cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80088d0:	2300      	movs	r3, #0
 80088d2:	9303      	str	r3, [sp, #12]
 80088d4:	ab0a      	add	r3, sp, #40	; 0x28
 80088d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80088da:	ab09      	add	r3, sp, #36	; 0x24
 80088dc:	ec49 8b10 	vmov	d0, r8, r9
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	6022      	str	r2, [r4, #0]
 80088e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088e8:	4628      	mov	r0, r5
 80088ea:	f7ff fecd 	bl	8008688 <__cvt>
 80088ee:	9b06      	ldr	r3, [sp, #24]
 80088f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088f2:	2b47      	cmp	r3, #71	; 0x47
 80088f4:	4680      	mov	r8, r0
 80088f6:	d108      	bne.n	800890a <_printf_float+0x142>
 80088f8:	1cc8      	adds	r0, r1, #3
 80088fa:	db02      	blt.n	8008902 <_printf_float+0x13a>
 80088fc:	6863      	ldr	r3, [r4, #4]
 80088fe:	4299      	cmp	r1, r3
 8008900:	dd41      	ble.n	8008986 <_printf_float+0x1be>
 8008902:	f1ab 0b02 	sub.w	fp, fp, #2
 8008906:	fa5f fb8b 	uxtb.w	fp, fp
 800890a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800890e:	d820      	bhi.n	8008952 <_printf_float+0x18a>
 8008910:	3901      	subs	r1, #1
 8008912:	465a      	mov	r2, fp
 8008914:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008918:	9109      	str	r1, [sp, #36]	; 0x24
 800891a:	f7ff ff17 	bl	800874c <__exponent>
 800891e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008920:	1813      	adds	r3, r2, r0
 8008922:	2a01      	cmp	r2, #1
 8008924:	4681      	mov	r9, r0
 8008926:	6123      	str	r3, [r4, #16]
 8008928:	dc02      	bgt.n	8008930 <_printf_float+0x168>
 800892a:	6822      	ldr	r2, [r4, #0]
 800892c:	07d2      	lsls	r2, r2, #31
 800892e:	d501      	bpl.n	8008934 <_printf_float+0x16c>
 8008930:	3301      	adds	r3, #1
 8008932:	6123      	str	r3, [r4, #16]
 8008934:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008938:	2b00      	cmp	r3, #0
 800893a:	d09c      	beq.n	8008876 <_printf_float+0xae>
 800893c:	232d      	movs	r3, #45	; 0x2d
 800893e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008942:	e798      	b.n	8008876 <_printf_float+0xae>
 8008944:	9a06      	ldr	r2, [sp, #24]
 8008946:	2a47      	cmp	r2, #71	; 0x47
 8008948:	d1be      	bne.n	80088c8 <_printf_float+0x100>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1bc      	bne.n	80088c8 <_printf_float+0x100>
 800894e:	2301      	movs	r3, #1
 8008950:	e7b9      	b.n	80088c6 <_printf_float+0xfe>
 8008952:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008956:	d118      	bne.n	800898a <_printf_float+0x1c2>
 8008958:	2900      	cmp	r1, #0
 800895a:	6863      	ldr	r3, [r4, #4]
 800895c:	dd0b      	ble.n	8008976 <_printf_float+0x1ae>
 800895e:	6121      	str	r1, [r4, #16]
 8008960:	b913      	cbnz	r3, 8008968 <_printf_float+0x1a0>
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	07d0      	lsls	r0, r2, #31
 8008966:	d502      	bpl.n	800896e <_printf_float+0x1a6>
 8008968:	3301      	adds	r3, #1
 800896a:	440b      	add	r3, r1
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	e7de      	b.n	8008934 <_printf_float+0x16c>
 8008976:	b913      	cbnz	r3, 800897e <_printf_float+0x1b6>
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	07d2      	lsls	r2, r2, #31
 800897c:	d501      	bpl.n	8008982 <_printf_float+0x1ba>
 800897e:	3302      	adds	r3, #2
 8008980:	e7f4      	b.n	800896c <_printf_float+0x1a4>
 8008982:	2301      	movs	r3, #1
 8008984:	e7f2      	b.n	800896c <_printf_float+0x1a4>
 8008986:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800898a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898c:	4299      	cmp	r1, r3
 800898e:	db05      	blt.n	800899c <_printf_float+0x1d4>
 8008990:	6823      	ldr	r3, [r4, #0]
 8008992:	6121      	str	r1, [r4, #16]
 8008994:	07d8      	lsls	r0, r3, #31
 8008996:	d5ea      	bpl.n	800896e <_printf_float+0x1a6>
 8008998:	1c4b      	adds	r3, r1, #1
 800899a:	e7e7      	b.n	800896c <_printf_float+0x1a4>
 800899c:	2900      	cmp	r1, #0
 800899e:	bfd4      	ite	le
 80089a0:	f1c1 0202 	rsble	r2, r1, #2
 80089a4:	2201      	movgt	r2, #1
 80089a6:	4413      	add	r3, r2
 80089a8:	e7e0      	b.n	800896c <_printf_float+0x1a4>
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	055a      	lsls	r2, r3, #21
 80089ae:	d407      	bmi.n	80089c0 <_printf_float+0x1f8>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	4642      	mov	r2, r8
 80089b4:	4631      	mov	r1, r6
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d12c      	bne.n	8008a18 <_printf_float+0x250>
 80089be:	e764      	b.n	800888a <_printf_float+0xc2>
 80089c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80089c4:	f240 80e0 	bls.w	8008b88 <_printf_float+0x3c0>
 80089c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089cc:	2200      	movs	r2, #0
 80089ce:	2300      	movs	r3, #0
 80089d0:	f7f8 f88a 	bl	8000ae8 <__aeabi_dcmpeq>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d034      	beq.n	8008a42 <_printf_float+0x27a>
 80089d8:	4a37      	ldr	r2, [pc, #220]	; (8008ab8 <_printf_float+0x2f0>)
 80089da:	2301      	movs	r3, #1
 80089dc:	4631      	mov	r1, r6
 80089de:	4628      	mov	r0, r5
 80089e0:	47b8      	blx	r7
 80089e2:	3001      	adds	r0, #1
 80089e4:	f43f af51 	beq.w	800888a <_printf_float+0xc2>
 80089e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089ec:	429a      	cmp	r2, r3
 80089ee:	db02      	blt.n	80089f6 <_printf_float+0x22e>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	07d8      	lsls	r0, r3, #31
 80089f4:	d510      	bpl.n	8008a18 <_printf_float+0x250>
 80089f6:	ee18 3a10 	vmov	r3, s16
 80089fa:	4652      	mov	r2, sl
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	f43f af41 	beq.w	800888a <_printf_float+0xc2>
 8008a08:	f04f 0800 	mov.w	r8, #0
 8008a0c:	f104 091a 	add.w	r9, r4, #26
 8008a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a12:	3b01      	subs	r3, #1
 8008a14:	4543      	cmp	r3, r8
 8008a16:	dc09      	bgt.n	8008a2c <_printf_float+0x264>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	079b      	lsls	r3, r3, #30
 8008a1c:	f100 8105 	bmi.w	8008c2a <_printf_float+0x462>
 8008a20:	68e0      	ldr	r0, [r4, #12]
 8008a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a24:	4298      	cmp	r0, r3
 8008a26:	bfb8      	it	lt
 8008a28:	4618      	movlt	r0, r3
 8008a2a:	e730      	b.n	800888e <_printf_float+0xc6>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	464a      	mov	r2, r9
 8008a30:	4631      	mov	r1, r6
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f43f af27 	beq.w	800888a <_printf_float+0xc2>
 8008a3c:	f108 0801 	add.w	r8, r8, #1
 8008a40:	e7e6      	b.n	8008a10 <_printf_float+0x248>
 8008a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dc39      	bgt.n	8008abc <_printf_float+0x2f4>
 8008a48:	4a1b      	ldr	r2, [pc, #108]	; (8008ab8 <_printf_float+0x2f0>)
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af19 	beq.w	800888a <_printf_float+0xc2>
 8008a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	d102      	bne.n	8008a66 <_printf_float+0x29e>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	07d9      	lsls	r1, r3, #31
 8008a64:	d5d8      	bpl.n	8008a18 <_printf_float+0x250>
 8008a66:	ee18 3a10 	vmov	r3, s16
 8008a6a:	4652      	mov	r2, sl
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	f43f af09 	beq.w	800888a <_printf_float+0xc2>
 8008a78:	f04f 0900 	mov.w	r9, #0
 8008a7c:	f104 0a1a 	add.w	sl, r4, #26
 8008a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a82:	425b      	negs	r3, r3
 8008a84:	454b      	cmp	r3, r9
 8008a86:	dc01      	bgt.n	8008a8c <_printf_float+0x2c4>
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	e792      	b.n	80089b2 <_printf_float+0x1ea>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4652      	mov	r2, sl
 8008a90:	4631      	mov	r1, r6
 8008a92:	4628      	mov	r0, r5
 8008a94:	47b8      	blx	r7
 8008a96:	3001      	adds	r0, #1
 8008a98:	f43f aef7 	beq.w	800888a <_printf_float+0xc2>
 8008a9c:	f109 0901 	add.w	r9, r9, #1
 8008aa0:	e7ee      	b.n	8008a80 <_printf_float+0x2b8>
 8008aa2:	bf00      	nop
 8008aa4:	7fefffff 	.word	0x7fefffff
 8008aa8:	0800dd18 	.word	0x0800dd18
 8008aac:	0800dd1c 	.word	0x0800dd1c
 8008ab0:	0800dd24 	.word	0x0800dd24
 8008ab4:	0800dd20 	.word	0x0800dd20
 8008ab8:	0800e819 	.word	0x0800e819
 8008abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008abe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	bfa8      	it	ge
 8008ac4:	461a      	movge	r2, r3
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	4691      	mov	r9, r2
 8008aca:	dc37      	bgt.n	8008b3c <_printf_float+0x374>
 8008acc:	f04f 0b00 	mov.w	fp, #0
 8008ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ad4:	f104 021a 	add.w	r2, r4, #26
 8008ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ada:	9305      	str	r3, [sp, #20]
 8008adc:	eba3 0309 	sub.w	r3, r3, r9
 8008ae0:	455b      	cmp	r3, fp
 8008ae2:	dc33      	bgt.n	8008b4c <_printf_float+0x384>
 8008ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	db3b      	blt.n	8008b64 <_printf_float+0x39c>
 8008aec:	6823      	ldr	r3, [r4, #0]
 8008aee:	07da      	lsls	r2, r3, #31
 8008af0:	d438      	bmi.n	8008b64 <_printf_float+0x39c>
 8008af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af4:	9a05      	ldr	r2, [sp, #20]
 8008af6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af8:	1a9a      	subs	r2, r3, r2
 8008afa:	eba3 0901 	sub.w	r9, r3, r1
 8008afe:	4591      	cmp	r9, r2
 8008b00:	bfa8      	it	ge
 8008b02:	4691      	movge	r9, r2
 8008b04:	f1b9 0f00 	cmp.w	r9, #0
 8008b08:	dc35      	bgt.n	8008b76 <_printf_float+0x3ae>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b12:	f104 0a1a 	add.w	sl, r4, #26
 8008b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	eba3 0309 	sub.w	r3, r3, r9
 8008b20:	4543      	cmp	r3, r8
 8008b22:	f77f af79 	ble.w	8008a18 <_printf_float+0x250>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	47b8      	blx	r7
 8008b30:	3001      	adds	r0, #1
 8008b32:	f43f aeaa 	beq.w	800888a <_printf_float+0xc2>
 8008b36:	f108 0801 	add.w	r8, r8, #1
 8008b3a:	e7ec      	b.n	8008b16 <_printf_float+0x34e>
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4642      	mov	r2, r8
 8008b42:	4628      	mov	r0, r5
 8008b44:	47b8      	blx	r7
 8008b46:	3001      	adds	r0, #1
 8008b48:	d1c0      	bne.n	8008acc <_printf_float+0x304>
 8008b4a:	e69e      	b.n	800888a <_printf_float+0xc2>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	9205      	str	r2, [sp, #20]
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f ae97 	beq.w	800888a <_printf_float+0xc2>
 8008b5c:	9a05      	ldr	r2, [sp, #20]
 8008b5e:	f10b 0b01 	add.w	fp, fp, #1
 8008b62:	e7b9      	b.n	8008ad8 <_printf_float+0x310>
 8008b64:	ee18 3a10 	vmov	r3, s16
 8008b68:	4652      	mov	r2, sl
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b8      	blx	r7
 8008b70:	3001      	adds	r0, #1
 8008b72:	d1be      	bne.n	8008af2 <_printf_float+0x32a>
 8008b74:	e689      	b.n	800888a <_printf_float+0xc2>
 8008b76:	9a05      	ldr	r2, [sp, #20]
 8008b78:	464b      	mov	r3, r9
 8008b7a:	4442      	add	r2, r8
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4628      	mov	r0, r5
 8008b80:	47b8      	blx	r7
 8008b82:	3001      	adds	r0, #1
 8008b84:	d1c1      	bne.n	8008b0a <_printf_float+0x342>
 8008b86:	e680      	b.n	800888a <_printf_float+0xc2>
 8008b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8a:	2a01      	cmp	r2, #1
 8008b8c:	dc01      	bgt.n	8008b92 <_printf_float+0x3ca>
 8008b8e:	07db      	lsls	r3, r3, #31
 8008b90:	d538      	bpl.n	8008c04 <_printf_float+0x43c>
 8008b92:	2301      	movs	r3, #1
 8008b94:	4642      	mov	r2, r8
 8008b96:	4631      	mov	r1, r6
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b8      	blx	r7
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	f43f ae74 	beq.w	800888a <_printf_float+0xc2>
 8008ba2:	ee18 3a10 	vmov	r3, s16
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f ae6b 	beq.w	800888a <_printf_float+0xc2>
 8008bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bb8:	2200      	movs	r2, #0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f7f7 ff94 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bc0:	b9d8      	cbnz	r0, 8008bfa <_printf_float+0x432>
 8008bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bc4:	f108 0201 	add.w	r2, r8, #1
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d10e      	bne.n	8008bf2 <_printf_float+0x42a>
 8008bd4:	e659      	b.n	800888a <_printf_float+0xc2>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4652      	mov	r2, sl
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f ae52 	beq.w	800888a <_printf_float+0xc2>
 8008be6:	f108 0801 	add.w	r8, r8, #1
 8008bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bec:	3b01      	subs	r3, #1
 8008bee:	4543      	cmp	r3, r8
 8008bf0:	dcf1      	bgt.n	8008bd6 <_printf_float+0x40e>
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008bf8:	e6dc      	b.n	80089b4 <_printf_float+0x1ec>
 8008bfa:	f04f 0800 	mov.w	r8, #0
 8008bfe:	f104 0a1a 	add.w	sl, r4, #26
 8008c02:	e7f2      	b.n	8008bea <_printf_float+0x422>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4642      	mov	r2, r8
 8008c08:	e7df      	b.n	8008bca <_printf_float+0x402>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	464a      	mov	r2, r9
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	f43f ae38 	beq.w	800888a <_printf_float+0xc2>
 8008c1a:	f108 0801 	add.w	r8, r8, #1
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c22:	1a5b      	subs	r3, r3, r1
 8008c24:	4543      	cmp	r3, r8
 8008c26:	dcf0      	bgt.n	8008c0a <_printf_float+0x442>
 8008c28:	e6fa      	b.n	8008a20 <_printf_float+0x258>
 8008c2a:	f04f 0800 	mov.w	r8, #0
 8008c2e:	f104 0919 	add.w	r9, r4, #25
 8008c32:	e7f4      	b.n	8008c1e <_printf_float+0x456>

08008c34 <_printf_common>:
 8008c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c38:	4616      	mov	r6, r2
 8008c3a:	4699      	mov	r9, r3
 8008c3c:	688a      	ldr	r2, [r1, #8]
 8008c3e:	690b      	ldr	r3, [r1, #16]
 8008c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c44:	4293      	cmp	r3, r2
 8008c46:	bfb8      	it	lt
 8008c48:	4613      	movlt	r3, r2
 8008c4a:	6033      	str	r3, [r6, #0]
 8008c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c50:	4607      	mov	r7, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	b10a      	cbz	r2, 8008c5a <_printf_common+0x26>
 8008c56:	3301      	adds	r3, #1
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	0699      	lsls	r1, r3, #26
 8008c5e:	bf42      	ittt	mi
 8008c60:	6833      	ldrmi	r3, [r6, #0]
 8008c62:	3302      	addmi	r3, #2
 8008c64:	6033      	strmi	r3, [r6, #0]
 8008c66:	6825      	ldr	r5, [r4, #0]
 8008c68:	f015 0506 	ands.w	r5, r5, #6
 8008c6c:	d106      	bne.n	8008c7c <_printf_common+0x48>
 8008c6e:	f104 0a19 	add.w	sl, r4, #25
 8008c72:	68e3      	ldr	r3, [r4, #12]
 8008c74:	6832      	ldr	r2, [r6, #0]
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	dc26      	bgt.n	8008cca <_printf_common+0x96>
 8008c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c80:	1e13      	subs	r3, r2, #0
 8008c82:	6822      	ldr	r2, [r4, #0]
 8008c84:	bf18      	it	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	0692      	lsls	r2, r2, #26
 8008c8a:	d42b      	bmi.n	8008ce4 <_printf_common+0xb0>
 8008c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c90:	4649      	mov	r1, r9
 8008c92:	4638      	mov	r0, r7
 8008c94:	47c0      	blx	r8
 8008c96:	3001      	adds	r0, #1
 8008c98:	d01e      	beq.n	8008cd8 <_printf_common+0xa4>
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	68e5      	ldr	r5, [r4, #12]
 8008c9e:	6832      	ldr	r2, [r6, #0]
 8008ca0:	f003 0306 	and.w	r3, r3, #6
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	bf08      	it	eq
 8008ca8:	1aad      	subeq	r5, r5, r2
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	6922      	ldr	r2, [r4, #16]
 8008cae:	bf0c      	ite	eq
 8008cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb4:	2500      	movne	r5, #0
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	bfc4      	itt	gt
 8008cba:	1a9b      	subgt	r3, r3, r2
 8008cbc:	18ed      	addgt	r5, r5, r3
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	341a      	adds	r4, #26
 8008cc2:	42b5      	cmp	r5, r6
 8008cc4:	d11a      	bne.n	8008cfc <_printf_common+0xc8>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	e008      	b.n	8008cdc <_printf_common+0xa8>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	4652      	mov	r2, sl
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4638      	mov	r0, r7
 8008cd2:	47c0      	blx	r8
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d103      	bne.n	8008ce0 <_printf_common+0xac>
 8008cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	e7c6      	b.n	8008c72 <_printf_common+0x3e>
 8008ce4:	18e1      	adds	r1, r4, r3
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	2030      	movs	r0, #48	; 0x30
 8008cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cee:	4422      	add	r2, r4
 8008cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cf8:	3302      	adds	r3, #2
 8008cfa:	e7c7      	b.n	8008c8c <_printf_common+0x58>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	4622      	mov	r2, r4
 8008d00:	4649      	mov	r1, r9
 8008d02:	4638      	mov	r0, r7
 8008d04:	47c0      	blx	r8
 8008d06:	3001      	adds	r0, #1
 8008d08:	d0e6      	beq.n	8008cd8 <_printf_common+0xa4>
 8008d0a:	3601      	adds	r6, #1
 8008d0c:	e7d9      	b.n	8008cc2 <_printf_common+0x8e>
	...

08008d10 <_printf_i>:
 8008d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	7e0f      	ldrb	r7, [r1, #24]
 8008d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d18:	2f78      	cmp	r7, #120	; 0x78
 8008d1a:	4691      	mov	r9, r2
 8008d1c:	4680      	mov	r8, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	469a      	mov	sl, r3
 8008d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d26:	d807      	bhi.n	8008d38 <_printf_i+0x28>
 8008d28:	2f62      	cmp	r7, #98	; 0x62
 8008d2a:	d80a      	bhi.n	8008d42 <_printf_i+0x32>
 8008d2c:	2f00      	cmp	r7, #0
 8008d2e:	f000 80d8 	beq.w	8008ee2 <_printf_i+0x1d2>
 8008d32:	2f58      	cmp	r7, #88	; 0x58
 8008d34:	f000 80a3 	beq.w	8008e7e <_printf_i+0x16e>
 8008d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d40:	e03a      	b.n	8008db8 <_printf_i+0xa8>
 8008d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d46:	2b15      	cmp	r3, #21
 8008d48:	d8f6      	bhi.n	8008d38 <_printf_i+0x28>
 8008d4a:	a101      	add	r1, pc, #4	; (adr r1, 8008d50 <_printf_i+0x40>)
 8008d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d50:	08008da9 	.word	0x08008da9
 8008d54:	08008dbd 	.word	0x08008dbd
 8008d58:	08008d39 	.word	0x08008d39
 8008d5c:	08008d39 	.word	0x08008d39
 8008d60:	08008d39 	.word	0x08008d39
 8008d64:	08008d39 	.word	0x08008d39
 8008d68:	08008dbd 	.word	0x08008dbd
 8008d6c:	08008d39 	.word	0x08008d39
 8008d70:	08008d39 	.word	0x08008d39
 8008d74:	08008d39 	.word	0x08008d39
 8008d78:	08008d39 	.word	0x08008d39
 8008d7c:	08008ec9 	.word	0x08008ec9
 8008d80:	08008ded 	.word	0x08008ded
 8008d84:	08008eab 	.word	0x08008eab
 8008d88:	08008d39 	.word	0x08008d39
 8008d8c:	08008d39 	.word	0x08008d39
 8008d90:	08008eeb 	.word	0x08008eeb
 8008d94:	08008d39 	.word	0x08008d39
 8008d98:	08008ded 	.word	0x08008ded
 8008d9c:	08008d39 	.word	0x08008d39
 8008da0:	08008d39 	.word	0x08008d39
 8008da4:	08008eb3 	.word	0x08008eb3
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	1d1a      	adds	r2, r3, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	602a      	str	r2, [r5, #0]
 8008db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0a3      	b.n	8008f04 <_printf_i+0x1f4>
 8008dbc:	6820      	ldr	r0, [r4, #0]
 8008dbe:	6829      	ldr	r1, [r5, #0]
 8008dc0:	0606      	lsls	r6, r0, #24
 8008dc2:	f101 0304 	add.w	r3, r1, #4
 8008dc6:	d50a      	bpl.n	8008dde <_printf_i+0xce>
 8008dc8:	680e      	ldr	r6, [r1, #0]
 8008dca:	602b      	str	r3, [r5, #0]
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	da03      	bge.n	8008dd8 <_printf_i+0xc8>
 8008dd0:	232d      	movs	r3, #45	; 0x2d
 8008dd2:	4276      	negs	r6, r6
 8008dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd8:	485e      	ldr	r0, [pc, #376]	; (8008f54 <_printf_i+0x244>)
 8008dda:	230a      	movs	r3, #10
 8008ddc:	e019      	b.n	8008e12 <_printf_i+0x102>
 8008dde:	680e      	ldr	r6, [r1, #0]
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008de6:	bf18      	it	ne
 8008de8:	b236      	sxthne	r6, r6
 8008dea:	e7ef      	b.n	8008dcc <_printf_i+0xbc>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	1d19      	adds	r1, r3, #4
 8008df2:	6029      	str	r1, [r5, #0]
 8008df4:	0601      	lsls	r1, r0, #24
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0xec>
 8008df8:	681e      	ldr	r6, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0xf2>
 8008dfc:	0646      	lsls	r6, r0, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0xe8>
 8008e00:	881e      	ldrh	r6, [r3, #0]
 8008e02:	4854      	ldr	r0, [pc, #336]	; (8008f54 <_printf_i+0x244>)
 8008e04:	2f6f      	cmp	r7, #111	; 0x6f
 8008e06:	bf0c      	ite	eq
 8008e08:	2308      	moveq	r3, #8
 8008e0a:	230a      	movne	r3, #10
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e12:	6865      	ldr	r5, [r4, #4]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	bfa2      	ittt	ge
 8008e1a:	6821      	ldrge	r1, [r4, #0]
 8008e1c:	f021 0104 	bicge.w	r1, r1, #4
 8008e20:	6021      	strge	r1, [r4, #0]
 8008e22:	b90e      	cbnz	r6, 8008e28 <_printf_i+0x118>
 8008e24:	2d00      	cmp	r5, #0
 8008e26:	d04d      	beq.n	8008ec4 <_printf_i+0x1b4>
 8008e28:	4615      	mov	r5, r2
 8008e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8008e32:	5dc7      	ldrb	r7, [r0, r7]
 8008e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e38:	4637      	mov	r7, r6
 8008e3a:	42bb      	cmp	r3, r7
 8008e3c:	460e      	mov	r6, r1
 8008e3e:	d9f4      	bls.n	8008e2a <_printf_i+0x11a>
 8008e40:	2b08      	cmp	r3, #8
 8008e42:	d10b      	bne.n	8008e5c <_printf_i+0x14c>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	07de      	lsls	r6, r3, #31
 8008e48:	d508      	bpl.n	8008e5c <_printf_i+0x14c>
 8008e4a:	6923      	ldr	r3, [r4, #16]
 8008e4c:	6861      	ldr	r1, [r4, #4]
 8008e4e:	4299      	cmp	r1, r3
 8008e50:	bfde      	ittt	le
 8008e52:	2330      	movle	r3, #48	; 0x30
 8008e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e5c:	1b52      	subs	r2, r2, r5
 8008e5e:	6122      	str	r2, [r4, #16]
 8008e60:	f8cd a000 	str.w	sl, [sp]
 8008e64:	464b      	mov	r3, r9
 8008e66:	aa03      	add	r2, sp, #12
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	f7ff fee2 	bl	8008c34 <_printf_common>
 8008e70:	3001      	adds	r0, #1
 8008e72:	d14c      	bne.n	8008f0e <_printf_i+0x1fe>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	b004      	add	sp, #16
 8008e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7e:	4835      	ldr	r0, [pc, #212]	; (8008f54 <_printf_i+0x244>)
 8008e80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e84:	6829      	ldr	r1, [r5, #0]
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e8c:	6029      	str	r1, [r5, #0]
 8008e8e:	061d      	lsls	r5, r3, #24
 8008e90:	d514      	bpl.n	8008ebc <_printf_i+0x1ac>
 8008e92:	07df      	lsls	r7, r3, #31
 8008e94:	bf44      	itt	mi
 8008e96:	f043 0320 	orrmi.w	r3, r3, #32
 8008e9a:	6023      	strmi	r3, [r4, #0]
 8008e9c:	b91e      	cbnz	r6, 8008ea6 <_printf_i+0x196>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	f023 0320 	bic.w	r3, r3, #32
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	2310      	movs	r3, #16
 8008ea8:	e7b0      	b.n	8008e0c <_printf_i+0xfc>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	f043 0320 	orr.w	r3, r3, #32
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	2378      	movs	r3, #120	; 0x78
 8008eb4:	4828      	ldr	r0, [pc, #160]	; (8008f58 <_printf_i+0x248>)
 8008eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008eba:	e7e3      	b.n	8008e84 <_printf_i+0x174>
 8008ebc:	0659      	lsls	r1, r3, #25
 8008ebe:	bf48      	it	mi
 8008ec0:	b2b6      	uxthmi	r6, r6
 8008ec2:	e7e6      	b.n	8008e92 <_printf_i+0x182>
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	e7bb      	b.n	8008e40 <_printf_i+0x130>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	6826      	ldr	r6, [r4, #0]
 8008ecc:	6961      	ldr	r1, [r4, #20]
 8008ece:	1d18      	adds	r0, r3, #4
 8008ed0:	6028      	str	r0, [r5, #0]
 8008ed2:	0635      	lsls	r5, r6, #24
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	d501      	bpl.n	8008edc <_printf_i+0x1cc>
 8008ed8:	6019      	str	r1, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <_printf_i+0x1d2>
 8008edc:	0670      	lsls	r0, r6, #25
 8008ede:	d5fb      	bpl.n	8008ed8 <_printf_i+0x1c8>
 8008ee0:	8019      	strh	r1, [r3, #0]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	e7ba      	b.n	8008e60 <_printf_i+0x150>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	602a      	str	r2, [r5, #0]
 8008ef0:	681d      	ldr	r5, [r3, #0]
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f7f7 f982 	bl	8000200 <memchr>
 8008efc:	b108      	cbz	r0, 8008f02 <_printf_i+0x1f2>
 8008efe:	1b40      	subs	r0, r0, r5
 8008f00:	6060      	str	r0, [r4, #4]
 8008f02:	6863      	ldr	r3, [r4, #4]
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	2300      	movs	r3, #0
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0c:	e7a8      	b.n	8008e60 <_printf_i+0x150>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	47d0      	blx	sl
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d0ab      	beq.n	8008e74 <_printf_i+0x164>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	079b      	lsls	r3, r3, #30
 8008f20:	d413      	bmi.n	8008f4a <_printf_i+0x23a>
 8008f22:	68e0      	ldr	r0, [r4, #12]
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	4298      	cmp	r0, r3
 8008f28:	bfb8      	it	lt
 8008f2a:	4618      	movlt	r0, r3
 8008f2c:	e7a4      	b.n	8008e78 <_printf_i+0x168>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4632      	mov	r2, r6
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d09b      	beq.n	8008e74 <_printf_i+0x164>
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	68e3      	ldr	r3, [r4, #12]
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	1a5b      	subs	r3, r3, r1
 8008f44:	42ab      	cmp	r3, r5
 8008f46:	dcf2      	bgt.n	8008f2e <_printf_i+0x21e>
 8008f48:	e7eb      	b.n	8008f22 <_printf_i+0x212>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	f104 0619 	add.w	r6, r4, #25
 8008f50:	e7f5      	b.n	8008f3e <_printf_i+0x22e>
 8008f52:	bf00      	nop
 8008f54:	0800dd28 	.word	0x0800dd28
 8008f58:	0800dd39 	.word	0x0800dd39

08008f5c <_scanf_float>:
 8008f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f60:	b087      	sub	sp, #28
 8008f62:	4617      	mov	r7, r2
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	688b      	ldr	r3, [r1, #8]
 8008f68:	1e5a      	subs	r2, r3, #1
 8008f6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f6e:	bf83      	ittte	hi
 8008f70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f74:	195b      	addhi	r3, r3, r5
 8008f76:	9302      	strhi	r3, [sp, #8]
 8008f78:	2300      	movls	r3, #0
 8008f7a:	bf86      	itte	hi
 8008f7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f80:	608b      	strhi	r3, [r1, #8]
 8008f82:	9302      	strls	r3, [sp, #8]
 8008f84:	680b      	ldr	r3, [r1, #0]
 8008f86:	468b      	mov	fp, r1
 8008f88:	2500      	movs	r5, #0
 8008f8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008f8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008f92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008f96:	4680      	mov	r8, r0
 8008f98:	460c      	mov	r4, r1
 8008f9a:	465e      	mov	r6, fp
 8008f9c:	46aa      	mov	sl, r5
 8008f9e:	46a9      	mov	r9, r5
 8008fa0:	9501      	str	r5, [sp, #4]
 8008fa2:	68a2      	ldr	r2, [r4, #8]
 8008fa4:	b152      	cbz	r2, 8008fbc <_scanf_float+0x60>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b4e      	cmp	r3, #78	; 0x4e
 8008fac:	d864      	bhi.n	8009078 <_scanf_float+0x11c>
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d83c      	bhi.n	800902c <_scanf_float+0xd0>
 8008fb2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fb6:	b2c8      	uxtb	r0, r1
 8008fb8:	280e      	cmp	r0, #14
 8008fba:	d93a      	bls.n	8009032 <_scanf_float+0xd6>
 8008fbc:	f1b9 0f00 	cmp.w	r9, #0
 8008fc0:	d003      	beq.n	8008fca <_scanf_float+0x6e>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fce:	f1ba 0f01 	cmp.w	sl, #1
 8008fd2:	f200 8113 	bhi.w	80091fc <_scanf_float+0x2a0>
 8008fd6:	455e      	cmp	r6, fp
 8008fd8:	f200 8105 	bhi.w	80091e6 <_scanf_float+0x28a>
 8008fdc:	2501      	movs	r5, #1
 8008fde:	4628      	mov	r0, r5
 8008fe0:	b007      	add	sp, #28
 8008fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008fea:	2a0d      	cmp	r2, #13
 8008fec:	d8e6      	bhi.n	8008fbc <_scanf_float+0x60>
 8008fee:	a101      	add	r1, pc, #4	; (adr r1, 8008ff4 <_scanf_float+0x98>)
 8008ff0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ff4:	08009133 	.word	0x08009133
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	08008fbd 	.word	0x08008fbd
 8009004:	08009193 	.word	0x08009193
 8009008:	0800916b 	.word	0x0800916b
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009141 	.word	0x08009141
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	08008fbd 	.word	0x08008fbd
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	080090f9 	.word	0x080090f9
 800902c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009030:	e7db      	b.n	8008fea <_scanf_float+0x8e>
 8009032:	290e      	cmp	r1, #14
 8009034:	d8c2      	bhi.n	8008fbc <_scanf_float+0x60>
 8009036:	a001      	add	r0, pc, #4	; (adr r0, 800903c <_scanf_float+0xe0>)
 8009038:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800903c:	080090eb 	.word	0x080090eb
 8009040:	08008fbd 	.word	0x08008fbd
 8009044:	080090eb 	.word	0x080090eb
 8009048:	0800917f 	.word	0x0800917f
 800904c:	08008fbd 	.word	0x08008fbd
 8009050:	08009099 	.word	0x08009099
 8009054:	080090d5 	.word	0x080090d5
 8009058:	080090d5 	.word	0x080090d5
 800905c:	080090d5 	.word	0x080090d5
 8009060:	080090d5 	.word	0x080090d5
 8009064:	080090d5 	.word	0x080090d5
 8009068:	080090d5 	.word	0x080090d5
 800906c:	080090d5 	.word	0x080090d5
 8009070:	080090d5 	.word	0x080090d5
 8009074:	080090d5 	.word	0x080090d5
 8009078:	2b6e      	cmp	r3, #110	; 0x6e
 800907a:	d809      	bhi.n	8009090 <_scanf_float+0x134>
 800907c:	2b60      	cmp	r3, #96	; 0x60
 800907e:	d8b2      	bhi.n	8008fe6 <_scanf_float+0x8a>
 8009080:	2b54      	cmp	r3, #84	; 0x54
 8009082:	d077      	beq.n	8009174 <_scanf_float+0x218>
 8009084:	2b59      	cmp	r3, #89	; 0x59
 8009086:	d199      	bne.n	8008fbc <_scanf_float+0x60>
 8009088:	2d07      	cmp	r5, #7
 800908a:	d197      	bne.n	8008fbc <_scanf_float+0x60>
 800908c:	2508      	movs	r5, #8
 800908e:	e029      	b.n	80090e4 <_scanf_float+0x188>
 8009090:	2b74      	cmp	r3, #116	; 0x74
 8009092:	d06f      	beq.n	8009174 <_scanf_float+0x218>
 8009094:	2b79      	cmp	r3, #121	; 0x79
 8009096:	e7f6      	b.n	8009086 <_scanf_float+0x12a>
 8009098:	6821      	ldr	r1, [r4, #0]
 800909a:	05c8      	lsls	r0, r1, #23
 800909c:	d51a      	bpl.n	80090d4 <_scanf_float+0x178>
 800909e:	9b02      	ldr	r3, [sp, #8]
 80090a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80090a4:	6021      	str	r1, [r4, #0]
 80090a6:	f109 0901 	add.w	r9, r9, #1
 80090aa:	b11b      	cbz	r3, 80090b4 <_scanf_float+0x158>
 80090ac:	3b01      	subs	r3, #1
 80090ae:	3201      	adds	r2, #1
 80090b0:	9302      	str	r3, [sp, #8]
 80090b2:	60a2      	str	r2, [r4, #8]
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	60a3      	str	r3, [r4, #8]
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	3301      	adds	r3, #1
 80090be:	6123      	str	r3, [r4, #16]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	607b      	str	r3, [r7, #4]
 80090c8:	f340 8084 	ble.w	80091d4 <_scanf_float+0x278>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	3301      	adds	r3, #1
 80090d0:	603b      	str	r3, [r7, #0]
 80090d2:	e766      	b.n	8008fa2 <_scanf_float+0x46>
 80090d4:	eb1a 0f05 	cmn.w	sl, r5
 80090d8:	f47f af70 	bne.w	8008fbc <_scanf_float+0x60>
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80090e2:	6022      	str	r2, [r4, #0]
 80090e4:	f806 3b01 	strb.w	r3, [r6], #1
 80090e8:	e7e4      	b.n	80090b4 <_scanf_float+0x158>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	0610      	lsls	r0, r2, #24
 80090ee:	f57f af65 	bpl.w	8008fbc <_scanf_float+0x60>
 80090f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090f6:	e7f4      	b.n	80090e2 <_scanf_float+0x186>
 80090f8:	f1ba 0f00 	cmp.w	sl, #0
 80090fc:	d10e      	bne.n	800911c <_scanf_float+0x1c0>
 80090fe:	f1b9 0f00 	cmp.w	r9, #0
 8009102:	d10e      	bne.n	8009122 <_scanf_float+0x1c6>
 8009104:	6822      	ldr	r2, [r4, #0]
 8009106:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800910a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800910e:	d108      	bne.n	8009122 <_scanf_float+0x1c6>
 8009110:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	f04f 0a01 	mov.w	sl, #1
 800911a:	e7e3      	b.n	80090e4 <_scanf_float+0x188>
 800911c:	f1ba 0f02 	cmp.w	sl, #2
 8009120:	d055      	beq.n	80091ce <_scanf_float+0x272>
 8009122:	2d01      	cmp	r5, #1
 8009124:	d002      	beq.n	800912c <_scanf_float+0x1d0>
 8009126:	2d04      	cmp	r5, #4
 8009128:	f47f af48 	bne.w	8008fbc <_scanf_float+0x60>
 800912c:	3501      	adds	r5, #1
 800912e:	b2ed      	uxtb	r5, r5
 8009130:	e7d8      	b.n	80090e4 <_scanf_float+0x188>
 8009132:	f1ba 0f01 	cmp.w	sl, #1
 8009136:	f47f af41 	bne.w	8008fbc <_scanf_float+0x60>
 800913a:	f04f 0a02 	mov.w	sl, #2
 800913e:	e7d1      	b.n	80090e4 <_scanf_float+0x188>
 8009140:	b97d      	cbnz	r5, 8009162 <_scanf_float+0x206>
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	f47f af3c 	bne.w	8008fc2 <_scanf_float+0x66>
 800914a:	6822      	ldr	r2, [r4, #0]
 800914c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009150:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009154:	f47f af39 	bne.w	8008fca <_scanf_float+0x6e>
 8009158:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800915c:	6022      	str	r2, [r4, #0]
 800915e:	2501      	movs	r5, #1
 8009160:	e7c0      	b.n	80090e4 <_scanf_float+0x188>
 8009162:	2d03      	cmp	r5, #3
 8009164:	d0e2      	beq.n	800912c <_scanf_float+0x1d0>
 8009166:	2d05      	cmp	r5, #5
 8009168:	e7de      	b.n	8009128 <_scanf_float+0x1cc>
 800916a:	2d02      	cmp	r5, #2
 800916c:	f47f af26 	bne.w	8008fbc <_scanf_float+0x60>
 8009170:	2503      	movs	r5, #3
 8009172:	e7b7      	b.n	80090e4 <_scanf_float+0x188>
 8009174:	2d06      	cmp	r5, #6
 8009176:	f47f af21 	bne.w	8008fbc <_scanf_float+0x60>
 800917a:	2507      	movs	r5, #7
 800917c:	e7b2      	b.n	80090e4 <_scanf_float+0x188>
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	0591      	lsls	r1, r2, #22
 8009182:	f57f af1b 	bpl.w	8008fbc <_scanf_float+0x60>
 8009186:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800918a:	6022      	str	r2, [r4, #0]
 800918c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009190:	e7a8      	b.n	80090e4 <_scanf_float+0x188>
 8009192:	6822      	ldr	r2, [r4, #0]
 8009194:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009198:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800919c:	d006      	beq.n	80091ac <_scanf_float+0x250>
 800919e:	0550      	lsls	r0, r2, #21
 80091a0:	f57f af0c 	bpl.w	8008fbc <_scanf_float+0x60>
 80091a4:	f1b9 0f00 	cmp.w	r9, #0
 80091a8:	f43f af0f 	beq.w	8008fca <_scanf_float+0x6e>
 80091ac:	0591      	lsls	r1, r2, #22
 80091ae:	bf58      	it	pl
 80091b0:	9901      	ldrpl	r1, [sp, #4]
 80091b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091b6:	bf58      	it	pl
 80091b8:	eba9 0101 	subpl.w	r1, r9, r1
 80091bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80091c0:	bf58      	it	pl
 80091c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80091c6:	6022      	str	r2, [r4, #0]
 80091c8:	f04f 0900 	mov.w	r9, #0
 80091cc:	e78a      	b.n	80090e4 <_scanf_float+0x188>
 80091ce:	f04f 0a03 	mov.w	sl, #3
 80091d2:	e787      	b.n	80090e4 <_scanf_float+0x188>
 80091d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091d8:	4639      	mov	r1, r7
 80091da:	4640      	mov	r0, r8
 80091dc:	4798      	blx	r3
 80091de:	2800      	cmp	r0, #0
 80091e0:	f43f aedf 	beq.w	8008fa2 <_scanf_float+0x46>
 80091e4:	e6ea      	b.n	8008fbc <_scanf_float+0x60>
 80091e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80091ee:	463a      	mov	r2, r7
 80091f0:	4640      	mov	r0, r8
 80091f2:	4798      	blx	r3
 80091f4:	6923      	ldr	r3, [r4, #16]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	6123      	str	r3, [r4, #16]
 80091fa:	e6ec      	b.n	8008fd6 <_scanf_float+0x7a>
 80091fc:	1e6b      	subs	r3, r5, #1
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d825      	bhi.n	800924e <_scanf_float+0x2f2>
 8009202:	2d02      	cmp	r5, #2
 8009204:	d836      	bhi.n	8009274 <_scanf_float+0x318>
 8009206:	455e      	cmp	r6, fp
 8009208:	f67f aee8 	bls.w	8008fdc <_scanf_float+0x80>
 800920c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009210:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009214:	463a      	mov	r2, r7
 8009216:	4640      	mov	r0, r8
 8009218:	4798      	blx	r3
 800921a:	6923      	ldr	r3, [r4, #16]
 800921c:	3b01      	subs	r3, #1
 800921e:	6123      	str	r3, [r4, #16]
 8009220:	e7f1      	b.n	8009206 <_scanf_float+0x2aa>
 8009222:	9802      	ldr	r0, [sp, #8]
 8009224:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009228:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800922c:	9002      	str	r0, [sp, #8]
 800922e:	463a      	mov	r2, r7
 8009230:	4640      	mov	r0, r8
 8009232:	4798      	blx	r3
 8009234:	6923      	ldr	r3, [r4, #16]
 8009236:	3b01      	subs	r3, #1
 8009238:	6123      	str	r3, [r4, #16]
 800923a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800923e:	fa5f fa8a 	uxtb.w	sl, sl
 8009242:	f1ba 0f02 	cmp.w	sl, #2
 8009246:	d1ec      	bne.n	8009222 <_scanf_float+0x2c6>
 8009248:	3d03      	subs	r5, #3
 800924a:	b2ed      	uxtb	r5, r5
 800924c:	1b76      	subs	r6, r6, r5
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	05da      	lsls	r2, r3, #23
 8009252:	d52f      	bpl.n	80092b4 <_scanf_float+0x358>
 8009254:	055b      	lsls	r3, r3, #21
 8009256:	d510      	bpl.n	800927a <_scanf_float+0x31e>
 8009258:	455e      	cmp	r6, fp
 800925a:	f67f aebf 	bls.w	8008fdc <_scanf_float+0x80>
 800925e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009266:	463a      	mov	r2, r7
 8009268:	4640      	mov	r0, r8
 800926a:	4798      	blx	r3
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	3b01      	subs	r3, #1
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	e7f1      	b.n	8009258 <_scanf_float+0x2fc>
 8009274:	46aa      	mov	sl, r5
 8009276:	9602      	str	r6, [sp, #8]
 8009278:	e7df      	b.n	800923a <_scanf_float+0x2de>
 800927a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	2965      	cmp	r1, #101	; 0x65
 8009282:	f103 33ff 	add.w	r3, r3, #4294967295
 8009286:	f106 35ff 	add.w	r5, r6, #4294967295
 800928a:	6123      	str	r3, [r4, #16]
 800928c:	d00c      	beq.n	80092a8 <_scanf_float+0x34c>
 800928e:	2945      	cmp	r1, #69	; 0x45
 8009290:	d00a      	beq.n	80092a8 <_scanf_float+0x34c>
 8009292:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009296:	463a      	mov	r2, r7
 8009298:	4640      	mov	r0, r8
 800929a:	4798      	blx	r3
 800929c:	6923      	ldr	r3, [r4, #16]
 800929e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80092a2:	3b01      	subs	r3, #1
 80092a4:	1eb5      	subs	r5, r6, #2
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092ac:	463a      	mov	r2, r7
 80092ae:	4640      	mov	r0, r8
 80092b0:	4798      	blx	r3
 80092b2:	462e      	mov	r6, r5
 80092b4:	6825      	ldr	r5, [r4, #0]
 80092b6:	f015 0510 	ands.w	r5, r5, #16
 80092ba:	d159      	bne.n	8009370 <_scanf_float+0x414>
 80092bc:	7035      	strb	r5, [r6, #0]
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80092c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c8:	d11b      	bne.n	8009302 <_scanf_float+0x3a6>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	454b      	cmp	r3, r9
 80092ce:	eba3 0209 	sub.w	r2, r3, r9
 80092d2:	d123      	bne.n	800931c <_scanf_float+0x3c0>
 80092d4:	2200      	movs	r2, #0
 80092d6:	4659      	mov	r1, fp
 80092d8:	4640      	mov	r0, r8
 80092da:	f001 f9e7 	bl	800a6ac <_strtod_r>
 80092de:	6822      	ldr	r2, [r4, #0]
 80092e0:	9b03      	ldr	r3, [sp, #12]
 80092e2:	f012 0f02 	tst.w	r2, #2
 80092e6:	ec57 6b10 	vmov	r6, r7, d0
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	d021      	beq.n	8009332 <_scanf_float+0x3d6>
 80092ee:	9903      	ldr	r1, [sp, #12]
 80092f0:	1d1a      	adds	r2, r3, #4
 80092f2:	600a      	str	r2, [r1, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	e9c3 6700 	strd	r6, r7, [r3]
 80092fa:	68e3      	ldr	r3, [r4, #12]
 80092fc:	3301      	adds	r3, #1
 80092fe:	60e3      	str	r3, [r4, #12]
 8009300:	e66d      	b.n	8008fde <_scanf_float+0x82>
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0e5      	beq.n	80092d4 <_scanf_float+0x378>
 8009308:	9905      	ldr	r1, [sp, #20]
 800930a:	230a      	movs	r3, #10
 800930c:	462a      	mov	r2, r5
 800930e:	3101      	adds	r1, #1
 8009310:	4640      	mov	r0, r8
 8009312:	f001 fa53 	bl	800a7bc <_strtol_r>
 8009316:	9b04      	ldr	r3, [sp, #16]
 8009318:	9e05      	ldr	r6, [sp, #20]
 800931a:	1ac2      	subs	r2, r0, r3
 800931c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009320:	429e      	cmp	r6, r3
 8009322:	bf28      	it	cs
 8009324:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009328:	4912      	ldr	r1, [pc, #72]	; (8009374 <_scanf_float+0x418>)
 800932a:	4630      	mov	r0, r6
 800932c:	f000 f922 	bl	8009574 <siprintf>
 8009330:	e7d0      	b.n	80092d4 <_scanf_float+0x378>
 8009332:	9903      	ldr	r1, [sp, #12]
 8009334:	f012 0f04 	tst.w	r2, #4
 8009338:	f103 0204 	add.w	r2, r3, #4
 800933c:	600a      	str	r2, [r1, #0]
 800933e:	d1d9      	bne.n	80092f4 <_scanf_float+0x398>
 8009340:	f8d3 8000 	ldr.w	r8, [r3]
 8009344:	ee10 2a10 	vmov	r2, s0
 8009348:	ee10 0a10 	vmov	r0, s0
 800934c:	463b      	mov	r3, r7
 800934e:	4639      	mov	r1, r7
 8009350:	f7f7 fbfc 	bl	8000b4c <__aeabi_dcmpun>
 8009354:	b128      	cbz	r0, 8009362 <_scanf_float+0x406>
 8009356:	4808      	ldr	r0, [pc, #32]	; (8009378 <_scanf_float+0x41c>)
 8009358:	f000 f8c2 	bl	80094e0 <nanf>
 800935c:	ed88 0a00 	vstr	s0, [r8]
 8009360:	e7cb      	b.n	80092fa <_scanf_float+0x39e>
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 fc4f 	bl	8000c08 <__aeabi_d2f>
 800936a:	f8c8 0000 	str.w	r0, [r8]
 800936e:	e7c4      	b.n	80092fa <_scanf_float+0x39e>
 8009370:	2500      	movs	r5, #0
 8009372:	e634      	b.n	8008fde <_scanf_float+0x82>
 8009374:	0800dd4a 	.word	0x0800dd4a
 8009378:	0800e86b 	.word	0x0800e86b

0800937c <_perror_r>:
 800937c:	6983      	ldr	r3, [r0, #24]
 800937e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009380:	68c4      	ldr	r4, [r0, #12]
 8009382:	4605      	mov	r5, r0
 8009384:	460e      	mov	r6, r1
 8009386:	b90b      	cbnz	r3, 800938c <_perror_r+0x10>
 8009388:	f002 fa30 	bl	800b7ec <__sinit>
 800938c:	4b43      	ldr	r3, [pc, #268]	; (800949c <_perror_r+0x120>)
 800938e:	429c      	cmp	r4, r3
 8009390:	d132      	bne.n	80093f8 <_perror_r+0x7c>
 8009392:	686c      	ldr	r4, [r5, #4]
 8009394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009396:	07d8      	lsls	r0, r3, #31
 8009398:	d405      	bmi.n	80093a6 <_perror_r+0x2a>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	0599      	lsls	r1, r3, #22
 800939e:	d402      	bmi.n	80093a6 <_perror_r+0x2a>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f002 fe34 	bl	800c00e <__retarget_lock_acquire_recursive>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	f002 f94d 	bl	800b648 <_fflush_r>
 80093ae:	bb6e      	cbnz	r6, 800940c <_perror_r+0x90>
 80093b0:	6829      	ldr	r1, [r5, #0]
 80093b2:	ab01      	add	r3, sp, #4
 80093b4:	2201      	movs	r2, #1
 80093b6:	4628      	mov	r0, r5
 80093b8:	f000 f96e 	bl	8009698 <_strerror_r>
 80093bc:	4607      	mov	r7, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	d14f      	bne.n	8009462 <_perror_r+0xe6>
 80093c2:	4837      	ldr	r0, [pc, #220]	; (80094a0 <_perror_r+0x124>)
 80093c4:	4f36      	ldr	r7, [pc, #216]	; (80094a0 <_perror_r+0x124>)
 80093c6:	f7f6 ff0d 	bl	80001e4 <strlen>
 80093ca:	4606      	mov	r6, r0
 80093cc:	b156      	cbz	r6, 80093e4 <_perror_r+0x68>
 80093ce:	4620      	mov	r0, r4
 80093d0:	f002 f976 	bl	800b6c0 <fileno>
 80093d4:	4633      	mov	r3, r6
 80093d6:	4601      	mov	r1, r0
 80093d8:	463a      	mov	r2, r7
 80093da:	4628      	mov	r0, r5
 80093dc:	f001 fa12 	bl	800a804 <_write_r>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	da51      	bge.n	8009488 <_perror_r+0x10c>
 80093e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ee:	07d2      	lsls	r2, r2, #31
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	d54c      	bpl.n	800948e <_perror_r+0x112>
 80093f4:	b003      	add	sp, #12
 80093f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <_perror_r+0x128>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <_perror_r+0x86>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7c8      	b.n	8009394 <_perror_r+0x18>
 8009402:	4b29      	ldr	r3, [pc, #164]	; (80094a8 <_perror_r+0x12c>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7c3      	b.n	8009394 <_perror_r+0x18>
 800940c:	7833      	ldrb	r3, [r6, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0ce      	beq.n	80093b0 <_perror_r+0x34>
 8009412:	4630      	mov	r0, r6
 8009414:	f7f6 fee6 	bl	80001e4 <strlen>
 8009418:	4607      	mov	r7, r0
 800941a:	b157      	cbz	r7, 8009432 <_perror_r+0xb6>
 800941c:	4620      	mov	r0, r4
 800941e:	f002 f94f 	bl	800b6c0 <fileno>
 8009422:	463b      	mov	r3, r7
 8009424:	4601      	mov	r1, r0
 8009426:	4632      	mov	r2, r6
 8009428:	4628      	mov	r0, r5
 800942a:	f001 f9eb 	bl	800a804 <_write_r>
 800942e:	2800      	cmp	r0, #0
 8009430:	da14      	bge.n	800945c <_perror_r+0xe0>
 8009432:	481e      	ldr	r0, [pc, #120]	; (80094ac <_perror_r+0x130>)
 8009434:	4f1d      	ldr	r7, [pc, #116]	; (80094ac <_perror_r+0x130>)
 8009436:	f7f6 fed5 	bl	80001e4 <strlen>
 800943a:	4606      	mov	r6, r0
 800943c:	2e00      	cmp	r6, #0
 800943e:	d0b7      	beq.n	80093b0 <_perror_r+0x34>
 8009440:	4620      	mov	r0, r4
 8009442:	f002 f93d 	bl	800b6c0 <fileno>
 8009446:	4633      	mov	r3, r6
 8009448:	4601      	mov	r1, r0
 800944a:	463a      	mov	r2, r7
 800944c:	4628      	mov	r0, r5
 800944e:	f001 f9d9 	bl	800a804 <_write_r>
 8009452:	2800      	cmp	r0, #0
 8009454:	dbac      	blt.n	80093b0 <_perror_r+0x34>
 8009456:	1a36      	subs	r6, r6, r0
 8009458:	4407      	add	r7, r0
 800945a:	e7ef      	b.n	800943c <_perror_r+0xc0>
 800945c:	1a3f      	subs	r7, r7, r0
 800945e:	4406      	add	r6, r0
 8009460:	e7db      	b.n	800941a <_perror_r+0x9e>
 8009462:	f7f6 febf 	bl	80001e4 <strlen>
 8009466:	4606      	mov	r6, r0
 8009468:	2e00      	cmp	r6, #0
 800946a:	d0aa      	beq.n	80093c2 <_perror_r+0x46>
 800946c:	4620      	mov	r0, r4
 800946e:	f002 f927 	bl	800b6c0 <fileno>
 8009472:	4633      	mov	r3, r6
 8009474:	4601      	mov	r1, r0
 8009476:	463a      	mov	r2, r7
 8009478:	4628      	mov	r0, r5
 800947a:	f001 f9c3 	bl	800a804 <_write_r>
 800947e:	2800      	cmp	r0, #0
 8009480:	db9f      	blt.n	80093c2 <_perror_r+0x46>
 8009482:	1a36      	subs	r6, r6, r0
 8009484:	4407      	add	r7, r0
 8009486:	e7ef      	b.n	8009468 <_perror_r+0xec>
 8009488:	1a36      	subs	r6, r6, r0
 800948a:	4407      	add	r7, r0
 800948c:	e79e      	b.n	80093cc <_perror_r+0x50>
 800948e:	059b      	lsls	r3, r3, #22
 8009490:	d4b0      	bmi.n	80093f4 <_perror_r+0x78>
 8009492:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009494:	f002 fdbc 	bl	800c010 <__retarget_lock_release_recursive>
 8009498:	e7ac      	b.n	80093f4 <_perror_r+0x78>
 800949a:	bf00      	nop
 800949c:	0800e5ec 	.word	0x0800e5ec
 80094a0:	0800e86a 	.word	0x0800e86a
 80094a4:	0800e60c 	.word	0x0800e60c
 80094a8:	0800e5cc 	.word	0x0800e5cc
 80094ac:	0800e83a 	.word	0x0800e83a

080094b0 <perror>:
 80094b0:	4b02      	ldr	r3, [pc, #8]	; (80094bc <perror+0xc>)
 80094b2:	4601      	mov	r1, r0
 80094b4:	6818      	ldr	r0, [r3, #0]
 80094b6:	f7ff bf61 	b.w	800937c <_perror_r>
 80094ba:	bf00      	nop
 80094bc:	2000003c 	.word	0x2000003c

080094c0 <_sbrk_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d06      	ldr	r5, [pc, #24]	; (80094dc <_sbrk_r+0x1c>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	f7f8 fc1a 	bl	8001d04 <_sbrk>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_sbrk_r+0x1a>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_sbrk_r+0x1a>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	200007fc 	.word	0x200007fc

080094e0 <nanf>:
 80094e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80094e8 <nanf+0x8>
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	7fc00000 	.word	0x7fc00000

080094ec <_raise_r>:
 80094ec:	291f      	cmp	r1, #31
 80094ee:	b538      	push	{r3, r4, r5, lr}
 80094f0:	4604      	mov	r4, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	d904      	bls.n	8009500 <_raise_r+0x14>
 80094f6:	2316      	movs	r3, #22
 80094f8:	6003      	str	r3, [r0, #0]
 80094fa:	f04f 30ff 	mov.w	r0, #4294967295
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009502:	b112      	cbz	r2, 800950a <_raise_r+0x1e>
 8009504:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009508:	b94b      	cbnz	r3, 800951e <_raise_r+0x32>
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f830 	bl	8009570 <_getpid_r>
 8009510:	462a      	mov	r2, r5
 8009512:	4601      	mov	r1, r0
 8009514:	4620      	mov	r0, r4
 8009516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800951a:	f000 b817 	b.w	800954c <_kill_r>
 800951e:	2b01      	cmp	r3, #1
 8009520:	d00a      	beq.n	8009538 <_raise_r+0x4c>
 8009522:	1c59      	adds	r1, r3, #1
 8009524:	d103      	bne.n	800952e <_raise_r+0x42>
 8009526:	2316      	movs	r3, #22
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	2001      	movs	r0, #1
 800952c:	e7e7      	b.n	80094fe <_raise_r+0x12>
 800952e:	2400      	movs	r4, #0
 8009530:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009534:	4628      	mov	r0, r5
 8009536:	4798      	blx	r3
 8009538:	2000      	movs	r0, #0
 800953a:	e7e0      	b.n	80094fe <_raise_r+0x12>

0800953c <raise>:
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <raise+0xc>)
 800953e:	4601      	mov	r1, r0
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	f7ff bfd3 	b.w	80094ec <_raise_r>
 8009546:	bf00      	nop
 8009548:	2000003c 	.word	0x2000003c

0800954c <_kill_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	; (800956c <_kill_r+0x20>)
 8009550:	2300      	movs	r3, #0
 8009552:	4604      	mov	r4, r0
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	f7f8 fb4b 	bl	8001bf4 <_kill>
 800955e:	1c43      	adds	r3, r0, #1
 8009560:	d102      	bne.n	8009568 <_kill_r+0x1c>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	b103      	cbz	r3, 8009568 <_kill_r+0x1c>
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	bd38      	pop	{r3, r4, r5, pc}
 800956a:	bf00      	nop
 800956c:	200007fc 	.word	0x200007fc

08009570 <_getpid_r>:
 8009570:	f7f8 bb38 	b.w	8001be4 <_getpid>

08009574 <siprintf>:
 8009574:	b40e      	push	{r1, r2, r3}
 8009576:	b500      	push	{lr}
 8009578:	b09c      	sub	sp, #112	; 0x70
 800957a:	ab1d      	add	r3, sp, #116	; 0x74
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	9006      	str	r0, [sp, #24]
 8009580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009584:	4809      	ldr	r0, [pc, #36]	; (80095ac <siprintf+0x38>)
 8009586:	9107      	str	r1, [sp, #28]
 8009588:	9104      	str	r1, [sp, #16]
 800958a:	4909      	ldr	r1, [pc, #36]	; (80095b0 <siprintf+0x3c>)
 800958c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009590:	9105      	str	r1, [sp, #20]
 8009592:	6800      	ldr	r0, [r0, #0]
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	a902      	add	r1, sp, #8
 8009598:	f003 faac 	bl	800caf4 <_svfiprintf_r>
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
 80095a2:	b01c      	add	sp, #112	; 0x70
 80095a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a8:	b003      	add	sp, #12
 80095aa:	4770      	bx	lr
 80095ac:	2000003c 	.word	0x2000003c
 80095b0:	ffff0208 	.word	0xffff0208

080095b4 <siscanf>:
 80095b4:	b40e      	push	{r1, r2, r3}
 80095b6:	b510      	push	{r4, lr}
 80095b8:	b09f      	sub	sp, #124	; 0x7c
 80095ba:	ac21      	add	r4, sp, #132	; 0x84
 80095bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80095c0:	f854 2b04 	ldr.w	r2, [r4], #4
 80095c4:	9201      	str	r2, [sp, #4]
 80095c6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80095ca:	9004      	str	r0, [sp, #16]
 80095cc:	9008      	str	r0, [sp, #32]
 80095ce:	f7f6 fe09 	bl	80001e4 <strlen>
 80095d2:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <siscanf+0x50>)
 80095d4:	9005      	str	r0, [sp, #20]
 80095d6:	9009      	str	r0, [sp, #36]	; 0x24
 80095d8:	930d      	str	r3, [sp, #52]	; 0x34
 80095da:	480b      	ldr	r0, [pc, #44]	; (8009608 <siscanf+0x54>)
 80095dc:	9a01      	ldr	r2, [sp, #4]
 80095de:	6800      	ldr	r0, [r0, #0]
 80095e0:	9403      	str	r4, [sp, #12]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9311      	str	r3, [sp, #68]	; 0x44
 80095e6:	9316      	str	r3, [sp, #88]	; 0x58
 80095e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	4623      	mov	r3, r4
 80095f4:	f003 fbd8 	bl	800cda8 <__ssvfiscanf_r>
 80095f8:	b01f      	add	sp, #124	; 0x7c
 80095fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095fe:	b003      	add	sp, #12
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	0800962f 	.word	0x0800962f
 8009608:	2000003c 	.word	0x2000003c

0800960c <__sread>:
 800960c:	b510      	push	{r4, lr}
 800960e:	460c      	mov	r4, r1
 8009610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009614:	f003 fe92 	bl	800d33c <_read_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	bfab      	itete	ge
 800961c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800961e:	89a3      	ldrhlt	r3, [r4, #12]
 8009620:	181b      	addge	r3, r3, r0
 8009622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009626:	bfac      	ite	ge
 8009628:	6563      	strge	r3, [r4, #84]	; 0x54
 800962a:	81a3      	strhlt	r3, [r4, #12]
 800962c:	bd10      	pop	{r4, pc}

0800962e <__seofread>:
 800962e:	2000      	movs	r0, #0
 8009630:	4770      	bx	lr

08009632 <__swrite>:
 8009632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009636:	461f      	mov	r7, r3
 8009638:	898b      	ldrh	r3, [r1, #12]
 800963a:	05db      	lsls	r3, r3, #23
 800963c:	4605      	mov	r5, r0
 800963e:	460c      	mov	r4, r1
 8009640:	4616      	mov	r6, r2
 8009642:	d505      	bpl.n	8009650 <__swrite+0x1e>
 8009644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009648:	2302      	movs	r3, #2
 800964a:	2200      	movs	r2, #0
 800964c:	f002 fce2 	bl	800c014 <_lseek_r>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	4628      	mov	r0, r5
 8009662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009666:	f001 b8cd 	b.w	800a804 <_write_r>

0800966a <__sseek>:
 800966a:	b510      	push	{r4, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009672:	f002 fccf 	bl	800c014 <_lseek_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	bf15      	itete	ne
 800967c:	6560      	strne	r0, [r4, #84]	; 0x54
 800967e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009686:	81a3      	strheq	r3, [r4, #12]
 8009688:	bf18      	it	ne
 800968a:	81a3      	strhne	r3, [r4, #12]
 800968c:	bd10      	pop	{r4, pc}

0800968e <__sclose>:
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f001 b8c9 	b.w	800a828 <_close_r>
	...

08009698 <_strerror_r>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	4611      	mov	r1, r2
 80096a0:	288e      	cmp	r0, #142	; 0x8e
 80096a2:	f200 8130 	bhi.w	8009906 <_strerror_r+0x26e>
 80096a6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80096aa:	0139      	.short	0x0139
 80096ac:	0092008f 	.word	0x0092008f
 80096b0:	00960094 	.word	0x00960094
 80096b4:	009a0098 	.word	0x009a0098
 80096b8:	009e009c 	.word	0x009e009c
 80096bc:	00a400a2 	.word	0x00a400a2
 80096c0:	00aa00a8 	.word	0x00aa00a8
 80096c4:	00ae00ac 	.word	0x00ae00ac
 80096c8:	00b0012e 	.word	0x00b0012e
 80096cc:	00b400b2 	.word	0x00b400b2
 80096d0:	00b800b6 	.word	0x00b800b6
 80096d4:	00c000be 	.word	0x00c000be
 80096d8:	00c800c6 	.word	0x00c800c6
 80096dc:	00cc00ca 	.word	0x00cc00ca
 80096e0:	00d200ce 	.word	0x00d200ce
 80096e4:	00d800d6 	.word	0x00d800d6
 80096e8:	00dc00da 	.word	0x00dc00da
 80096ec:	00e000de 	.word	0x00e000de
 80096f0:	00e400e2 	.word	0x00e400e2
 80096f4:	012e012e 	.word	0x012e012e
 80096f8:	012e012e 	.word	0x012e012e
 80096fc:	012e012e 	.word	0x012e012e
 8009700:	012e012e 	.word	0x012e012e
 8009704:	00ec00e8 	.word	0x00ec00e8
 8009708:	012e012e 	.word	0x012e012e
 800970c:	012e012e 	.word	0x012e012e
 8009710:	012e012e 	.word	0x012e012e
 8009714:	012e012e 	.word	0x012e012e
 8009718:	012e012e 	.word	0x012e012e
 800971c:	012e012e 	.word	0x012e012e
 8009720:	00ee012e 	.word	0x00ee012e
 8009724:	00f00108 	.word	0x00f00108
 8009728:	012e00f2 	.word	0x012e00f2
 800972c:	012e012e 	.word	0x012e012e
 8009730:	012e00f4 	.word	0x012e00f4
 8009734:	012e012e 	.word	0x012e012e
 8009738:	012e00f6 	.word	0x012e00f6
 800973c:	00fa012e 	.word	0x00fa012e
 8009740:	012e012e 	.word	0x012e012e
 8009744:	012e00fc 	.word	0x012e00fc
 8009748:	012e012e 	.word	0x012e012e
 800974c:	012e012e 	.word	0x012e012e
 8009750:	012e012e 	.word	0x012e012e
 8009754:	012e012e 	.word	0x012e012e
 8009758:	00fe012e 	.word	0x00fe012e
 800975c:	0100012e 	.word	0x0100012e
 8009760:	01040102 	.word	0x01040102
 8009764:	012e012e 	.word	0x012e012e
 8009768:	012e0126 	.word	0x012e0126
 800976c:	012e012e 	.word	0x012e012e
 8009770:	012e012e 	.word	0x012e012e
 8009774:	012e012e 	.word	0x012e012e
 8009778:	0114012e 	.word	0x0114012e
 800977c:	010a0106 	.word	0x010a0106
 8009780:	010e010c 	.word	0x010e010c
 8009784:	012e0110 	.word	0x012e0110
 8009788:	01160112 	.word	0x01160112
 800978c:	00ea011a 	.word	0x00ea011a
 8009790:	012c00c2 	.word	0x012c00c2
 8009794:	00d000ba 	.word	0x00d000ba
 8009798:	00a000bc 	.word	0x00a000bc
 800979c:	012a00a6 	.word	0x012a00a6
 80097a0:	012e00f8 	.word	0x012e00f8
 80097a4:	00c40118 	.word	0x00c40118
 80097a8:	011c011e 	.word	0x011c011e
 80097ac:	012e012e 	.word	0x012e012e
 80097b0:	012e012e 	.word	0x012e012e
 80097b4:	00d4012e 	.word	0x00d4012e
 80097b8:	012e012e 	.word	0x012e012e
 80097bc:	00e6012e 	.word	0x00e6012e
 80097c0:	01200128 	.word	0x01200128
 80097c4:	01240122 	.word	0x01240122
 80097c8:	4b55      	ldr	r3, [pc, #340]	; (8009920 <_strerror_r+0x288>)
 80097ca:	4618      	mov	r0, r3
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	4b55      	ldr	r3, [pc, #340]	; (8009924 <_strerror_r+0x28c>)
 80097d0:	e7fb      	b.n	80097ca <_strerror_r+0x132>
 80097d2:	4b55      	ldr	r3, [pc, #340]	; (8009928 <_strerror_r+0x290>)
 80097d4:	e7f9      	b.n	80097ca <_strerror_r+0x132>
 80097d6:	4b55      	ldr	r3, [pc, #340]	; (800992c <_strerror_r+0x294>)
 80097d8:	e7f7      	b.n	80097ca <_strerror_r+0x132>
 80097da:	4b55      	ldr	r3, [pc, #340]	; (8009930 <_strerror_r+0x298>)
 80097dc:	e7f5      	b.n	80097ca <_strerror_r+0x132>
 80097de:	4b55      	ldr	r3, [pc, #340]	; (8009934 <_strerror_r+0x29c>)
 80097e0:	e7f3      	b.n	80097ca <_strerror_r+0x132>
 80097e2:	4b55      	ldr	r3, [pc, #340]	; (8009938 <_strerror_r+0x2a0>)
 80097e4:	e7f1      	b.n	80097ca <_strerror_r+0x132>
 80097e6:	4b55      	ldr	r3, [pc, #340]	; (800993c <_strerror_r+0x2a4>)
 80097e8:	e7ef      	b.n	80097ca <_strerror_r+0x132>
 80097ea:	4b55      	ldr	r3, [pc, #340]	; (8009940 <_strerror_r+0x2a8>)
 80097ec:	e7ed      	b.n	80097ca <_strerror_r+0x132>
 80097ee:	4b55      	ldr	r3, [pc, #340]	; (8009944 <_strerror_r+0x2ac>)
 80097f0:	e7eb      	b.n	80097ca <_strerror_r+0x132>
 80097f2:	4b55      	ldr	r3, [pc, #340]	; (8009948 <_strerror_r+0x2b0>)
 80097f4:	e7e9      	b.n	80097ca <_strerror_r+0x132>
 80097f6:	4b55      	ldr	r3, [pc, #340]	; (800994c <_strerror_r+0x2b4>)
 80097f8:	e7e7      	b.n	80097ca <_strerror_r+0x132>
 80097fa:	4b55      	ldr	r3, [pc, #340]	; (8009950 <_strerror_r+0x2b8>)
 80097fc:	e7e5      	b.n	80097ca <_strerror_r+0x132>
 80097fe:	4b55      	ldr	r3, [pc, #340]	; (8009954 <_strerror_r+0x2bc>)
 8009800:	e7e3      	b.n	80097ca <_strerror_r+0x132>
 8009802:	4b55      	ldr	r3, [pc, #340]	; (8009958 <_strerror_r+0x2c0>)
 8009804:	e7e1      	b.n	80097ca <_strerror_r+0x132>
 8009806:	4b55      	ldr	r3, [pc, #340]	; (800995c <_strerror_r+0x2c4>)
 8009808:	e7df      	b.n	80097ca <_strerror_r+0x132>
 800980a:	4b55      	ldr	r3, [pc, #340]	; (8009960 <_strerror_r+0x2c8>)
 800980c:	e7dd      	b.n	80097ca <_strerror_r+0x132>
 800980e:	4b55      	ldr	r3, [pc, #340]	; (8009964 <_strerror_r+0x2cc>)
 8009810:	e7db      	b.n	80097ca <_strerror_r+0x132>
 8009812:	4b55      	ldr	r3, [pc, #340]	; (8009968 <_strerror_r+0x2d0>)
 8009814:	e7d9      	b.n	80097ca <_strerror_r+0x132>
 8009816:	4b55      	ldr	r3, [pc, #340]	; (800996c <_strerror_r+0x2d4>)
 8009818:	e7d7      	b.n	80097ca <_strerror_r+0x132>
 800981a:	4b55      	ldr	r3, [pc, #340]	; (8009970 <_strerror_r+0x2d8>)
 800981c:	e7d5      	b.n	80097ca <_strerror_r+0x132>
 800981e:	4b55      	ldr	r3, [pc, #340]	; (8009974 <_strerror_r+0x2dc>)
 8009820:	e7d3      	b.n	80097ca <_strerror_r+0x132>
 8009822:	4b55      	ldr	r3, [pc, #340]	; (8009978 <_strerror_r+0x2e0>)
 8009824:	e7d1      	b.n	80097ca <_strerror_r+0x132>
 8009826:	4b55      	ldr	r3, [pc, #340]	; (800997c <_strerror_r+0x2e4>)
 8009828:	e7cf      	b.n	80097ca <_strerror_r+0x132>
 800982a:	4b55      	ldr	r3, [pc, #340]	; (8009980 <_strerror_r+0x2e8>)
 800982c:	e7cd      	b.n	80097ca <_strerror_r+0x132>
 800982e:	4b55      	ldr	r3, [pc, #340]	; (8009984 <_strerror_r+0x2ec>)
 8009830:	e7cb      	b.n	80097ca <_strerror_r+0x132>
 8009832:	4b55      	ldr	r3, [pc, #340]	; (8009988 <_strerror_r+0x2f0>)
 8009834:	e7c9      	b.n	80097ca <_strerror_r+0x132>
 8009836:	4b55      	ldr	r3, [pc, #340]	; (800998c <_strerror_r+0x2f4>)
 8009838:	e7c7      	b.n	80097ca <_strerror_r+0x132>
 800983a:	4b55      	ldr	r3, [pc, #340]	; (8009990 <_strerror_r+0x2f8>)
 800983c:	e7c5      	b.n	80097ca <_strerror_r+0x132>
 800983e:	4b55      	ldr	r3, [pc, #340]	; (8009994 <_strerror_r+0x2fc>)
 8009840:	e7c3      	b.n	80097ca <_strerror_r+0x132>
 8009842:	4b55      	ldr	r3, [pc, #340]	; (8009998 <_strerror_r+0x300>)
 8009844:	e7c1      	b.n	80097ca <_strerror_r+0x132>
 8009846:	4b55      	ldr	r3, [pc, #340]	; (800999c <_strerror_r+0x304>)
 8009848:	e7bf      	b.n	80097ca <_strerror_r+0x132>
 800984a:	4b55      	ldr	r3, [pc, #340]	; (80099a0 <_strerror_r+0x308>)
 800984c:	e7bd      	b.n	80097ca <_strerror_r+0x132>
 800984e:	4b55      	ldr	r3, [pc, #340]	; (80099a4 <_strerror_r+0x30c>)
 8009850:	e7bb      	b.n	80097ca <_strerror_r+0x132>
 8009852:	4b55      	ldr	r3, [pc, #340]	; (80099a8 <_strerror_r+0x310>)
 8009854:	e7b9      	b.n	80097ca <_strerror_r+0x132>
 8009856:	4b55      	ldr	r3, [pc, #340]	; (80099ac <_strerror_r+0x314>)
 8009858:	e7b7      	b.n	80097ca <_strerror_r+0x132>
 800985a:	4b55      	ldr	r3, [pc, #340]	; (80099b0 <_strerror_r+0x318>)
 800985c:	e7b5      	b.n	80097ca <_strerror_r+0x132>
 800985e:	4b55      	ldr	r3, [pc, #340]	; (80099b4 <_strerror_r+0x31c>)
 8009860:	e7b3      	b.n	80097ca <_strerror_r+0x132>
 8009862:	4b55      	ldr	r3, [pc, #340]	; (80099b8 <_strerror_r+0x320>)
 8009864:	e7b1      	b.n	80097ca <_strerror_r+0x132>
 8009866:	4b55      	ldr	r3, [pc, #340]	; (80099bc <_strerror_r+0x324>)
 8009868:	e7af      	b.n	80097ca <_strerror_r+0x132>
 800986a:	4b55      	ldr	r3, [pc, #340]	; (80099c0 <_strerror_r+0x328>)
 800986c:	e7ad      	b.n	80097ca <_strerror_r+0x132>
 800986e:	4b55      	ldr	r3, [pc, #340]	; (80099c4 <_strerror_r+0x32c>)
 8009870:	e7ab      	b.n	80097ca <_strerror_r+0x132>
 8009872:	4b55      	ldr	r3, [pc, #340]	; (80099c8 <_strerror_r+0x330>)
 8009874:	e7a9      	b.n	80097ca <_strerror_r+0x132>
 8009876:	4b55      	ldr	r3, [pc, #340]	; (80099cc <_strerror_r+0x334>)
 8009878:	e7a7      	b.n	80097ca <_strerror_r+0x132>
 800987a:	4b55      	ldr	r3, [pc, #340]	; (80099d0 <_strerror_r+0x338>)
 800987c:	e7a5      	b.n	80097ca <_strerror_r+0x132>
 800987e:	4b55      	ldr	r3, [pc, #340]	; (80099d4 <_strerror_r+0x33c>)
 8009880:	e7a3      	b.n	80097ca <_strerror_r+0x132>
 8009882:	4b55      	ldr	r3, [pc, #340]	; (80099d8 <_strerror_r+0x340>)
 8009884:	e7a1      	b.n	80097ca <_strerror_r+0x132>
 8009886:	4b55      	ldr	r3, [pc, #340]	; (80099dc <_strerror_r+0x344>)
 8009888:	e79f      	b.n	80097ca <_strerror_r+0x132>
 800988a:	4b55      	ldr	r3, [pc, #340]	; (80099e0 <_strerror_r+0x348>)
 800988c:	e79d      	b.n	80097ca <_strerror_r+0x132>
 800988e:	4b55      	ldr	r3, [pc, #340]	; (80099e4 <_strerror_r+0x34c>)
 8009890:	e79b      	b.n	80097ca <_strerror_r+0x132>
 8009892:	4b55      	ldr	r3, [pc, #340]	; (80099e8 <_strerror_r+0x350>)
 8009894:	e799      	b.n	80097ca <_strerror_r+0x132>
 8009896:	4b55      	ldr	r3, [pc, #340]	; (80099ec <_strerror_r+0x354>)
 8009898:	e797      	b.n	80097ca <_strerror_r+0x132>
 800989a:	4b55      	ldr	r3, [pc, #340]	; (80099f0 <_strerror_r+0x358>)
 800989c:	e795      	b.n	80097ca <_strerror_r+0x132>
 800989e:	4b55      	ldr	r3, [pc, #340]	; (80099f4 <_strerror_r+0x35c>)
 80098a0:	e793      	b.n	80097ca <_strerror_r+0x132>
 80098a2:	4b55      	ldr	r3, [pc, #340]	; (80099f8 <_strerror_r+0x360>)
 80098a4:	e791      	b.n	80097ca <_strerror_r+0x132>
 80098a6:	4b55      	ldr	r3, [pc, #340]	; (80099fc <_strerror_r+0x364>)
 80098a8:	e78f      	b.n	80097ca <_strerror_r+0x132>
 80098aa:	4b55      	ldr	r3, [pc, #340]	; (8009a00 <_strerror_r+0x368>)
 80098ac:	e78d      	b.n	80097ca <_strerror_r+0x132>
 80098ae:	4b55      	ldr	r3, [pc, #340]	; (8009a04 <_strerror_r+0x36c>)
 80098b0:	e78b      	b.n	80097ca <_strerror_r+0x132>
 80098b2:	4b55      	ldr	r3, [pc, #340]	; (8009a08 <_strerror_r+0x370>)
 80098b4:	e789      	b.n	80097ca <_strerror_r+0x132>
 80098b6:	4b55      	ldr	r3, [pc, #340]	; (8009a0c <_strerror_r+0x374>)
 80098b8:	e787      	b.n	80097ca <_strerror_r+0x132>
 80098ba:	4b55      	ldr	r3, [pc, #340]	; (8009a10 <_strerror_r+0x378>)
 80098bc:	e785      	b.n	80097ca <_strerror_r+0x132>
 80098be:	4b55      	ldr	r3, [pc, #340]	; (8009a14 <_strerror_r+0x37c>)
 80098c0:	e783      	b.n	80097ca <_strerror_r+0x132>
 80098c2:	4b55      	ldr	r3, [pc, #340]	; (8009a18 <_strerror_r+0x380>)
 80098c4:	e781      	b.n	80097ca <_strerror_r+0x132>
 80098c6:	4b55      	ldr	r3, [pc, #340]	; (8009a1c <_strerror_r+0x384>)
 80098c8:	e77f      	b.n	80097ca <_strerror_r+0x132>
 80098ca:	4b55      	ldr	r3, [pc, #340]	; (8009a20 <_strerror_r+0x388>)
 80098cc:	e77d      	b.n	80097ca <_strerror_r+0x132>
 80098ce:	4b55      	ldr	r3, [pc, #340]	; (8009a24 <_strerror_r+0x38c>)
 80098d0:	e77b      	b.n	80097ca <_strerror_r+0x132>
 80098d2:	4b55      	ldr	r3, [pc, #340]	; (8009a28 <_strerror_r+0x390>)
 80098d4:	e779      	b.n	80097ca <_strerror_r+0x132>
 80098d6:	4b55      	ldr	r3, [pc, #340]	; (8009a2c <_strerror_r+0x394>)
 80098d8:	e777      	b.n	80097ca <_strerror_r+0x132>
 80098da:	4b55      	ldr	r3, [pc, #340]	; (8009a30 <_strerror_r+0x398>)
 80098dc:	e775      	b.n	80097ca <_strerror_r+0x132>
 80098de:	4b55      	ldr	r3, [pc, #340]	; (8009a34 <_strerror_r+0x39c>)
 80098e0:	e773      	b.n	80097ca <_strerror_r+0x132>
 80098e2:	4b55      	ldr	r3, [pc, #340]	; (8009a38 <_strerror_r+0x3a0>)
 80098e4:	e771      	b.n	80097ca <_strerror_r+0x132>
 80098e6:	4b55      	ldr	r3, [pc, #340]	; (8009a3c <_strerror_r+0x3a4>)
 80098e8:	e76f      	b.n	80097ca <_strerror_r+0x132>
 80098ea:	4b55      	ldr	r3, [pc, #340]	; (8009a40 <_strerror_r+0x3a8>)
 80098ec:	e76d      	b.n	80097ca <_strerror_r+0x132>
 80098ee:	4b55      	ldr	r3, [pc, #340]	; (8009a44 <_strerror_r+0x3ac>)
 80098f0:	e76b      	b.n	80097ca <_strerror_r+0x132>
 80098f2:	4b55      	ldr	r3, [pc, #340]	; (8009a48 <_strerror_r+0x3b0>)
 80098f4:	e769      	b.n	80097ca <_strerror_r+0x132>
 80098f6:	4b55      	ldr	r3, [pc, #340]	; (8009a4c <_strerror_r+0x3b4>)
 80098f8:	e767      	b.n	80097ca <_strerror_r+0x132>
 80098fa:	4b55      	ldr	r3, [pc, #340]	; (8009a50 <_strerror_r+0x3b8>)
 80098fc:	e765      	b.n	80097ca <_strerror_r+0x132>
 80098fe:	4b55      	ldr	r3, [pc, #340]	; (8009a54 <_strerror_r+0x3bc>)
 8009900:	e763      	b.n	80097ca <_strerror_r+0x132>
 8009902:	4b55      	ldr	r3, [pc, #340]	; (8009a58 <_strerror_r+0x3c0>)
 8009904:	e761      	b.n	80097ca <_strerror_r+0x132>
 8009906:	2b00      	cmp	r3, #0
 8009908:	bf14      	ite	ne
 800990a:	461a      	movne	r2, r3
 800990c:	4622      	moveq	r2, r4
 800990e:	f000 ff57 	bl	800a7c0 <_user_strerror>
 8009912:	4b52      	ldr	r3, [pc, #328]	; (8009a5c <_strerror_r+0x3c4>)
 8009914:	2800      	cmp	r0, #0
 8009916:	bf18      	it	ne
 8009918:	4603      	movne	r3, r0
 800991a:	e756      	b.n	80097ca <_strerror_r+0x132>
 800991c:	4b50      	ldr	r3, [pc, #320]	; (8009a60 <_strerror_r+0x3c8>)
 800991e:	e754      	b.n	80097ca <_strerror_r+0x132>
 8009920:	0800dd4f 	.word	0x0800dd4f
 8009924:	0800dd59 	.word	0x0800dd59
 8009928:	0800dd73 	.word	0x0800dd73
 800992c:	0800dd83 	.word	0x0800dd83
 8009930:	0800dd9b 	.word	0x0800dd9b
 8009934:	0800dda5 	.word	0x0800dda5
 8009938:	0800ddbf 	.word	0x0800ddbf
 800993c:	0800ddd1 	.word	0x0800ddd1
 8009940:	0800dde3 	.word	0x0800dde3
 8009944:	0800ddfc 	.word	0x0800ddfc
 8009948:	0800de0c 	.word	0x0800de0c
 800994c:	0800de18 	.word	0x0800de18
 8009950:	0800de35 	.word	0x0800de35
 8009954:	0800de47 	.word	0x0800de47
 8009958:	0800de58 	.word	0x0800de58
 800995c:	0800de6a 	.word	0x0800de6a
 8009960:	0800de76 	.word	0x0800de76
 8009964:	0800de8e 	.word	0x0800de8e
 8009968:	0800de9a 	.word	0x0800de9a
 800996c:	0800deac 	.word	0x0800deac
 8009970:	0800debb 	.word	0x0800debb
 8009974:	0800decb 	.word	0x0800decb
 8009978:	0800ded8 	.word	0x0800ded8
 800997c:	0800def7 	.word	0x0800def7
 8009980:	0800df06 	.word	0x0800df06
 8009984:	0800df17 	.word	0x0800df17
 8009988:	0800df3b 	.word	0x0800df3b
 800998c:	0800df59 	.word	0x0800df59
 8009990:	0800df77 	.word	0x0800df77
 8009994:	0800df97 	.word	0x0800df97
 8009998:	0800dfae 	.word	0x0800dfae
 800999c:	0800dfbd 	.word	0x0800dfbd
 80099a0:	0800dfcc 	.word	0x0800dfcc
 80099a4:	0800dfe0 	.word	0x0800dfe0
 80099a8:	0800dff8 	.word	0x0800dff8
 80099ac:	0800e006 	.word	0x0800e006
 80099b0:	0800e013 	.word	0x0800e013
 80099b4:	0800e029 	.word	0x0800e029
 80099b8:	0800e038 	.word	0x0800e038
 80099bc:	0800e044 	.word	0x0800e044
 80099c0:	0800e073 	.word	0x0800e073
 80099c4:	0800e084 	.word	0x0800e084
 80099c8:	0800e09f 	.word	0x0800e09f
 80099cc:	0800e0b2 	.word	0x0800e0b2
 80099d0:	0800e0c8 	.word	0x0800e0c8
 80099d4:	0800e0d1 	.word	0x0800e0d1
 80099d8:	0800e0e8 	.word	0x0800e0e8
 80099dc:	0800e0f0 	.word	0x0800e0f0
 80099e0:	0800e0fd 	.word	0x0800e0fd
 80099e4:	0800e112 	.word	0x0800e112
 80099e8:	0800e126 	.word	0x0800e126
 80099ec:	0800e13e 	.word	0x0800e13e
 80099f0:	0800e14d 	.word	0x0800e14d
 80099f4:	0800e15e 	.word	0x0800e15e
 80099f8:	0800e171 	.word	0x0800e171
 80099fc:	0800e17d 	.word	0x0800e17d
 8009a00:	0800e196 	.word	0x0800e196
 8009a04:	0800e1aa 	.word	0x0800e1aa
 8009a08:	0800e1c5 	.word	0x0800e1c5
 8009a0c:	0800e1dd 	.word	0x0800e1dd
 8009a10:	0800e1f7 	.word	0x0800e1f7
 8009a14:	0800e1ff 	.word	0x0800e1ff
 8009a18:	0800e22f 	.word	0x0800e22f
 8009a1c:	0800e24e 	.word	0x0800e24e
 8009a20:	0800e26d 	.word	0x0800e26d
 8009a24:	0800e284 	.word	0x0800e284
 8009a28:	0800e297 	.word	0x0800e297
 8009a2c:	0800e2b0 	.word	0x0800e2b0
 8009a30:	0800e2c7 	.word	0x0800e2c7
 8009a34:	0800e2dd 	.word	0x0800e2dd
 8009a38:	0800e2fe 	.word	0x0800e2fe
 8009a3c:	0800e316 	.word	0x0800e316
 8009a40:	0800e332 	.word	0x0800e332
 8009a44:	0800e345 	.word	0x0800e345
 8009a48:	0800e35b 	.word	0x0800e35b
 8009a4c:	0800e36f 	.word	0x0800e36f
 8009a50:	0800e391 	.word	0x0800e391
 8009a54:	0800e3b7 	.word	0x0800e3b7
 8009a58:	0800e3c8 	.word	0x0800e3c8
 8009a5c:	0800e86b 	.word	0x0800e86b
 8009a60:	0800e3dd 	.word	0x0800e3dd

08009a64 <sulp>:
 8009a64:	b570      	push	{r4, r5, r6, lr}
 8009a66:	4604      	mov	r4, r0
 8009a68:	460d      	mov	r5, r1
 8009a6a:	ec45 4b10 	vmov	d0, r4, r5
 8009a6e:	4616      	mov	r6, r2
 8009a70:	f002 fe80 	bl	800c774 <__ulp>
 8009a74:	ec51 0b10 	vmov	r0, r1, d0
 8009a78:	b17e      	cbz	r6, 8009a9a <sulp+0x36>
 8009a7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009a7e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dd09      	ble.n	8009a9a <sulp+0x36>
 8009a86:	051b      	lsls	r3, r3, #20
 8009a88:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009a8c:	2400      	movs	r4, #0
 8009a8e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009a92:	4622      	mov	r2, r4
 8009a94:	462b      	mov	r3, r5
 8009a96:	f7f6 fdbf 	bl	8000618 <__aeabi_dmul>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0000      	movs	r0, r0
	...

08009aa0 <_strtod_l>:
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	ed2d 8b02 	vpush	{d8}
 8009aa8:	b09d      	sub	sp, #116	; 0x74
 8009aaa:	461f      	mov	r7, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	9318      	str	r3, [sp, #96]	; 0x60
 8009ab0:	4ba2      	ldr	r3, [pc, #648]	; (8009d3c <_strtod_l+0x29c>)
 8009ab2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4618      	mov	r0, r3
 8009abc:	4688      	mov	r8, r1
 8009abe:	f7f6 fb91 	bl	80001e4 <strlen>
 8009ac2:	f04f 0a00 	mov.w	sl, #0
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	f04f 0b00 	mov.w	fp, #0
 8009acc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	2a2b      	cmp	r2, #43	; 0x2b
 8009ad6:	d04e      	beq.n	8009b76 <_strtod_l+0xd6>
 8009ad8:	d83b      	bhi.n	8009b52 <_strtod_l+0xb2>
 8009ada:	2a0d      	cmp	r2, #13
 8009adc:	d834      	bhi.n	8009b48 <_strtod_l+0xa8>
 8009ade:	2a08      	cmp	r2, #8
 8009ae0:	d834      	bhi.n	8009b4c <_strtod_l+0xac>
 8009ae2:	2a00      	cmp	r2, #0
 8009ae4:	d03e      	beq.n	8009b64 <_strtod_l+0xc4>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8009aea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009aec:	7833      	ldrb	r3, [r6, #0]
 8009aee:	2b30      	cmp	r3, #48	; 0x30
 8009af0:	f040 80b0 	bne.w	8009c54 <_strtod_l+0x1b4>
 8009af4:	7873      	ldrb	r3, [r6, #1]
 8009af6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009afa:	2b58      	cmp	r3, #88	; 0x58
 8009afc:	d168      	bne.n	8009bd0 <_strtod_l+0x130>
 8009afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b00:	9301      	str	r3, [sp, #4]
 8009b02:	ab18      	add	r3, sp, #96	; 0x60
 8009b04:	9702      	str	r7, [sp, #8]
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	4a8d      	ldr	r2, [pc, #564]	; (8009d40 <_strtod_l+0x2a0>)
 8009b0a:	ab19      	add	r3, sp, #100	; 0x64
 8009b0c:	a917      	add	r1, sp, #92	; 0x5c
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f001 ff70 	bl	800b9f4 <__gethex>
 8009b14:	f010 0707 	ands.w	r7, r0, #7
 8009b18:	4605      	mov	r5, r0
 8009b1a:	d005      	beq.n	8009b28 <_strtod_l+0x88>
 8009b1c:	2f06      	cmp	r7, #6
 8009b1e:	d12c      	bne.n	8009b7a <_strtod_l+0xda>
 8009b20:	3601      	adds	r6, #1
 8009b22:	2300      	movs	r3, #0
 8009b24:	9617      	str	r6, [sp, #92]	; 0x5c
 8009b26:	930a      	str	r3, [sp, #40]	; 0x28
 8009b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f040 8590 	bne.w	800a650 <_strtod_l+0xbb0>
 8009b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b32:	b1eb      	cbz	r3, 8009b70 <_strtod_l+0xd0>
 8009b34:	4652      	mov	r2, sl
 8009b36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009b3a:	ec43 2b10 	vmov	d0, r2, r3
 8009b3e:	b01d      	add	sp, #116	; 0x74
 8009b40:	ecbd 8b02 	vpop	{d8}
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	2a20      	cmp	r2, #32
 8009b4a:	d1cc      	bne.n	8009ae6 <_strtod_l+0x46>
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009b50:	e7be      	b.n	8009ad0 <_strtod_l+0x30>
 8009b52:	2a2d      	cmp	r2, #45	; 0x2d
 8009b54:	d1c7      	bne.n	8009ae6 <_strtod_l+0x46>
 8009b56:	2201      	movs	r2, #1
 8009b58:	920a      	str	r2, [sp, #40]	; 0x28
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b5e:	785b      	ldrb	r3, [r3, #1]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1c2      	bne.n	8009aea <_strtod_l+0x4a>
 8009b64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009b66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 856e 	bne.w	800a64c <_strtod_l+0xbac>
 8009b70:	4652      	mov	r2, sl
 8009b72:	465b      	mov	r3, fp
 8009b74:	e7e1      	b.n	8009b3a <_strtod_l+0x9a>
 8009b76:	2200      	movs	r2, #0
 8009b78:	e7ee      	b.n	8009b58 <_strtod_l+0xb8>
 8009b7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b7c:	b13a      	cbz	r2, 8009b8e <_strtod_l+0xee>
 8009b7e:	2135      	movs	r1, #53	; 0x35
 8009b80:	a81a      	add	r0, sp, #104	; 0x68
 8009b82:	f002 ff02 	bl	800c98a <__copybits>
 8009b86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f002 fac1 	bl	800c110 <_Bfree>
 8009b8e:	3f01      	subs	r7, #1
 8009b90:	2f04      	cmp	r7, #4
 8009b92:	d806      	bhi.n	8009ba2 <_strtod_l+0x102>
 8009b94:	e8df f007 	tbb	[pc, r7]
 8009b98:	1714030a 	.word	0x1714030a
 8009b9c:	0a          	.byte	0x0a
 8009b9d:	00          	.byte	0x00
 8009b9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009ba2:	0728      	lsls	r0, r5, #28
 8009ba4:	d5c0      	bpl.n	8009b28 <_strtod_l+0x88>
 8009ba6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009baa:	e7bd      	b.n	8009b28 <_strtod_l+0x88>
 8009bac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009bb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009bb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009bb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009bba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009bbe:	e7f0      	b.n	8009ba2 <_strtod_l+0x102>
 8009bc0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009d44 <_strtod_l+0x2a4>
 8009bc4:	e7ed      	b.n	8009ba2 <_strtod_l+0x102>
 8009bc6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009bca:	f04f 3aff 	mov.w	sl, #4294967295
 8009bce:	e7e8      	b.n	8009ba2 <_strtod_l+0x102>
 8009bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009bd6:	785b      	ldrb	r3, [r3, #1]
 8009bd8:	2b30      	cmp	r3, #48	; 0x30
 8009bda:	d0f9      	beq.n	8009bd0 <_strtod_l+0x130>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0a3      	beq.n	8009b28 <_strtod_l+0x88>
 8009be0:	2301      	movs	r3, #1
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bea:	9308      	str	r3, [sp, #32]
 8009bec:	f8cd 901c 	str.w	r9, [sp, #28]
 8009bf0:	464f      	mov	r7, r9
 8009bf2:	220a      	movs	r2, #10
 8009bf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009bf6:	7806      	ldrb	r6, [r0, #0]
 8009bf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009bfc:	b2d9      	uxtb	r1, r3
 8009bfe:	2909      	cmp	r1, #9
 8009c00:	d92a      	bls.n	8009c58 <_strtod_l+0x1b8>
 8009c02:	9905      	ldr	r1, [sp, #20]
 8009c04:	462a      	mov	r2, r5
 8009c06:	f003 fbeb 	bl	800d3e0 <strncmp>
 8009c0a:	b398      	cbz	r0, 8009c74 <_strtod_l+0x1d4>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	4632      	mov	r2, r6
 8009c10:	463d      	mov	r5, r7
 8009c12:	9005      	str	r0, [sp, #20]
 8009c14:	4603      	mov	r3, r0
 8009c16:	2a65      	cmp	r2, #101	; 0x65
 8009c18:	d001      	beq.n	8009c1e <_strtod_l+0x17e>
 8009c1a:	2a45      	cmp	r2, #69	; 0x45
 8009c1c:	d118      	bne.n	8009c50 <_strtod_l+0x1b0>
 8009c1e:	b91d      	cbnz	r5, 8009c28 <_strtod_l+0x188>
 8009c20:	9a04      	ldr	r2, [sp, #16]
 8009c22:	4302      	orrs	r2, r0
 8009c24:	d09e      	beq.n	8009b64 <_strtod_l+0xc4>
 8009c26:	2500      	movs	r5, #0
 8009c28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009c2c:	f108 0201 	add.w	r2, r8, #1
 8009c30:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009c36:	2a2b      	cmp	r2, #43	; 0x2b
 8009c38:	d075      	beq.n	8009d26 <_strtod_l+0x286>
 8009c3a:	2a2d      	cmp	r2, #45	; 0x2d
 8009c3c:	d07b      	beq.n	8009d36 <_strtod_l+0x296>
 8009c3e:	f04f 0c00 	mov.w	ip, #0
 8009c42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009c46:	2909      	cmp	r1, #9
 8009c48:	f240 8082 	bls.w	8009d50 <_strtod_l+0x2b0>
 8009c4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009c50:	2600      	movs	r6, #0
 8009c52:	e09d      	b.n	8009d90 <_strtod_l+0x2f0>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e7c4      	b.n	8009be2 <_strtod_l+0x142>
 8009c58:	2f08      	cmp	r7, #8
 8009c5a:	bfd8      	it	le
 8009c5c:	9907      	ldrle	r1, [sp, #28]
 8009c5e:	f100 0001 	add.w	r0, r0, #1
 8009c62:	bfda      	itte	le
 8009c64:	fb02 3301 	mlale	r3, r2, r1, r3
 8009c68:	9307      	strle	r3, [sp, #28]
 8009c6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009c6e:	3701      	adds	r7, #1
 8009c70:	9017      	str	r0, [sp, #92]	; 0x5c
 8009c72:	e7bf      	b.n	8009bf4 <_strtod_l+0x154>
 8009c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c76:	195a      	adds	r2, r3, r5
 8009c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c7a:	5d5a      	ldrb	r2, [r3, r5]
 8009c7c:	2f00      	cmp	r7, #0
 8009c7e:	d037      	beq.n	8009cf0 <_strtod_l+0x250>
 8009c80:	9005      	str	r0, [sp, #20]
 8009c82:	463d      	mov	r5, r7
 8009c84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009c88:	2b09      	cmp	r3, #9
 8009c8a:	d912      	bls.n	8009cb2 <_strtod_l+0x212>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e7c2      	b.n	8009c16 <_strtod_l+0x176>
 8009c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c96:	785a      	ldrb	r2, [r3, #1]
 8009c98:	3001      	adds	r0, #1
 8009c9a:	2a30      	cmp	r2, #48	; 0x30
 8009c9c:	d0f8      	beq.n	8009c90 <_strtod_l+0x1f0>
 8009c9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	f200 84d9 	bhi.w	800a65a <_strtod_l+0xbba>
 8009ca8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009caa:	9005      	str	r0, [sp, #20]
 8009cac:	2000      	movs	r0, #0
 8009cae:	9308      	str	r3, [sp, #32]
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	3a30      	subs	r2, #48	; 0x30
 8009cb4:	f100 0301 	add.w	r3, r0, #1
 8009cb8:	d014      	beq.n	8009ce4 <_strtod_l+0x244>
 8009cba:	9905      	ldr	r1, [sp, #20]
 8009cbc:	4419      	add	r1, r3
 8009cbe:	9105      	str	r1, [sp, #20]
 8009cc0:	462b      	mov	r3, r5
 8009cc2:	eb00 0e05 	add.w	lr, r0, r5
 8009cc6:	210a      	movs	r1, #10
 8009cc8:	4573      	cmp	r3, lr
 8009cca:	d113      	bne.n	8009cf4 <_strtod_l+0x254>
 8009ccc:	182b      	adds	r3, r5, r0
 8009cce:	2b08      	cmp	r3, #8
 8009cd0:	f105 0501 	add.w	r5, r5, #1
 8009cd4:	4405      	add	r5, r0
 8009cd6:	dc1c      	bgt.n	8009d12 <_strtod_l+0x272>
 8009cd8:	9907      	ldr	r1, [sp, #28]
 8009cda:	230a      	movs	r3, #10
 8009cdc:	fb03 2301 	mla	r3, r3, r1, r2
 8009ce0:	9307      	str	r3, [sp, #28]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ce6:	1c51      	adds	r1, r2, #1
 8009ce8:	9117      	str	r1, [sp, #92]	; 0x5c
 8009cea:	7852      	ldrb	r2, [r2, #1]
 8009cec:	4618      	mov	r0, r3
 8009cee:	e7c9      	b.n	8009c84 <_strtod_l+0x1e4>
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	e7d2      	b.n	8009c9a <_strtod_l+0x1fa>
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	dc04      	bgt.n	8009d02 <_strtod_l+0x262>
 8009cf8:	9e07      	ldr	r6, [sp, #28]
 8009cfa:	434e      	muls	r6, r1
 8009cfc:	9607      	str	r6, [sp, #28]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	e7e2      	b.n	8009cc8 <_strtod_l+0x228>
 8009d02:	f103 0c01 	add.w	ip, r3, #1
 8009d06:	f1bc 0f10 	cmp.w	ip, #16
 8009d0a:	bfd8      	it	le
 8009d0c:	fb01 f909 	mulle.w	r9, r1, r9
 8009d10:	e7f5      	b.n	8009cfe <_strtod_l+0x25e>
 8009d12:	2d10      	cmp	r5, #16
 8009d14:	bfdc      	itt	le
 8009d16:	230a      	movle	r3, #10
 8009d18:	fb03 2909 	mlale	r9, r3, r9, r2
 8009d1c:	e7e1      	b.n	8009ce2 <_strtod_l+0x242>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	2301      	movs	r3, #1
 8009d24:	e77c      	b.n	8009c20 <_strtod_l+0x180>
 8009d26:	f04f 0c00 	mov.w	ip, #0
 8009d2a:	f108 0202 	add.w	r2, r8, #2
 8009d2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d30:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009d34:	e785      	b.n	8009c42 <_strtod_l+0x1a2>
 8009d36:	f04f 0c01 	mov.w	ip, #1
 8009d3a:	e7f6      	b.n	8009d2a <_strtod_l+0x28a>
 8009d3c:	0800e694 	.word	0x0800e694
 8009d40:	0800e3e8 	.word	0x0800e3e8
 8009d44:	7ff00000 	.word	0x7ff00000
 8009d48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d4a:	1c51      	adds	r1, r2, #1
 8009d4c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d4e:	7852      	ldrb	r2, [r2, #1]
 8009d50:	2a30      	cmp	r2, #48	; 0x30
 8009d52:	d0f9      	beq.n	8009d48 <_strtod_l+0x2a8>
 8009d54:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009d58:	2908      	cmp	r1, #8
 8009d5a:	f63f af79 	bhi.w	8009c50 <_strtod_l+0x1b0>
 8009d5e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d64:	9206      	str	r2, [sp, #24]
 8009d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009d68:	1c51      	adds	r1, r2, #1
 8009d6a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009d6c:	7852      	ldrb	r2, [r2, #1]
 8009d6e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009d72:	2e09      	cmp	r6, #9
 8009d74:	d937      	bls.n	8009de6 <_strtod_l+0x346>
 8009d76:	9e06      	ldr	r6, [sp, #24]
 8009d78:	1b89      	subs	r1, r1, r6
 8009d7a:	2908      	cmp	r1, #8
 8009d7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009d80:	dc02      	bgt.n	8009d88 <_strtod_l+0x2e8>
 8009d82:	4576      	cmp	r6, lr
 8009d84:	bfa8      	it	ge
 8009d86:	4676      	movge	r6, lr
 8009d88:	f1bc 0f00 	cmp.w	ip, #0
 8009d8c:	d000      	beq.n	8009d90 <_strtod_l+0x2f0>
 8009d8e:	4276      	negs	r6, r6
 8009d90:	2d00      	cmp	r5, #0
 8009d92:	d14d      	bne.n	8009e30 <_strtod_l+0x390>
 8009d94:	9904      	ldr	r1, [sp, #16]
 8009d96:	4301      	orrs	r1, r0
 8009d98:	f47f aec6 	bne.w	8009b28 <_strtod_l+0x88>
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f aee1 	bne.w	8009b64 <_strtod_l+0xc4>
 8009da2:	2a69      	cmp	r2, #105	; 0x69
 8009da4:	d027      	beq.n	8009df6 <_strtod_l+0x356>
 8009da6:	dc24      	bgt.n	8009df2 <_strtod_l+0x352>
 8009da8:	2a49      	cmp	r2, #73	; 0x49
 8009daa:	d024      	beq.n	8009df6 <_strtod_l+0x356>
 8009dac:	2a4e      	cmp	r2, #78	; 0x4e
 8009dae:	f47f aed9 	bne.w	8009b64 <_strtod_l+0xc4>
 8009db2:	499f      	ldr	r1, [pc, #636]	; (800a030 <_strtod_l+0x590>)
 8009db4:	a817      	add	r0, sp, #92	; 0x5c
 8009db6:	f002 f875 	bl	800bea4 <__match>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	f43f aed2 	beq.w	8009b64 <_strtod_l+0xc4>
 8009dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b28      	cmp	r3, #40	; 0x28
 8009dc6:	d12d      	bne.n	8009e24 <_strtod_l+0x384>
 8009dc8:	499a      	ldr	r1, [pc, #616]	; (800a034 <_strtod_l+0x594>)
 8009dca:	aa1a      	add	r2, sp, #104	; 0x68
 8009dcc:	a817      	add	r0, sp, #92	; 0x5c
 8009dce:	f002 f87d 	bl	800becc <__hexnan>
 8009dd2:	2805      	cmp	r0, #5
 8009dd4:	d126      	bne.n	8009e24 <_strtod_l+0x384>
 8009dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dd8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009ddc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009de0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009de4:	e6a0      	b.n	8009b28 <_strtod_l+0x88>
 8009de6:	210a      	movs	r1, #10
 8009de8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009dec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009df0:	e7b9      	b.n	8009d66 <_strtod_l+0x2c6>
 8009df2:	2a6e      	cmp	r2, #110	; 0x6e
 8009df4:	e7db      	b.n	8009dae <_strtod_l+0x30e>
 8009df6:	4990      	ldr	r1, [pc, #576]	; (800a038 <_strtod_l+0x598>)
 8009df8:	a817      	add	r0, sp, #92	; 0x5c
 8009dfa:	f002 f853 	bl	800bea4 <__match>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f aeb0 	beq.w	8009b64 <_strtod_l+0xc4>
 8009e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e06:	498d      	ldr	r1, [pc, #564]	; (800a03c <_strtod_l+0x59c>)
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	a817      	add	r0, sp, #92	; 0x5c
 8009e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e0e:	f002 f849 	bl	800bea4 <__match>
 8009e12:	b910      	cbnz	r0, 8009e1a <_strtod_l+0x37a>
 8009e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e16:	3301      	adds	r3, #1
 8009e18:	9317      	str	r3, [sp, #92]	; 0x5c
 8009e1a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a04c <_strtod_l+0x5ac>
 8009e1e:	f04f 0a00 	mov.w	sl, #0
 8009e22:	e681      	b.n	8009b28 <_strtod_l+0x88>
 8009e24:	4886      	ldr	r0, [pc, #536]	; (800a040 <_strtod_l+0x5a0>)
 8009e26:	f003 fa9b 	bl	800d360 <nan>
 8009e2a:	ec5b ab10 	vmov	sl, fp, d0
 8009e2e:	e67b      	b.n	8009b28 <_strtod_l+0x88>
 8009e30:	9b05      	ldr	r3, [sp, #20]
 8009e32:	9807      	ldr	r0, [sp, #28]
 8009e34:	1af3      	subs	r3, r6, r3
 8009e36:	2f00      	cmp	r7, #0
 8009e38:	bf08      	it	eq
 8009e3a:	462f      	moveq	r7, r5
 8009e3c:	2d10      	cmp	r5, #16
 8009e3e:	9306      	str	r3, [sp, #24]
 8009e40:	46a8      	mov	r8, r5
 8009e42:	bfa8      	it	ge
 8009e44:	f04f 0810 	movge.w	r8, #16
 8009e48:	f7f6 fb6c 	bl	8000524 <__aeabi_ui2d>
 8009e4c:	2d09      	cmp	r5, #9
 8009e4e:	4682      	mov	sl, r0
 8009e50:	468b      	mov	fp, r1
 8009e52:	dd13      	ble.n	8009e7c <_strtod_l+0x3dc>
 8009e54:	4b7b      	ldr	r3, [pc, #492]	; (800a044 <_strtod_l+0x5a4>)
 8009e56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009e5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009e5e:	f7f6 fbdb 	bl	8000618 <__aeabi_dmul>
 8009e62:	4682      	mov	sl, r0
 8009e64:	4648      	mov	r0, r9
 8009e66:	468b      	mov	fp, r1
 8009e68:	f7f6 fb5c 	bl	8000524 <__aeabi_ui2d>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4650      	mov	r0, sl
 8009e72:	4659      	mov	r1, fp
 8009e74:	f7f6 fa1a 	bl	80002ac <__adddf3>
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	2d0f      	cmp	r5, #15
 8009e7e:	dc38      	bgt.n	8009ef2 <_strtod_l+0x452>
 8009e80:	9b06      	ldr	r3, [sp, #24]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f43f ae50 	beq.w	8009b28 <_strtod_l+0x88>
 8009e88:	dd24      	ble.n	8009ed4 <_strtod_l+0x434>
 8009e8a:	2b16      	cmp	r3, #22
 8009e8c:	dc0b      	bgt.n	8009ea6 <_strtod_l+0x406>
 8009e8e:	496d      	ldr	r1, [pc, #436]	; (800a044 <_strtod_l+0x5a4>)
 8009e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e98:	4652      	mov	r2, sl
 8009e9a:	465b      	mov	r3, fp
 8009e9c:	f7f6 fbbc 	bl	8000618 <__aeabi_dmul>
 8009ea0:	4682      	mov	sl, r0
 8009ea2:	468b      	mov	fp, r1
 8009ea4:	e640      	b.n	8009b28 <_strtod_l+0x88>
 8009ea6:	9a06      	ldr	r2, [sp, #24]
 8009ea8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009eac:	4293      	cmp	r3, r2
 8009eae:	db20      	blt.n	8009ef2 <_strtod_l+0x452>
 8009eb0:	4c64      	ldr	r4, [pc, #400]	; (800a044 <_strtod_l+0x5a4>)
 8009eb2:	f1c5 050f 	rsb	r5, r5, #15
 8009eb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec2:	f7f6 fba9 	bl	8000618 <__aeabi_dmul>
 8009ec6:	9b06      	ldr	r3, [sp, #24]
 8009ec8:	1b5d      	subs	r5, r3, r5
 8009eca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ece:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009ed2:	e7e3      	b.n	8009e9c <_strtod_l+0x3fc>
 8009ed4:	9b06      	ldr	r3, [sp, #24]
 8009ed6:	3316      	adds	r3, #22
 8009ed8:	db0b      	blt.n	8009ef2 <_strtod_l+0x452>
 8009eda:	9b05      	ldr	r3, [sp, #20]
 8009edc:	1b9e      	subs	r6, r3, r6
 8009ede:	4b59      	ldr	r3, [pc, #356]	; (800a044 <_strtod_l+0x5a4>)
 8009ee0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ee8:	4650      	mov	r0, sl
 8009eea:	4659      	mov	r1, fp
 8009eec:	f7f6 fcbe 	bl	800086c <__aeabi_ddiv>
 8009ef0:	e7d6      	b.n	8009ea0 <_strtod_l+0x400>
 8009ef2:	9b06      	ldr	r3, [sp, #24]
 8009ef4:	eba5 0808 	sub.w	r8, r5, r8
 8009ef8:	4498      	add	r8, r3
 8009efa:	f1b8 0f00 	cmp.w	r8, #0
 8009efe:	dd74      	ble.n	8009fea <_strtod_l+0x54a>
 8009f00:	f018 030f 	ands.w	r3, r8, #15
 8009f04:	d00a      	beq.n	8009f1c <_strtod_l+0x47c>
 8009f06:	494f      	ldr	r1, [pc, #316]	; (800a044 <_strtod_l+0x5a4>)
 8009f08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f0c:	4652      	mov	r2, sl
 8009f0e:	465b      	mov	r3, fp
 8009f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f14:	f7f6 fb80 	bl	8000618 <__aeabi_dmul>
 8009f18:	4682      	mov	sl, r0
 8009f1a:	468b      	mov	fp, r1
 8009f1c:	f038 080f 	bics.w	r8, r8, #15
 8009f20:	d04f      	beq.n	8009fc2 <_strtod_l+0x522>
 8009f22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009f26:	dd22      	ble.n	8009f6e <_strtod_l+0x4ce>
 8009f28:	2500      	movs	r5, #0
 8009f2a:	462e      	mov	r6, r5
 8009f2c:	9507      	str	r5, [sp, #28]
 8009f2e:	9505      	str	r5, [sp, #20]
 8009f30:	2322      	movs	r3, #34	; 0x22
 8009f32:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a04c <_strtod_l+0x5ac>
 8009f36:	6023      	str	r3, [r4, #0]
 8009f38:	f04f 0a00 	mov.w	sl, #0
 8009f3c:	9b07      	ldr	r3, [sp, #28]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f43f adf2 	beq.w	8009b28 <_strtod_l+0x88>
 8009f44:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f46:	4620      	mov	r0, r4
 8009f48:	f002 f8e2 	bl	800c110 <_Bfree>
 8009f4c:	9905      	ldr	r1, [sp, #20]
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f002 f8de 	bl	800c110 <_Bfree>
 8009f54:	4631      	mov	r1, r6
 8009f56:	4620      	mov	r0, r4
 8009f58:	f002 f8da 	bl	800c110 <_Bfree>
 8009f5c:	9907      	ldr	r1, [sp, #28]
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f002 f8d6 	bl	800c110 <_Bfree>
 8009f64:	4629      	mov	r1, r5
 8009f66:	4620      	mov	r0, r4
 8009f68:	f002 f8d2 	bl	800c110 <_Bfree>
 8009f6c:	e5dc      	b.n	8009b28 <_strtod_l+0x88>
 8009f6e:	4b36      	ldr	r3, [pc, #216]	; (800a048 <_strtod_l+0x5a8>)
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	2300      	movs	r3, #0
 8009f74:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009f78:	4650      	mov	r0, sl
 8009f7a:	4659      	mov	r1, fp
 8009f7c:	4699      	mov	r9, r3
 8009f7e:	f1b8 0f01 	cmp.w	r8, #1
 8009f82:	dc21      	bgt.n	8009fc8 <_strtod_l+0x528>
 8009f84:	b10b      	cbz	r3, 8009f8a <_strtod_l+0x4ea>
 8009f86:	4682      	mov	sl, r0
 8009f88:	468b      	mov	fp, r1
 8009f8a:	4b2f      	ldr	r3, [pc, #188]	; (800a048 <_strtod_l+0x5a8>)
 8009f8c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009f90:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009f94:	4652      	mov	r2, sl
 8009f96:	465b      	mov	r3, fp
 8009f98:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009f9c:	f7f6 fb3c 	bl	8000618 <__aeabi_dmul>
 8009fa0:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <_strtod_l+0x5ac>)
 8009fa2:	460a      	mov	r2, r1
 8009fa4:	400b      	ands	r3, r1
 8009fa6:	492a      	ldr	r1, [pc, #168]	; (800a050 <_strtod_l+0x5b0>)
 8009fa8:	428b      	cmp	r3, r1
 8009faa:	4682      	mov	sl, r0
 8009fac:	d8bc      	bhi.n	8009f28 <_strtod_l+0x488>
 8009fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009fb2:	428b      	cmp	r3, r1
 8009fb4:	bf86      	itte	hi
 8009fb6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a054 <_strtod_l+0x5b4>
 8009fba:	f04f 3aff 	movhi.w	sl, #4294967295
 8009fbe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	e084      	b.n	800a0d2 <_strtod_l+0x632>
 8009fc8:	f018 0f01 	tst.w	r8, #1
 8009fcc:	d005      	beq.n	8009fda <_strtod_l+0x53a>
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 fb20 	bl	8000618 <__aeabi_dmul>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	3208      	adds	r2, #8
 8009fde:	f109 0901 	add.w	r9, r9, #1
 8009fe2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009fe6:	9204      	str	r2, [sp, #16]
 8009fe8:	e7c9      	b.n	8009f7e <_strtod_l+0x4de>
 8009fea:	d0ea      	beq.n	8009fc2 <_strtod_l+0x522>
 8009fec:	f1c8 0800 	rsb	r8, r8, #0
 8009ff0:	f018 020f 	ands.w	r2, r8, #15
 8009ff4:	d00a      	beq.n	800a00c <_strtod_l+0x56c>
 8009ff6:	4b13      	ldr	r3, [pc, #76]	; (800a044 <_strtod_l+0x5a4>)
 8009ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	4659      	mov	r1, fp
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fc32 	bl	800086c <__aeabi_ddiv>
 800a008:	4682      	mov	sl, r0
 800a00a:	468b      	mov	fp, r1
 800a00c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a010:	d0d7      	beq.n	8009fc2 <_strtod_l+0x522>
 800a012:	f1b8 0f1f 	cmp.w	r8, #31
 800a016:	dd1f      	ble.n	800a058 <_strtod_l+0x5b8>
 800a018:	2500      	movs	r5, #0
 800a01a:	462e      	mov	r6, r5
 800a01c:	9507      	str	r5, [sp, #28]
 800a01e:	9505      	str	r5, [sp, #20]
 800a020:	2322      	movs	r3, #34	; 0x22
 800a022:	f04f 0a00 	mov.w	sl, #0
 800a026:	f04f 0b00 	mov.w	fp, #0
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	e786      	b.n	8009f3c <_strtod_l+0x49c>
 800a02e:	bf00      	nop
 800a030:	0800dd25 	.word	0x0800dd25
 800a034:	0800e3fc 	.word	0x0800e3fc
 800a038:	0800dd1d 	.word	0x0800dd1d
 800a03c:	0800e53c 	.word	0x0800e53c
 800a040:	0800e86b 	.word	0x0800e86b
 800a044:	0800e730 	.word	0x0800e730
 800a048:	0800e708 	.word	0x0800e708
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	7ca00000 	.word	0x7ca00000
 800a054:	7fefffff 	.word	0x7fefffff
 800a058:	f018 0310 	ands.w	r3, r8, #16
 800a05c:	bf18      	it	ne
 800a05e:	236a      	movne	r3, #106	; 0x6a
 800a060:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a410 <_strtod_l+0x970>
 800a064:	9304      	str	r3, [sp, #16]
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	2300      	movs	r3, #0
 800a06c:	f018 0f01 	tst.w	r8, #1
 800a070:	d004      	beq.n	800a07c <_strtod_l+0x5dc>
 800a072:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a076:	f7f6 facf 	bl	8000618 <__aeabi_dmul>
 800a07a:	2301      	movs	r3, #1
 800a07c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a080:	f109 0908 	add.w	r9, r9, #8
 800a084:	d1f2      	bne.n	800a06c <_strtod_l+0x5cc>
 800a086:	b10b      	cbz	r3, 800a08c <_strtod_l+0x5ec>
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	9b04      	ldr	r3, [sp, #16]
 800a08e:	b1c3      	cbz	r3, 800a0c2 <_strtod_l+0x622>
 800a090:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a094:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a098:	2b00      	cmp	r3, #0
 800a09a:	4659      	mov	r1, fp
 800a09c:	dd11      	ble.n	800a0c2 <_strtod_l+0x622>
 800a09e:	2b1f      	cmp	r3, #31
 800a0a0:	f340 8124 	ble.w	800a2ec <_strtod_l+0x84c>
 800a0a4:	2b34      	cmp	r3, #52	; 0x34
 800a0a6:	bfde      	ittt	le
 800a0a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a0ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a0b0:	fa03 f202 	lslle.w	r2, r3, r2
 800a0b4:	f04f 0a00 	mov.w	sl, #0
 800a0b8:	bfcc      	ite	gt
 800a0ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a0be:	ea02 0b01 	andle.w	fp, r2, r1
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4650      	mov	r0, sl
 800a0c8:	4659      	mov	r1, fp
 800a0ca:	f7f6 fd0d 	bl	8000ae8 <__aeabi_dcmpeq>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d1a2      	bne.n	800a018 <_strtod_l+0x578>
 800a0d2:	9b07      	ldr	r3, [sp, #28]
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	9908      	ldr	r1, [sp, #32]
 800a0d8:	462b      	mov	r3, r5
 800a0da:	463a      	mov	r2, r7
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f002 f87f 	bl	800c1e0 <__s2b>
 800a0e2:	9007      	str	r0, [sp, #28]
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f43f af1f 	beq.w	8009f28 <_strtod_l+0x488>
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	1b9e      	subs	r6, r3, r6
 800a0ee:	9b06      	ldr	r3, [sp, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bfb4      	ite	lt
 800a0f4:	4633      	movlt	r3, r6
 800a0f6:	2300      	movge	r3, #0
 800a0f8:	930c      	str	r3, [sp, #48]	; 0x30
 800a0fa:	9b06      	ldr	r3, [sp, #24]
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a102:	9312      	str	r3, [sp, #72]	; 0x48
 800a104:	462e      	mov	r6, r5
 800a106:	9b07      	ldr	r3, [sp, #28]
 800a108:	4620      	mov	r0, r4
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	f001 ffc0 	bl	800c090 <_Balloc>
 800a110:	9005      	str	r0, [sp, #20]
 800a112:	2800      	cmp	r0, #0
 800a114:	f43f af0c 	beq.w	8009f30 <_strtod_l+0x490>
 800a118:	9b07      	ldr	r3, [sp, #28]
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	3202      	adds	r2, #2
 800a11e:	f103 010c 	add.w	r1, r3, #12
 800a122:	0092      	lsls	r2, r2, #2
 800a124:	300c      	adds	r0, #12
 800a126:	f001 ff99 	bl	800c05c <memcpy>
 800a12a:	ec4b ab10 	vmov	d0, sl, fp
 800a12e:	aa1a      	add	r2, sp, #104	; 0x68
 800a130:	a919      	add	r1, sp, #100	; 0x64
 800a132:	4620      	mov	r0, r4
 800a134:	f002 fb9a 	bl	800c86c <__d2b>
 800a138:	ec4b ab18 	vmov	d8, sl, fp
 800a13c:	9018      	str	r0, [sp, #96]	; 0x60
 800a13e:	2800      	cmp	r0, #0
 800a140:	f43f aef6 	beq.w	8009f30 <_strtod_l+0x490>
 800a144:	2101      	movs	r1, #1
 800a146:	4620      	mov	r0, r4
 800a148:	f002 f8e4 	bl	800c314 <__i2b>
 800a14c:	4606      	mov	r6, r0
 800a14e:	2800      	cmp	r0, #0
 800a150:	f43f aeee 	beq.w	8009f30 <_strtod_l+0x490>
 800a154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a156:	9904      	ldr	r1, [sp, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bfab      	itete	ge
 800a15c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a15e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a160:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a162:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a166:	bfac      	ite	ge
 800a168:	eb03 0902 	addge.w	r9, r3, r2
 800a16c:	1ad7      	sublt	r7, r2, r3
 800a16e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a170:	eba3 0801 	sub.w	r8, r3, r1
 800a174:	4490      	add	r8, r2
 800a176:	4ba1      	ldr	r3, [pc, #644]	; (800a3fc <_strtod_l+0x95c>)
 800a178:	f108 38ff 	add.w	r8, r8, #4294967295
 800a17c:	4598      	cmp	r8, r3
 800a17e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a182:	f280 80c7 	bge.w	800a314 <_strtod_l+0x874>
 800a186:	eba3 0308 	sub.w	r3, r3, r8
 800a18a:	2b1f      	cmp	r3, #31
 800a18c:	eba2 0203 	sub.w	r2, r2, r3
 800a190:	f04f 0101 	mov.w	r1, #1
 800a194:	f300 80b1 	bgt.w	800a2fa <_strtod_l+0x85a>
 800a198:	fa01 f303 	lsl.w	r3, r1, r3
 800a19c:	930d      	str	r3, [sp, #52]	; 0x34
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9308      	str	r3, [sp, #32]
 800a1a2:	eb09 0802 	add.w	r8, r9, r2
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	45c1      	cmp	r9, r8
 800a1aa:	4417      	add	r7, r2
 800a1ac:	441f      	add	r7, r3
 800a1ae:	464b      	mov	r3, r9
 800a1b0:	bfa8      	it	ge
 800a1b2:	4643      	movge	r3, r8
 800a1b4:	42bb      	cmp	r3, r7
 800a1b6:	bfa8      	it	ge
 800a1b8:	463b      	movge	r3, r7
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bfc2      	ittt	gt
 800a1be:	eba8 0803 	subgt.w	r8, r8, r3
 800a1c2:	1aff      	subgt	r7, r7, r3
 800a1c4:	eba9 0903 	subgt.w	r9, r9, r3
 800a1c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dd17      	ble.n	800a1fe <_strtod_l+0x75e>
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f002 f95e 	bl	800c494 <__pow5mult>
 800a1d8:	4606      	mov	r6, r0
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	f43f aea8 	beq.w	8009f30 <_strtod_l+0x490>
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f002 f8ab 	bl	800c340 <__multiply>
 800a1ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f43f ae9f 	beq.w	8009f30 <_strtod_l+0x490>
 800a1f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f001 ff8b 	bl	800c110 <_Bfree>
 800a1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1fc:	9318      	str	r3, [sp, #96]	; 0x60
 800a1fe:	f1b8 0f00 	cmp.w	r8, #0
 800a202:	f300 808c 	bgt.w	800a31e <_strtod_l+0x87e>
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	dd08      	ble.n	800a21e <_strtod_l+0x77e>
 800a20c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a20e:	9905      	ldr	r1, [sp, #20]
 800a210:	4620      	mov	r0, r4
 800a212:	f002 f93f 	bl	800c494 <__pow5mult>
 800a216:	9005      	str	r0, [sp, #20]
 800a218:	2800      	cmp	r0, #0
 800a21a:	f43f ae89 	beq.w	8009f30 <_strtod_l+0x490>
 800a21e:	2f00      	cmp	r7, #0
 800a220:	dd08      	ble.n	800a234 <_strtod_l+0x794>
 800a222:	9905      	ldr	r1, [sp, #20]
 800a224:	463a      	mov	r2, r7
 800a226:	4620      	mov	r0, r4
 800a228:	f002 f98e 	bl	800c548 <__lshift>
 800a22c:	9005      	str	r0, [sp, #20]
 800a22e:	2800      	cmp	r0, #0
 800a230:	f43f ae7e 	beq.w	8009f30 <_strtod_l+0x490>
 800a234:	f1b9 0f00 	cmp.w	r9, #0
 800a238:	dd08      	ble.n	800a24c <_strtod_l+0x7ac>
 800a23a:	4631      	mov	r1, r6
 800a23c:	464a      	mov	r2, r9
 800a23e:	4620      	mov	r0, r4
 800a240:	f002 f982 	bl	800c548 <__lshift>
 800a244:	4606      	mov	r6, r0
 800a246:	2800      	cmp	r0, #0
 800a248:	f43f ae72 	beq.w	8009f30 <_strtod_l+0x490>
 800a24c:	9a05      	ldr	r2, [sp, #20]
 800a24e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a250:	4620      	mov	r0, r4
 800a252:	f002 fa05 	bl	800c660 <__mdiff>
 800a256:	4605      	mov	r5, r0
 800a258:	2800      	cmp	r0, #0
 800a25a:	f43f ae69 	beq.w	8009f30 <_strtod_l+0x490>
 800a25e:	68c3      	ldr	r3, [r0, #12]
 800a260:	930b      	str	r3, [sp, #44]	; 0x2c
 800a262:	2300      	movs	r3, #0
 800a264:	60c3      	str	r3, [r0, #12]
 800a266:	4631      	mov	r1, r6
 800a268:	f002 f9de 	bl	800c628 <__mcmp>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	da60      	bge.n	800a332 <_strtod_l+0x892>
 800a270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a272:	ea53 030a 	orrs.w	r3, r3, sl
 800a276:	f040 8082 	bne.w	800a37e <_strtod_l+0x8de>
 800a27a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d17d      	bne.n	800a37e <_strtod_l+0x8de>
 800a282:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a286:	0d1b      	lsrs	r3, r3, #20
 800a288:	051b      	lsls	r3, r3, #20
 800a28a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a28e:	d976      	bls.n	800a37e <_strtod_l+0x8de>
 800a290:	696b      	ldr	r3, [r5, #20]
 800a292:	b913      	cbnz	r3, 800a29a <_strtod_l+0x7fa>
 800a294:	692b      	ldr	r3, [r5, #16]
 800a296:	2b01      	cmp	r3, #1
 800a298:	dd71      	ble.n	800a37e <_strtod_l+0x8de>
 800a29a:	4629      	mov	r1, r5
 800a29c:	2201      	movs	r2, #1
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f002 f952 	bl	800c548 <__lshift>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4605      	mov	r5, r0
 800a2a8:	f002 f9be 	bl	800c628 <__mcmp>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	dd66      	ble.n	800a37e <_strtod_l+0x8de>
 800a2b0:	9904      	ldr	r1, [sp, #16]
 800a2b2:	4a53      	ldr	r2, [pc, #332]	; (800a400 <_strtod_l+0x960>)
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	2900      	cmp	r1, #0
 800a2b8:	f000 8081 	beq.w	800a3be <_strtod_l+0x91e>
 800a2bc:	ea02 010b 	and.w	r1, r2, fp
 800a2c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a2c4:	dc7b      	bgt.n	800a3be <_strtod_l+0x91e>
 800a2c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a2ca:	f77f aea9 	ble.w	800a020 <_strtod_l+0x580>
 800a2ce:	4b4d      	ldr	r3, [pc, #308]	; (800a404 <_strtod_l+0x964>)
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	4659      	mov	r1, fp
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f7f6 f99f 	bl	8000618 <__aeabi_dmul>
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4303      	orrs	r3, r0
 800a2de:	bf08      	it	eq
 800a2e0:	2322      	moveq	r3, #34	; 0x22
 800a2e2:	4682      	mov	sl, r0
 800a2e4:	468b      	mov	fp, r1
 800a2e6:	bf08      	it	eq
 800a2e8:	6023      	streq	r3, [r4, #0]
 800a2ea:	e62b      	b.n	8009f44 <_strtod_l+0x4a4>
 800a2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a2f8:	e6e3      	b.n	800a0c2 <_strtod_l+0x622>
 800a2fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a2fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a302:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a306:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a30a:	fa01 f308 	lsl.w	r3, r1, r8
 800a30e:	9308      	str	r3, [sp, #32]
 800a310:	910d      	str	r1, [sp, #52]	; 0x34
 800a312:	e746      	b.n	800a1a2 <_strtod_l+0x702>
 800a314:	2300      	movs	r3, #0
 800a316:	9308      	str	r3, [sp, #32]
 800a318:	2301      	movs	r3, #1
 800a31a:	930d      	str	r3, [sp, #52]	; 0x34
 800a31c:	e741      	b.n	800a1a2 <_strtod_l+0x702>
 800a31e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a320:	4642      	mov	r2, r8
 800a322:	4620      	mov	r0, r4
 800a324:	f002 f910 	bl	800c548 <__lshift>
 800a328:	9018      	str	r0, [sp, #96]	; 0x60
 800a32a:	2800      	cmp	r0, #0
 800a32c:	f47f af6b 	bne.w	800a206 <_strtod_l+0x766>
 800a330:	e5fe      	b.n	8009f30 <_strtod_l+0x490>
 800a332:	465f      	mov	r7, fp
 800a334:	d16e      	bne.n	800a414 <_strtod_l+0x974>
 800a336:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a338:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a33c:	b342      	cbz	r2, 800a390 <_strtod_l+0x8f0>
 800a33e:	4a32      	ldr	r2, [pc, #200]	; (800a408 <_strtod_l+0x968>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d128      	bne.n	800a396 <_strtod_l+0x8f6>
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	4651      	mov	r1, sl
 800a348:	b1eb      	cbz	r3, 800a386 <_strtod_l+0x8e6>
 800a34a:	4b2d      	ldr	r3, [pc, #180]	; (800a400 <_strtod_l+0x960>)
 800a34c:	403b      	ands	r3, r7
 800a34e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a352:	f04f 32ff 	mov.w	r2, #4294967295
 800a356:	d819      	bhi.n	800a38c <_strtod_l+0x8ec>
 800a358:	0d1b      	lsrs	r3, r3, #20
 800a35a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a35e:	fa02 f303 	lsl.w	r3, r2, r3
 800a362:	4299      	cmp	r1, r3
 800a364:	d117      	bne.n	800a396 <_strtod_l+0x8f6>
 800a366:	4b29      	ldr	r3, [pc, #164]	; (800a40c <_strtod_l+0x96c>)
 800a368:	429f      	cmp	r7, r3
 800a36a:	d102      	bne.n	800a372 <_strtod_l+0x8d2>
 800a36c:	3101      	adds	r1, #1
 800a36e:	f43f addf 	beq.w	8009f30 <_strtod_l+0x490>
 800a372:	4b23      	ldr	r3, [pc, #140]	; (800a400 <_strtod_l+0x960>)
 800a374:	403b      	ands	r3, r7
 800a376:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a37a:	f04f 0a00 	mov.w	sl, #0
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d1a4      	bne.n	800a2ce <_strtod_l+0x82e>
 800a384:	e5de      	b.n	8009f44 <_strtod_l+0x4a4>
 800a386:	f04f 33ff 	mov.w	r3, #4294967295
 800a38a:	e7ea      	b.n	800a362 <_strtod_l+0x8c2>
 800a38c:	4613      	mov	r3, r2
 800a38e:	e7e8      	b.n	800a362 <_strtod_l+0x8c2>
 800a390:	ea53 030a 	orrs.w	r3, r3, sl
 800a394:	d08c      	beq.n	800a2b0 <_strtod_l+0x810>
 800a396:	9b08      	ldr	r3, [sp, #32]
 800a398:	b1db      	cbz	r3, 800a3d2 <_strtod_l+0x932>
 800a39a:	423b      	tst	r3, r7
 800a39c:	d0ef      	beq.n	800a37e <_strtod_l+0x8de>
 800a39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a0:	9a04      	ldr	r2, [sp, #16]
 800a3a2:	4650      	mov	r0, sl
 800a3a4:	4659      	mov	r1, fp
 800a3a6:	b1c3      	cbz	r3, 800a3da <_strtod_l+0x93a>
 800a3a8:	f7ff fb5c 	bl	8009a64 <sulp>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	ec51 0b18 	vmov	r0, r1, d8
 800a3b4:	f7f5 ff7a 	bl	80002ac <__adddf3>
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	468b      	mov	fp, r1
 800a3bc:	e7df      	b.n	800a37e <_strtod_l+0x8de>
 800a3be:	4013      	ands	r3, r2
 800a3c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a3c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a3c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a3cc:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d0:	e7d5      	b.n	800a37e <_strtod_l+0x8de>
 800a3d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3d4:	ea13 0f0a 	tst.w	r3, sl
 800a3d8:	e7e0      	b.n	800a39c <_strtod_l+0x8fc>
 800a3da:	f7ff fb43 	bl	8009a64 <sulp>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	ec51 0b18 	vmov	r0, r1, d8
 800a3e6:	f7f5 ff5f 	bl	80002a8 <__aeabi_dsub>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4682      	mov	sl, r0
 800a3f0:	468b      	mov	fp, r1
 800a3f2:	f7f6 fb79 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	d0c1      	beq.n	800a37e <_strtod_l+0x8de>
 800a3fa:	e611      	b.n	800a020 <_strtod_l+0x580>
 800a3fc:	fffffc02 	.word	0xfffffc02
 800a400:	7ff00000 	.word	0x7ff00000
 800a404:	39500000 	.word	0x39500000
 800a408:	000fffff 	.word	0x000fffff
 800a40c:	7fefffff 	.word	0x7fefffff
 800a410:	0800e410 	.word	0x0800e410
 800a414:	4631      	mov	r1, r6
 800a416:	4628      	mov	r0, r5
 800a418:	f002 fa84 	bl	800c924 <__ratio>
 800a41c:	ec59 8b10 	vmov	r8, r9, d0
 800a420:	ee10 0a10 	vmov	r0, s0
 800a424:	2200      	movs	r2, #0
 800a426:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 fb70 	bl	8000b10 <__aeabi_dcmple>
 800a430:	2800      	cmp	r0, #0
 800a432:	d07a      	beq.n	800a52a <_strtod_l+0xa8a>
 800a434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d04a      	beq.n	800a4d0 <_strtod_l+0xa30>
 800a43a:	4b95      	ldr	r3, [pc, #596]	; (800a690 <_strtod_l+0xbf0>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a442:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a690 <_strtod_l+0xbf0>
 800a446:	f04f 0800 	mov.w	r8, #0
 800a44a:	4b92      	ldr	r3, [pc, #584]	; (800a694 <_strtod_l+0xbf4>)
 800a44c:	403b      	ands	r3, r7
 800a44e:	930d      	str	r3, [sp, #52]	; 0x34
 800a450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a452:	4b91      	ldr	r3, [pc, #580]	; (800a698 <_strtod_l+0xbf8>)
 800a454:	429a      	cmp	r2, r3
 800a456:	f040 80b0 	bne.w	800a5ba <_strtod_l+0xb1a>
 800a45a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a45e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a462:	ec4b ab10 	vmov	d0, sl, fp
 800a466:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a46a:	f002 f983 	bl	800c774 <__ulp>
 800a46e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a472:	ec53 2b10 	vmov	r2, r3, d0
 800a476:	f7f6 f8cf 	bl	8000618 <__aeabi_dmul>
 800a47a:	4652      	mov	r2, sl
 800a47c:	465b      	mov	r3, fp
 800a47e:	f7f5 ff15 	bl	80002ac <__adddf3>
 800a482:	460b      	mov	r3, r1
 800a484:	4983      	ldr	r1, [pc, #524]	; (800a694 <_strtod_l+0xbf4>)
 800a486:	4a85      	ldr	r2, [pc, #532]	; (800a69c <_strtod_l+0xbfc>)
 800a488:	4019      	ands	r1, r3
 800a48a:	4291      	cmp	r1, r2
 800a48c:	4682      	mov	sl, r0
 800a48e:	d960      	bls.n	800a552 <_strtod_l+0xab2>
 800a490:	ee18 3a90 	vmov	r3, s17
 800a494:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a498:	4293      	cmp	r3, r2
 800a49a:	d104      	bne.n	800a4a6 <_strtod_l+0xa06>
 800a49c:	ee18 3a10 	vmov	r3, s16
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	f43f ad45 	beq.w	8009f30 <_strtod_l+0x490>
 800a4a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a6a8 <_strtod_l+0xc08>
 800a4aa:	f04f 3aff 	mov.w	sl, #4294967295
 800a4ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f001 fe2d 	bl	800c110 <_Bfree>
 800a4b6:	9905      	ldr	r1, [sp, #20]
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f001 fe29 	bl	800c110 <_Bfree>
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f001 fe25 	bl	800c110 <_Bfree>
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f001 fe21 	bl	800c110 <_Bfree>
 800a4ce:	e61a      	b.n	800a106 <_strtod_l+0x666>
 800a4d0:	f1ba 0f00 	cmp.w	sl, #0
 800a4d4:	d11b      	bne.n	800a50e <_strtod_l+0xa6e>
 800a4d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4da:	b9f3      	cbnz	r3, 800a51a <_strtod_l+0xa7a>
 800a4dc:	4b6c      	ldr	r3, [pc, #432]	; (800a690 <_strtod_l+0xbf0>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	4649      	mov	r1, r9
 800a4e4:	f7f6 fb0a 	bl	8000afc <__aeabi_dcmplt>
 800a4e8:	b9d0      	cbnz	r0, 800a520 <_strtod_l+0xa80>
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	4b6c      	ldr	r3, [pc, #432]	; (800a6a0 <_strtod_l+0xc00>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f7f6 f891 	bl	8000618 <__aeabi_dmul>
 800a4f6:	4680      	mov	r8, r0
 800a4f8:	4689      	mov	r9, r1
 800a4fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a4fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a502:	9315      	str	r3, [sp, #84]	; 0x54
 800a504:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a50c:	e79d      	b.n	800a44a <_strtod_l+0x9aa>
 800a50e:	f1ba 0f01 	cmp.w	sl, #1
 800a512:	d102      	bne.n	800a51a <_strtod_l+0xa7a>
 800a514:	2f00      	cmp	r7, #0
 800a516:	f43f ad83 	beq.w	800a020 <_strtod_l+0x580>
 800a51a:	4b62      	ldr	r3, [pc, #392]	; (800a6a4 <_strtod_l+0xc04>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	e78e      	b.n	800a43e <_strtod_l+0x99e>
 800a520:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a6a0 <_strtod_l+0xc00>
 800a524:	f04f 0800 	mov.w	r8, #0
 800a528:	e7e7      	b.n	800a4fa <_strtod_l+0xa5a>
 800a52a:	4b5d      	ldr	r3, [pc, #372]	; (800a6a0 <_strtod_l+0xc00>)
 800a52c:	4640      	mov	r0, r8
 800a52e:	4649      	mov	r1, r9
 800a530:	2200      	movs	r2, #0
 800a532:	f7f6 f871 	bl	8000618 <__aeabi_dmul>
 800a536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a538:	4680      	mov	r8, r0
 800a53a:	4689      	mov	r9, r1
 800a53c:	b933      	cbnz	r3, 800a54c <_strtod_l+0xaac>
 800a53e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a542:	900e      	str	r0, [sp, #56]	; 0x38
 800a544:	930f      	str	r3, [sp, #60]	; 0x3c
 800a546:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a54a:	e7dd      	b.n	800a508 <_strtod_l+0xa68>
 800a54c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a550:	e7f9      	b.n	800a546 <_strtod_l+0xaa6>
 800a552:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1a8      	bne.n	800a4ae <_strtod_l+0xa0e>
 800a55c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a562:	0d1b      	lsrs	r3, r3, #20
 800a564:	051b      	lsls	r3, r3, #20
 800a566:	429a      	cmp	r2, r3
 800a568:	d1a1      	bne.n	800a4ae <_strtod_l+0xa0e>
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f6 fbb3 	bl	8000cd8 <__aeabi_d2lz>
 800a572:	f7f6 f823 	bl	80005bc <__aeabi_l2d>
 800a576:	4602      	mov	r2, r0
 800a578:	460b      	mov	r3, r1
 800a57a:	4640      	mov	r0, r8
 800a57c:	4649      	mov	r1, r9
 800a57e:	f7f5 fe93 	bl	80002a8 <__aeabi_dsub>
 800a582:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a588:	ea43 030a 	orr.w	r3, r3, sl
 800a58c:	4313      	orrs	r3, r2
 800a58e:	4680      	mov	r8, r0
 800a590:	4689      	mov	r9, r1
 800a592:	d055      	beq.n	800a640 <_strtod_l+0xba0>
 800a594:	a336      	add	r3, pc, #216	; (adr r3, 800a670 <_strtod_l+0xbd0>)
 800a596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59a:	f7f6 faaf 	bl	8000afc <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f47f acd0 	bne.w	8009f44 <_strtod_l+0x4a4>
 800a5a4:	a334      	add	r3, pc, #208	; (adr r3, 800a678 <_strtod_l+0xbd8>)
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	f7f6 fac3 	bl	8000b38 <__aeabi_dcmpgt>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f43f af7b 	beq.w	800a4ae <_strtod_l+0xa0e>
 800a5b8:	e4c4      	b.n	8009f44 <_strtod_l+0x4a4>
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	b333      	cbz	r3, 800a60c <_strtod_l+0xb6c>
 800a5be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a5c4:	d822      	bhi.n	800a60c <_strtod_l+0xb6c>
 800a5c6:	a32e      	add	r3, pc, #184	; (adr r3, 800a680 <_strtod_l+0xbe0>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	4649      	mov	r1, r9
 800a5d0:	f7f6 fa9e 	bl	8000b10 <__aeabi_dcmple>
 800a5d4:	b1a0      	cbz	r0, 800a600 <_strtod_l+0xb60>
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	4640      	mov	r0, r8
 800a5da:	f7f6 faf5 	bl	8000bc8 <__aeabi_d2uiz>
 800a5de:	2801      	cmp	r0, #1
 800a5e0:	bf38      	it	cc
 800a5e2:	2001      	movcc	r0, #1
 800a5e4:	f7f5 ff9e 	bl	8000524 <__aeabi_ui2d>
 800a5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	4689      	mov	r9, r1
 800a5ee:	bb23      	cbnz	r3, 800a63a <_strtod_l+0xb9a>
 800a5f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5f4:	9010      	str	r0, [sp, #64]	; 0x40
 800a5f6:	9311      	str	r3, [sp, #68]	; 0x44
 800a5f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a604:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a608:	1a9b      	subs	r3, r3, r2
 800a60a:	9309      	str	r3, [sp, #36]	; 0x24
 800a60c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a610:	eeb0 0a48 	vmov.f32	s0, s16
 800a614:	eef0 0a68 	vmov.f32	s1, s17
 800a618:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a61c:	f002 f8aa 	bl	800c774 <__ulp>
 800a620:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a624:	ec53 2b10 	vmov	r2, r3, d0
 800a628:	f7f5 fff6 	bl	8000618 <__aeabi_dmul>
 800a62c:	ec53 2b18 	vmov	r2, r3, d8
 800a630:	f7f5 fe3c 	bl	80002ac <__adddf3>
 800a634:	4682      	mov	sl, r0
 800a636:	468b      	mov	fp, r1
 800a638:	e78d      	b.n	800a556 <_strtod_l+0xab6>
 800a63a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a63e:	e7db      	b.n	800a5f8 <_strtod_l+0xb58>
 800a640:	a311      	add	r3, pc, #68	; (adr r3, 800a688 <_strtod_l+0xbe8>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f7f6 fa59 	bl	8000afc <__aeabi_dcmplt>
 800a64a:	e7b2      	b.n	800a5b2 <_strtod_l+0xb12>
 800a64c:	2300      	movs	r3, #0
 800a64e:	930a      	str	r3, [sp, #40]	; 0x28
 800a650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a652:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	f7ff ba6b 	b.w	8009b30 <_strtod_l+0x90>
 800a65a:	2a65      	cmp	r2, #101	; 0x65
 800a65c:	f43f ab5f 	beq.w	8009d1e <_strtod_l+0x27e>
 800a660:	2a45      	cmp	r2, #69	; 0x45
 800a662:	f43f ab5c 	beq.w	8009d1e <_strtod_l+0x27e>
 800a666:	2301      	movs	r3, #1
 800a668:	f7ff bb94 	b.w	8009d94 <_strtod_l+0x2f4>
 800a66c:	f3af 8000 	nop.w
 800a670:	94a03595 	.word	0x94a03595
 800a674:	3fdfffff 	.word	0x3fdfffff
 800a678:	35afe535 	.word	0x35afe535
 800a67c:	3fe00000 	.word	0x3fe00000
 800a680:	ffc00000 	.word	0xffc00000
 800a684:	41dfffff 	.word	0x41dfffff
 800a688:	94a03595 	.word	0x94a03595
 800a68c:	3fcfffff 	.word	0x3fcfffff
 800a690:	3ff00000 	.word	0x3ff00000
 800a694:	7ff00000 	.word	0x7ff00000
 800a698:	7fe00000 	.word	0x7fe00000
 800a69c:	7c9fffff 	.word	0x7c9fffff
 800a6a0:	3fe00000 	.word	0x3fe00000
 800a6a4:	bff00000 	.word	0xbff00000
 800a6a8:	7fefffff 	.word	0x7fefffff

0800a6ac <_strtod_r>:
 800a6ac:	4b01      	ldr	r3, [pc, #4]	; (800a6b4 <_strtod_r+0x8>)
 800a6ae:	f7ff b9f7 	b.w	8009aa0 <_strtod_l>
 800a6b2:	bf00      	nop
 800a6b4:	200000a4 	.word	0x200000a4

0800a6b8 <_strtol_l.constprop.0>:
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6be:	d001      	beq.n	800a6c4 <_strtol_l.constprop.0+0xc>
 800a6c0:	2b24      	cmp	r3, #36	; 0x24
 800a6c2:	d906      	bls.n	800a6d2 <_strtol_l.constprop.0+0x1a>
 800a6c4:	f7fd fec6 	bl	8008454 <__errno>
 800a6c8:	2316      	movs	r3, #22
 800a6ca:	6003      	str	r3, [r0, #0]
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a7b8 <_strtol_l.constprop.0+0x100>
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	462e      	mov	r6, r5
 800a6da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6de:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a6e2:	f017 0708 	ands.w	r7, r7, #8
 800a6e6:	d1f7      	bne.n	800a6d8 <_strtol_l.constprop.0+0x20>
 800a6e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a6ea:	d132      	bne.n	800a752 <_strtol_l.constprop.0+0x9a>
 800a6ec:	782c      	ldrb	r4, [r5, #0]
 800a6ee:	2701      	movs	r7, #1
 800a6f0:	1cb5      	adds	r5, r6, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d05b      	beq.n	800a7ae <_strtol_l.constprop.0+0xf6>
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d109      	bne.n	800a70e <_strtol_l.constprop.0+0x56>
 800a6fa:	2c30      	cmp	r4, #48	; 0x30
 800a6fc:	d107      	bne.n	800a70e <_strtol_l.constprop.0+0x56>
 800a6fe:	782c      	ldrb	r4, [r5, #0]
 800a700:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a704:	2c58      	cmp	r4, #88	; 0x58
 800a706:	d14d      	bne.n	800a7a4 <_strtol_l.constprop.0+0xec>
 800a708:	786c      	ldrb	r4, [r5, #1]
 800a70a:	2310      	movs	r3, #16
 800a70c:	3502      	adds	r5, #2
 800a70e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a712:	f108 38ff 	add.w	r8, r8, #4294967295
 800a716:	f04f 0c00 	mov.w	ip, #0
 800a71a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a71e:	4666      	mov	r6, ip
 800a720:	fb03 8a19 	mls	sl, r3, r9, r8
 800a724:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a728:	f1be 0f09 	cmp.w	lr, #9
 800a72c:	d816      	bhi.n	800a75c <_strtol_l.constprop.0+0xa4>
 800a72e:	4674      	mov	r4, lr
 800a730:	42a3      	cmp	r3, r4
 800a732:	dd24      	ble.n	800a77e <_strtol_l.constprop.0+0xc6>
 800a734:	f1bc 0f00 	cmp.w	ip, #0
 800a738:	db1e      	blt.n	800a778 <_strtol_l.constprop.0+0xc0>
 800a73a:	45b1      	cmp	r9, r6
 800a73c:	d31c      	bcc.n	800a778 <_strtol_l.constprop.0+0xc0>
 800a73e:	d101      	bne.n	800a744 <_strtol_l.constprop.0+0x8c>
 800a740:	45a2      	cmp	sl, r4
 800a742:	db19      	blt.n	800a778 <_strtol_l.constprop.0+0xc0>
 800a744:	fb06 4603 	mla	r6, r6, r3, r4
 800a748:	f04f 0c01 	mov.w	ip, #1
 800a74c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a750:	e7e8      	b.n	800a724 <_strtol_l.constprop.0+0x6c>
 800a752:	2c2b      	cmp	r4, #43	; 0x2b
 800a754:	bf04      	itt	eq
 800a756:	782c      	ldrbeq	r4, [r5, #0]
 800a758:	1cb5      	addeq	r5, r6, #2
 800a75a:	e7ca      	b.n	800a6f2 <_strtol_l.constprop.0+0x3a>
 800a75c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a760:	f1be 0f19 	cmp.w	lr, #25
 800a764:	d801      	bhi.n	800a76a <_strtol_l.constprop.0+0xb2>
 800a766:	3c37      	subs	r4, #55	; 0x37
 800a768:	e7e2      	b.n	800a730 <_strtol_l.constprop.0+0x78>
 800a76a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a76e:	f1be 0f19 	cmp.w	lr, #25
 800a772:	d804      	bhi.n	800a77e <_strtol_l.constprop.0+0xc6>
 800a774:	3c57      	subs	r4, #87	; 0x57
 800a776:	e7db      	b.n	800a730 <_strtol_l.constprop.0+0x78>
 800a778:	f04f 3cff 	mov.w	ip, #4294967295
 800a77c:	e7e6      	b.n	800a74c <_strtol_l.constprop.0+0x94>
 800a77e:	f1bc 0f00 	cmp.w	ip, #0
 800a782:	da05      	bge.n	800a790 <_strtol_l.constprop.0+0xd8>
 800a784:	2322      	movs	r3, #34	; 0x22
 800a786:	6003      	str	r3, [r0, #0]
 800a788:	4646      	mov	r6, r8
 800a78a:	b942      	cbnz	r2, 800a79e <_strtol_l.constprop.0+0xe6>
 800a78c:	4630      	mov	r0, r6
 800a78e:	e79e      	b.n	800a6ce <_strtol_l.constprop.0+0x16>
 800a790:	b107      	cbz	r7, 800a794 <_strtol_l.constprop.0+0xdc>
 800a792:	4276      	negs	r6, r6
 800a794:	2a00      	cmp	r2, #0
 800a796:	d0f9      	beq.n	800a78c <_strtol_l.constprop.0+0xd4>
 800a798:	f1bc 0f00 	cmp.w	ip, #0
 800a79c:	d000      	beq.n	800a7a0 <_strtol_l.constprop.0+0xe8>
 800a79e:	1e69      	subs	r1, r5, #1
 800a7a0:	6011      	str	r1, [r2, #0]
 800a7a2:	e7f3      	b.n	800a78c <_strtol_l.constprop.0+0xd4>
 800a7a4:	2430      	movs	r4, #48	; 0x30
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1b1      	bne.n	800a70e <_strtol_l.constprop.0+0x56>
 800a7aa:	2308      	movs	r3, #8
 800a7ac:	e7af      	b.n	800a70e <_strtol_l.constprop.0+0x56>
 800a7ae:	2c30      	cmp	r4, #48	; 0x30
 800a7b0:	d0a5      	beq.n	800a6fe <_strtol_l.constprop.0+0x46>
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	e7ab      	b.n	800a70e <_strtol_l.constprop.0+0x56>
 800a7b6:	bf00      	nop
 800a7b8:	0800e439 	.word	0x0800e439

0800a7bc <_strtol_r>:
 800a7bc:	f7ff bf7c 	b.w	800a6b8 <_strtol_l.constprop.0>

0800a7c0 <_user_strerror>:
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	4770      	bx	lr

0800a7c4 <_vsiprintf_r>:
 800a7c4:	b500      	push	{lr}
 800a7c6:	b09b      	sub	sp, #108	; 0x6c
 800a7c8:	9100      	str	r1, [sp, #0]
 800a7ca:	9104      	str	r1, [sp, #16]
 800a7cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7d0:	9105      	str	r1, [sp, #20]
 800a7d2:	9102      	str	r1, [sp, #8]
 800a7d4:	4905      	ldr	r1, [pc, #20]	; (800a7ec <_vsiprintf_r+0x28>)
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	4669      	mov	r1, sp
 800a7da:	f002 f98b 	bl	800caf4 <_svfiprintf_r>
 800a7de:	9b00      	ldr	r3, [sp, #0]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	b01b      	add	sp, #108	; 0x6c
 800a7e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ea:	bf00      	nop
 800a7ec:	ffff0208 	.word	0xffff0208

0800a7f0 <vsiprintf>:
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	4802      	ldr	r0, [pc, #8]	; (800a800 <vsiprintf+0x10>)
 800a7f8:	6800      	ldr	r0, [r0, #0]
 800a7fa:	f7ff bfe3 	b.w	800a7c4 <_vsiprintf_r>
 800a7fe:	bf00      	nop
 800a800:	2000003c 	.word	0x2000003c

0800a804 <_write_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	; (800a824 <_write_r+0x20>)
 800a808:	4604      	mov	r4, r0
 800a80a:	4608      	mov	r0, r1
 800a80c:	4611      	mov	r1, r2
 800a80e:	2200      	movs	r2, #0
 800a810:	602a      	str	r2, [r5, #0]
 800a812:	461a      	mov	r2, r3
 800a814:	f7f7 fa25 	bl	8001c62 <_write>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_write_r+0x1e>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_write_r+0x1e>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	200007fc 	.word	0x200007fc

0800a828 <_close_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d06      	ldr	r5, [pc, #24]	; (800a844 <_close_r+0x1c>)
 800a82c:	2300      	movs	r3, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	f7f7 fa31 	bl	8001c9a <_close>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_close_r+0x1a>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_close_r+0x1a>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	200007fc 	.word	0x200007fc

0800a848 <quorem>:
 800a848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	6903      	ldr	r3, [r0, #16]
 800a84e:	690c      	ldr	r4, [r1, #16]
 800a850:	42a3      	cmp	r3, r4
 800a852:	4607      	mov	r7, r0
 800a854:	f2c0 8081 	blt.w	800a95a <quorem+0x112>
 800a858:	3c01      	subs	r4, #1
 800a85a:	f101 0814 	add.w	r8, r1, #20
 800a85e:	f100 0514 	add.w	r5, r0, #20
 800a862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a86c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a870:	3301      	adds	r3, #1
 800a872:	429a      	cmp	r2, r3
 800a874:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a878:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a87c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a880:	d331      	bcc.n	800a8e6 <quorem+0x9e>
 800a882:	f04f 0e00 	mov.w	lr, #0
 800a886:	4640      	mov	r0, r8
 800a888:	46ac      	mov	ip, r5
 800a88a:	46f2      	mov	sl, lr
 800a88c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a890:	b293      	uxth	r3, r2
 800a892:	fb06 e303 	mla	r3, r6, r3, lr
 800a896:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ebaa 0303 	sub.w	r3, sl, r3
 800a8a0:	f8dc a000 	ldr.w	sl, [ip]
 800a8a4:	0c12      	lsrs	r2, r2, #16
 800a8a6:	fa13 f38a 	uxtah	r3, r3, sl
 800a8aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a8ae:	9300      	str	r3, [sp, #0]
 800a8b0:	9b00      	ldr	r3, [sp, #0]
 800a8b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a8c4:	4581      	cmp	r9, r0
 800a8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8ca:	f84c 3b04 	str.w	r3, [ip], #4
 800a8ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8d2:	d2db      	bcs.n	800a88c <quorem+0x44>
 800a8d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8d8:	b92b      	cbnz	r3, 800a8e6 <quorem+0x9e>
 800a8da:	9b01      	ldr	r3, [sp, #4]
 800a8dc:	3b04      	subs	r3, #4
 800a8de:	429d      	cmp	r5, r3
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	d32e      	bcc.n	800a942 <quorem+0xfa>
 800a8e4:	613c      	str	r4, [r7, #16]
 800a8e6:	4638      	mov	r0, r7
 800a8e8:	f001 fe9e 	bl	800c628 <__mcmp>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	db24      	blt.n	800a93a <quorem+0xf2>
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f04f 0c00 	mov.w	ip, #0
 800a8f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8fc:	f8d0 e000 	ldr.w	lr, [r0]
 800a900:	b293      	uxth	r3, r2
 800a902:	ebac 0303 	sub.w	r3, ip, r3
 800a906:	0c12      	lsrs	r2, r2, #16
 800a908:	fa13 f38e 	uxtah	r3, r3, lr
 800a90c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a914:	b29b      	uxth	r3, r3
 800a916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a91a:	45c1      	cmp	r9, r8
 800a91c:	f840 3b04 	str.w	r3, [r0], #4
 800a920:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a924:	d2e8      	bcs.n	800a8f8 <quorem+0xb0>
 800a926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a92a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a92e:	b922      	cbnz	r2, 800a93a <quorem+0xf2>
 800a930:	3b04      	subs	r3, #4
 800a932:	429d      	cmp	r5, r3
 800a934:	461a      	mov	r2, r3
 800a936:	d30a      	bcc.n	800a94e <quorem+0x106>
 800a938:	613c      	str	r4, [r7, #16]
 800a93a:	4630      	mov	r0, r6
 800a93c:	b003      	add	sp, #12
 800a93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a942:	6812      	ldr	r2, [r2, #0]
 800a944:	3b04      	subs	r3, #4
 800a946:	2a00      	cmp	r2, #0
 800a948:	d1cc      	bne.n	800a8e4 <quorem+0x9c>
 800a94a:	3c01      	subs	r4, #1
 800a94c:	e7c7      	b.n	800a8de <quorem+0x96>
 800a94e:	6812      	ldr	r2, [r2, #0]
 800a950:	3b04      	subs	r3, #4
 800a952:	2a00      	cmp	r2, #0
 800a954:	d1f0      	bne.n	800a938 <quorem+0xf0>
 800a956:	3c01      	subs	r4, #1
 800a958:	e7eb      	b.n	800a932 <quorem+0xea>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e7ee      	b.n	800a93c <quorem+0xf4>
	...

0800a960 <_dtoa_r>:
 800a960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a964:	ed2d 8b04 	vpush	{d8-d9}
 800a968:	ec57 6b10 	vmov	r6, r7, d0
 800a96c:	b093      	sub	sp, #76	; 0x4c
 800a96e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a974:	9106      	str	r1, [sp, #24]
 800a976:	ee10 aa10 	vmov	sl, s0
 800a97a:	4604      	mov	r4, r0
 800a97c:	9209      	str	r2, [sp, #36]	; 0x24
 800a97e:	930c      	str	r3, [sp, #48]	; 0x30
 800a980:	46bb      	mov	fp, r7
 800a982:	b975      	cbnz	r5, 800a9a2 <_dtoa_r+0x42>
 800a984:	2010      	movs	r0, #16
 800a986:	f7fd fd8f 	bl	80084a8 <malloc>
 800a98a:	4602      	mov	r2, r0
 800a98c:	6260      	str	r0, [r4, #36]	; 0x24
 800a98e:	b920      	cbnz	r0, 800a99a <_dtoa_r+0x3a>
 800a990:	4ba7      	ldr	r3, [pc, #668]	; (800ac30 <_dtoa_r+0x2d0>)
 800a992:	21ea      	movs	r1, #234	; 0xea
 800a994:	48a7      	ldr	r0, [pc, #668]	; (800ac34 <_dtoa_r+0x2d4>)
 800a996:	f002 fdf3 	bl	800d580 <__assert_func>
 800a99a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a99e:	6005      	str	r5, [r0, #0]
 800a9a0:	60c5      	str	r5, [r0, #12]
 800a9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	b151      	cbz	r1, 800a9be <_dtoa_r+0x5e>
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	604a      	str	r2, [r1, #4]
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4093      	lsls	r3, r2
 800a9b0:	608b      	str	r3, [r1, #8]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f001 fbac 	bl	800c110 <_Bfree>
 800a9b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
 800a9be:	1e3b      	subs	r3, r7, #0
 800a9c0:	bfaa      	itet	ge
 800a9c2:	2300      	movge	r3, #0
 800a9c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a9c8:	f8c8 3000 	strge.w	r3, [r8]
 800a9cc:	4b9a      	ldr	r3, [pc, #616]	; (800ac38 <_dtoa_r+0x2d8>)
 800a9ce:	bfbc      	itt	lt
 800a9d0:	2201      	movlt	r2, #1
 800a9d2:	f8c8 2000 	strlt.w	r2, [r8]
 800a9d6:	ea33 030b 	bics.w	r3, r3, fp
 800a9da:	d11b      	bne.n	800aa14 <_dtoa_r+0xb4>
 800a9dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9de:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9e8:	4333      	orrs	r3, r6
 800a9ea:	f000 8592 	beq.w	800b512 <_dtoa_r+0xbb2>
 800a9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f0:	b963      	cbnz	r3, 800aa0c <_dtoa_r+0xac>
 800a9f2:	4b92      	ldr	r3, [pc, #584]	; (800ac3c <_dtoa_r+0x2dc>)
 800a9f4:	e022      	b.n	800aa3c <_dtoa_r+0xdc>
 800a9f6:	4b92      	ldr	r3, [pc, #584]	; (800ac40 <_dtoa_r+0x2e0>)
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	9801      	ldr	r0, [sp, #4]
 800aa02:	b013      	add	sp, #76	; 0x4c
 800aa04:	ecbd 8b04 	vpop	{d8-d9}
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	4b8b      	ldr	r3, [pc, #556]	; (800ac3c <_dtoa_r+0x2dc>)
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	3303      	adds	r3, #3
 800aa12:	e7f3      	b.n	800a9fc <_dtoa_r+0x9c>
 800aa14:	2200      	movs	r2, #0
 800aa16:	2300      	movs	r3, #0
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	f7f6 f864 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa20:	ec4b ab19 	vmov	d9, sl, fp
 800aa24:	4680      	mov	r8, r0
 800aa26:	b158      	cbz	r0, 800aa40 <_dtoa_r+0xe0>
 800aa28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f000 856b 	beq.w	800b50c <_dtoa_r+0xbac>
 800aa36:	4883      	ldr	r0, [pc, #524]	; (800ac44 <_dtoa_r+0x2e4>)
 800aa38:	6018      	str	r0, [r3, #0]
 800aa3a:	1e43      	subs	r3, r0, #1
 800aa3c:	9301      	str	r3, [sp, #4]
 800aa3e:	e7df      	b.n	800aa00 <_dtoa_r+0xa0>
 800aa40:	ec4b ab10 	vmov	d0, sl, fp
 800aa44:	aa10      	add	r2, sp, #64	; 0x40
 800aa46:	a911      	add	r1, sp, #68	; 0x44
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f001 ff0f 	bl	800c86c <__d2b>
 800aa4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aa52:	ee08 0a10 	vmov	s16, r0
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	f000 8084 	beq.w	800ab64 <_dtoa_r+0x204>
 800aa5c:	ee19 3a90 	vmov	r3, s19
 800aa60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa68:	4656      	mov	r6, sl
 800aa6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aa76:	4b74      	ldr	r3, [pc, #464]	; (800ac48 <_dtoa_r+0x2e8>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f5 fc13 	bl	80002a8 <__aeabi_dsub>
 800aa82:	a365      	add	r3, pc, #404	; (adr r3, 800ac18 <_dtoa_r+0x2b8>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fdc6 	bl	8000618 <__aeabi_dmul>
 800aa8c:	a364      	add	r3, pc, #400	; (adr r3, 800ac20 <_dtoa_r+0x2c0>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f7f5 fc0b 	bl	80002ac <__adddf3>
 800aa96:	4606      	mov	r6, r0
 800aa98:	4628      	mov	r0, r5
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	f7f5 fd52 	bl	8000544 <__aeabi_i2d>
 800aaa0:	a361      	add	r3, pc, #388	; (adr r3, 800ac28 <_dtoa_r+0x2c8>)
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	f7f5 fdb7 	bl	8000618 <__aeabi_dmul>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4630      	mov	r0, r6
 800aab0:	4639      	mov	r1, r7
 800aab2:	f7f5 fbfb 	bl	80002ac <__adddf3>
 800aab6:	4606      	mov	r6, r0
 800aab8:	460f      	mov	r7, r1
 800aaba:	f7f6 f85d 	bl	8000b78 <__aeabi_d2iz>
 800aabe:	2200      	movs	r2, #0
 800aac0:	9000      	str	r0, [sp, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	4630      	mov	r0, r6
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f6 f818 	bl	8000afc <__aeabi_dcmplt>
 800aacc:	b150      	cbz	r0, 800aae4 <_dtoa_r+0x184>
 800aace:	9800      	ldr	r0, [sp, #0]
 800aad0:	f7f5 fd38 	bl	8000544 <__aeabi_i2d>
 800aad4:	4632      	mov	r2, r6
 800aad6:	463b      	mov	r3, r7
 800aad8:	f7f6 f806 	bl	8000ae8 <__aeabi_dcmpeq>
 800aadc:	b910      	cbnz	r0, 800aae4 <_dtoa_r+0x184>
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	9300      	str	r3, [sp, #0]
 800aae4:	9b00      	ldr	r3, [sp, #0]
 800aae6:	2b16      	cmp	r3, #22
 800aae8:	d85a      	bhi.n	800aba0 <_dtoa_r+0x240>
 800aaea:	9a00      	ldr	r2, [sp, #0]
 800aaec:	4b57      	ldr	r3, [pc, #348]	; (800ac4c <_dtoa_r+0x2ec>)
 800aaee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	ec51 0b19 	vmov	r0, r1, d9
 800aafa:	f7f5 ffff 	bl	8000afc <__aeabi_dcmplt>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d050      	beq.n	800aba4 <_dtoa_r+0x244>
 800ab02:	9b00      	ldr	r3, [sp, #0]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	2300      	movs	r3, #0
 800ab0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab0e:	1b5d      	subs	r5, r3, r5
 800ab10:	1e6b      	subs	r3, r5, #1
 800ab12:	9305      	str	r3, [sp, #20]
 800ab14:	bf45      	ittet	mi
 800ab16:	f1c5 0301 	rsbmi	r3, r5, #1
 800ab1a:	9304      	strmi	r3, [sp, #16]
 800ab1c:	2300      	movpl	r3, #0
 800ab1e:	2300      	movmi	r3, #0
 800ab20:	bf4c      	ite	mi
 800ab22:	9305      	strmi	r3, [sp, #20]
 800ab24:	9304      	strpl	r3, [sp, #16]
 800ab26:	9b00      	ldr	r3, [sp, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	db3d      	blt.n	800aba8 <_dtoa_r+0x248>
 800ab2c:	9b05      	ldr	r3, [sp, #20]
 800ab2e:	9a00      	ldr	r2, [sp, #0]
 800ab30:	920a      	str	r2, [sp, #40]	; 0x28
 800ab32:	4413      	add	r3, r2
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	2300      	movs	r3, #0
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	9b06      	ldr	r3, [sp, #24]
 800ab3c:	2b09      	cmp	r3, #9
 800ab3e:	f200 8089 	bhi.w	800ac54 <_dtoa_r+0x2f4>
 800ab42:	2b05      	cmp	r3, #5
 800ab44:	bfc4      	itt	gt
 800ab46:	3b04      	subgt	r3, #4
 800ab48:	9306      	strgt	r3, [sp, #24]
 800ab4a:	9b06      	ldr	r3, [sp, #24]
 800ab4c:	f1a3 0302 	sub.w	r3, r3, #2
 800ab50:	bfcc      	ite	gt
 800ab52:	2500      	movgt	r5, #0
 800ab54:	2501      	movle	r5, #1
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	f200 8087 	bhi.w	800ac6a <_dtoa_r+0x30a>
 800ab5c:	e8df f003 	tbb	[pc, r3]
 800ab60:	59383a2d 	.word	0x59383a2d
 800ab64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab68:	441d      	add	r5, r3
 800ab6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	bfc1      	itttt	gt
 800ab72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab7a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ab7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab82:	bfda      	itte	le
 800ab84:	f1c3 0320 	rsble	r3, r3, #32
 800ab88:	fa06 f003 	lslle.w	r0, r6, r3
 800ab8c:	4318      	orrgt	r0, r3
 800ab8e:	f7f5 fcc9 	bl	8000524 <__aeabi_ui2d>
 800ab92:	2301      	movs	r3, #1
 800ab94:	4606      	mov	r6, r0
 800ab96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab9a:	3d01      	subs	r5, #1
 800ab9c:	930e      	str	r3, [sp, #56]	; 0x38
 800ab9e:	e76a      	b.n	800aa76 <_dtoa_r+0x116>
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7b2      	b.n	800ab0a <_dtoa_r+0x1aa>
 800aba4:	900b      	str	r0, [sp, #44]	; 0x2c
 800aba6:	e7b1      	b.n	800ab0c <_dtoa_r+0x1ac>
 800aba8:	9b04      	ldr	r3, [sp, #16]
 800abaa:	9a00      	ldr	r2, [sp, #0]
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	9304      	str	r3, [sp, #16]
 800abb0:	4253      	negs	r3, r2
 800abb2:	9307      	str	r3, [sp, #28]
 800abb4:	2300      	movs	r3, #0
 800abb6:	930a      	str	r3, [sp, #40]	; 0x28
 800abb8:	e7bf      	b.n	800ab3a <_dtoa_r+0x1da>
 800abba:	2300      	movs	r3, #0
 800abbc:	9308      	str	r3, [sp, #32]
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	dc55      	bgt.n	800ac70 <_dtoa_r+0x310>
 800abc4:	2301      	movs	r3, #1
 800abc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abca:	461a      	mov	r2, r3
 800abcc:	9209      	str	r2, [sp, #36]	; 0x24
 800abce:	e00c      	b.n	800abea <_dtoa_r+0x28a>
 800abd0:	2301      	movs	r3, #1
 800abd2:	e7f3      	b.n	800abbc <_dtoa_r+0x25c>
 800abd4:	2300      	movs	r3, #0
 800abd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd8:	9308      	str	r3, [sp, #32]
 800abda:	9b00      	ldr	r3, [sp, #0]
 800abdc:	4413      	add	r3, r2
 800abde:	9302      	str	r3, [sp, #8]
 800abe0:	3301      	adds	r3, #1
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	9303      	str	r3, [sp, #12]
 800abe6:	bfb8      	it	lt
 800abe8:	2301      	movlt	r3, #1
 800abea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800abec:	2200      	movs	r2, #0
 800abee:	6042      	str	r2, [r0, #4]
 800abf0:	2204      	movs	r2, #4
 800abf2:	f102 0614 	add.w	r6, r2, #20
 800abf6:	429e      	cmp	r6, r3
 800abf8:	6841      	ldr	r1, [r0, #4]
 800abfa:	d93d      	bls.n	800ac78 <_dtoa_r+0x318>
 800abfc:	4620      	mov	r0, r4
 800abfe:	f001 fa47 	bl	800c090 <_Balloc>
 800ac02:	9001      	str	r0, [sp, #4]
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d13b      	bne.n	800ac80 <_dtoa_r+0x320>
 800ac08:	4b11      	ldr	r3, [pc, #68]	; (800ac50 <_dtoa_r+0x2f0>)
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac10:	e6c0      	b.n	800a994 <_dtoa_r+0x34>
 800ac12:	2301      	movs	r3, #1
 800ac14:	e7df      	b.n	800abd6 <_dtoa_r+0x276>
 800ac16:	bf00      	nop
 800ac18:	636f4361 	.word	0x636f4361
 800ac1c:	3fd287a7 	.word	0x3fd287a7
 800ac20:	8b60c8b3 	.word	0x8b60c8b3
 800ac24:	3fc68a28 	.word	0x3fc68a28
 800ac28:	509f79fb 	.word	0x509f79fb
 800ac2c:	3fd34413 	.word	0x3fd34413
 800ac30:	0800e546 	.word	0x0800e546
 800ac34:	0800e55d 	.word	0x0800e55d
 800ac38:	7ff00000 	.word	0x7ff00000
 800ac3c:	0800e542 	.word	0x0800e542
 800ac40:	0800e539 	.word	0x0800e539
 800ac44:	0800e81a 	.word	0x0800e81a
 800ac48:	3ff80000 	.word	0x3ff80000
 800ac4c:	0800e730 	.word	0x0800e730
 800ac50:	0800e5b8 	.word	0x0800e5b8
 800ac54:	2501      	movs	r5, #1
 800ac56:	2300      	movs	r3, #0
 800ac58:	9306      	str	r3, [sp, #24]
 800ac5a:	9508      	str	r5, [sp, #32]
 800ac5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac64:	2200      	movs	r2, #0
 800ac66:	2312      	movs	r3, #18
 800ac68:	e7b0      	b.n	800abcc <_dtoa_r+0x26c>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	9308      	str	r3, [sp, #32]
 800ac6e:	e7f5      	b.n	800ac5c <_dtoa_r+0x2fc>
 800ac70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac76:	e7b8      	b.n	800abea <_dtoa_r+0x28a>
 800ac78:	3101      	adds	r1, #1
 800ac7a:	6041      	str	r1, [r0, #4]
 800ac7c:	0052      	lsls	r2, r2, #1
 800ac7e:	e7b8      	b.n	800abf2 <_dtoa_r+0x292>
 800ac80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac82:	9a01      	ldr	r2, [sp, #4]
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	9b03      	ldr	r3, [sp, #12]
 800ac88:	2b0e      	cmp	r3, #14
 800ac8a:	f200 809d 	bhi.w	800adc8 <_dtoa_r+0x468>
 800ac8e:	2d00      	cmp	r5, #0
 800ac90:	f000 809a 	beq.w	800adc8 <_dtoa_r+0x468>
 800ac94:	9b00      	ldr	r3, [sp, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	dd32      	ble.n	800ad00 <_dtoa_r+0x3a0>
 800ac9a:	4ab7      	ldr	r2, [pc, #732]	; (800af78 <_dtoa_r+0x618>)
 800ac9c:	f003 030f 	and.w	r3, r3, #15
 800aca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	05d8      	lsls	r0, r3, #23
 800acac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800acb0:	d516      	bpl.n	800ace0 <_dtoa_r+0x380>
 800acb2:	4bb2      	ldr	r3, [pc, #712]	; (800af7c <_dtoa_r+0x61c>)
 800acb4:	ec51 0b19 	vmov	r0, r1, d9
 800acb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acbc:	f7f5 fdd6 	bl	800086c <__aeabi_ddiv>
 800acc0:	f007 070f 	and.w	r7, r7, #15
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	2503      	movs	r5, #3
 800acca:	4eac      	ldr	r6, [pc, #688]	; (800af7c <_dtoa_r+0x61c>)
 800accc:	b957      	cbnz	r7, 800ace4 <_dtoa_r+0x384>
 800acce:	4642      	mov	r2, r8
 800acd0:	464b      	mov	r3, r9
 800acd2:	4650      	mov	r0, sl
 800acd4:	4659      	mov	r1, fp
 800acd6:	f7f5 fdc9 	bl	800086c <__aeabi_ddiv>
 800acda:	4682      	mov	sl, r0
 800acdc:	468b      	mov	fp, r1
 800acde:	e028      	b.n	800ad32 <_dtoa_r+0x3d2>
 800ace0:	2502      	movs	r5, #2
 800ace2:	e7f2      	b.n	800acca <_dtoa_r+0x36a>
 800ace4:	07f9      	lsls	r1, r7, #31
 800ace6:	d508      	bpl.n	800acfa <_dtoa_r+0x39a>
 800ace8:	4640      	mov	r0, r8
 800acea:	4649      	mov	r1, r9
 800acec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acf0:	f7f5 fc92 	bl	8000618 <__aeabi_dmul>
 800acf4:	3501      	adds	r5, #1
 800acf6:	4680      	mov	r8, r0
 800acf8:	4689      	mov	r9, r1
 800acfa:	107f      	asrs	r7, r7, #1
 800acfc:	3608      	adds	r6, #8
 800acfe:	e7e5      	b.n	800accc <_dtoa_r+0x36c>
 800ad00:	f000 809b 	beq.w	800ae3a <_dtoa_r+0x4da>
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	4f9d      	ldr	r7, [pc, #628]	; (800af7c <_dtoa_r+0x61c>)
 800ad08:	425e      	negs	r6, r3
 800ad0a:	4b9b      	ldr	r3, [pc, #620]	; (800af78 <_dtoa_r+0x618>)
 800ad0c:	f006 020f 	and.w	r2, r6, #15
 800ad10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	ec51 0b19 	vmov	r0, r1, d9
 800ad1c:	f7f5 fc7c 	bl	8000618 <__aeabi_dmul>
 800ad20:	1136      	asrs	r6, r6, #4
 800ad22:	4682      	mov	sl, r0
 800ad24:	468b      	mov	fp, r1
 800ad26:	2300      	movs	r3, #0
 800ad28:	2502      	movs	r5, #2
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	d17a      	bne.n	800ae24 <_dtoa_r+0x4c4>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1d3      	bne.n	800acda <_dtoa_r+0x37a>
 800ad32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 8082 	beq.w	800ae3e <_dtoa_r+0x4de>
 800ad3a:	4b91      	ldr	r3, [pc, #580]	; (800af80 <_dtoa_r+0x620>)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4650      	mov	r0, sl
 800ad40:	4659      	mov	r1, fp
 800ad42:	f7f5 fedb 	bl	8000afc <__aeabi_dcmplt>
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d079      	beq.n	800ae3e <_dtoa_r+0x4de>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d076      	beq.n	800ae3e <_dtoa_r+0x4de>
 800ad50:	9b02      	ldr	r3, [sp, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dd36      	ble.n	800adc4 <_dtoa_r+0x464>
 800ad56:	9b00      	ldr	r3, [sp, #0]
 800ad58:	4650      	mov	r0, sl
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	1e5f      	subs	r7, r3, #1
 800ad5e:	2200      	movs	r2, #0
 800ad60:	4b88      	ldr	r3, [pc, #544]	; (800af84 <_dtoa_r+0x624>)
 800ad62:	f7f5 fc59 	bl	8000618 <__aeabi_dmul>
 800ad66:	9e02      	ldr	r6, [sp, #8]
 800ad68:	4682      	mov	sl, r0
 800ad6a:	468b      	mov	fp, r1
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f7f5 fbe8 	bl	8000544 <__aeabi_i2d>
 800ad74:	4652      	mov	r2, sl
 800ad76:	465b      	mov	r3, fp
 800ad78:	f7f5 fc4e 	bl	8000618 <__aeabi_dmul>
 800ad7c:	4b82      	ldr	r3, [pc, #520]	; (800af88 <_dtoa_r+0x628>)
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f7f5 fa94 	bl	80002ac <__adddf3>
 800ad84:	46d0      	mov	r8, sl
 800ad86:	46d9      	mov	r9, fp
 800ad88:	4682      	mov	sl, r0
 800ad8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	d158      	bne.n	800ae44 <_dtoa_r+0x4e4>
 800ad92:	4b7e      	ldr	r3, [pc, #504]	; (800af8c <_dtoa_r+0x62c>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 fa85 	bl	80002a8 <__aeabi_dsub>
 800ad9e:	4652      	mov	r2, sl
 800ada0:	465b      	mov	r3, fp
 800ada2:	4680      	mov	r8, r0
 800ada4:	4689      	mov	r9, r1
 800ada6:	f7f5 fec7 	bl	8000b38 <__aeabi_dcmpgt>
 800adaa:	2800      	cmp	r0, #0
 800adac:	f040 8295 	bne.w	800b2da <_dtoa_r+0x97a>
 800adb0:	4652      	mov	r2, sl
 800adb2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adb6:	4640      	mov	r0, r8
 800adb8:	4649      	mov	r1, r9
 800adba:	f7f5 fe9f 	bl	8000afc <__aeabi_dcmplt>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f040 8289 	bne.w	800b2d6 <_dtoa_r+0x976>
 800adc4:	ec5b ab19 	vmov	sl, fp, d9
 800adc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f2c0 8148 	blt.w	800b060 <_dtoa_r+0x700>
 800add0:	9a00      	ldr	r2, [sp, #0]
 800add2:	2a0e      	cmp	r2, #14
 800add4:	f300 8144 	bgt.w	800b060 <_dtoa_r+0x700>
 800add8:	4b67      	ldr	r3, [pc, #412]	; (800af78 <_dtoa_r+0x618>)
 800adda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adde:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f280 80d5 	bge.w	800af94 <_dtoa_r+0x634>
 800adea:	9b03      	ldr	r3, [sp, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	f300 80d1 	bgt.w	800af94 <_dtoa_r+0x634>
 800adf2:	f040 826f 	bne.w	800b2d4 <_dtoa_r+0x974>
 800adf6:	4b65      	ldr	r3, [pc, #404]	; (800af8c <_dtoa_r+0x62c>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	f7f5 fc0b 	bl	8000618 <__aeabi_dmul>
 800ae02:	4652      	mov	r2, sl
 800ae04:	465b      	mov	r3, fp
 800ae06:	f7f5 fe8d 	bl	8000b24 <__aeabi_dcmpge>
 800ae0a:	9e03      	ldr	r6, [sp, #12]
 800ae0c:	4637      	mov	r7, r6
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f040 8245 	bne.w	800b29e <_dtoa_r+0x93e>
 800ae14:	9d01      	ldr	r5, [sp, #4]
 800ae16:	2331      	movs	r3, #49	; 0x31
 800ae18:	f805 3b01 	strb.w	r3, [r5], #1
 800ae1c:	9b00      	ldr	r3, [sp, #0]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	e240      	b.n	800b2a6 <_dtoa_r+0x946>
 800ae24:	07f2      	lsls	r2, r6, #31
 800ae26:	d505      	bpl.n	800ae34 <_dtoa_r+0x4d4>
 800ae28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae2c:	f7f5 fbf4 	bl	8000618 <__aeabi_dmul>
 800ae30:	3501      	adds	r5, #1
 800ae32:	2301      	movs	r3, #1
 800ae34:	1076      	asrs	r6, r6, #1
 800ae36:	3708      	adds	r7, #8
 800ae38:	e777      	b.n	800ad2a <_dtoa_r+0x3ca>
 800ae3a:	2502      	movs	r5, #2
 800ae3c:	e779      	b.n	800ad32 <_dtoa_r+0x3d2>
 800ae3e:	9f00      	ldr	r7, [sp, #0]
 800ae40:	9e03      	ldr	r6, [sp, #12]
 800ae42:	e794      	b.n	800ad6e <_dtoa_r+0x40e>
 800ae44:	9901      	ldr	r1, [sp, #4]
 800ae46:	4b4c      	ldr	r3, [pc, #304]	; (800af78 <_dtoa_r+0x618>)
 800ae48:	4431      	add	r1, r6
 800ae4a:	910d      	str	r1, [sp, #52]	; 0x34
 800ae4c:	9908      	ldr	r1, [sp, #32]
 800ae4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d043      	beq.n	800aee2 <_dtoa_r+0x582>
 800ae5a:	494d      	ldr	r1, [pc, #308]	; (800af90 <_dtoa_r+0x630>)
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	f7f5 fd05 	bl	800086c <__aeabi_ddiv>
 800ae62:	4652      	mov	r2, sl
 800ae64:	465b      	mov	r3, fp
 800ae66:	f7f5 fa1f 	bl	80002a8 <__aeabi_dsub>
 800ae6a:	9d01      	ldr	r5, [sp, #4]
 800ae6c:	4682      	mov	sl, r0
 800ae6e:	468b      	mov	fp, r1
 800ae70:	4649      	mov	r1, r9
 800ae72:	4640      	mov	r0, r8
 800ae74:	f7f5 fe80 	bl	8000b78 <__aeabi_d2iz>
 800ae78:	4606      	mov	r6, r0
 800ae7a:	f7f5 fb63 	bl	8000544 <__aeabi_i2d>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 fa0f 	bl	80002a8 <__aeabi_dsub>
 800ae8a:	3630      	adds	r6, #48	; 0x30
 800ae8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ae90:	4652      	mov	r2, sl
 800ae92:	465b      	mov	r3, fp
 800ae94:	4680      	mov	r8, r0
 800ae96:	4689      	mov	r9, r1
 800ae98:	f7f5 fe30 	bl	8000afc <__aeabi_dcmplt>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d163      	bne.n	800af68 <_dtoa_r+0x608>
 800aea0:	4642      	mov	r2, r8
 800aea2:	464b      	mov	r3, r9
 800aea4:	4936      	ldr	r1, [pc, #216]	; (800af80 <_dtoa_r+0x620>)
 800aea6:	2000      	movs	r0, #0
 800aea8:	f7f5 f9fe 	bl	80002a8 <__aeabi_dsub>
 800aeac:	4652      	mov	r2, sl
 800aeae:	465b      	mov	r3, fp
 800aeb0:	f7f5 fe24 	bl	8000afc <__aeabi_dcmplt>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	f040 80b5 	bne.w	800b024 <_dtoa_r+0x6c4>
 800aeba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aebc:	429d      	cmp	r5, r3
 800aebe:	d081      	beq.n	800adc4 <_dtoa_r+0x464>
 800aec0:	4b30      	ldr	r3, [pc, #192]	; (800af84 <_dtoa_r+0x624>)
 800aec2:	2200      	movs	r2, #0
 800aec4:	4650      	mov	r0, sl
 800aec6:	4659      	mov	r1, fp
 800aec8:	f7f5 fba6 	bl	8000618 <__aeabi_dmul>
 800aecc:	4b2d      	ldr	r3, [pc, #180]	; (800af84 <_dtoa_r+0x624>)
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	4640      	mov	r0, r8
 800aed4:	4649      	mov	r1, r9
 800aed6:	2200      	movs	r2, #0
 800aed8:	f7f5 fb9e 	bl	8000618 <__aeabi_dmul>
 800aedc:	4680      	mov	r8, r0
 800aede:	4689      	mov	r9, r1
 800aee0:	e7c6      	b.n	800ae70 <_dtoa_r+0x510>
 800aee2:	4650      	mov	r0, sl
 800aee4:	4659      	mov	r1, fp
 800aee6:	f7f5 fb97 	bl	8000618 <__aeabi_dmul>
 800aeea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeec:	9d01      	ldr	r5, [sp, #4]
 800aeee:	930f      	str	r3, [sp, #60]	; 0x3c
 800aef0:	4682      	mov	sl, r0
 800aef2:	468b      	mov	fp, r1
 800aef4:	4649      	mov	r1, r9
 800aef6:	4640      	mov	r0, r8
 800aef8:	f7f5 fe3e 	bl	8000b78 <__aeabi_d2iz>
 800aefc:	4606      	mov	r6, r0
 800aefe:	f7f5 fb21 	bl	8000544 <__aeabi_i2d>
 800af02:	3630      	adds	r6, #48	; 0x30
 800af04:	4602      	mov	r2, r0
 800af06:	460b      	mov	r3, r1
 800af08:	4640      	mov	r0, r8
 800af0a:	4649      	mov	r1, r9
 800af0c:	f7f5 f9cc 	bl	80002a8 <__aeabi_dsub>
 800af10:	f805 6b01 	strb.w	r6, [r5], #1
 800af14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af16:	429d      	cmp	r5, r3
 800af18:	4680      	mov	r8, r0
 800af1a:	4689      	mov	r9, r1
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	d124      	bne.n	800af6c <_dtoa_r+0x60c>
 800af22:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <_dtoa_r+0x630>)
 800af24:	4650      	mov	r0, sl
 800af26:	4659      	mov	r1, fp
 800af28:	f7f5 f9c0 	bl	80002ac <__adddf3>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4640      	mov	r0, r8
 800af32:	4649      	mov	r1, r9
 800af34:	f7f5 fe00 	bl	8000b38 <__aeabi_dcmpgt>
 800af38:	2800      	cmp	r0, #0
 800af3a:	d173      	bne.n	800b024 <_dtoa_r+0x6c4>
 800af3c:	4652      	mov	r2, sl
 800af3e:	465b      	mov	r3, fp
 800af40:	4913      	ldr	r1, [pc, #76]	; (800af90 <_dtoa_r+0x630>)
 800af42:	2000      	movs	r0, #0
 800af44:	f7f5 f9b0 	bl	80002a8 <__aeabi_dsub>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	4640      	mov	r0, r8
 800af4e:	4649      	mov	r1, r9
 800af50:	f7f5 fdd4 	bl	8000afc <__aeabi_dcmplt>
 800af54:	2800      	cmp	r0, #0
 800af56:	f43f af35 	beq.w	800adc4 <_dtoa_r+0x464>
 800af5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af5c:	1e6b      	subs	r3, r5, #1
 800af5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800af60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af64:	2b30      	cmp	r3, #48	; 0x30
 800af66:	d0f8      	beq.n	800af5a <_dtoa_r+0x5fa>
 800af68:	9700      	str	r7, [sp, #0]
 800af6a:	e049      	b.n	800b000 <_dtoa_r+0x6a0>
 800af6c:	4b05      	ldr	r3, [pc, #20]	; (800af84 <_dtoa_r+0x624>)
 800af6e:	f7f5 fb53 	bl	8000618 <__aeabi_dmul>
 800af72:	4680      	mov	r8, r0
 800af74:	4689      	mov	r9, r1
 800af76:	e7bd      	b.n	800aef4 <_dtoa_r+0x594>
 800af78:	0800e730 	.word	0x0800e730
 800af7c:	0800e708 	.word	0x0800e708
 800af80:	3ff00000 	.word	0x3ff00000
 800af84:	40240000 	.word	0x40240000
 800af88:	401c0000 	.word	0x401c0000
 800af8c:	40140000 	.word	0x40140000
 800af90:	3fe00000 	.word	0x3fe00000
 800af94:	9d01      	ldr	r5, [sp, #4]
 800af96:	4656      	mov	r6, sl
 800af98:	465f      	mov	r7, fp
 800af9a:	4642      	mov	r2, r8
 800af9c:	464b      	mov	r3, r9
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 fc63 	bl	800086c <__aeabi_ddiv>
 800afa6:	f7f5 fde7 	bl	8000b78 <__aeabi_d2iz>
 800afaa:	4682      	mov	sl, r0
 800afac:	f7f5 faca 	bl	8000544 <__aeabi_i2d>
 800afb0:	4642      	mov	r2, r8
 800afb2:	464b      	mov	r3, r9
 800afb4:	f7f5 fb30 	bl	8000618 <__aeabi_dmul>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	4630      	mov	r0, r6
 800afbe:	4639      	mov	r1, r7
 800afc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800afc4:	f7f5 f970 	bl	80002a8 <__aeabi_dsub>
 800afc8:	f805 6b01 	strb.w	r6, [r5], #1
 800afcc:	9e01      	ldr	r6, [sp, #4]
 800afce:	9f03      	ldr	r7, [sp, #12]
 800afd0:	1bae      	subs	r6, r5, r6
 800afd2:	42b7      	cmp	r7, r6
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	d135      	bne.n	800b046 <_dtoa_r+0x6e6>
 800afda:	f7f5 f967 	bl	80002ac <__adddf3>
 800afde:	4642      	mov	r2, r8
 800afe0:	464b      	mov	r3, r9
 800afe2:	4606      	mov	r6, r0
 800afe4:	460f      	mov	r7, r1
 800afe6:	f7f5 fda7 	bl	8000b38 <__aeabi_dcmpgt>
 800afea:	b9d0      	cbnz	r0, 800b022 <_dtoa_r+0x6c2>
 800afec:	4642      	mov	r2, r8
 800afee:	464b      	mov	r3, r9
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 fd78 	bl	8000ae8 <__aeabi_dcmpeq>
 800aff8:	b110      	cbz	r0, 800b000 <_dtoa_r+0x6a0>
 800affa:	f01a 0f01 	tst.w	sl, #1
 800affe:	d110      	bne.n	800b022 <_dtoa_r+0x6c2>
 800b000:	4620      	mov	r0, r4
 800b002:	ee18 1a10 	vmov	r1, s16
 800b006:	f001 f883 	bl	800c110 <_Bfree>
 800b00a:	2300      	movs	r3, #0
 800b00c:	9800      	ldr	r0, [sp, #0]
 800b00e:	702b      	strb	r3, [r5, #0]
 800b010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b012:	3001      	adds	r0, #1
 800b014:	6018      	str	r0, [r3, #0]
 800b016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f43f acf1 	beq.w	800aa00 <_dtoa_r+0xa0>
 800b01e:	601d      	str	r5, [r3, #0]
 800b020:	e4ee      	b.n	800aa00 <_dtoa_r+0xa0>
 800b022:	9f00      	ldr	r7, [sp, #0]
 800b024:	462b      	mov	r3, r5
 800b026:	461d      	mov	r5, r3
 800b028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b02c:	2a39      	cmp	r2, #57	; 0x39
 800b02e:	d106      	bne.n	800b03e <_dtoa_r+0x6de>
 800b030:	9a01      	ldr	r2, [sp, #4]
 800b032:	429a      	cmp	r2, r3
 800b034:	d1f7      	bne.n	800b026 <_dtoa_r+0x6c6>
 800b036:	9901      	ldr	r1, [sp, #4]
 800b038:	2230      	movs	r2, #48	; 0x30
 800b03a:	3701      	adds	r7, #1
 800b03c:	700a      	strb	r2, [r1, #0]
 800b03e:	781a      	ldrb	r2, [r3, #0]
 800b040:	3201      	adds	r2, #1
 800b042:	701a      	strb	r2, [r3, #0]
 800b044:	e790      	b.n	800af68 <_dtoa_r+0x608>
 800b046:	4ba6      	ldr	r3, [pc, #664]	; (800b2e0 <_dtoa_r+0x980>)
 800b048:	2200      	movs	r2, #0
 800b04a:	f7f5 fae5 	bl	8000618 <__aeabi_dmul>
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	4606      	mov	r6, r0
 800b054:	460f      	mov	r7, r1
 800b056:	f7f5 fd47 	bl	8000ae8 <__aeabi_dcmpeq>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	d09d      	beq.n	800af9a <_dtoa_r+0x63a>
 800b05e:	e7cf      	b.n	800b000 <_dtoa_r+0x6a0>
 800b060:	9a08      	ldr	r2, [sp, #32]
 800b062:	2a00      	cmp	r2, #0
 800b064:	f000 80d7 	beq.w	800b216 <_dtoa_r+0x8b6>
 800b068:	9a06      	ldr	r2, [sp, #24]
 800b06a:	2a01      	cmp	r2, #1
 800b06c:	f300 80ba 	bgt.w	800b1e4 <_dtoa_r+0x884>
 800b070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b072:	2a00      	cmp	r2, #0
 800b074:	f000 80b2 	beq.w	800b1dc <_dtoa_r+0x87c>
 800b078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b07c:	9e07      	ldr	r6, [sp, #28]
 800b07e:	9d04      	ldr	r5, [sp, #16]
 800b080:	9a04      	ldr	r2, [sp, #16]
 800b082:	441a      	add	r2, r3
 800b084:	9204      	str	r2, [sp, #16]
 800b086:	9a05      	ldr	r2, [sp, #20]
 800b088:	2101      	movs	r1, #1
 800b08a:	441a      	add	r2, r3
 800b08c:	4620      	mov	r0, r4
 800b08e:	9205      	str	r2, [sp, #20]
 800b090:	f001 f940 	bl	800c314 <__i2b>
 800b094:	4607      	mov	r7, r0
 800b096:	2d00      	cmp	r5, #0
 800b098:	dd0c      	ble.n	800b0b4 <_dtoa_r+0x754>
 800b09a:	9b05      	ldr	r3, [sp, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dd09      	ble.n	800b0b4 <_dtoa_r+0x754>
 800b0a0:	42ab      	cmp	r3, r5
 800b0a2:	9a04      	ldr	r2, [sp, #16]
 800b0a4:	bfa8      	it	ge
 800b0a6:	462b      	movge	r3, r5
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	9204      	str	r2, [sp, #16]
 800b0ac:	9a05      	ldr	r2, [sp, #20]
 800b0ae:	1aed      	subs	r5, r5, r3
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	9305      	str	r3, [sp, #20]
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	b31b      	cbz	r3, 800b100 <_dtoa_r+0x7a0>
 800b0b8:	9b08      	ldr	r3, [sp, #32]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f000 80af 	beq.w	800b21e <_dtoa_r+0x8be>
 800b0c0:	2e00      	cmp	r6, #0
 800b0c2:	dd13      	ble.n	800b0ec <_dtoa_r+0x78c>
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4632      	mov	r2, r6
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	f001 f9e3 	bl	800c494 <__pow5mult>
 800b0ce:	ee18 2a10 	vmov	r2, s16
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f001 f932 	bl	800c340 <__multiply>
 800b0dc:	ee18 1a10 	vmov	r1, s16
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f001 f814 	bl	800c110 <_Bfree>
 800b0e8:	ee08 8a10 	vmov	s16, r8
 800b0ec:	9b07      	ldr	r3, [sp, #28]
 800b0ee:	1b9a      	subs	r2, r3, r6
 800b0f0:	d006      	beq.n	800b100 <_dtoa_r+0x7a0>
 800b0f2:	ee18 1a10 	vmov	r1, s16
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f001 f9cc 	bl	800c494 <__pow5mult>
 800b0fc:	ee08 0a10 	vmov	s16, r0
 800b100:	2101      	movs	r1, #1
 800b102:	4620      	mov	r0, r4
 800b104:	f001 f906 	bl	800c314 <__i2b>
 800b108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	4606      	mov	r6, r0
 800b10e:	f340 8088 	ble.w	800b222 <_dtoa_r+0x8c2>
 800b112:	461a      	mov	r2, r3
 800b114:	4601      	mov	r1, r0
 800b116:	4620      	mov	r0, r4
 800b118:	f001 f9bc 	bl	800c494 <__pow5mult>
 800b11c:	9b06      	ldr	r3, [sp, #24]
 800b11e:	2b01      	cmp	r3, #1
 800b120:	4606      	mov	r6, r0
 800b122:	f340 8081 	ble.w	800b228 <_dtoa_r+0x8c8>
 800b126:	f04f 0800 	mov.w	r8, #0
 800b12a:	6933      	ldr	r3, [r6, #16]
 800b12c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b130:	6918      	ldr	r0, [r3, #16]
 800b132:	f001 f89f 	bl	800c274 <__hi0bits>
 800b136:	f1c0 0020 	rsb	r0, r0, #32
 800b13a:	9b05      	ldr	r3, [sp, #20]
 800b13c:	4418      	add	r0, r3
 800b13e:	f010 001f 	ands.w	r0, r0, #31
 800b142:	f000 8092 	beq.w	800b26a <_dtoa_r+0x90a>
 800b146:	f1c0 0320 	rsb	r3, r0, #32
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	f340 808a 	ble.w	800b264 <_dtoa_r+0x904>
 800b150:	f1c0 001c 	rsb	r0, r0, #28
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	4403      	add	r3, r0
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	9b05      	ldr	r3, [sp, #20]
 800b15c:	4403      	add	r3, r0
 800b15e:	4405      	add	r5, r0
 800b160:	9305      	str	r3, [sp, #20]
 800b162:	9b04      	ldr	r3, [sp, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd07      	ble.n	800b178 <_dtoa_r+0x818>
 800b168:	ee18 1a10 	vmov	r1, s16
 800b16c:	461a      	mov	r2, r3
 800b16e:	4620      	mov	r0, r4
 800b170:	f001 f9ea 	bl	800c548 <__lshift>
 800b174:	ee08 0a10 	vmov	s16, r0
 800b178:	9b05      	ldr	r3, [sp, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	dd05      	ble.n	800b18a <_dtoa_r+0x82a>
 800b17e:	4631      	mov	r1, r6
 800b180:	461a      	mov	r2, r3
 800b182:	4620      	mov	r0, r4
 800b184:	f001 f9e0 	bl	800c548 <__lshift>
 800b188:	4606      	mov	r6, r0
 800b18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d06e      	beq.n	800b26e <_dtoa_r+0x90e>
 800b190:	ee18 0a10 	vmov	r0, s16
 800b194:	4631      	mov	r1, r6
 800b196:	f001 fa47 	bl	800c628 <__mcmp>
 800b19a:	2800      	cmp	r0, #0
 800b19c:	da67      	bge.n	800b26e <_dtoa_r+0x90e>
 800b19e:	9b00      	ldr	r3, [sp, #0]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	ee18 1a10 	vmov	r1, s16
 800b1a6:	9300      	str	r3, [sp, #0]
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 ffd1 	bl	800c154 <__multadd>
 800b1b2:	9b08      	ldr	r3, [sp, #32]
 800b1b4:	ee08 0a10 	vmov	s16, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f000 81b1 	beq.w	800b520 <_dtoa_r+0xbc0>
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	220a      	movs	r2, #10
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 ffc5 	bl	800c154 <__multadd>
 800b1ca:	9b02      	ldr	r3, [sp, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	f300 808e 	bgt.w	800b2f0 <_dtoa_r+0x990>
 800b1d4:	9b06      	ldr	r3, [sp, #24]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	dc51      	bgt.n	800b27e <_dtoa_r+0x91e>
 800b1da:	e089      	b.n	800b2f0 <_dtoa_r+0x990>
 800b1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1e2:	e74b      	b.n	800b07c <_dtoa_r+0x71c>
 800b1e4:	9b03      	ldr	r3, [sp, #12]
 800b1e6:	1e5e      	subs	r6, r3, #1
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	42b3      	cmp	r3, r6
 800b1ec:	bfbf      	itttt	lt
 800b1ee:	9b07      	ldrlt	r3, [sp, #28]
 800b1f0:	9607      	strlt	r6, [sp, #28]
 800b1f2:	1af2      	sublt	r2, r6, r3
 800b1f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b1f6:	bfb6      	itet	lt
 800b1f8:	189b      	addlt	r3, r3, r2
 800b1fa:	1b9e      	subge	r6, r3, r6
 800b1fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b1fe:	9b03      	ldr	r3, [sp, #12]
 800b200:	bfb8      	it	lt
 800b202:	2600      	movlt	r6, #0
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfb7      	itett	lt
 800b208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b20c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b210:	1a9d      	sublt	r5, r3, r2
 800b212:	2300      	movlt	r3, #0
 800b214:	e734      	b.n	800b080 <_dtoa_r+0x720>
 800b216:	9e07      	ldr	r6, [sp, #28]
 800b218:	9d04      	ldr	r5, [sp, #16]
 800b21a:	9f08      	ldr	r7, [sp, #32]
 800b21c:	e73b      	b.n	800b096 <_dtoa_r+0x736>
 800b21e:	9a07      	ldr	r2, [sp, #28]
 800b220:	e767      	b.n	800b0f2 <_dtoa_r+0x792>
 800b222:	9b06      	ldr	r3, [sp, #24]
 800b224:	2b01      	cmp	r3, #1
 800b226:	dc18      	bgt.n	800b25a <_dtoa_r+0x8fa>
 800b228:	f1ba 0f00 	cmp.w	sl, #0
 800b22c:	d115      	bne.n	800b25a <_dtoa_r+0x8fa>
 800b22e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b232:	b993      	cbnz	r3, 800b25a <_dtoa_r+0x8fa>
 800b234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b238:	0d1b      	lsrs	r3, r3, #20
 800b23a:	051b      	lsls	r3, r3, #20
 800b23c:	b183      	cbz	r3, 800b260 <_dtoa_r+0x900>
 800b23e:	9b04      	ldr	r3, [sp, #16]
 800b240:	3301      	adds	r3, #1
 800b242:	9304      	str	r3, [sp, #16]
 800b244:	9b05      	ldr	r3, [sp, #20]
 800b246:	3301      	adds	r3, #1
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	f04f 0801 	mov.w	r8, #1
 800b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b250:	2b00      	cmp	r3, #0
 800b252:	f47f af6a 	bne.w	800b12a <_dtoa_r+0x7ca>
 800b256:	2001      	movs	r0, #1
 800b258:	e76f      	b.n	800b13a <_dtoa_r+0x7da>
 800b25a:	f04f 0800 	mov.w	r8, #0
 800b25e:	e7f6      	b.n	800b24e <_dtoa_r+0x8ee>
 800b260:	4698      	mov	r8, r3
 800b262:	e7f4      	b.n	800b24e <_dtoa_r+0x8ee>
 800b264:	f43f af7d 	beq.w	800b162 <_dtoa_r+0x802>
 800b268:	4618      	mov	r0, r3
 800b26a:	301c      	adds	r0, #28
 800b26c:	e772      	b.n	800b154 <_dtoa_r+0x7f4>
 800b26e:	9b03      	ldr	r3, [sp, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dc37      	bgt.n	800b2e4 <_dtoa_r+0x984>
 800b274:	9b06      	ldr	r3, [sp, #24]
 800b276:	2b02      	cmp	r3, #2
 800b278:	dd34      	ble.n	800b2e4 <_dtoa_r+0x984>
 800b27a:	9b03      	ldr	r3, [sp, #12]
 800b27c:	9302      	str	r3, [sp, #8]
 800b27e:	9b02      	ldr	r3, [sp, #8]
 800b280:	b96b      	cbnz	r3, 800b29e <_dtoa_r+0x93e>
 800b282:	4631      	mov	r1, r6
 800b284:	2205      	movs	r2, #5
 800b286:	4620      	mov	r0, r4
 800b288:	f000 ff64 	bl	800c154 <__multadd>
 800b28c:	4601      	mov	r1, r0
 800b28e:	4606      	mov	r6, r0
 800b290:	ee18 0a10 	vmov	r0, s16
 800b294:	f001 f9c8 	bl	800c628 <__mcmp>
 800b298:	2800      	cmp	r0, #0
 800b29a:	f73f adbb 	bgt.w	800ae14 <_dtoa_r+0x4b4>
 800b29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a0:	9d01      	ldr	r5, [sp, #4]
 800b2a2:	43db      	mvns	r3, r3
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	f04f 0800 	mov.w	r8, #0
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f000 ff2f 	bl	800c110 <_Bfree>
 800b2b2:	2f00      	cmp	r7, #0
 800b2b4:	f43f aea4 	beq.w	800b000 <_dtoa_r+0x6a0>
 800b2b8:	f1b8 0f00 	cmp.w	r8, #0
 800b2bc:	d005      	beq.n	800b2ca <_dtoa_r+0x96a>
 800b2be:	45b8      	cmp	r8, r7
 800b2c0:	d003      	beq.n	800b2ca <_dtoa_r+0x96a>
 800b2c2:	4641      	mov	r1, r8
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 ff23 	bl	800c110 <_Bfree>
 800b2ca:	4639      	mov	r1, r7
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 ff1f 	bl	800c110 <_Bfree>
 800b2d2:	e695      	b.n	800b000 <_dtoa_r+0x6a0>
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	4637      	mov	r7, r6
 800b2d8:	e7e1      	b.n	800b29e <_dtoa_r+0x93e>
 800b2da:	9700      	str	r7, [sp, #0]
 800b2dc:	4637      	mov	r7, r6
 800b2de:	e599      	b.n	800ae14 <_dtoa_r+0x4b4>
 800b2e0:	40240000 	.word	0x40240000
 800b2e4:	9b08      	ldr	r3, [sp, #32]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 80ca 	beq.w	800b480 <_dtoa_r+0xb20>
 800b2ec:	9b03      	ldr	r3, [sp, #12]
 800b2ee:	9302      	str	r3, [sp, #8]
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	dd05      	ble.n	800b300 <_dtoa_r+0x9a0>
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	462a      	mov	r2, r5
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f001 f925 	bl	800c548 <__lshift>
 800b2fe:	4607      	mov	r7, r0
 800b300:	f1b8 0f00 	cmp.w	r8, #0
 800b304:	d05b      	beq.n	800b3be <_dtoa_r+0xa5e>
 800b306:	6879      	ldr	r1, [r7, #4]
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 fec1 	bl	800c090 <_Balloc>
 800b30e:	4605      	mov	r5, r0
 800b310:	b928      	cbnz	r0, 800b31e <_dtoa_r+0x9be>
 800b312:	4b87      	ldr	r3, [pc, #540]	; (800b530 <_dtoa_r+0xbd0>)
 800b314:	4602      	mov	r2, r0
 800b316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b31a:	f7ff bb3b 	b.w	800a994 <_dtoa_r+0x34>
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	3202      	adds	r2, #2
 800b322:	0092      	lsls	r2, r2, #2
 800b324:	f107 010c 	add.w	r1, r7, #12
 800b328:	300c      	adds	r0, #12
 800b32a:	f000 fe97 	bl	800c05c <memcpy>
 800b32e:	2201      	movs	r2, #1
 800b330:	4629      	mov	r1, r5
 800b332:	4620      	mov	r0, r4
 800b334:	f001 f908 	bl	800c548 <__lshift>
 800b338:	9b01      	ldr	r3, [sp, #4]
 800b33a:	f103 0901 	add.w	r9, r3, #1
 800b33e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b342:	4413      	add	r3, r2
 800b344:	9305      	str	r3, [sp, #20]
 800b346:	f00a 0301 	and.w	r3, sl, #1
 800b34a:	46b8      	mov	r8, r7
 800b34c:	9304      	str	r3, [sp, #16]
 800b34e:	4607      	mov	r7, r0
 800b350:	4631      	mov	r1, r6
 800b352:	ee18 0a10 	vmov	r0, s16
 800b356:	f7ff fa77 	bl	800a848 <quorem>
 800b35a:	4641      	mov	r1, r8
 800b35c:	9002      	str	r0, [sp, #8]
 800b35e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b362:	ee18 0a10 	vmov	r0, s16
 800b366:	f001 f95f 	bl	800c628 <__mcmp>
 800b36a:	463a      	mov	r2, r7
 800b36c:	9003      	str	r0, [sp, #12]
 800b36e:	4631      	mov	r1, r6
 800b370:	4620      	mov	r0, r4
 800b372:	f001 f975 	bl	800c660 <__mdiff>
 800b376:	68c2      	ldr	r2, [r0, #12]
 800b378:	f109 3bff 	add.w	fp, r9, #4294967295
 800b37c:	4605      	mov	r5, r0
 800b37e:	bb02      	cbnz	r2, 800b3c2 <_dtoa_r+0xa62>
 800b380:	4601      	mov	r1, r0
 800b382:	ee18 0a10 	vmov	r0, s16
 800b386:	f001 f94f 	bl	800c628 <__mcmp>
 800b38a:	4602      	mov	r2, r0
 800b38c:	4629      	mov	r1, r5
 800b38e:	4620      	mov	r0, r4
 800b390:	9207      	str	r2, [sp, #28]
 800b392:	f000 febd 	bl	800c110 <_Bfree>
 800b396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b39a:	ea43 0102 	orr.w	r1, r3, r2
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	430b      	orrs	r3, r1
 800b3a2:	464d      	mov	r5, r9
 800b3a4:	d10f      	bne.n	800b3c6 <_dtoa_r+0xa66>
 800b3a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3aa:	d02a      	beq.n	800b402 <_dtoa_r+0xaa2>
 800b3ac:	9b03      	ldr	r3, [sp, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	dd02      	ble.n	800b3b8 <_dtoa_r+0xa58>
 800b3b2:	9b02      	ldr	r3, [sp, #8]
 800b3b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b3b8:	f88b a000 	strb.w	sl, [fp]
 800b3bc:	e775      	b.n	800b2aa <_dtoa_r+0x94a>
 800b3be:	4638      	mov	r0, r7
 800b3c0:	e7ba      	b.n	800b338 <_dtoa_r+0x9d8>
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	e7e2      	b.n	800b38c <_dtoa_r+0xa2c>
 800b3c6:	9b03      	ldr	r3, [sp, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	db04      	blt.n	800b3d6 <_dtoa_r+0xa76>
 800b3cc:	9906      	ldr	r1, [sp, #24]
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	9904      	ldr	r1, [sp, #16]
 800b3d2:	430b      	orrs	r3, r1
 800b3d4:	d122      	bne.n	800b41c <_dtoa_r+0xabc>
 800b3d6:	2a00      	cmp	r2, #0
 800b3d8:	ddee      	ble.n	800b3b8 <_dtoa_r+0xa58>
 800b3da:	ee18 1a10 	vmov	r1, s16
 800b3de:	2201      	movs	r2, #1
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f001 f8b1 	bl	800c548 <__lshift>
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	ee08 0a10 	vmov	s16, r0
 800b3ec:	f001 f91c 	bl	800c628 <__mcmp>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	dc03      	bgt.n	800b3fc <_dtoa_r+0xa9c>
 800b3f4:	d1e0      	bne.n	800b3b8 <_dtoa_r+0xa58>
 800b3f6:	f01a 0f01 	tst.w	sl, #1
 800b3fa:	d0dd      	beq.n	800b3b8 <_dtoa_r+0xa58>
 800b3fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b400:	d1d7      	bne.n	800b3b2 <_dtoa_r+0xa52>
 800b402:	2339      	movs	r3, #57	; 0x39
 800b404:	f88b 3000 	strb.w	r3, [fp]
 800b408:	462b      	mov	r3, r5
 800b40a:	461d      	mov	r5, r3
 800b40c:	3b01      	subs	r3, #1
 800b40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b412:	2a39      	cmp	r2, #57	; 0x39
 800b414:	d071      	beq.n	800b4fa <_dtoa_r+0xb9a>
 800b416:	3201      	adds	r2, #1
 800b418:	701a      	strb	r2, [r3, #0]
 800b41a:	e746      	b.n	800b2aa <_dtoa_r+0x94a>
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	dd07      	ble.n	800b430 <_dtoa_r+0xad0>
 800b420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b424:	d0ed      	beq.n	800b402 <_dtoa_r+0xaa2>
 800b426:	f10a 0301 	add.w	r3, sl, #1
 800b42a:	f88b 3000 	strb.w	r3, [fp]
 800b42e:	e73c      	b.n	800b2aa <_dtoa_r+0x94a>
 800b430:	9b05      	ldr	r3, [sp, #20]
 800b432:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b436:	4599      	cmp	r9, r3
 800b438:	d047      	beq.n	800b4ca <_dtoa_r+0xb6a>
 800b43a:	ee18 1a10 	vmov	r1, s16
 800b43e:	2300      	movs	r3, #0
 800b440:	220a      	movs	r2, #10
 800b442:	4620      	mov	r0, r4
 800b444:	f000 fe86 	bl	800c154 <__multadd>
 800b448:	45b8      	cmp	r8, r7
 800b44a:	ee08 0a10 	vmov	s16, r0
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	f04f 020a 	mov.w	r2, #10
 800b456:	4641      	mov	r1, r8
 800b458:	4620      	mov	r0, r4
 800b45a:	d106      	bne.n	800b46a <_dtoa_r+0xb0a>
 800b45c:	f000 fe7a 	bl	800c154 <__multadd>
 800b460:	4680      	mov	r8, r0
 800b462:	4607      	mov	r7, r0
 800b464:	f109 0901 	add.w	r9, r9, #1
 800b468:	e772      	b.n	800b350 <_dtoa_r+0x9f0>
 800b46a:	f000 fe73 	bl	800c154 <__multadd>
 800b46e:	4639      	mov	r1, r7
 800b470:	4680      	mov	r8, r0
 800b472:	2300      	movs	r3, #0
 800b474:	220a      	movs	r2, #10
 800b476:	4620      	mov	r0, r4
 800b478:	f000 fe6c 	bl	800c154 <__multadd>
 800b47c:	4607      	mov	r7, r0
 800b47e:	e7f1      	b.n	800b464 <_dtoa_r+0xb04>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	9302      	str	r3, [sp, #8]
 800b484:	9d01      	ldr	r5, [sp, #4]
 800b486:	ee18 0a10 	vmov	r0, s16
 800b48a:	4631      	mov	r1, r6
 800b48c:	f7ff f9dc 	bl	800a848 <quorem>
 800b490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b494:	9b01      	ldr	r3, [sp, #4]
 800b496:	f805 ab01 	strb.w	sl, [r5], #1
 800b49a:	1aea      	subs	r2, r5, r3
 800b49c:	9b02      	ldr	r3, [sp, #8]
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	dd09      	ble.n	800b4b6 <_dtoa_r+0xb56>
 800b4a2:	ee18 1a10 	vmov	r1, s16
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fe52 	bl	800c154 <__multadd>
 800b4b0:	ee08 0a10 	vmov	s16, r0
 800b4b4:	e7e7      	b.n	800b486 <_dtoa_r+0xb26>
 800b4b6:	9b02      	ldr	r3, [sp, #8]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	bfc8      	it	gt
 800b4bc:	461d      	movgt	r5, r3
 800b4be:	9b01      	ldr	r3, [sp, #4]
 800b4c0:	bfd8      	it	le
 800b4c2:	2501      	movle	r5, #1
 800b4c4:	441d      	add	r5, r3
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	ee18 1a10 	vmov	r1, s16
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f001 f839 	bl	800c548 <__lshift>
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	ee08 0a10 	vmov	s16, r0
 800b4dc:	f001 f8a4 	bl	800c628 <__mcmp>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	dc91      	bgt.n	800b408 <_dtoa_r+0xaa8>
 800b4e4:	d102      	bne.n	800b4ec <_dtoa_r+0xb8c>
 800b4e6:	f01a 0f01 	tst.w	sl, #1
 800b4ea:	d18d      	bne.n	800b408 <_dtoa_r+0xaa8>
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	461d      	mov	r5, r3
 800b4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b4f4:	2a30      	cmp	r2, #48	; 0x30
 800b4f6:	d0fa      	beq.n	800b4ee <_dtoa_r+0xb8e>
 800b4f8:	e6d7      	b.n	800b2aa <_dtoa_r+0x94a>
 800b4fa:	9a01      	ldr	r2, [sp, #4]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d184      	bne.n	800b40a <_dtoa_r+0xaaa>
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	3301      	adds	r3, #1
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	2331      	movs	r3, #49	; 0x31
 800b508:	7013      	strb	r3, [r2, #0]
 800b50a:	e6ce      	b.n	800b2aa <_dtoa_r+0x94a>
 800b50c:	4b09      	ldr	r3, [pc, #36]	; (800b534 <_dtoa_r+0xbd4>)
 800b50e:	f7ff ba95 	b.w	800aa3c <_dtoa_r+0xdc>
 800b512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b514:	2b00      	cmp	r3, #0
 800b516:	f47f aa6e 	bne.w	800a9f6 <_dtoa_r+0x96>
 800b51a:	4b07      	ldr	r3, [pc, #28]	; (800b538 <_dtoa_r+0xbd8>)
 800b51c:	f7ff ba8e 	b.w	800aa3c <_dtoa_r+0xdc>
 800b520:	9b02      	ldr	r3, [sp, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	dcae      	bgt.n	800b484 <_dtoa_r+0xb24>
 800b526:	9b06      	ldr	r3, [sp, #24]
 800b528:	2b02      	cmp	r3, #2
 800b52a:	f73f aea8 	bgt.w	800b27e <_dtoa_r+0x91e>
 800b52e:	e7a9      	b.n	800b484 <_dtoa_r+0xb24>
 800b530:	0800e5b8 	.word	0x0800e5b8
 800b534:	0800e819 	.word	0x0800e819
 800b538:	0800e539 	.word	0x0800e539

0800b53c <__sflush_r>:
 800b53c:	898a      	ldrh	r2, [r1, #12]
 800b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b542:	4605      	mov	r5, r0
 800b544:	0710      	lsls	r0, r2, #28
 800b546:	460c      	mov	r4, r1
 800b548:	d458      	bmi.n	800b5fc <__sflush_r+0xc0>
 800b54a:	684b      	ldr	r3, [r1, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	dc05      	bgt.n	800b55c <__sflush_r+0x20>
 800b550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	dc02      	bgt.n	800b55c <__sflush_r+0x20>
 800b556:	2000      	movs	r0, #0
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55e:	2e00      	cmp	r6, #0
 800b560:	d0f9      	beq.n	800b556 <__sflush_r+0x1a>
 800b562:	2300      	movs	r3, #0
 800b564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b568:	682f      	ldr	r7, [r5, #0]
 800b56a:	602b      	str	r3, [r5, #0]
 800b56c:	d032      	beq.n	800b5d4 <__sflush_r+0x98>
 800b56e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	075a      	lsls	r2, r3, #29
 800b574:	d505      	bpl.n	800b582 <__sflush_r+0x46>
 800b576:	6863      	ldr	r3, [r4, #4]
 800b578:	1ac0      	subs	r0, r0, r3
 800b57a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b57c:	b10b      	cbz	r3, 800b582 <__sflush_r+0x46>
 800b57e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b580:	1ac0      	subs	r0, r0, r3
 800b582:	2300      	movs	r3, #0
 800b584:	4602      	mov	r2, r0
 800b586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b588:	6a21      	ldr	r1, [r4, #32]
 800b58a:	4628      	mov	r0, r5
 800b58c:	47b0      	blx	r6
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	d106      	bne.n	800b5a2 <__sflush_r+0x66>
 800b594:	6829      	ldr	r1, [r5, #0]
 800b596:	291d      	cmp	r1, #29
 800b598:	d82c      	bhi.n	800b5f4 <__sflush_r+0xb8>
 800b59a:	4a2a      	ldr	r2, [pc, #168]	; (800b644 <__sflush_r+0x108>)
 800b59c:	40ca      	lsrs	r2, r1
 800b59e:	07d6      	lsls	r6, r2, #31
 800b5a0:	d528      	bpl.n	800b5f4 <__sflush_r+0xb8>
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	6062      	str	r2, [r4, #4]
 800b5a6:	04d9      	lsls	r1, r3, #19
 800b5a8:	6922      	ldr	r2, [r4, #16]
 800b5aa:	6022      	str	r2, [r4, #0]
 800b5ac:	d504      	bpl.n	800b5b8 <__sflush_r+0x7c>
 800b5ae:	1c42      	adds	r2, r0, #1
 800b5b0:	d101      	bne.n	800b5b6 <__sflush_r+0x7a>
 800b5b2:	682b      	ldr	r3, [r5, #0]
 800b5b4:	b903      	cbnz	r3, 800b5b8 <__sflush_r+0x7c>
 800b5b6:	6560      	str	r0, [r4, #84]	; 0x54
 800b5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5ba:	602f      	str	r7, [r5, #0]
 800b5bc:	2900      	cmp	r1, #0
 800b5be:	d0ca      	beq.n	800b556 <__sflush_r+0x1a>
 800b5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5c4:	4299      	cmp	r1, r3
 800b5c6:	d002      	beq.n	800b5ce <__sflush_r+0x92>
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7fc ff7d 	bl	80084c8 <_free_r>
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	6360      	str	r0, [r4, #52]	; 0x34
 800b5d2:	e7c1      	b.n	800b558 <__sflush_r+0x1c>
 800b5d4:	6a21      	ldr	r1, [r4, #32]
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b0      	blx	r6
 800b5dc:	1c41      	adds	r1, r0, #1
 800b5de:	d1c7      	bne.n	800b570 <__sflush_r+0x34>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d0c4      	beq.n	800b570 <__sflush_r+0x34>
 800b5e6:	2b1d      	cmp	r3, #29
 800b5e8:	d001      	beq.n	800b5ee <__sflush_r+0xb2>
 800b5ea:	2b16      	cmp	r3, #22
 800b5ec:	d101      	bne.n	800b5f2 <__sflush_r+0xb6>
 800b5ee:	602f      	str	r7, [r5, #0]
 800b5f0:	e7b1      	b.n	800b556 <__sflush_r+0x1a>
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	e7ad      	b.n	800b558 <__sflush_r+0x1c>
 800b5fc:	690f      	ldr	r7, [r1, #16]
 800b5fe:	2f00      	cmp	r7, #0
 800b600:	d0a9      	beq.n	800b556 <__sflush_r+0x1a>
 800b602:	0793      	lsls	r3, r2, #30
 800b604:	680e      	ldr	r6, [r1, #0]
 800b606:	bf08      	it	eq
 800b608:	694b      	ldreq	r3, [r1, #20]
 800b60a:	600f      	str	r7, [r1, #0]
 800b60c:	bf18      	it	ne
 800b60e:	2300      	movne	r3, #0
 800b610:	eba6 0807 	sub.w	r8, r6, r7
 800b614:	608b      	str	r3, [r1, #8]
 800b616:	f1b8 0f00 	cmp.w	r8, #0
 800b61a:	dd9c      	ble.n	800b556 <__sflush_r+0x1a>
 800b61c:	6a21      	ldr	r1, [r4, #32]
 800b61e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b620:	4643      	mov	r3, r8
 800b622:	463a      	mov	r2, r7
 800b624:	4628      	mov	r0, r5
 800b626:	47b0      	blx	r6
 800b628:	2800      	cmp	r0, #0
 800b62a:	dc06      	bgt.n	800b63a <__sflush_r+0xfe>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	f04f 30ff 	mov.w	r0, #4294967295
 800b638:	e78e      	b.n	800b558 <__sflush_r+0x1c>
 800b63a:	4407      	add	r7, r0
 800b63c:	eba8 0800 	sub.w	r8, r8, r0
 800b640:	e7e9      	b.n	800b616 <__sflush_r+0xda>
 800b642:	bf00      	nop
 800b644:	20400001 	.word	0x20400001

0800b648 <_fflush_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	690b      	ldr	r3, [r1, #16]
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b913      	cbnz	r3, 800b658 <_fflush_r+0x10>
 800b652:	2500      	movs	r5, #0
 800b654:	4628      	mov	r0, r5
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	b118      	cbz	r0, 800b662 <_fflush_r+0x1a>
 800b65a:	6983      	ldr	r3, [r0, #24]
 800b65c:	b90b      	cbnz	r3, 800b662 <_fflush_r+0x1a>
 800b65e:	f000 f8c5 	bl	800b7ec <__sinit>
 800b662:	4b14      	ldr	r3, [pc, #80]	; (800b6b4 <_fflush_r+0x6c>)
 800b664:	429c      	cmp	r4, r3
 800b666:	d11b      	bne.n	800b6a0 <_fflush_r+0x58>
 800b668:	686c      	ldr	r4, [r5, #4]
 800b66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0ef      	beq.n	800b652 <_fflush_r+0xa>
 800b672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b674:	07d0      	lsls	r0, r2, #31
 800b676:	d404      	bmi.n	800b682 <_fflush_r+0x3a>
 800b678:	0599      	lsls	r1, r3, #22
 800b67a:	d402      	bmi.n	800b682 <_fflush_r+0x3a>
 800b67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b67e:	f000 fcc6 	bl	800c00e <__retarget_lock_acquire_recursive>
 800b682:	4628      	mov	r0, r5
 800b684:	4621      	mov	r1, r4
 800b686:	f7ff ff59 	bl	800b53c <__sflush_r>
 800b68a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b68c:	07da      	lsls	r2, r3, #31
 800b68e:	4605      	mov	r5, r0
 800b690:	d4e0      	bmi.n	800b654 <_fflush_r+0xc>
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	059b      	lsls	r3, r3, #22
 800b696:	d4dd      	bmi.n	800b654 <_fflush_r+0xc>
 800b698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b69a:	f000 fcb9 	bl	800c010 <__retarget_lock_release_recursive>
 800b69e:	e7d9      	b.n	800b654 <_fflush_r+0xc>
 800b6a0:	4b05      	ldr	r3, [pc, #20]	; (800b6b8 <_fflush_r+0x70>)
 800b6a2:	429c      	cmp	r4, r3
 800b6a4:	d101      	bne.n	800b6aa <_fflush_r+0x62>
 800b6a6:	68ac      	ldr	r4, [r5, #8]
 800b6a8:	e7df      	b.n	800b66a <_fflush_r+0x22>
 800b6aa:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <_fflush_r+0x74>)
 800b6ac:	429c      	cmp	r4, r3
 800b6ae:	bf08      	it	eq
 800b6b0:	68ec      	ldreq	r4, [r5, #12]
 800b6b2:	e7da      	b.n	800b66a <_fflush_r+0x22>
 800b6b4:	0800e5ec 	.word	0x0800e5ec
 800b6b8:	0800e60c 	.word	0x0800e60c
 800b6bc:	0800e5cc 	.word	0x0800e5cc

0800b6c0 <fileno>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	4e1a      	ldr	r6, [pc, #104]	; (800b72c <fileno+0x6c>)
 800b6c4:	6835      	ldr	r5, [r6, #0]
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	b125      	cbz	r5, 800b6d4 <fileno+0x14>
 800b6ca:	69ab      	ldr	r3, [r5, #24]
 800b6cc:	b913      	cbnz	r3, 800b6d4 <fileno+0x14>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f000 f88c 	bl	800b7ec <__sinit>
 800b6d4:	4b16      	ldr	r3, [pc, #88]	; (800b730 <fileno+0x70>)
 800b6d6:	429c      	cmp	r4, r3
 800b6d8:	d118      	bne.n	800b70c <fileno+0x4c>
 800b6da:	686c      	ldr	r4, [r5, #4]
 800b6dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6de:	07d8      	lsls	r0, r3, #31
 800b6e0:	d405      	bmi.n	800b6ee <fileno+0x2e>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	0599      	lsls	r1, r3, #22
 800b6e6:	d402      	bmi.n	800b6ee <fileno+0x2e>
 800b6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ea:	f000 fc90 	bl	800c00e <__retarget_lock_acquire_recursive>
 800b6ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6f2:	b1ab      	cbz	r3, 800b720 <fileno+0x60>
 800b6f4:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800b6f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6fa:	07d2      	lsls	r2, r2, #31
 800b6fc:	d404      	bmi.n	800b708 <fileno+0x48>
 800b6fe:	059b      	lsls	r3, r3, #22
 800b700:	d402      	bmi.n	800b708 <fileno+0x48>
 800b702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b704:	f000 fc84 	bl	800c010 <__retarget_lock_release_recursive>
 800b708:	4628      	mov	r0, r5
 800b70a:	bd70      	pop	{r4, r5, r6, pc}
 800b70c:	4b09      	ldr	r3, [pc, #36]	; (800b734 <fileno+0x74>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	d101      	bne.n	800b716 <fileno+0x56>
 800b712:	68ac      	ldr	r4, [r5, #8]
 800b714:	e7e2      	b.n	800b6dc <fileno+0x1c>
 800b716:	4b08      	ldr	r3, [pc, #32]	; (800b738 <fileno+0x78>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	bf08      	it	eq
 800b71c:	68ec      	ldreq	r4, [r5, #12]
 800b71e:	e7dd      	b.n	800b6dc <fileno+0x1c>
 800b720:	6832      	ldr	r2, [r6, #0]
 800b722:	2109      	movs	r1, #9
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	f04f 35ff 	mov.w	r5, #4294967295
 800b72a:	e7e5      	b.n	800b6f8 <fileno+0x38>
 800b72c:	2000003c 	.word	0x2000003c
 800b730:	0800e5ec 	.word	0x0800e5ec
 800b734:	0800e60c 	.word	0x0800e60c
 800b738:	0800e5cc 	.word	0x0800e5cc

0800b73c <std>:
 800b73c:	2300      	movs	r3, #0
 800b73e:	b510      	push	{r4, lr}
 800b740:	4604      	mov	r4, r0
 800b742:	e9c0 3300 	strd	r3, r3, [r0]
 800b746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b74a:	6083      	str	r3, [r0, #8]
 800b74c:	8181      	strh	r1, [r0, #12]
 800b74e:	6643      	str	r3, [r0, #100]	; 0x64
 800b750:	81c2      	strh	r2, [r0, #14]
 800b752:	6183      	str	r3, [r0, #24]
 800b754:	4619      	mov	r1, r3
 800b756:	2208      	movs	r2, #8
 800b758:	305c      	adds	r0, #92	; 0x5c
 800b75a:	f7fc fead 	bl	80084b8 <memset>
 800b75e:	4b05      	ldr	r3, [pc, #20]	; (800b774 <std+0x38>)
 800b760:	6263      	str	r3, [r4, #36]	; 0x24
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <std+0x3c>)
 800b764:	62a3      	str	r3, [r4, #40]	; 0x28
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <std+0x40>)
 800b768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b76a:	4b05      	ldr	r3, [pc, #20]	; (800b780 <std+0x44>)
 800b76c:	6224      	str	r4, [r4, #32]
 800b76e:	6323      	str	r3, [r4, #48]	; 0x30
 800b770:	bd10      	pop	{r4, pc}
 800b772:	bf00      	nop
 800b774:	0800960d 	.word	0x0800960d
 800b778:	08009633 	.word	0x08009633
 800b77c:	0800966b 	.word	0x0800966b
 800b780:	0800968f 	.word	0x0800968f

0800b784 <_cleanup_r>:
 800b784:	4901      	ldr	r1, [pc, #4]	; (800b78c <_cleanup_r+0x8>)
 800b786:	f000 b8af 	b.w	800b8e8 <_fwalk_reent>
 800b78a:	bf00      	nop
 800b78c:	0800b649 	.word	0x0800b649

0800b790 <__sfmoreglue>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	2268      	movs	r2, #104	; 0x68
 800b794:	1e4d      	subs	r5, r1, #1
 800b796:	4355      	muls	r5, r2
 800b798:	460e      	mov	r6, r1
 800b79a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b79e:	f7fc feff 	bl	80085a0 <_malloc_r>
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	b140      	cbz	r0, 800b7b8 <__sfmoreglue+0x28>
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b7ac:	300c      	adds	r0, #12
 800b7ae:	60a0      	str	r0, [r4, #8]
 800b7b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7b4:	f7fc fe80 	bl	80084b8 <memset>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}

0800b7bc <__sfp_lock_acquire>:
 800b7bc:	4801      	ldr	r0, [pc, #4]	; (800b7c4 <__sfp_lock_acquire+0x8>)
 800b7be:	f000 bc26 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800b7c2:	bf00      	nop
 800b7c4:	200007f9 	.word	0x200007f9

0800b7c8 <__sfp_lock_release>:
 800b7c8:	4801      	ldr	r0, [pc, #4]	; (800b7d0 <__sfp_lock_release+0x8>)
 800b7ca:	f000 bc21 	b.w	800c010 <__retarget_lock_release_recursive>
 800b7ce:	bf00      	nop
 800b7d0:	200007f9 	.word	0x200007f9

0800b7d4 <__sinit_lock_acquire>:
 800b7d4:	4801      	ldr	r0, [pc, #4]	; (800b7dc <__sinit_lock_acquire+0x8>)
 800b7d6:	f000 bc1a 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800b7da:	bf00      	nop
 800b7dc:	200007fa 	.word	0x200007fa

0800b7e0 <__sinit_lock_release>:
 800b7e0:	4801      	ldr	r0, [pc, #4]	; (800b7e8 <__sinit_lock_release+0x8>)
 800b7e2:	f000 bc15 	b.w	800c010 <__retarget_lock_release_recursive>
 800b7e6:	bf00      	nop
 800b7e8:	200007fa 	.word	0x200007fa

0800b7ec <__sinit>:
 800b7ec:	b510      	push	{r4, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	f7ff fff0 	bl	800b7d4 <__sinit_lock_acquire>
 800b7f4:	69a3      	ldr	r3, [r4, #24]
 800b7f6:	b11b      	cbz	r3, 800b800 <__sinit+0x14>
 800b7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7fc:	f7ff bff0 	b.w	800b7e0 <__sinit_lock_release>
 800b800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b804:	6523      	str	r3, [r4, #80]	; 0x50
 800b806:	4b13      	ldr	r3, [pc, #76]	; (800b854 <__sinit+0x68>)
 800b808:	4a13      	ldr	r2, [pc, #76]	; (800b858 <__sinit+0x6c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b80e:	42a3      	cmp	r3, r4
 800b810:	bf04      	itt	eq
 800b812:	2301      	moveq	r3, #1
 800b814:	61a3      	streq	r3, [r4, #24]
 800b816:	4620      	mov	r0, r4
 800b818:	f000 f820 	bl	800b85c <__sfp>
 800b81c:	6060      	str	r0, [r4, #4]
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 f81c 	bl	800b85c <__sfp>
 800b824:	60a0      	str	r0, [r4, #8]
 800b826:	4620      	mov	r0, r4
 800b828:	f000 f818 	bl	800b85c <__sfp>
 800b82c:	2200      	movs	r2, #0
 800b82e:	60e0      	str	r0, [r4, #12]
 800b830:	2104      	movs	r1, #4
 800b832:	6860      	ldr	r0, [r4, #4]
 800b834:	f7ff ff82 	bl	800b73c <std>
 800b838:	68a0      	ldr	r0, [r4, #8]
 800b83a:	2201      	movs	r2, #1
 800b83c:	2109      	movs	r1, #9
 800b83e:	f7ff ff7d 	bl	800b73c <std>
 800b842:	68e0      	ldr	r0, [r4, #12]
 800b844:	2202      	movs	r2, #2
 800b846:	2112      	movs	r1, #18
 800b848:	f7ff ff78 	bl	800b73c <std>
 800b84c:	2301      	movs	r3, #1
 800b84e:	61a3      	str	r3, [r4, #24]
 800b850:	e7d2      	b.n	800b7f8 <__sinit+0xc>
 800b852:	bf00      	nop
 800b854:	0800dd14 	.word	0x0800dd14
 800b858:	0800b785 	.word	0x0800b785

0800b85c <__sfp>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	4607      	mov	r7, r0
 800b860:	f7ff ffac 	bl	800b7bc <__sfp_lock_acquire>
 800b864:	4b1e      	ldr	r3, [pc, #120]	; (800b8e0 <__sfp+0x84>)
 800b866:	681e      	ldr	r6, [r3, #0]
 800b868:	69b3      	ldr	r3, [r6, #24]
 800b86a:	b913      	cbnz	r3, 800b872 <__sfp+0x16>
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7ff ffbd 	bl	800b7ec <__sinit>
 800b872:	3648      	adds	r6, #72	; 0x48
 800b874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b878:	3b01      	subs	r3, #1
 800b87a:	d503      	bpl.n	800b884 <__sfp+0x28>
 800b87c:	6833      	ldr	r3, [r6, #0]
 800b87e:	b30b      	cbz	r3, 800b8c4 <__sfp+0x68>
 800b880:	6836      	ldr	r6, [r6, #0]
 800b882:	e7f7      	b.n	800b874 <__sfp+0x18>
 800b884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b888:	b9d5      	cbnz	r5, 800b8c0 <__sfp+0x64>
 800b88a:	4b16      	ldr	r3, [pc, #88]	; (800b8e4 <__sfp+0x88>)
 800b88c:	60e3      	str	r3, [r4, #12]
 800b88e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b892:	6665      	str	r5, [r4, #100]	; 0x64
 800b894:	f000 fbba 	bl	800c00c <__retarget_lock_init_recursive>
 800b898:	f7ff ff96 	bl	800b7c8 <__sfp_lock_release>
 800b89c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8a4:	6025      	str	r5, [r4, #0]
 800b8a6:	61a5      	str	r5, [r4, #24]
 800b8a8:	2208      	movs	r2, #8
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8b0:	f7fc fe02 	bl	80084b8 <memset>
 800b8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8bc:	4620      	mov	r0, r4
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8c0:	3468      	adds	r4, #104	; 0x68
 800b8c2:	e7d9      	b.n	800b878 <__sfp+0x1c>
 800b8c4:	2104      	movs	r1, #4
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	f7ff ff62 	bl	800b790 <__sfmoreglue>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	6030      	str	r0, [r6, #0]
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d1d5      	bne.n	800b880 <__sfp+0x24>
 800b8d4:	f7ff ff78 	bl	800b7c8 <__sfp_lock_release>
 800b8d8:	230c      	movs	r3, #12
 800b8da:	603b      	str	r3, [r7, #0]
 800b8dc:	e7ee      	b.n	800b8bc <__sfp+0x60>
 800b8de:	bf00      	nop
 800b8e0:	0800dd14 	.word	0x0800dd14
 800b8e4:	ffff0001 	.word	0xffff0001

0800b8e8 <_fwalk_reent>:
 800b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	4688      	mov	r8, r1
 800b8f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8f4:	2700      	movs	r7, #0
 800b8f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b8fe:	d505      	bpl.n	800b90c <_fwalk_reent+0x24>
 800b900:	6824      	ldr	r4, [r4, #0]
 800b902:	2c00      	cmp	r4, #0
 800b904:	d1f7      	bne.n	800b8f6 <_fwalk_reent+0xe>
 800b906:	4638      	mov	r0, r7
 800b908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b90c:	89ab      	ldrh	r3, [r5, #12]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d907      	bls.n	800b922 <_fwalk_reent+0x3a>
 800b912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b916:	3301      	adds	r3, #1
 800b918:	d003      	beq.n	800b922 <_fwalk_reent+0x3a>
 800b91a:	4629      	mov	r1, r5
 800b91c:	4630      	mov	r0, r6
 800b91e:	47c0      	blx	r8
 800b920:	4307      	orrs	r7, r0
 800b922:	3568      	adds	r5, #104	; 0x68
 800b924:	e7e9      	b.n	800b8fa <_fwalk_reent+0x12>

0800b926 <rshift>:
 800b926:	6903      	ldr	r3, [r0, #16]
 800b928:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b930:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b934:	f100 0414 	add.w	r4, r0, #20
 800b938:	dd45      	ble.n	800b9c6 <rshift+0xa0>
 800b93a:	f011 011f 	ands.w	r1, r1, #31
 800b93e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b942:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b946:	d10c      	bne.n	800b962 <rshift+0x3c>
 800b948:	f100 0710 	add.w	r7, r0, #16
 800b94c:	4629      	mov	r1, r5
 800b94e:	42b1      	cmp	r1, r6
 800b950:	d334      	bcc.n	800b9bc <rshift+0x96>
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	1eea      	subs	r2, r5, #3
 800b958:	4296      	cmp	r6, r2
 800b95a:	bf38      	it	cc
 800b95c:	2300      	movcc	r3, #0
 800b95e:	4423      	add	r3, r4
 800b960:	e015      	b.n	800b98e <rshift+0x68>
 800b962:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b966:	f1c1 0820 	rsb	r8, r1, #32
 800b96a:	40cf      	lsrs	r7, r1
 800b96c:	f105 0e04 	add.w	lr, r5, #4
 800b970:	46a1      	mov	r9, r4
 800b972:	4576      	cmp	r6, lr
 800b974:	46f4      	mov	ip, lr
 800b976:	d815      	bhi.n	800b9a4 <rshift+0x7e>
 800b978:	1a9a      	subs	r2, r3, r2
 800b97a:	0092      	lsls	r2, r2, #2
 800b97c:	3a04      	subs	r2, #4
 800b97e:	3501      	adds	r5, #1
 800b980:	42ae      	cmp	r6, r5
 800b982:	bf38      	it	cc
 800b984:	2200      	movcc	r2, #0
 800b986:	18a3      	adds	r3, r4, r2
 800b988:	50a7      	str	r7, [r4, r2]
 800b98a:	b107      	cbz	r7, 800b98e <rshift+0x68>
 800b98c:	3304      	adds	r3, #4
 800b98e:	1b1a      	subs	r2, r3, r4
 800b990:	42a3      	cmp	r3, r4
 800b992:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b996:	bf08      	it	eq
 800b998:	2300      	moveq	r3, #0
 800b99a:	6102      	str	r2, [r0, #16]
 800b99c:	bf08      	it	eq
 800b99e:	6143      	streq	r3, [r0, #20]
 800b9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9a4:	f8dc c000 	ldr.w	ip, [ip]
 800b9a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9ac:	ea4c 0707 	orr.w	r7, ip, r7
 800b9b0:	f849 7b04 	str.w	r7, [r9], #4
 800b9b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9b8:	40cf      	lsrs	r7, r1
 800b9ba:	e7da      	b.n	800b972 <rshift+0x4c>
 800b9bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9c4:	e7c3      	b.n	800b94e <rshift+0x28>
 800b9c6:	4623      	mov	r3, r4
 800b9c8:	e7e1      	b.n	800b98e <rshift+0x68>

0800b9ca <__hexdig_fun>:
 800b9ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9ce:	2b09      	cmp	r3, #9
 800b9d0:	d802      	bhi.n	800b9d8 <__hexdig_fun+0xe>
 800b9d2:	3820      	subs	r0, #32
 800b9d4:	b2c0      	uxtb	r0, r0
 800b9d6:	4770      	bx	lr
 800b9d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b9dc:	2b05      	cmp	r3, #5
 800b9de:	d801      	bhi.n	800b9e4 <__hexdig_fun+0x1a>
 800b9e0:	3847      	subs	r0, #71	; 0x47
 800b9e2:	e7f7      	b.n	800b9d4 <__hexdig_fun+0xa>
 800b9e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b9e8:	2b05      	cmp	r3, #5
 800b9ea:	d801      	bhi.n	800b9f0 <__hexdig_fun+0x26>
 800b9ec:	3827      	subs	r0, #39	; 0x27
 800b9ee:	e7f1      	b.n	800b9d4 <__hexdig_fun+0xa>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	4770      	bx	lr

0800b9f4 <__gethex>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	ed2d 8b02 	vpush	{d8}
 800b9fc:	b089      	sub	sp, #36	; 0x24
 800b9fe:	ee08 0a10 	vmov	s16, r0
 800ba02:	9304      	str	r3, [sp, #16]
 800ba04:	4bb4      	ldr	r3, [pc, #720]	; (800bcd8 <__gethex+0x2e4>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	468b      	mov	fp, r1
 800ba0e:	4690      	mov	r8, r2
 800ba10:	f7f4 fbe8 	bl	80001e4 <strlen>
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	f8db 2000 	ldr.w	r2, [fp]
 800ba1a:	4403      	add	r3, r0
 800ba1c:	4682      	mov	sl, r0
 800ba1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	1c93      	adds	r3, r2, #2
 800ba26:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba2a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba2e:	32fe      	adds	r2, #254	; 0xfe
 800ba30:	18d1      	adds	r1, r2, r3
 800ba32:	461f      	mov	r7, r3
 800ba34:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba38:	9100      	str	r1, [sp, #0]
 800ba3a:	2830      	cmp	r0, #48	; 0x30
 800ba3c:	d0f8      	beq.n	800ba30 <__gethex+0x3c>
 800ba3e:	f7ff ffc4 	bl	800b9ca <__hexdig_fun>
 800ba42:	4604      	mov	r4, r0
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d13a      	bne.n	800babe <__gethex+0xca>
 800ba48:	9901      	ldr	r1, [sp, #4]
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f001 fcc7 	bl	800d3e0 <strncmp>
 800ba52:	4605      	mov	r5, r0
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d168      	bne.n	800bb2a <__gethex+0x136>
 800ba58:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba5c:	eb07 060a 	add.w	r6, r7, sl
 800ba60:	f7ff ffb3 	bl	800b9ca <__hexdig_fun>
 800ba64:	2800      	cmp	r0, #0
 800ba66:	d062      	beq.n	800bb2e <__gethex+0x13a>
 800ba68:	4633      	mov	r3, r6
 800ba6a:	7818      	ldrb	r0, [r3, #0]
 800ba6c:	2830      	cmp	r0, #48	; 0x30
 800ba6e:	461f      	mov	r7, r3
 800ba70:	f103 0301 	add.w	r3, r3, #1
 800ba74:	d0f9      	beq.n	800ba6a <__gethex+0x76>
 800ba76:	f7ff ffa8 	bl	800b9ca <__hexdig_fun>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	fab0 f480 	clz	r4, r0
 800ba80:	0964      	lsrs	r4, r4, #5
 800ba82:	4635      	mov	r5, r6
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	463a      	mov	r2, r7
 800ba88:	4616      	mov	r6, r2
 800ba8a:	3201      	adds	r2, #1
 800ba8c:	7830      	ldrb	r0, [r6, #0]
 800ba8e:	f7ff ff9c 	bl	800b9ca <__hexdig_fun>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d1f8      	bne.n	800ba88 <__gethex+0x94>
 800ba96:	9901      	ldr	r1, [sp, #4]
 800ba98:	4652      	mov	r2, sl
 800ba9a:	4630      	mov	r0, r6
 800ba9c:	f001 fca0 	bl	800d3e0 <strncmp>
 800baa0:	b980      	cbnz	r0, 800bac4 <__gethex+0xd0>
 800baa2:	b94d      	cbnz	r5, 800bab8 <__gethex+0xc4>
 800baa4:	eb06 050a 	add.w	r5, r6, sl
 800baa8:	462a      	mov	r2, r5
 800baaa:	4616      	mov	r6, r2
 800baac:	3201      	adds	r2, #1
 800baae:	7830      	ldrb	r0, [r6, #0]
 800bab0:	f7ff ff8b 	bl	800b9ca <__hexdig_fun>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d1f8      	bne.n	800baaa <__gethex+0xb6>
 800bab8:	1bad      	subs	r5, r5, r6
 800baba:	00ad      	lsls	r5, r5, #2
 800babc:	e004      	b.n	800bac8 <__gethex+0xd4>
 800babe:	2400      	movs	r4, #0
 800bac0:	4625      	mov	r5, r4
 800bac2:	e7e0      	b.n	800ba86 <__gethex+0x92>
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	d1f7      	bne.n	800bab8 <__gethex+0xc4>
 800bac8:	7833      	ldrb	r3, [r6, #0]
 800baca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bace:	2b50      	cmp	r3, #80	; 0x50
 800bad0:	d13b      	bne.n	800bb4a <__gethex+0x156>
 800bad2:	7873      	ldrb	r3, [r6, #1]
 800bad4:	2b2b      	cmp	r3, #43	; 0x2b
 800bad6:	d02c      	beq.n	800bb32 <__gethex+0x13e>
 800bad8:	2b2d      	cmp	r3, #45	; 0x2d
 800bada:	d02e      	beq.n	800bb3a <__gethex+0x146>
 800badc:	1c71      	adds	r1, r6, #1
 800bade:	f04f 0900 	mov.w	r9, #0
 800bae2:	7808      	ldrb	r0, [r1, #0]
 800bae4:	f7ff ff71 	bl	800b9ca <__hexdig_fun>
 800bae8:	1e43      	subs	r3, r0, #1
 800baea:	b2db      	uxtb	r3, r3
 800baec:	2b18      	cmp	r3, #24
 800baee:	d82c      	bhi.n	800bb4a <__gethex+0x156>
 800baf0:	f1a0 0210 	sub.w	r2, r0, #16
 800baf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800baf8:	f7ff ff67 	bl	800b9ca <__hexdig_fun>
 800bafc:	1e43      	subs	r3, r0, #1
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b18      	cmp	r3, #24
 800bb02:	d91d      	bls.n	800bb40 <__gethex+0x14c>
 800bb04:	f1b9 0f00 	cmp.w	r9, #0
 800bb08:	d000      	beq.n	800bb0c <__gethex+0x118>
 800bb0a:	4252      	negs	r2, r2
 800bb0c:	4415      	add	r5, r2
 800bb0e:	f8cb 1000 	str.w	r1, [fp]
 800bb12:	b1e4      	cbz	r4, 800bb4e <__gethex+0x15a>
 800bb14:	9b00      	ldr	r3, [sp, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	bf14      	ite	ne
 800bb1a:	2700      	movne	r7, #0
 800bb1c:	2706      	moveq	r7, #6
 800bb1e:	4638      	mov	r0, r7
 800bb20:	b009      	add	sp, #36	; 0x24
 800bb22:	ecbd 8b02 	vpop	{d8}
 800bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2a:	463e      	mov	r6, r7
 800bb2c:	4625      	mov	r5, r4
 800bb2e:	2401      	movs	r4, #1
 800bb30:	e7ca      	b.n	800bac8 <__gethex+0xd4>
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	1cb1      	adds	r1, r6, #2
 800bb38:	e7d3      	b.n	800bae2 <__gethex+0xee>
 800bb3a:	f04f 0901 	mov.w	r9, #1
 800bb3e:	e7fa      	b.n	800bb36 <__gethex+0x142>
 800bb40:	230a      	movs	r3, #10
 800bb42:	fb03 0202 	mla	r2, r3, r2, r0
 800bb46:	3a10      	subs	r2, #16
 800bb48:	e7d4      	b.n	800baf4 <__gethex+0x100>
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	e7df      	b.n	800bb0e <__gethex+0x11a>
 800bb4e:	1bf3      	subs	r3, r6, r7
 800bb50:	3b01      	subs	r3, #1
 800bb52:	4621      	mov	r1, r4
 800bb54:	2b07      	cmp	r3, #7
 800bb56:	dc0b      	bgt.n	800bb70 <__gethex+0x17c>
 800bb58:	ee18 0a10 	vmov	r0, s16
 800bb5c:	f000 fa98 	bl	800c090 <_Balloc>
 800bb60:	4604      	mov	r4, r0
 800bb62:	b940      	cbnz	r0, 800bb76 <__gethex+0x182>
 800bb64:	4b5d      	ldr	r3, [pc, #372]	; (800bcdc <__gethex+0x2e8>)
 800bb66:	4602      	mov	r2, r0
 800bb68:	21de      	movs	r1, #222	; 0xde
 800bb6a:	485d      	ldr	r0, [pc, #372]	; (800bce0 <__gethex+0x2ec>)
 800bb6c:	f001 fd08 	bl	800d580 <__assert_func>
 800bb70:	3101      	adds	r1, #1
 800bb72:	105b      	asrs	r3, r3, #1
 800bb74:	e7ee      	b.n	800bb54 <__gethex+0x160>
 800bb76:	f100 0914 	add.w	r9, r0, #20
 800bb7a:	f04f 0b00 	mov.w	fp, #0
 800bb7e:	f1ca 0301 	rsb	r3, sl, #1
 800bb82:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb86:	f8cd b000 	str.w	fp, [sp]
 800bb8a:	9306      	str	r3, [sp, #24]
 800bb8c:	42b7      	cmp	r7, r6
 800bb8e:	d340      	bcc.n	800bc12 <__gethex+0x21e>
 800bb90:	9802      	ldr	r0, [sp, #8]
 800bb92:	9b00      	ldr	r3, [sp, #0]
 800bb94:	f840 3b04 	str.w	r3, [r0], #4
 800bb98:	eba0 0009 	sub.w	r0, r0, r9
 800bb9c:	1080      	asrs	r0, r0, #2
 800bb9e:	0146      	lsls	r6, r0, #5
 800bba0:	6120      	str	r0, [r4, #16]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fb66 	bl	800c274 <__hi0bits>
 800bba8:	1a30      	subs	r0, r6, r0
 800bbaa:	f8d8 6000 	ldr.w	r6, [r8]
 800bbae:	42b0      	cmp	r0, r6
 800bbb0:	dd63      	ble.n	800bc7a <__gethex+0x286>
 800bbb2:	1b87      	subs	r7, r0, r6
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 ff0a 	bl	800c9d0 <__any_on>
 800bbbc:	4682      	mov	sl, r0
 800bbbe:	b1a8      	cbz	r0, 800bbec <__gethex+0x1f8>
 800bbc0:	1e7b      	subs	r3, r7, #1
 800bbc2:	1159      	asrs	r1, r3, #5
 800bbc4:	f003 021f 	and.w	r2, r3, #31
 800bbc8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bbcc:	f04f 0a01 	mov.w	sl, #1
 800bbd0:	fa0a f202 	lsl.w	r2, sl, r2
 800bbd4:	420a      	tst	r2, r1
 800bbd6:	d009      	beq.n	800bbec <__gethex+0x1f8>
 800bbd8:	4553      	cmp	r3, sl
 800bbda:	dd05      	ble.n	800bbe8 <__gethex+0x1f4>
 800bbdc:	1eb9      	subs	r1, r7, #2
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 fef6 	bl	800c9d0 <__any_on>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d145      	bne.n	800bc74 <__gethex+0x280>
 800bbe8:	f04f 0a02 	mov.w	sl, #2
 800bbec:	4639      	mov	r1, r7
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f7ff fe99 	bl	800b926 <rshift>
 800bbf4:	443d      	add	r5, r7
 800bbf6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbfa:	42ab      	cmp	r3, r5
 800bbfc:	da4c      	bge.n	800bc98 <__gethex+0x2a4>
 800bbfe:	ee18 0a10 	vmov	r0, s16
 800bc02:	4621      	mov	r1, r4
 800bc04:	f000 fa84 	bl	800c110 <_Bfree>
 800bc08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	27a3      	movs	r7, #163	; 0xa3
 800bc10:	e785      	b.n	800bb1e <__gethex+0x12a>
 800bc12:	1e73      	subs	r3, r6, #1
 800bc14:	9a05      	ldr	r2, [sp, #20]
 800bc16:	9303      	str	r3, [sp, #12]
 800bc18:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d019      	beq.n	800bc54 <__gethex+0x260>
 800bc20:	f1bb 0f20 	cmp.w	fp, #32
 800bc24:	d107      	bne.n	800bc36 <__gethex+0x242>
 800bc26:	9b02      	ldr	r3, [sp, #8]
 800bc28:	9a00      	ldr	r2, [sp, #0]
 800bc2a:	f843 2b04 	str.w	r2, [r3], #4
 800bc2e:	9302      	str	r3, [sp, #8]
 800bc30:	2300      	movs	r3, #0
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	469b      	mov	fp, r3
 800bc36:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc3a:	f7ff fec6 	bl	800b9ca <__hexdig_fun>
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	f000 000f 	and.w	r0, r0, #15
 800bc44:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc48:	4303      	orrs	r3, r0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	f10b 0b04 	add.w	fp, fp, #4
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	e00d      	b.n	800bc70 <__gethex+0x27c>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	9a06      	ldr	r2, [sp, #24]
 800bc58:	4413      	add	r3, r2
 800bc5a:	42bb      	cmp	r3, r7
 800bc5c:	d3e0      	bcc.n	800bc20 <__gethex+0x22c>
 800bc5e:	4618      	mov	r0, r3
 800bc60:	9901      	ldr	r1, [sp, #4]
 800bc62:	9307      	str	r3, [sp, #28]
 800bc64:	4652      	mov	r2, sl
 800bc66:	f001 fbbb 	bl	800d3e0 <strncmp>
 800bc6a:	9b07      	ldr	r3, [sp, #28]
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d1d7      	bne.n	800bc20 <__gethex+0x22c>
 800bc70:	461e      	mov	r6, r3
 800bc72:	e78b      	b.n	800bb8c <__gethex+0x198>
 800bc74:	f04f 0a03 	mov.w	sl, #3
 800bc78:	e7b8      	b.n	800bbec <__gethex+0x1f8>
 800bc7a:	da0a      	bge.n	800bc92 <__gethex+0x29e>
 800bc7c:	1a37      	subs	r7, r6, r0
 800bc7e:	4621      	mov	r1, r4
 800bc80:	ee18 0a10 	vmov	r0, s16
 800bc84:	463a      	mov	r2, r7
 800bc86:	f000 fc5f 	bl	800c548 <__lshift>
 800bc8a:	1bed      	subs	r5, r5, r7
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	f100 0914 	add.w	r9, r0, #20
 800bc92:	f04f 0a00 	mov.w	sl, #0
 800bc96:	e7ae      	b.n	800bbf6 <__gethex+0x202>
 800bc98:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc9c:	42a8      	cmp	r0, r5
 800bc9e:	dd72      	ble.n	800bd86 <__gethex+0x392>
 800bca0:	1b45      	subs	r5, r0, r5
 800bca2:	42ae      	cmp	r6, r5
 800bca4:	dc36      	bgt.n	800bd14 <__gethex+0x320>
 800bca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	d02a      	beq.n	800bd04 <__gethex+0x310>
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d02c      	beq.n	800bd0c <__gethex+0x318>
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d11c      	bne.n	800bcf0 <__gethex+0x2fc>
 800bcb6:	42ae      	cmp	r6, r5
 800bcb8:	d11a      	bne.n	800bcf0 <__gethex+0x2fc>
 800bcba:	2e01      	cmp	r6, #1
 800bcbc:	d112      	bne.n	800bce4 <__gethex+0x2f0>
 800bcbe:	9a04      	ldr	r2, [sp, #16]
 800bcc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	6123      	str	r3, [r4, #16]
 800bcca:	f8c9 3000 	str.w	r3, [r9]
 800bcce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcd0:	2762      	movs	r7, #98	; 0x62
 800bcd2:	601c      	str	r4, [r3, #0]
 800bcd4:	e723      	b.n	800bb1e <__gethex+0x12a>
 800bcd6:	bf00      	nop
 800bcd8:	0800e694 	.word	0x0800e694
 800bcdc:	0800e5b8 	.word	0x0800e5b8
 800bce0:	0800e62c 	.word	0x0800e62c
 800bce4:	1e71      	subs	r1, r6, #1
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 fe72 	bl	800c9d0 <__any_on>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d1e6      	bne.n	800bcbe <__gethex+0x2ca>
 800bcf0:	ee18 0a10 	vmov	r0, s16
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	f000 fa0b 	bl	800c110 <_Bfree>
 800bcfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	2750      	movs	r7, #80	; 0x50
 800bd02:	e70c      	b.n	800bb1e <__gethex+0x12a>
 800bd04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1f2      	bne.n	800bcf0 <__gethex+0x2fc>
 800bd0a:	e7d8      	b.n	800bcbe <__gethex+0x2ca>
 800bd0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1d5      	bne.n	800bcbe <__gethex+0x2ca>
 800bd12:	e7ed      	b.n	800bcf0 <__gethex+0x2fc>
 800bd14:	1e6f      	subs	r7, r5, #1
 800bd16:	f1ba 0f00 	cmp.w	sl, #0
 800bd1a:	d131      	bne.n	800bd80 <__gethex+0x38c>
 800bd1c:	b127      	cbz	r7, 800bd28 <__gethex+0x334>
 800bd1e:	4639      	mov	r1, r7
 800bd20:	4620      	mov	r0, r4
 800bd22:	f000 fe55 	bl	800c9d0 <__any_on>
 800bd26:	4682      	mov	sl, r0
 800bd28:	117b      	asrs	r3, r7, #5
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd30:	f007 071f 	and.w	r7, r7, #31
 800bd34:	fa01 f707 	lsl.w	r7, r1, r7
 800bd38:	421f      	tst	r7, r3
 800bd3a:	4629      	mov	r1, r5
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	bf18      	it	ne
 800bd40:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd44:	1b76      	subs	r6, r6, r5
 800bd46:	f7ff fdee 	bl	800b926 <rshift>
 800bd4a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd4e:	2702      	movs	r7, #2
 800bd50:	f1ba 0f00 	cmp.w	sl, #0
 800bd54:	d048      	beq.n	800bde8 <__gethex+0x3f4>
 800bd56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d015      	beq.n	800bd8a <__gethex+0x396>
 800bd5e:	2b03      	cmp	r3, #3
 800bd60:	d017      	beq.n	800bd92 <__gethex+0x39e>
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d109      	bne.n	800bd7a <__gethex+0x386>
 800bd66:	f01a 0f02 	tst.w	sl, #2
 800bd6a:	d006      	beq.n	800bd7a <__gethex+0x386>
 800bd6c:	f8d9 0000 	ldr.w	r0, [r9]
 800bd70:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd74:	f01a 0f01 	tst.w	sl, #1
 800bd78:	d10e      	bne.n	800bd98 <__gethex+0x3a4>
 800bd7a:	f047 0710 	orr.w	r7, r7, #16
 800bd7e:	e033      	b.n	800bde8 <__gethex+0x3f4>
 800bd80:	f04f 0a01 	mov.w	sl, #1
 800bd84:	e7d0      	b.n	800bd28 <__gethex+0x334>
 800bd86:	2701      	movs	r7, #1
 800bd88:	e7e2      	b.n	800bd50 <__gethex+0x35c>
 800bd8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd8c:	f1c3 0301 	rsb	r3, r3, #1
 800bd90:	9315      	str	r3, [sp, #84]	; 0x54
 800bd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d0f0      	beq.n	800bd7a <__gethex+0x386>
 800bd98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd9c:	f104 0314 	add.w	r3, r4, #20
 800bda0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bda4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bda8:	f04f 0c00 	mov.w	ip, #0
 800bdac:	4618      	mov	r0, r3
 800bdae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdb6:	d01c      	beq.n	800bdf2 <__gethex+0x3fe>
 800bdb8:	3201      	adds	r2, #1
 800bdba:	6002      	str	r2, [r0, #0]
 800bdbc:	2f02      	cmp	r7, #2
 800bdbe:	f104 0314 	add.w	r3, r4, #20
 800bdc2:	d13f      	bne.n	800be44 <__gethex+0x450>
 800bdc4:	f8d8 2000 	ldr.w	r2, [r8]
 800bdc8:	3a01      	subs	r2, #1
 800bdca:	42b2      	cmp	r2, r6
 800bdcc:	d10a      	bne.n	800bde4 <__gethex+0x3f0>
 800bdce:	1171      	asrs	r1, r6, #5
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdd6:	f006 061f 	and.w	r6, r6, #31
 800bdda:	fa02 f606 	lsl.w	r6, r2, r6
 800bdde:	421e      	tst	r6, r3
 800bde0:	bf18      	it	ne
 800bde2:	4617      	movne	r7, r2
 800bde4:	f047 0720 	orr.w	r7, r7, #32
 800bde8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdea:	601c      	str	r4, [r3, #0]
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	601d      	str	r5, [r3, #0]
 800bdf0:	e695      	b.n	800bb1e <__gethex+0x12a>
 800bdf2:	4299      	cmp	r1, r3
 800bdf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdf8:	d8d8      	bhi.n	800bdac <__gethex+0x3b8>
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	459b      	cmp	fp, r3
 800bdfe:	db19      	blt.n	800be34 <__gethex+0x440>
 800be00:	6861      	ldr	r1, [r4, #4]
 800be02:	ee18 0a10 	vmov	r0, s16
 800be06:	3101      	adds	r1, #1
 800be08:	f000 f942 	bl	800c090 <_Balloc>
 800be0c:	4681      	mov	r9, r0
 800be0e:	b918      	cbnz	r0, 800be18 <__gethex+0x424>
 800be10:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <__gethex+0x488>)
 800be12:	4602      	mov	r2, r0
 800be14:	2184      	movs	r1, #132	; 0x84
 800be16:	e6a8      	b.n	800bb6a <__gethex+0x176>
 800be18:	6922      	ldr	r2, [r4, #16]
 800be1a:	3202      	adds	r2, #2
 800be1c:	f104 010c 	add.w	r1, r4, #12
 800be20:	0092      	lsls	r2, r2, #2
 800be22:	300c      	adds	r0, #12
 800be24:	f000 f91a 	bl	800c05c <memcpy>
 800be28:	4621      	mov	r1, r4
 800be2a:	ee18 0a10 	vmov	r0, s16
 800be2e:	f000 f96f 	bl	800c110 <_Bfree>
 800be32:	464c      	mov	r4, r9
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be3c:	6122      	str	r2, [r4, #16]
 800be3e:	2201      	movs	r2, #1
 800be40:	615a      	str	r2, [r3, #20]
 800be42:	e7bb      	b.n	800bdbc <__gethex+0x3c8>
 800be44:	6922      	ldr	r2, [r4, #16]
 800be46:	455a      	cmp	r2, fp
 800be48:	dd0b      	ble.n	800be62 <__gethex+0x46e>
 800be4a:	2101      	movs	r1, #1
 800be4c:	4620      	mov	r0, r4
 800be4e:	f7ff fd6a 	bl	800b926 <rshift>
 800be52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be56:	3501      	adds	r5, #1
 800be58:	42ab      	cmp	r3, r5
 800be5a:	f6ff aed0 	blt.w	800bbfe <__gethex+0x20a>
 800be5e:	2701      	movs	r7, #1
 800be60:	e7c0      	b.n	800bde4 <__gethex+0x3f0>
 800be62:	f016 061f 	ands.w	r6, r6, #31
 800be66:	d0fa      	beq.n	800be5e <__gethex+0x46a>
 800be68:	4453      	add	r3, sl
 800be6a:	f1c6 0620 	rsb	r6, r6, #32
 800be6e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be72:	f000 f9ff 	bl	800c274 <__hi0bits>
 800be76:	42b0      	cmp	r0, r6
 800be78:	dbe7      	blt.n	800be4a <__gethex+0x456>
 800be7a:	e7f0      	b.n	800be5e <__gethex+0x46a>
 800be7c:	0800e5b8 	.word	0x0800e5b8

0800be80 <L_shift>:
 800be80:	f1c2 0208 	rsb	r2, r2, #8
 800be84:	0092      	lsls	r2, r2, #2
 800be86:	b570      	push	{r4, r5, r6, lr}
 800be88:	f1c2 0620 	rsb	r6, r2, #32
 800be8c:	6843      	ldr	r3, [r0, #4]
 800be8e:	6804      	ldr	r4, [r0, #0]
 800be90:	fa03 f506 	lsl.w	r5, r3, r6
 800be94:	432c      	orrs	r4, r5
 800be96:	40d3      	lsrs	r3, r2
 800be98:	6004      	str	r4, [r0, #0]
 800be9a:	f840 3f04 	str.w	r3, [r0, #4]!
 800be9e:	4288      	cmp	r0, r1
 800bea0:	d3f4      	bcc.n	800be8c <L_shift+0xc>
 800bea2:	bd70      	pop	{r4, r5, r6, pc}

0800bea4 <__match>:
 800bea4:	b530      	push	{r4, r5, lr}
 800bea6:	6803      	ldr	r3, [r0, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beae:	b914      	cbnz	r4, 800beb6 <__match+0x12>
 800beb0:	6003      	str	r3, [r0, #0]
 800beb2:	2001      	movs	r0, #1
 800beb4:	bd30      	pop	{r4, r5, pc}
 800beb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bebe:	2d19      	cmp	r5, #25
 800bec0:	bf98      	it	ls
 800bec2:	3220      	addls	r2, #32
 800bec4:	42a2      	cmp	r2, r4
 800bec6:	d0f0      	beq.n	800beaa <__match+0x6>
 800bec8:	2000      	movs	r0, #0
 800beca:	e7f3      	b.n	800beb4 <__match+0x10>

0800becc <__hexnan>:
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	680b      	ldr	r3, [r1, #0]
 800bed2:	115e      	asrs	r6, r3, #5
 800bed4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bed8:	f013 031f 	ands.w	r3, r3, #31
 800bedc:	b087      	sub	sp, #28
 800bede:	bf18      	it	ne
 800bee0:	3604      	addne	r6, #4
 800bee2:	2500      	movs	r5, #0
 800bee4:	1f37      	subs	r7, r6, #4
 800bee6:	4690      	mov	r8, r2
 800bee8:	6802      	ldr	r2, [r0, #0]
 800beea:	9301      	str	r3, [sp, #4]
 800beec:	4682      	mov	sl, r0
 800beee:	f846 5c04 	str.w	r5, [r6, #-4]
 800bef2:	46b9      	mov	r9, r7
 800bef4:	463c      	mov	r4, r7
 800bef6:	9502      	str	r5, [sp, #8]
 800bef8:	46ab      	mov	fp, r5
 800befa:	7851      	ldrb	r1, [r2, #1]
 800befc:	1c53      	adds	r3, r2, #1
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	b341      	cbz	r1, 800bf54 <__hexnan+0x88>
 800bf02:	4608      	mov	r0, r1
 800bf04:	9205      	str	r2, [sp, #20]
 800bf06:	9104      	str	r1, [sp, #16]
 800bf08:	f7ff fd5f 	bl	800b9ca <__hexdig_fun>
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d14f      	bne.n	800bfb0 <__hexnan+0xe4>
 800bf10:	9904      	ldr	r1, [sp, #16]
 800bf12:	9a05      	ldr	r2, [sp, #20]
 800bf14:	2920      	cmp	r1, #32
 800bf16:	d818      	bhi.n	800bf4a <__hexnan+0x7e>
 800bf18:	9b02      	ldr	r3, [sp, #8]
 800bf1a:	459b      	cmp	fp, r3
 800bf1c:	dd13      	ble.n	800bf46 <__hexnan+0x7a>
 800bf1e:	454c      	cmp	r4, r9
 800bf20:	d206      	bcs.n	800bf30 <__hexnan+0x64>
 800bf22:	2d07      	cmp	r5, #7
 800bf24:	dc04      	bgt.n	800bf30 <__hexnan+0x64>
 800bf26:	462a      	mov	r2, r5
 800bf28:	4649      	mov	r1, r9
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f7ff ffa8 	bl	800be80 <L_shift>
 800bf30:	4544      	cmp	r4, r8
 800bf32:	d950      	bls.n	800bfd6 <__hexnan+0x10a>
 800bf34:	2300      	movs	r3, #0
 800bf36:	f1a4 0904 	sub.w	r9, r4, #4
 800bf3a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf3e:	f8cd b008 	str.w	fp, [sp, #8]
 800bf42:	464c      	mov	r4, r9
 800bf44:	461d      	mov	r5, r3
 800bf46:	9a03      	ldr	r2, [sp, #12]
 800bf48:	e7d7      	b.n	800befa <__hexnan+0x2e>
 800bf4a:	2929      	cmp	r1, #41	; 0x29
 800bf4c:	d156      	bne.n	800bffc <__hexnan+0x130>
 800bf4e:	3202      	adds	r2, #2
 800bf50:	f8ca 2000 	str.w	r2, [sl]
 800bf54:	f1bb 0f00 	cmp.w	fp, #0
 800bf58:	d050      	beq.n	800bffc <__hexnan+0x130>
 800bf5a:	454c      	cmp	r4, r9
 800bf5c:	d206      	bcs.n	800bf6c <__hexnan+0xa0>
 800bf5e:	2d07      	cmp	r5, #7
 800bf60:	dc04      	bgt.n	800bf6c <__hexnan+0xa0>
 800bf62:	462a      	mov	r2, r5
 800bf64:	4649      	mov	r1, r9
 800bf66:	4620      	mov	r0, r4
 800bf68:	f7ff ff8a 	bl	800be80 <L_shift>
 800bf6c:	4544      	cmp	r4, r8
 800bf6e:	d934      	bls.n	800bfda <__hexnan+0x10e>
 800bf70:	f1a8 0204 	sub.w	r2, r8, #4
 800bf74:	4623      	mov	r3, r4
 800bf76:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf7a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf7e:	429f      	cmp	r7, r3
 800bf80:	d2f9      	bcs.n	800bf76 <__hexnan+0xaa>
 800bf82:	1b3b      	subs	r3, r7, r4
 800bf84:	f023 0303 	bic.w	r3, r3, #3
 800bf88:	3304      	adds	r3, #4
 800bf8a:	3401      	adds	r4, #1
 800bf8c:	3e03      	subs	r6, #3
 800bf8e:	42b4      	cmp	r4, r6
 800bf90:	bf88      	it	hi
 800bf92:	2304      	movhi	r3, #4
 800bf94:	4443      	add	r3, r8
 800bf96:	2200      	movs	r2, #0
 800bf98:	f843 2b04 	str.w	r2, [r3], #4
 800bf9c:	429f      	cmp	r7, r3
 800bf9e:	d2fb      	bcs.n	800bf98 <__hexnan+0xcc>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	b91b      	cbnz	r3, 800bfac <__hexnan+0xe0>
 800bfa4:	4547      	cmp	r7, r8
 800bfa6:	d127      	bne.n	800bff8 <__hexnan+0x12c>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	2005      	movs	r0, #5
 800bfae:	e026      	b.n	800bffe <__hexnan+0x132>
 800bfb0:	3501      	adds	r5, #1
 800bfb2:	2d08      	cmp	r5, #8
 800bfb4:	f10b 0b01 	add.w	fp, fp, #1
 800bfb8:	dd06      	ble.n	800bfc8 <__hexnan+0xfc>
 800bfba:	4544      	cmp	r4, r8
 800bfbc:	d9c3      	bls.n	800bf46 <__hexnan+0x7a>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfc4:	2501      	movs	r5, #1
 800bfc6:	3c04      	subs	r4, #4
 800bfc8:	6822      	ldr	r2, [r4, #0]
 800bfca:	f000 000f 	and.w	r0, r0, #15
 800bfce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bfd2:	6022      	str	r2, [r4, #0]
 800bfd4:	e7b7      	b.n	800bf46 <__hexnan+0x7a>
 800bfd6:	2508      	movs	r5, #8
 800bfd8:	e7b5      	b.n	800bf46 <__hexnan+0x7a>
 800bfda:	9b01      	ldr	r3, [sp, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0df      	beq.n	800bfa0 <__hexnan+0xd4>
 800bfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfe4:	f1c3 0320 	rsb	r3, r3, #32
 800bfe8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bff0:	401a      	ands	r2, r3
 800bff2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bff6:	e7d3      	b.n	800bfa0 <__hexnan+0xd4>
 800bff8:	3f04      	subs	r7, #4
 800bffa:	e7d1      	b.n	800bfa0 <__hexnan+0xd4>
 800bffc:	2004      	movs	r0, #4
 800bffe:	b007      	add	sp, #28
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c004 <_localeconv_r>:
 800c004:	4800      	ldr	r0, [pc, #0]	; (800c008 <_localeconv_r+0x4>)
 800c006:	4770      	bx	lr
 800c008:	20000194 	.word	0x20000194

0800c00c <__retarget_lock_init_recursive>:
 800c00c:	4770      	bx	lr

0800c00e <__retarget_lock_acquire_recursive>:
 800c00e:	4770      	bx	lr

0800c010 <__retarget_lock_release_recursive>:
 800c010:	4770      	bx	lr
	...

0800c014 <_lseek_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	; (800c034 <_lseek_r+0x20>)
 800c018:	4604      	mov	r4, r0
 800c01a:	4608      	mov	r0, r1
 800c01c:	4611      	mov	r1, r2
 800c01e:	2200      	movs	r2, #0
 800c020:	602a      	str	r2, [r5, #0]
 800c022:	461a      	mov	r2, r3
 800c024:	f7f5 fe60 	bl	8001ce8 <_lseek>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d102      	bne.n	800c032 <_lseek_r+0x1e>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	b103      	cbz	r3, 800c032 <_lseek_r+0x1e>
 800c030:	6023      	str	r3, [r4, #0]
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	200007fc 	.word	0x200007fc

0800c038 <__ascii_mbtowc>:
 800c038:	b082      	sub	sp, #8
 800c03a:	b901      	cbnz	r1, 800c03e <__ascii_mbtowc+0x6>
 800c03c:	a901      	add	r1, sp, #4
 800c03e:	b142      	cbz	r2, 800c052 <__ascii_mbtowc+0x1a>
 800c040:	b14b      	cbz	r3, 800c056 <__ascii_mbtowc+0x1e>
 800c042:	7813      	ldrb	r3, [r2, #0]
 800c044:	600b      	str	r3, [r1, #0]
 800c046:	7812      	ldrb	r2, [r2, #0]
 800c048:	1e10      	subs	r0, r2, #0
 800c04a:	bf18      	it	ne
 800c04c:	2001      	movne	r0, #1
 800c04e:	b002      	add	sp, #8
 800c050:	4770      	bx	lr
 800c052:	4610      	mov	r0, r2
 800c054:	e7fb      	b.n	800c04e <__ascii_mbtowc+0x16>
 800c056:	f06f 0001 	mvn.w	r0, #1
 800c05a:	e7f8      	b.n	800c04e <__ascii_mbtowc+0x16>

0800c05c <memcpy>:
 800c05c:	440a      	add	r2, r1
 800c05e:	4291      	cmp	r1, r2
 800c060:	f100 33ff 	add.w	r3, r0, #4294967295
 800c064:	d100      	bne.n	800c068 <memcpy+0xc>
 800c066:	4770      	bx	lr
 800c068:	b510      	push	{r4, lr}
 800c06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c072:	4291      	cmp	r1, r2
 800c074:	d1f9      	bne.n	800c06a <memcpy+0xe>
 800c076:	bd10      	pop	{r4, pc}

0800c078 <__malloc_lock>:
 800c078:	4801      	ldr	r0, [pc, #4]	; (800c080 <__malloc_lock+0x8>)
 800c07a:	f7ff bfc8 	b.w	800c00e <__retarget_lock_acquire_recursive>
 800c07e:	bf00      	nop
 800c080:	200007f8 	.word	0x200007f8

0800c084 <__malloc_unlock>:
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__malloc_unlock+0x8>)
 800c086:	f7ff bfc3 	b.w	800c010 <__retarget_lock_release_recursive>
 800c08a:	bf00      	nop
 800c08c:	200007f8 	.word	0x200007f8

0800c090 <_Balloc>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c094:	4604      	mov	r4, r0
 800c096:	460d      	mov	r5, r1
 800c098:	b976      	cbnz	r6, 800c0b8 <_Balloc+0x28>
 800c09a:	2010      	movs	r0, #16
 800c09c:	f7fc fa04 	bl	80084a8 <malloc>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6260      	str	r0, [r4, #36]	; 0x24
 800c0a4:	b920      	cbnz	r0, 800c0b0 <_Balloc+0x20>
 800c0a6:	4b18      	ldr	r3, [pc, #96]	; (800c108 <_Balloc+0x78>)
 800c0a8:	4818      	ldr	r0, [pc, #96]	; (800c10c <_Balloc+0x7c>)
 800c0aa:	2166      	movs	r1, #102	; 0x66
 800c0ac:	f001 fa68 	bl	800d580 <__assert_func>
 800c0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b4:	6006      	str	r6, [r0, #0]
 800c0b6:	60c6      	str	r6, [r0, #12]
 800c0b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c0ba:	68f3      	ldr	r3, [r6, #12]
 800c0bc:	b183      	cbz	r3, 800c0e0 <_Balloc+0x50>
 800c0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	b9b8      	cbnz	r0, 800c0f8 <_Balloc+0x68>
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ce:	1d72      	adds	r2, r6, #5
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fc9d 	bl	800ca12 <_calloc_r>
 800c0d8:	b160      	cbz	r0, 800c0f4 <_Balloc+0x64>
 800c0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0de:	e00e      	b.n	800c0fe <_Balloc+0x6e>
 800c0e0:	2221      	movs	r2, #33	; 0x21
 800c0e2:	2104      	movs	r1, #4
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fc94 	bl	800ca12 <_calloc_r>
 800c0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0ec:	60f0      	str	r0, [r6, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e4      	bne.n	800c0be <_Balloc+0x2e>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	6802      	ldr	r2, [r0, #0]
 800c0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0fe:	2300      	movs	r3, #0
 800c100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c104:	e7f7      	b.n	800c0f6 <_Balloc+0x66>
 800c106:	bf00      	nop
 800c108:	0800e546 	.word	0x0800e546
 800c10c:	0800e6a8 	.word	0x0800e6a8

0800c110 <_Bfree>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	b976      	cbnz	r6, 800c138 <_Bfree+0x28>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f7fc f9c4 	bl	80084a8 <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	6268      	str	r0, [r5, #36]	; 0x24
 800c124:	b920      	cbnz	r0, 800c130 <_Bfree+0x20>
 800c126:	4b09      	ldr	r3, [pc, #36]	; (800c14c <_Bfree+0x3c>)
 800c128:	4809      	ldr	r0, [pc, #36]	; (800c150 <_Bfree+0x40>)
 800c12a:	218a      	movs	r1, #138	; 0x8a
 800c12c:	f001 fa28 	bl	800d580 <__assert_func>
 800c130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c134:	6006      	str	r6, [r0, #0]
 800c136:	60c6      	str	r6, [r0, #12]
 800c138:	b13c      	cbz	r4, 800c14a <_Bfree+0x3a>
 800c13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c13c:	6862      	ldr	r2, [r4, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c144:	6021      	str	r1, [r4, #0]
 800c146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	0800e546 	.word	0x0800e546
 800c150:	0800e6a8 	.word	0x0800e6a8

0800c154 <__multadd>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	690d      	ldr	r5, [r1, #16]
 800c15a:	4607      	mov	r7, r0
 800c15c:	460c      	mov	r4, r1
 800c15e:	461e      	mov	r6, r3
 800c160:	f101 0c14 	add.w	ip, r1, #20
 800c164:	2000      	movs	r0, #0
 800c166:	f8dc 3000 	ldr.w	r3, [ip]
 800c16a:	b299      	uxth	r1, r3
 800c16c:	fb02 6101 	mla	r1, r2, r1, r6
 800c170:	0c1e      	lsrs	r6, r3, #16
 800c172:	0c0b      	lsrs	r3, r1, #16
 800c174:	fb02 3306 	mla	r3, r2, r6, r3
 800c178:	b289      	uxth	r1, r1
 800c17a:	3001      	adds	r0, #1
 800c17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c180:	4285      	cmp	r5, r0
 800c182:	f84c 1b04 	str.w	r1, [ip], #4
 800c186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c18a:	dcec      	bgt.n	800c166 <__multadd+0x12>
 800c18c:	b30e      	cbz	r6, 800c1d2 <__multadd+0x7e>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	42ab      	cmp	r3, r5
 800c192:	dc19      	bgt.n	800c1c8 <__multadd+0x74>
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	4638      	mov	r0, r7
 800c198:	3101      	adds	r1, #1
 800c19a:	f7ff ff79 	bl	800c090 <_Balloc>
 800c19e:	4680      	mov	r8, r0
 800c1a0:	b928      	cbnz	r0, 800c1ae <__multadd+0x5a>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	; (800c1d8 <__multadd+0x84>)
 800c1a6:	480d      	ldr	r0, [pc, #52]	; (800c1dc <__multadd+0x88>)
 800c1a8:	21b5      	movs	r1, #181	; 0xb5
 800c1aa:	f001 f9e9 	bl	800d580 <__assert_func>
 800c1ae:	6922      	ldr	r2, [r4, #16]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	f104 010c 	add.w	r1, r4, #12
 800c1b6:	0092      	lsls	r2, r2, #2
 800c1b8:	300c      	adds	r0, #12
 800c1ba:	f7ff ff4f 	bl	800c05c <memcpy>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7ff ffa5 	bl	800c110 <_Bfree>
 800c1c6:	4644      	mov	r4, r8
 800c1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	615e      	str	r6, [r3, #20]
 800c1d0:	6125      	str	r5, [r4, #16]
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	0800e5b8 	.word	0x0800e5b8
 800c1dc:	0800e6a8 	.word	0x0800e6a8

0800c1e0 <__s2b>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	4615      	mov	r5, r2
 800c1e8:	461f      	mov	r7, r3
 800c1ea:	2209      	movs	r2, #9
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	db09      	blt.n	800c210 <__s2b+0x30>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff ff47 	bl	800c090 <_Balloc>
 800c202:	b940      	cbnz	r0, 800c216 <__s2b+0x36>
 800c204:	4602      	mov	r2, r0
 800c206:	4b19      	ldr	r3, [pc, #100]	; (800c26c <__s2b+0x8c>)
 800c208:	4819      	ldr	r0, [pc, #100]	; (800c270 <__s2b+0x90>)
 800c20a:	21ce      	movs	r1, #206	; 0xce
 800c20c:	f001 f9b8 	bl	800d580 <__assert_func>
 800c210:	0052      	lsls	r2, r2, #1
 800c212:	3101      	adds	r1, #1
 800c214:	e7f0      	b.n	800c1f8 <__s2b+0x18>
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	6143      	str	r3, [r0, #20]
 800c21a:	2d09      	cmp	r5, #9
 800c21c:	f04f 0301 	mov.w	r3, #1
 800c220:	6103      	str	r3, [r0, #16]
 800c222:	dd16      	ble.n	800c252 <__s2b+0x72>
 800c224:	f104 0909 	add.w	r9, r4, #9
 800c228:	46c8      	mov	r8, r9
 800c22a:	442c      	add	r4, r5
 800c22c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c230:	4601      	mov	r1, r0
 800c232:	3b30      	subs	r3, #48	; 0x30
 800c234:	220a      	movs	r2, #10
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff8c 	bl	800c154 <__multadd>
 800c23c:	45a0      	cmp	r8, r4
 800c23e:	d1f5      	bne.n	800c22c <__s2b+0x4c>
 800c240:	f1a5 0408 	sub.w	r4, r5, #8
 800c244:	444c      	add	r4, r9
 800c246:	1b2d      	subs	r5, r5, r4
 800c248:	1963      	adds	r3, r4, r5
 800c24a:	42bb      	cmp	r3, r7
 800c24c:	db04      	blt.n	800c258 <__s2b+0x78>
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	340a      	adds	r4, #10
 800c254:	2509      	movs	r5, #9
 800c256:	e7f6      	b.n	800c246 <__s2b+0x66>
 800c258:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c25c:	4601      	mov	r1, r0
 800c25e:	3b30      	subs	r3, #48	; 0x30
 800c260:	220a      	movs	r2, #10
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ff76 	bl	800c154 <__multadd>
 800c268:	e7ee      	b.n	800c248 <__s2b+0x68>
 800c26a:	bf00      	nop
 800c26c:	0800e5b8 	.word	0x0800e5b8
 800c270:	0800e6a8 	.word	0x0800e6a8

0800c274 <__hi0bits>:
 800c274:	0c03      	lsrs	r3, r0, #16
 800c276:	041b      	lsls	r3, r3, #16
 800c278:	b9d3      	cbnz	r3, 800c2b0 <__hi0bits+0x3c>
 800c27a:	0400      	lsls	r0, r0, #16
 800c27c:	2310      	movs	r3, #16
 800c27e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c282:	bf04      	itt	eq
 800c284:	0200      	lsleq	r0, r0, #8
 800c286:	3308      	addeq	r3, #8
 800c288:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c28c:	bf04      	itt	eq
 800c28e:	0100      	lsleq	r0, r0, #4
 800c290:	3304      	addeq	r3, #4
 800c292:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c296:	bf04      	itt	eq
 800c298:	0080      	lsleq	r0, r0, #2
 800c29a:	3302      	addeq	r3, #2
 800c29c:	2800      	cmp	r0, #0
 800c29e:	db05      	blt.n	800c2ac <__hi0bits+0x38>
 800c2a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c2a4:	f103 0301 	add.w	r3, r3, #1
 800c2a8:	bf08      	it	eq
 800c2aa:	2320      	moveq	r3, #32
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	4770      	bx	lr
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e7e4      	b.n	800c27e <__hi0bits+0xa>

0800c2b4 <__lo0bits>:
 800c2b4:	6803      	ldr	r3, [r0, #0]
 800c2b6:	f013 0207 	ands.w	r2, r3, #7
 800c2ba:	4601      	mov	r1, r0
 800c2bc:	d00b      	beq.n	800c2d6 <__lo0bits+0x22>
 800c2be:	07da      	lsls	r2, r3, #31
 800c2c0:	d423      	bmi.n	800c30a <__lo0bits+0x56>
 800c2c2:	0798      	lsls	r0, r3, #30
 800c2c4:	bf49      	itett	mi
 800c2c6:	085b      	lsrmi	r3, r3, #1
 800c2c8:	089b      	lsrpl	r3, r3, #2
 800c2ca:	2001      	movmi	r0, #1
 800c2cc:	600b      	strmi	r3, [r1, #0]
 800c2ce:	bf5c      	itt	pl
 800c2d0:	600b      	strpl	r3, [r1, #0]
 800c2d2:	2002      	movpl	r0, #2
 800c2d4:	4770      	bx	lr
 800c2d6:	b298      	uxth	r0, r3
 800c2d8:	b9a8      	cbnz	r0, 800c306 <__lo0bits+0x52>
 800c2da:	0c1b      	lsrs	r3, r3, #16
 800c2dc:	2010      	movs	r0, #16
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	b90a      	cbnz	r2, 800c2e6 <__lo0bits+0x32>
 800c2e2:	3008      	adds	r0, #8
 800c2e4:	0a1b      	lsrs	r3, r3, #8
 800c2e6:	071a      	lsls	r2, r3, #28
 800c2e8:	bf04      	itt	eq
 800c2ea:	091b      	lsreq	r3, r3, #4
 800c2ec:	3004      	addeq	r0, #4
 800c2ee:	079a      	lsls	r2, r3, #30
 800c2f0:	bf04      	itt	eq
 800c2f2:	089b      	lsreq	r3, r3, #2
 800c2f4:	3002      	addeq	r0, #2
 800c2f6:	07da      	lsls	r2, r3, #31
 800c2f8:	d403      	bmi.n	800c302 <__lo0bits+0x4e>
 800c2fa:	085b      	lsrs	r3, r3, #1
 800c2fc:	f100 0001 	add.w	r0, r0, #1
 800c300:	d005      	beq.n	800c30e <__lo0bits+0x5a>
 800c302:	600b      	str	r3, [r1, #0]
 800c304:	4770      	bx	lr
 800c306:	4610      	mov	r0, r2
 800c308:	e7e9      	b.n	800c2de <__lo0bits+0x2a>
 800c30a:	2000      	movs	r0, #0
 800c30c:	4770      	bx	lr
 800c30e:	2020      	movs	r0, #32
 800c310:	4770      	bx	lr
	...

0800c314 <__i2b>:
 800c314:	b510      	push	{r4, lr}
 800c316:	460c      	mov	r4, r1
 800c318:	2101      	movs	r1, #1
 800c31a:	f7ff feb9 	bl	800c090 <_Balloc>
 800c31e:	4602      	mov	r2, r0
 800c320:	b928      	cbnz	r0, 800c32e <__i2b+0x1a>
 800c322:	4b05      	ldr	r3, [pc, #20]	; (800c338 <__i2b+0x24>)
 800c324:	4805      	ldr	r0, [pc, #20]	; (800c33c <__i2b+0x28>)
 800c326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c32a:	f001 f929 	bl	800d580 <__assert_func>
 800c32e:	2301      	movs	r3, #1
 800c330:	6144      	str	r4, [r0, #20]
 800c332:	6103      	str	r3, [r0, #16]
 800c334:	bd10      	pop	{r4, pc}
 800c336:	bf00      	nop
 800c338:	0800e5b8 	.word	0x0800e5b8
 800c33c:	0800e6a8 	.word	0x0800e6a8

0800c340 <__multiply>:
 800c340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c344:	4691      	mov	r9, r2
 800c346:	690a      	ldr	r2, [r1, #16]
 800c348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	bfb8      	it	lt
 800c350:	460b      	movlt	r3, r1
 800c352:	460c      	mov	r4, r1
 800c354:	bfbc      	itt	lt
 800c356:	464c      	movlt	r4, r9
 800c358:	4699      	movlt	r9, r3
 800c35a:	6927      	ldr	r7, [r4, #16]
 800c35c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	6861      	ldr	r1, [r4, #4]
 800c364:	eb07 060a 	add.w	r6, r7, sl
 800c368:	42b3      	cmp	r3, r6
 800c36a:	b085      	sub	sp, #20
 800c36c:	bfb8      	it	lt
 800c36e:	3101      	addlt	r1, #1
 800c370:	f7ff fe8e 	bl	800c090 <_Balloc>
 800c374:	b930      	cbnz	r0, 800c384 <__multiply+0x44>
 800c376:	4602      	mov	r2, r0
 800c378:	4b44      	ldr	r3, [pc, #272]	; (800c48c <__multiply+0x14c>)
 800c37a:	4845      	ldr	r0, [pc, #276]	; (800c490 <__multiply+0x150>)
 800c37c:	f240 115d 	movw	r1, #349	; 0x15d
 800c380:	f001 f8fe 	bl	800d580 <__assert_func>
 800c384:	f100 0514 	add.w	r5, r0, #20
 800c388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c38c:	462b      	mov	r3, r5
 800c38e:	2200      	movs	r2, #0
 800c390:	4543      	cmp	r3, r8
 800c392:	d321      	bcc.n	800c3d8 <__multiply+0x98>
 800c394:	f104 0314 	add.w	r3, r4, #20
 800c398:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c39c:	f109 0314 	add.w	r3, r9, #20
 800c3a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c3a4:	9202      	str	r2, [sp, #8]
 800c3a6:	1b3a      	subs	r2, r7, r4
 800c3a8:	3a15      	subs	r2, #21
 800c3aa:	f022 0203 	bic.w	r2, r2, #3
 800c3ae:	3204      	adds	r2, #4
 800c3b0:	f104 0115 	add.w	r1, r4, #21
 800c3b4:	428f      	cmp	r7, r1
 800c3b6:	bf38      	it	cc
 800c3b8:	2204      	movcc	r2, #4
 800c3ba:	9201      	str	r2, [sp, #4]
 800c3bc:	9a02      	ldr	r2, [sp, #8]
 800c3be:	9303      	str	r3, [sp, #12]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d80c      	bhi.n	800c3de <__multiply+0x9e>
 800c3c4:	2e00      	cmp	r6, #0
 800c3c6:	dd03      	ble.n	800c3d0 <__multiply+0x90>
 800c3c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d05a      	beq.n	800c486 <__multiply+0x146>
 800c3d0:	6106      	str	r6, [r0, #16]
 800c3d2:	b005      	add	sp, #20
 800c3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d8:	f843 2b04 	str.w	r2, [r3], #4
 800c3dc:	e7d8      	b.n	800c390 <__multiply+0x50>
 800c3de:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3e2:	f1ba 0f00 	cmp.w	sl, #0
 800c3e6:	d024      	beq.n	800c432 <__multiply+0xf2>
 800c3e8:	f104 0e14 	add.w	lr, r4, #20
 800c3ec:	46a9      	mov	r9, r5
 800c3ee:	f04f 0c00 	mov.w	ip, #0
 800c3f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3f6:	f8d9 1000 	ldr.w	r1, [r9]
 800c3fa:	fa1f fb82 	uxth.w	fp, r2
 800c3fe:	b289      	uxth	r1, r1
 800c400:	fb0a 110b 	mla	r1, sl, fp, r1
 800c404:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c408:	f8d9 2000 	ldr.w	r2, [r9]
 800c40c:	4461      	add	r1, ip
 800c40e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c412:	fb0a c20b 	mla	r2, sl, fp, ip
 800c416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c41a:	b289      	uxth	r1, r1
 800c41c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c420:	4577      	cmp	r7, lr
 800c422:	f849 1b04 	str.w	r1, [r9], #4
 800c426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c42a:	d8e2      	bhi.n	800c3f2 <__multiply+0xb2>
 800c42c:	9a01      	ldr	r2, [sp, #4]
 800c42e:	f845 c002 	str.w	ip, [r5, r2]
 800c432:	9a03      	ldr	r2, [sp, #12]
 800c434:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c438:	3304      	adds	r3, #4
 800c43a:	f1b9 0f00 	cmp.w	r9, #0
 800c43e:	d020      	beq.n	800c482 <__multiply+0x142>
 800c440:	6829      	ldr	r1, [r5, #0]
 800c442:	f104 0c14 	add.w	ip, r4, #20
 800c446:	46ae      	mov	lr, r5
 800c448:	f04f 0a00 	mov.w	sl, #0
 800c44c:	f8bc b000 	ldrh.w	fp, [ip]
 800c450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c454:	fb09 220b 	mla	r2, r9, fp, r2
 800c458:	4492      	add	sl, r2
 800c45a:	b289      	uxth	r1, r1
 800c45c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c460:	f84e 1b04 	str.w	r1, [lr], #4
 800c464:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c468:	f8be 1000 	ldrh.w	r1, [lr]
 800c46c:	0c12      	lsrs	r2, r2, #16
 800c46e:	fb09 1102 	mla	r1, r9, r2, r1
 800c472:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c476:	4567      	cmp	r7, ip
 800c478:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c47c:	d8e6      	bhi.n	800c44c <__multiply+0x10c>
 800c47e:	9a01      	ldr	r2, [sp, #4]
 800c480:	50a9      	str	r1, [r5, r2]
 800c482:	3504      	adds	r5, #4
 800c484:	e79a      	b.n	800c3bc <__multiply+0x7c>
 800c486:	3e01      	subs	r6, #1
 800c488:	e79c      	b.n	800c3c4 <__multiply+0x84>
 800c48a:	bf00      	nop
 800c48c:	0800e5b8 	.word	0x0800e5b8
 800c490:	0800e6a8 	.word	0x0800e6a8

0800c494 <__pow5mult>:
 800c494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c498:	4615      	mov	r5, r2
 800c49a:	f012 0203 	ands.w	r2, r2, #3
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460f      	mov	r7, r1
 800c4a2:	d007      	beq.n	800c4b4 <__pow5mult+0x20>
 800c4a4:	4c25      	ldr	r4, [pc, #148]	; (800c53c <__pow5mult+0xa8>)
 800c4a6:	3a01      	subs	r2, #1
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4ae:	f7ff fe51 	bl	800c154 <__multadd>
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	10ad      	asrs	r5, r5, #2
 800c4b6:	d03d      	beq.n	800c534 <__pow5mult+0xa0>
 800c4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c4ba:	b97c      	cbnz	r4, 800c4dc <__pow5mult+0x48>
 800c4bc:	2010      	movs	r0, #16
 800c4be:	f7fb fff3 	bl	80084a8 <malloc>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	6270      	str	r0, [r6, #36]	; 0x24
 800c4c6:	b928      	cbnz	r0, 800c4d4 <__pow5mult+0x40>
 800c4c8:	4b1d      	ldr	r3, [pc, #116]	; (800c540 <__pow5mult+0xac>)
 800c4ca:	481e      	ldr	r0, [pc, #120]	; (800c544 <__pow5mult+0xb0>)
 800c4cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4d0:	f001 f856 	bl	800d580 <__assert_func>
 800c4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4d8:	6004      	str	r4, [r0, #0]
 800c4da:	60c4      	str	r4, [r0, #12]
 800c4dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4e4:	b94c      	cbnz	r4, 800c4fa <__pow5mult+0x66>
 800c4e6:	f240 2171 	movw	r1, #625	; 0x271
 800c4ea:	4630      	mov	r0, r6
 800c4ec:	f7ff ff12 	bl	800c314 <__i2b>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	6003      	str	r3, [r0, #0]
 800c4fa:	f04f 0900 	mov.w	r9, #0
 800c4fe:	07eb      	lsls	r3, r5, #31
 800c500:	d50a      	bpl.n	800c518 <__pow5mult+0x84>
 800c502:	4639      	mov	r1, r7
 800c504:	4622      	mov	r2, r4
 800c506:	4630      	mov	r0, r6
 800c508:	f7ff ff1a 	bl	800c340 <__multiply>
 800c50c:	4639      	mov	r1, r7
 800c50e:	4680      	mov	r8, r0
 800c510:	4630      	mov	r0, r6
 800c512:	f7ff fdfd 	bl	800c110 <_Bfree>
 800c516:	4647      	mov	r7, r8
 800c518:	106d      	asrs	r5, r5, #1
 800c51a:	d00b      	beq.n	800c534 <__pow5mult+0xa0>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	b938      	cbnz	r0, 800c530 <__pow5mult+0x9c>
 800c520:	4622      	mov	r2, r4
 800c522:	4621      	mov	r1, r4
 800c524:	4630      	mov	r0, r6
 800c526:	f7ff ff0b 	bl	800c340 <__multiply>
 800c52a:	6020      	str	r0, [r4, #0]
 800c52c:	f8c0 9000 	str.w	r9, [r0]
 800c530:	4604      	mov	r4, r0
 800c532:	e7e4      	b.n	800c4fe <__pow5mult+0x6a>
 800c534:	4638      	mov	r0, r7
 800c536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c53a:	bf00      	nop
 800c53c:	0800e7f8 	.word	0x0800e7f8
 800c540:	0800e546 	.word	0x0800e546
 800c544:	0800e6a8 	.word	0x0800e6a8

0800c548 <__lshift>:
 800c548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c54c:	460c      	mov	r4, r1
 800c54e:	6849      	ldr	r1, [r1, #4]
 800c550:	6923      	ldr	r3, [r4, #16]
 800c552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c556:	68a3      	ldr	r3, [r4, #8]
 800c558:	4607      	mov	r7, r0
 800c55a:	4691      	mov	r9, r2
 800c55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c560:	f108 0601 	add.w	r6, r8, #1
 800c564:	42b3      	cmp	r3, r6
 800c566:	db0b      	blt.n	800c580 <__lshift+0x38>
 800c568:	4638      	mov	r0, r7
 800c56a:	f7ff fd91 	bl	800c090 <_Balloc>
 800c56e:	4605      	mov	r5, r0
 800c570:	b948      	cbnz	r0, 800c586 <__lshift+0x3e>
 800c572:	4602      	mov	r2, r0
 800c574:	4b2a      	ldr	r3, [pc, #168]	; (800c620 <__lshift+0xd8>)
 800c576:	482b      	ldr	r0, [pc, #172]	; (800c624 <__lshift+0xdc>)
 800c578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c57c:	f001 f800 	bl	800d580 <__assert_func>
 800c580:	3101      	adds	r1, #1
 800c582:	005b      	lsls	r3, r3, #1
 800c584:	e7ee      	b.n	800c564 <__lshift+0x1c>
 800c586:	2300      	movs	r3, #0
 800c588:	f100 0114 	add.w	r1, r0, #20
 800c58c:	f100 0210 	add.w	r2, r0, #16
 800c590:	4618      	mov	r0, r3
 800c592:	4553      	cmp	r3, sl
 800c594:	db37      	blt.n	800c606 <__lshift+0xbe>
 800c596:	6920      	ldr	r0, [r4, #16]
 800c598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c59c:	f104 0314 	add.w	r3, r4, #20
 800c5a0:	f019 091f 	ands.w	r9, r9, #31
 800c5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c5ac:	d02f      	beq.n	800c60e <__lshift+0xc6>
 800c5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c5b2:	468a      	mov	sl, r1
 800c5b4:	f04f 0c00 	mov.w	ip, #0
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	fa02 f209 	lsl.w	r2, r2, r9
 800c5be:	ea42 020c 	orr.w	r2, r2, ip
 800c5c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ca:	4298      	cmp	r0, r3
 800c5cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c5d0:	d8f2      	bhi.n	800c5b8 <__lshift+0x70>
 800c5d2:	1b03      	subs	r3, r0, r4
 800c5d4:	3b15      	subs	r3, #21
 800c5d6:	f023 0303 	bic.w	r3, r3, #3
 800c5da:	3304      	adds	r3, #4
 800c5dc:	f104 0215 	add.w	r2, r4, #21
 800c5e0:	4290      	cmp	r0, r2
 800c5e2:	bf38      	it	cc
 800c5e4:	2304      	movcc	r3, #4
 800c5e6:	f841 c003 	str.w	ip, [r1, r3]
 800c5ea:	f1bc 0f00 	cmp.w	ip, #0
 800c5ee:	d001      	beq.n	800c5f4 <__lshift+0xac>
 800c5f0:	f108 0602 	add.w	r6, r8, #2
 800c5f4:	3e01      	subs	r6, #1
 800c5f6:	4638      	mov	r0, r7
 800c5f8:	612e      	str	r6, [r5, #16]
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	f7ff fd88 	bl	800c110 <_Bfree>
 800c600:	4628      	mov	r0, r5
 800c602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c606:	f842 0f04 	str.w	r0, [r2, #4]!
 800c60a:	3301      	adds	r3, #1
 800c60c:	e7c1      	b.n	800c592 <__lshift+0x4a>
 800c60e:	3904      	subs	r1, #4
 800c610:	f853 2b04 	ldr.w	r2, [r3], #4
 800c614:	f841 2f04 	str.w	r2, [r1, #4]!
 800c618:	4298      	cmp	r0, r3
 800c61a:	d8f9      	bhi.n	800c610 <__lshift+0xc8>
 800c61c:	e7ea      	b.n	800c5f4 <__lshift+0xac>
 800c61e:	bf00      	nop
 800c620:	0800e5b8 	.word	0x0800e5b8
 800c624:	0800e6a8 	.word	0x0800e6a8

0800c628 <__mcmp>:
 800c628:	b530      	push	{r4, r5, lr}
 800c62a:	6902      	ldr	r2, [r0, #16]
 800c62c:	690c      	ldr	r4, [r1, #16]
 800c62e:	1b12      	subs	r2, r2, r4
 800c630:	d10e      	bne.n	800c650 <__mcmp+0x28>
 800c632:	f100 0314 	add.w	r3, r0, #20
 800c636:	3114      	adds	r1, #20
 800c638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c63c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c648:	42a5      	cmp	r5, r4
 800c64a:	d003      	beq.n	800c654 <__mcmp+0x2c>
 800c64c:	d305      	bcc.n	800c65a <__mcmp+0x32>
 800c64e:	2201      	movs	r2, #1
 800c650:	4610      	mov	r0, r2
 800c652:	bd30      	pop	{r4, r5, pc}
 800c654:	4283      	cmp	r3, r0
 800c656:	d3f3      	bcc.n	800c640 <__mcmp+0x18>
 800c658:	e7fa      	b.n	800c650 <__mcmp+0x28>
 800c65a:	f04f 32ff 	mov.w	r2, #4294967295
 800c65e:	e7f7      	b.n	800c650 <__mcmp+0x28>

0800c660 <__mdiff>:
 800c660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	460c      	mov	r4, r1
 800c666:	4606      	mov	r6, r0
 800c668:	4611      	mov	r1, r2
 800c66a:	4620      	mov	r0, r4
 800c66c:	4690      	mov	r8, r2
 800c66e:	f7ff ffdb 	bl	800c628 <__mcmp>
 800c672:	1e05      	subs	r5, r0, #0
 800c674:	d110      	bne.n	800c698 <__mdiff+0x38>
 800c676:	4629      	mov	r1, r5
 800c678:	4630      	mov	r0, r6
 800c67a:	f7ff fd09 	bl	800c090 <_Balloc>
 800c67e:	b930      	cbnz	r0, 800c68e <__mdiff+0x2e>
 800c680:	4b3a      	ldr	r3, [pc, #232]	; (800c76c <__mdiff+0x10c>)
 800c682:	4602      	mov	r2, r0
 800c684:	f240 2132 	movw	r1, #562	; 0x232
 800c688:	4839      	ldr	r0, [pc, #228]	; (800c770 <__mdiff+0x110>)
 800c68a:	f000 ff79 	bl	800d580 <__assert_func>
 800c68e:	2301      	movs	r3, #1
 800c690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c698:	bfa4      	itt	ge
 800c69a:	4643      	movge	r3, r8
 800c69c:	46a0      	movge	r8, r4
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c6a4:	bfa6      	itte	ge
 800c6a6:	461c      	movge	r4, r3
 800c6a8:	2500      	movge	r5, #0
 800c6aa:	2501      	movlt	r5, #1
 800c6ac:	f7ff fcf0 	bl	800c090 <_Balloc>
 800c6b0:	b920      	cbnz	r0, 800c6bc <__mdiff+0x5c>
 800c6b2:	4b2e      	ldr	r3, [pc, #184]	; (800c76c <__mdiff+0x10c>)
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c6ba:	e7e5      	b.n	800c688 <__mdiff+0x28>
 800c6bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c6c0:	6926      	ldr	r6, [r4, #16]
 800c6c2:	60c5      	str	r5, [r0, #12]
 800c6c4:	f104 0914 	add.w	r9, r4, #20
 800c6c8:	f108 0514 	add.w	r5, r8, #20
 800c6cc:	f100 0e14 	add.w	lr, r0, #20
 800c6d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6d8:	f108 0210 	add.w	r2, r8, #16
 800c6dc:	46f2      	mov	sl, lr
 800c6de:	2100      	movs	r1, #0
 800c6e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6e8:	fa1f f883 	uxth.w	r8, r3
 800c6ec:	fa11 f18b 	uxtah	r1, r1, fp
 800c6f0:	0c1b      	lsrs	r3, r3, #16
 800c6f2:	eba1 0808 	sub.w	r8, r1, r8
 800c6f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6fe:	fa1f f888 	uxth.w	r8, r8
 800c702:	1419      	asrs	r1, r3, #16
 800c704:	454e      	cmp	r6, r9
 800c706:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c70a:	f84a 3b04 	str.w	r3, [sl], #4
 800c70e:	d8e7      	bhi.n	800c6e0 <__mdiff+0x80>
 800c710:	1b33      	subs	r3, r6, r4
 800c712:	3b15      	subs	r3, #21
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	3304      	adds	r3, #4
 800c71a:	3415      	adds	r4, #21
 800c71c:	42a6      	cmp	r6, r4
 800c71e:	bf38      	it	cc
 800c720:	2304      	movcc	r3, #4
 800c722:	441d      	add	r5, r3
 800c724:	4473      	add	r3, lr
 800c726:	469e      	mov	lr, r3
 800c728:	462e      	mov	r6, r5
 800c72a:	4566      	cmp	r6, ip
 800c72c:	d30e      	bcc.n	800c74c <__mdiff+0xec>
 800c72e:	f10c 0203 	add.w	r2, ip, #3
 800c732:	1b52      	subs	r2, r2, r5
 800c734:	f022 0203 	bic.w	r2, r2, #3
 800c738:	3d03      	subs	r5, #3
 800c73a:	45ac      	cmp	ip, r5
 800c73c:	bf38      	it	cc
 800c73e:	2200      	movcc	r2, #0
 800c740:	441a      	add	r2, r3
 800c742:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c746:	b17b      	cbz	r3, 800c768 <__mdiff+0x108>
 800c748:	6107      	str	r7, [r0, #16]
 800c74a:	e7a3      	b.n	800c694 <__mdiff+0x34>
 800c74c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c750:	fa11 f288 	uxtah	r2, r1, r8
 800c754:	1414      	asrs	r4, r2, #16
 800c756:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c75a:	b292      	uxth	r2, r2
 800c75c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c760:	f84e 2b04 	str.w	r2, [lr], #4
 800c764:	1421      	asrs	r1, r4, #16
 800c766:	e7e0      	b.n	800c72a <__mdiff+0xca>
 800c768:	3f01      	subs	r7, #1
 800c76a:	e7ea      	b.n	800c742 <__mdiff+0xe2>
 800c76c:	0800e5b8 	.word	0x0800e5b8
 800c770:	0800e6a8 	.word	0x0800e6a8

0800c774 <__ulp>:
 800c774:	b082      	sub	sp, #8
 800c776:	ed8d 0b00 	vstr	d0, [sp]
 800c77a:	9b01      	ldr	r3, [sp, #4]
 800c77c:	4912      	ldr	r1, [pc, #72]	; (800c7c8 <__ulp+0x54>)
 800c77e:	4019      	ands	r1, r3
 800c780:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c784:	2900      	cmp	r1, #0
 800c786:	dd05      	ble.n	800c794 <__ulp+0x20>
 800c788:	2200      	movs	r2, #0
 800c78a:	460b      	mov	r3, r1
 800c78c:	ec43 2b10 	vmov	d0, r2, r3
 800c790:	b002      	add	sp, #8
 800c792:	4770      	bx	lr
 800c794:	4249      	negs	r1, r1
 800c796:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c79a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c79e:	f04f 0200 	mov.w	r2, #0
 800c7a2:	f04f 0300 	mov.w	r3, #0
 800c7a6:	da04      	bge.n	800c7b2 <__ulp+0x3e>
 800c7a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c7ac:	fa41 f300 	asr.w	r3, r1, r0
 800c7b0:	e7ec      	b.n	800c78c <__ulp+0x18>
 800c7b2:	f1a0 0114 	sub.w	r1, r0, #20
 800c7b6:	291e      	cmp	r1, #30
 800c7b8:	bfda      	itte	le
 800c7ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c7be:	fa20 f101 	lsrle.w	r1, r0, r1
 800c7c2:	2101      	movgt	r1, #1
 800c7c4:	460a      	mov	r2, r1
 800c7c6:	e7e1      	b.n	800c78c <__ulp+0x18>
 800c7c8:	7ff00000 	.word	0x7ff00000

0800c7cc <__b2d>:
 800c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ce:	6905      	ldr	r5, [r0, #16]
 800c7d0:	f100 0714 	add.w	r7, r0, #20
 800c7d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c7d8:	1f2e      	subs	r6, r5, #4
 800c7da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f7ff fd48 	bl	800c274 <__hi0bits>
 800c7e4:	f1c0 0320 	rsb	r3, r0, #32
 800c7e8:	280a      	cmp	r0, #10
 800c7ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c868 <__b2d+0x9c>
 800c7ee:	600b      	str	r3, [r1, #0]
 800c7f0:	dc14      	bgt.n	800c81c <__b2d+0x50>
 800c7f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c7f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c7fa:	42b7      	cmp	r7, r6
 800c7fc:	ea41 030c 	orr.w	r3, r1, ip
 800c800:	bf34      	ite	cc
 800c802:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c806:	2100      	movcs	r1, #0
 800c808:	3015      	adds	r0, #21
 800c80a:	fa04 f000 	lsl.w	r0, r4, r0
 800c80e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c812:	ea40 0201 	orr.w	r2, r0, r1
 800c816:	ec43 2b10 	vmov	d0, r2, r3
 800c81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c81c:	42b7      	cmp	r7, r6
 800c81e:	bf3a      	itte	cc
 800c820:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c824:	f1a5 0608 	subcc.w	r6, r5, #8
 800c828:	2100      	movcs	r1, #0
 800c82a:	380b      	subs	r0, #11
 800c82c:	d017      	beq.n	800c85e <__b2d+0x92>
 800c82e:	f1c0 0c20 	rsb	ip, r0, #32
 800c832:	fa04 f500 	lsl.w	r5, r4, r0
 800c836:	42be      	cmp	r6, r7
 800c838:	fa21 f40c 	lsr.w	r4, r1, ip
 800c83c:	ea45 0504 	orr.w	r5, r5, r4
 800c840:	bf8c      	ite	hi
 800c842:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c846:	2400      	movls	r4, #0
 800c848:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c84c:	fa01 f000 	lsl.w	r0, r1, r0
 800c850:	fa24 f40c 	lsr.w	r4, r4, ip
 800c854:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c858:	ea40 0204 	orr.w	r2, r0, r4
 800c85c:	e7db      	b.n	800c816 <__b2d+0x4a>
 800c85e:	ea44 030c 	orr.w	r3, r4, ip
 800c862:	460a      	mov	r2, r1
 800c864:	e7d7      	b.n	800c816 <__b2d+0x4a>
 800c866:	bf00      	nop
 800c868:	3ff00000 	.word	0x3ff00000

0800c86c <__d2b>:
 800c86c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c870:	4689      	mov	r9, r1
 800c872:	2101      	movs	r1, #1
 800c874:	ec57 6b10 	vmov	r6, r7, d0
 800c878:	4690      	mov	r8, r2
 800c87a:	f7ff fc09 	bl	800c090 <_Balloc>
 800c87e:	4604      	mov	r4, r0
 800c880:	b930      	cbnz	r0, 800c890 <__d2b+0x24>
 800c882:	4602      	mov	r2, r0
 800c884:	4b25      	ldr	r3, [pc, #148]	; (800c91c <__d2b+0xb0>)
 800c886:	4826      	ldr	r0, [pc, #152]	; (800c920 <__d2b+0xb4>)
 800c888:	f240 310a 	movw	r1, #778	; 0x30a
 800c88c:	f000 fe78 	bl	800d580 <__assert_func>
 800c890:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c894:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c898:	bb35      	cbnz	r5, 800c8e8 <__d2b+0x7c>
 800c89a:	2e00      	cmp	r6, #0
 800c89c:	9301      	str	r3, [sp, #4]
 800c89e:	d028      	beq.n	800c8f2 <__d2b+0x86>
 800c8a0:	4668      	mov	r0, sp
 800c8a2:	9600      	str	r6, [sp, #0]
 800c8a4:	f7ff fd06 	bl	800c2b4 <__lo0bits>
 800c8a8:	9900      	ldr	r1, [sp, #0]
 800c8aa:	b300      	cbz	r0, 800c8ee <__d2b+0x82>
 800c8ac:	9a01      	ldr	r2, [sp, #4]
 800c8ae:	f1c0 0320 	rsb	r3, r0, #32
 800c8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	40c2      	lsrs	r2, r0
 800c8ba:	6163      	str	r3, [r4, #20]
 800c8bc:	9201      	str	r2, [sp, #4]
 800c8be:	9b01      	ldr	r3, [sp, #4]
 800c8c0:	61a3      	str	r3, [r4, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bf14      	ite	ne
 800c8c6:	2202      	movne	r2, #2
 800c8c8:	2201      	moveq	r2, #1
 800c8ca:	6122      	str	r2, [r4, #16]
 800c8cc:	b1d5      	cbz	r5, 800c904 <__d2b+0x98>
 800c8ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c8d2:	4405      	add	r5, r0
 800c8d4:	f8c9 5000 	str.w	r5, [r9]
 800c8d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8dc:	f8c8 0000 	str.w	r0, [r8]
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	b003      	add	sp, #12
 800c8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8ec:	e7d5      	b.n	800c89a <__d2b+0x2e>
 800c8ee:	6161      	str	r1, [r4, #20]
 800c8f0:	e7e5      	b.n	800c8be <__d2b+0x52>
 800c8f2:	a801      	add	r0, sp, #4
 800c8f4:	f7ff fcde 	bl	800c2b4 <__lo0bits>
 800c8f8:	9b01      	ldr	r3, [sp, #4]
 800c8fa:	6163      	str	r3, [r4, #20]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	6122      	str	r2, [r4, #16]
 800c900:	3020      	adds	r0, #32
 800c902:	e7e3      	b.n	800c8cc <__d2b+0x60>
 800c904:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c908:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c90c:	f8c9 0000 	str.w	r0, [r9]
 800c910:	6918      	ldr	r0, [r3, #16]
 800c912:	f7ff fcaf 	bl	800c274 <__hi0bits>
 800c916:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c91a:	e7df      	b.n	800c8dc <__d2b+0x70>
 800c91c:	0800e5b8 	.word	0x0800e5b8
 800c920:	0800e6a8 	.word	0x0800e6a8

0800c924 <__ratio>:
 800c924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c928:	4688      	mov	r8, r1
 800c92a:	4669      	mov	r1, sp
 800c92c:	4681      	mov	r9, r0
 800c92e:	f7ff ff4d 	bl	800c7cc <__b2d>
 800c932:	a901      	add	r1, sp, #4
 800c934:	4640      	mov	r0, r8
 800c936:	ec55 4b10 	vmov	r4, r5, d0
 800c93a:	f7ff ff47 	bl	800c7cc <__b2d>
 800c93e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c942:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c946:	eba3 0c02 	sub.w	ip, r3, r2
 800c94a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c94e:	1a9b      	subs	r3, r3, r2
 800c950:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c954:	ec51 0b10 	vmov	r0, r1, d0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfd6      	itet	le
 800c95c:	460a      	movle	r2, r1
 800c95e:	462a      	movgt	r2, r5
 800c960:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c964:	468b      	mov	fp, r1
 800c966:	462f      	mov	r7, r5
 800c968:	bfd4      	ite	le
 800c96a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c96e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c972:	4620      	mov	r0, r4
 800c974:	ee10 2a10 	vmov	r2, s0
 800c978:	465b      	mov	r3, fp
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 ff76 	bl	800086c <__aeabi_ddiv>
 800c980:	ec41 0b10 	vmov	d0, r0, r1
 800c984:	b003      	add	sp, #12
 800c986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c98a <__copybits>:
 800c98a:	3901      	subs	r1, #1
 800c98c:	b570      	push	{r4, r5, r6, lr}
 800c98e:	1149      	asrs	r1, r1, #5
 800c990:	6914      	ldr	r4, [r2, #16]
 800c992:	3101      	adds	r1, #1
 800c994:	f102 0314 	add.w	r3, r2, #20
 800c998:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c99c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9a0:	1f05      	subs	r5, r0, #4
 800c9a2:	42a3      	cmp	r3, r4
 800c9a4:	d30c      	bcc.n	800c9c0 <__copybits+0x36>
 800c9a6:	1aa3      	subs	r3, r4, r2
 800c9a8:	3b11      	subs	r3, #17
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	3211      	adds	r2, #17
 800c9b0:	42a2      	cmp	r2, r4
 800c9b2:	bf88      	it	hi
 800c9b4:	2300      	movhi	r3, #0
 800c9b6:	4418      	add	r0, r3
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4288      	cmp	r0, r1
 800c9bc:	d305      	bcc.n	800c9ca <__copybits+0x40>
 800c9be:	bd70      	pop	{r4, r5, r6, pc}
 800c9c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9c8:	e7eb      	b.n	800c9a2 <__copybits+0x18>
 800c9ca:	f840 3b04 	str.w	r3, [r0], #4
 800c9ce:	e7f4      	b.n	800c9ba <__copybits+0x30>

0800c9d0 <__any_on>:
 800c9d0:	f100 0214 	add.w	r2, r0, #20
 800c9d4:	6900      	ldr	r0, [r0, #16]
 800c9d6:	114b      	asrs	r3, r1, #5
 800c9d8:	4298      	cmp	r0, r3
 800c9da:	b510      	push	{r4, lr}
 800c9dc:	db11      	blt.n	800ca02 <__any_on+0x32>
 800c9de:	dd0a      	ble.n	800c9f6 <__any_on+0x26>
 800c9e0:	f011 011f 	ands.w	r1, r1, #31
 800c9e4:	d007      	beq.n	800c9f6 <__any_on+0x26>
 800c9e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9ea:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ee:	fa00 f101 	lsl.w	r1, r0, r1
 800c9f2:	428c      	cmp	r4, r1
 800c9f4:	d10b      	bne.n	800ca0e <__any_on+0x3e>
 800c9f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d803      	bhi.n	800ca06 <__any_on+0x36>
 800c9fe:	2000      	movs	r0, #0
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	4603      	mov	r3, r0
 800ca04:	e7f7      	b.n	800c9f6 <__any_on+0x26>
 800ca06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca0a:	2900      	cmp	r1, #0
 800ca0c:	d0f5      	beq.n	800c9fa <__any_on+0x2a>
 800ca0e:	2001      	movs	r0, #1
 800ca10:	e7f6      	b.n	800ca00 <__any_on+0x30>

0800ca12 <_calloc_r>:
 800ca12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca14:	fba1 2402 	umull	r2, r4, r1, r2
 800ca18:	b94c      	cbnz	r4, 800ca2e <_calloc_r+0x1c>
 800ca1a:	4611      	mov	r1, r2
 800ca1c:	9201      	str	r2, [sp, #4]
 800ca1e:	f7fb fdbf 	bl	80085a0 <_malloc_r>
 800ca22:	9a01      	ldr	r2, [sp, #4]
 800ca24:	4605      	mov	r5, r0
 800ca26:	b930      	cbnz	r0, 800ca36 <_calloc_r+0x24>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	b003      	add	sp, #12
 800ca2c:	bd30      	pop	{r4, r5, pc}
 800ca2e:	220c      	movs	r2, #12
 800ca30:	6002      	str	r2, [r0, #0]
 800ca32:	2500      	movs	r5, #0
 800ca34:	e7f8      	b.n	800ca28 <_calloc_r+0x16>
 800ca36:	4621      	mov	r1, r4
 800ca38:	f7fb fd3e 	bl	80084b8 <memset>
 800ca3c:	e7f4      	b.n	800ca28 <_calloc_r+0x16>

0800ca3e <__ssputs_r>:
 800ca3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca42:	688e      	ldr	r6, [r1, #8]
 800ca44:	429e      	cmp	r6, r3
 800ca46:	4682      	mov	sl, r0
 800ca48:	460c      	mov	r4, r1
 800ca4a:	4690      	mov	r8, r2
 800ca4c:	461f      	mov	r7, r3
 800ca4e:	d838      	bhi.n	800cac2 <__ssputs_r+0x84>
 800ca50:	898a      	ldrh	r2, [r1, #12]
 800ca52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca56:	d032      	beq.n	800cabe <__ssputs_r+0x80>
 800ca58:	6825      	ldr	r5, [r4, #0]
 800ca5a:	6909      	ldr	r1, [r1, #16]
 800ca5c:	eba5 0901 	sub.w	r9, r5, r1
 800ca60:	6965      	ldr	r5, [r4, #20]
 800ca62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca6a:	3301      	adds	r3, #1
 800ca6c:	444b      	add	r3, r9
 800ca6e:	106d      	asrs	r5, r5, #1
 800ca70:	429d      	cmp	r5, r3
 800ca72:	bf38      	it	cc
 800ca74:	461d      	movcc	r5, r3
 800ca76:	0553      	lsls	r3, r2, #21
 800ca78:	d531      	bpl.n	800cade <__ssputs_r+0xa0>
 800ca7a:	4629      	mov	r1, r5
 800ca7c:	f7fb fd90 	bl	80085a0 <_malloc_r>
 800ca80:	4606      	mov	r6, r0
 800ca82:	b950      	cbnz	r0, 800ca9a <__ssputs_r+0x5c>
 800ca84:	230c      	movs	r3, #12
 800ca86:	f8ca 3000 	str.w	r3, [sl]
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	f04f 30ff 	mov.w	r0, #4294967295
 800ca96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9a:	6921      	ldr	r1, [r4, #16]
 800ca9c:	464a      	mov	r2, r9
 800ca9e:	f7ff fadd 	bl	800c05c <memcpy>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800caa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caac:	81a3      	strh	r3, [r4, #12]
 800caae:	6126      	str	r6, [r4, #16]
 800cab0:	6165      	str	r5, [r4, #20]
 800cab2:	444e      	add	r6, r9
 800cab4:	eba5 0509 	sub.w	r5, r5, r9
 800cab8:	6026      	str	r6, [r4, #0]
 800caba:	60a5      	str	r5, [r4, #8]
 800cabc:	463e      	mov	r6, r7
 800cabe:	42be      	cmp	r6, r7
 800cac0:	d900      	bls.n	800cac4 <__ssputs_r+0x86>
 800cac2:	463e      	mov	r6, r7
 800cac4:	6820      	ldr	r0, [r4, #0]
 800cac6:	4632      	mov	r2, r6
 800cac8:	4641      	mov	r1, r8
 800caca:	f000 fd89 	bl	800d5e0 <memmove>
 800cace:	68a3      	ldr	r3, [r4, #8]
 800cad0:	1b9b      	subs	r3, r3, r6
 800cad2:	60a3      	str	r3, [r4, #8]
 800cad4:	6823      	ldr	r3, [r4, #0]
 800cad6:	4433      	add	r3, r6
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	2000      	movs	r0, #0
 800cadc:	e7db      	b.n	800ca96 <__ssputs_r+0x58>
 800cade:	462a      	mov	r2, r5
 800cae0:	f000 fd98 	bl	800d614 <_realloc_r>
 800cae4:	4606      	mov	r6, r0
 800cae6:	2800      	cmp	r0, #0
 800cae8:	d1e1      	bne.n	800caae <__ssputs_r+0x70>
 800caea:	6921      	ldr	r1, [r4, #16]
 800caec:	4650      	mov	r0, sl
 800caee:	f7fb fceb 	bl	80084c8 <_free_r>
 800caf2:	e7c7      	b.n	800ca84 <__ssputs_r+0x46>

0800caf4 <_svfiprintf_r>:
 800caf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	4698      	mov	r8, r3
 800cafa:	898b      	ldrh	r3, [r1, #12]
 800cafc:	061b      	lsls	r3, r3, #24
 800cafe:	b09d      	sub	sp, #116	; 0x74
 800cb00:	4607      	mov	r7, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	4614      	mov	r4, r2
 800cb06:	d50e      	bpl.n	800cb26 <_svfiprintf_r+0x32>
 800cb08:	690b      	ldr	r3, [r1, #16]
 800cb0a:	b963      	cbnz	r3, 800cb26 <_svfiprintf_r+0x32>
 800cb0c:	2140      	movs	r1, #64	; 0x40
 800cb0e:	f7fb fd47 	bl	80085a0 <_malloc_r>
 800cb12:	6028      	str	r0, [r5, #0]
 800cb14:	6128      	str	r0, [r5, #16]
 800cb16:	b920      	cbnz	r0, 800cb22 <_svfiprintf_r+0x2e>
 800cb18:	230c      	movs	r3, #12
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb20:	e0d1      	b.n	800ccc6 <_svfiprintf_r+0x1d2>
 800cb22:	2340      	movs	r3, #64	; 0x40
 800cb24:	616b      	str	r3, [r5, #20]
 800cb26:	2300      	movs	r3, #0
 800cb28:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2a:	2320      	movs	r3, #32
 800cb2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb30:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb34:	2330      	movs	r3, #48	; 0x30
 800cb36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cce0 <_svfiprintf_r+0x1ec>
 800cb3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb3e:	f04f 0901 	mov.w	r9, #1
 800cb42:	4623      	mov	r3, r4
 800cb44:	469a      	mov	sl, r3
 800cb46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb4a:	b10a      	cbz	r2, 800cb50 <_svfiprintf_r+0x5c>
 800cb4c:	2a25      	cmp	r2, #37	; 0x25
 800cb4e:	d1f9      	bne.n	800cb44 <_svfiprintf_r+0x50>
 800cb50:	ebba 0b04 	subs.w	fp, sl, r4
 800cb54:	d00b      	beq.n	800cb6e <_svfiprintf_r+0x7a>
 800cb56:	465b      	mov	r3, fp
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	4638      	mov	r0, r7
 800cb5e:	f7ff ff6e 	bl	800ca3e <__ssputs_r>
 800cb62:	3001      	adds	r0, #1
 800cb64:	f000 80aa 	beq.w	800ccbc <_svfiprintf_r+0x1c8>
 800cb68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb6a:	445a      	add	r2, fp
 800cb6c:	9209      	str	r2, [sp, #36]	; 0x24
 800cb6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 80a2 	beq.w	800ccbc <_svfiprintf_r+0x1c8>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb82:	f10a 0a01 	add.w	sl, sl, #1
 800cb86:	9304      	str	r3, [sp, #16]
 800cb88:	9307      	str	r3, [sp, #28]
 800cb8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb8e:	931a      	str	r3, [sp, #104]	; 0x68
 800cb90:	4654      	mov	r4, sl
 800cb92:	2205      	movs	r2, #5
 800cb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb98:	4851      	ldr	r0, [pc, #324]	; (800cce0 <_svfiprintf_r+0x1ec>)
 800cb9a:	f7f3 fb31 	bl	8000200 <memchr>
 800cb9e:	9a04      	ldr	r2, [sp, #16]
 800cba0:	b9d8      	cbnz	r0, 800cbda <_svfiprintf_r+0xe6>
 800cba2:	06d0      	lsls	r0, r2, #27
 800cba4:	bf44      	itt	mi
 800cba6:	2320      	movmi	r3, #32
 800cba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbac:	0711      	lsls	r1, r2, #28
 800cbae:	bf44      	itt	mi
 800cbb0:	232b      	movmi	r3, #43	; 0x2b
 800cbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cbba:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbc:	d015      	beq.n	800cbea <_svfiprintf_r+0xf6>
 800cbbe:	9a07      	ldr	r2, [sp, #28]
 800cbc0:	4654      	mov	r4, sl
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	f04f 0c0a 	mov.w	ip, #10
 800cbc8:	4621      	mov	r1, r4
 800cbca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbce:	3b30      	subs	r3, #48	; 0x30
 800cbd0:	2b09      	cmp	r3, #9
 800cbd2:	d94e      	bls.n	800cc72 <_svfiprintf_r+0x17e>
 800cbd4:	b1b0      	cbz	r0, 800cc04 <_svfiprintf_r+0x110>
 800cbd6:	9207      	str	r2, [sp, #28]
 800cbd8:	e014      	b.n	800cc04 <_svfiprintf_r+0x110>
 800cbda:	eba0 0308 	sub.w	r3, r0, r8
 800cbde:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	46a2      	mov	sl, r4
 800cbe8:	e7d2      	b.n	800cb90 <_svfiprintf_r+0x9c>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	1d19      	adds	r1, r3, #4
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	9103      	str	r1, [sp, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bfbb      	ittet	lt
 800cbf6:	425b      	neglt	r3, r3
 800cbf8:	f042 0202 	orrlt.w	r2, r2, #2
 800cbfc:	9307      	strge	r3, [sp, #28]
 800cbfe:	9307      	strlt	r3, [sp, #28]
 800cc00:	bfb8      	it	lt
 800cc02:	9204      	strlt	r2, [sp, #16]
 800cc04:	7823      	ldrb	r3, [r4, #0]
 800cc06:	2b2e      	cmp	r3, #46	; 0x2e
 800cc08:	d10c      	bne.n	800cc24 <_svfiprintf_r+0x130>
 800cc0a:	7863      	ldrb	r3, [r4, #1]
 800cc0c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc0e:	d135      	bne.n	800cc7c <_svfiprintf_r+0x188>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	9203      	str	r2, [sp, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	bfb8      	it	lt
 800cc1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc20:	3402      	adds	r4, #2
 800cc22:	9305      	str	r3, [sp, #20]
 800cc24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ccf0 <_svfiprintf_r+0x1fc>
 800cc28:	7821      	ldrb	r1, [r4, #0]
 800cc2a:	2203      	movs	r2, #3
 800cc2c:	4650      	mov	r0, sl
 800cc2e:	f7f3 fae7 	bl	8000200 <memchr>
 800cc32:	b140      	cbz	r0, 800cc46 <_svfiprintf_r+0x152>
 800cc34:	2340      	movs	r3, #64	; 0x40
 800cc36:	eba0 000a 	sub.w	r0, r0, sl
 800cc3a:	fa03 f000 	lsl.w	r0, r3, r0
 800cc3e:	9b04      	ldr	r3, [sp, #16]
 800cc40:	4303      	orrs	r3, r0
 800cc42:	3401      	adds	r4, #1
 800cc44:	9304      	str	r3, [sp, #16]
 800cc46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4a:	4826      	ldr	r0, [pc, #152]	; (800cce4 <_svfiprintf_r+0x1f0>)
 800cc4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc50:	2206      	movs	r2, #6
 800cc52:	f7f3 fad5 	bl	8000200 <memchr>
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d038      	beq.n	800cccc <_svfiprintf_r+0x1d8>
 800cc5a:	4b23      	ldr	r3, [pc, #140]	; (800cce8 <_svfiprintf_r+0x1f4>)
 800cc5c:	bb1b      	cbnz	r3, 800cca6 <_svfiprintf_r+0x1b2>
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	3307      	adds	r3, #7
 800cc62:	f023 0307 	bic.w	r3, r3, #7
 800cc66:	3308      	adds	r3, #8
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6c:	4433      	add	r3, r6
 800cc6e:	9309      	str	r3, [sp, #36]	; 0x24
 800cc70:	e767      	b.n	800cb42 <_svfiprintf_r+0x4e>
 800cc72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc76:	460c      	mov	r4, r1
 800cc78:	2001      	movs	r0, #1
 800cc7a:	e7a5      	b.n	800cbc8 <_svfiprintf_r+0xd4>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	3401      	adds	r4, #1
 800cc80:	9305      	str	r3, [sp, #20]
 800cc82:	4619      	mov	r1, r3
 800cc84:	f04f 0c0a 	mov.w	ip, #10
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc8e:	3a30      	subs	r2, #48	; 0x30
 800cc90:	2a09      	cmp	r2, #9
 800cc92:	d903      	bls.n	800cc9c <_svfiprintf_r+0x1a8>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0c5      	beq.n	800cc24 <_svfiprintf_r+0x130>
 800cc98:	9105      	str	r1, [sp, #20]
 800cc9a:	e7c3      	b.n	800cc24 <_svfiprintf_r+0x130>
 800cc9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca0:	4604      	mov	r4, r0
 800cca2:	2301      	movs	r3, #1
 800cca4:	e7f0      	b.n	800cc88 <_svfiprintf_r+0x194>
 800cca6:	ab03      	add	r3, sp, #12
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	462a      	mov	r2, r5
 800ccac:	4b0f      	ldr	r3, [pc, #60]	; (800ccec <_svfiprintf_r+0x1f8>)
 800ccae:	a904      	add	r1, sp, #16
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f7fb fd89 	bl	80087c8 <_printf_float>
 800ccb6:	1c42      	adds	r2, r0, #1
 800ccb8:	4606      	mov	r6, r0
 800ccba:	d1d6      	bne.n	800cc6a <_svfiprintf_r+0x176>
 800ccbc:	89ab      	ldrh	r3, [r5, #12]
 800ccbe:	065b      	lsls	r3, r3, #25
 800ccc0:	f53f af2c 	bmi.w	800cb1c <_svfiprintf_r+0x28>
 800ccc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccc6:	b01d      	add	sp, #116	; 0x74
 800ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cccc:	ab03      	add	r3, sp, #12
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	462a      	mov	r2, r5
 800ccd2:	4b06      	ldr	r3, [pc, #24]	; (800ccec <_svfiprintf_r+0x1f8>)
 800ccd4:	a904      	add	r1, sp, #16
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	f7fc f81a 	bl	8008d10 <_printf_i>
 800ccdc:	e7eb      	b.n	800ccb6 <_svfiprintf_r+0x1c2>
 800ccde:	bf00      	nop
 800cce0:	0800e804 	.word	0x0800e804
 800cce4:	0800e80e 	.word	0x0800e80e
 800cce8:	080087c9 	.word	0x080087c9
 800ccec:	0800ca3f 	.word	0x0800ca3f
 800ccf0:	0800e80a 	.word	0x0800e80a

0800ccf4 <_sungetc_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	1c4b      	adds	r3, r1, #1
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	d103      	bne.n	800cd04 <_sungetc_r+0x10>
 800ccfc:	f04f 35ff 	mov.w	r5, #4294967295
 800cd00:	4628      	mov	r0, r5
 800cd02:	bd38      	pop	{r3, r4, r5, pc}
 800cd04:	8993      	ldrh	r3, [r2, #12]
 800cd06:	f023 0320 	bic.w	r3, r3, #32
 800cd0a:	8193      	strh	r3, [r2, #12]
 800cd0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd0e:	6852      	ldr	r2, [r2, #4]
 800cd10:	b2cd      	uxtb	r5, r1
 800cd12:	b18b      	cbz	r3, 800cd38 <_sungetc_r+0x44>
 800cd14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cd16:	4293      	cmp	r3, r2
 800cd18:	dd08      	ble.n	800cd2c <_sungetc_r+0x38>
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	1e5a      	subs	r2, r3, #1
 800cd1e:	6022      	str	r2, [r4, #0]
 800cd20:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cd24:	6863      	ldr	r3, [r4, #4]
 800cd26:	3301      	adds	r3, #1
 800cd28:	6063      	str	r3, [r4, #4]
 800cd2a:	e7e9      	b.n	800cd00 <_sungetc_r+0xc>
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	f000 fbdf 	bl	800d4f0 <__submore>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d0f1      	beq.n	800cd1a <_sungetc_r+0x26>
 800cd36:	e7e1      	b.n	800ccfc <_sungetc_r+0x8>
 800cd38:	6921      	ldr	r1, [r4, #16]
 800cd3a:	6823      	ldr	r3, [r4, #0]
 800cd3c:	b151      	cbz	r1, 800cd54 <_sungetc_r+0x60>
 800cd3e:	4299      	cmp	r1, r3
 800cd40:	d208      	bcs.n	800cd54 <_sungetc_r+0x60>
 800cd42:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cd46:	42a9      	cmp	r1, r5
 800cd48:	d104      	bne.n	800cd54 <_sungetc_r+0x60>
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	3201      	adds	r2, #1
 800cd4e:	6023      	str	r3, [r4, #0]
 800cd50:	6062      	str	r2, [r4, #4]
 800cd52:	e7d5      	b.n	800cd00 <_sungetc_r+0xc>
 800cd54:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cd58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd5c:	6363      	str	r3, [r4, #52]	; 0x34
 800cd5e:	2303      	movs	r3, #3
 800cd60:	63a3      	str	r3, [r4, #56]	; 0x38
 800cd62:	4623      	mov	r3, r4
 800cd64:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cd68:	6023      	str	r3, [r4, #0]
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e7dc      	b.n	800cd28 <_sungetc_r+0x34>

0800cd6e <__ssrefill_r>:
 800cd6e:	b510      	push	{r4, lr}
 800cd70:	460c      	mov	r4, r1
 800cd72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cd74:	b169      	cbz	r1, 800cd92 <__ssrefill_r+0x24>
 800cd76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd7a:	4299      	cmp	r1, r3
 800cd7c:	d001      	beq.n	800cd82 <__ssrefill_r+0x14>
 800cd7e:	f7fb fba3 	bl	80084c8 <_free_r>
 800cd82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd84:	6063      	str	r3, [r4, #4]
 800cd86:	2000      	movs	r0, #0
 800cd88:	6360      	str	r0, [r4, #52]	; 0x34
 800cd8a:	b113      	cbz	r3, 800cd92 <__ssrefill_r+0x24>
 800cd8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	bd10      	pop	{r4, pc}
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	2300      	movs	r3, #0
 800cd98:	6063      	str	r3, [r4, #4]
 800cd9a:	89a3      	ldrh	r3, [r4, #12]
 800cd9c:	f043 0320 	orr.w	r3, r3, #32
 800cda0:	81a3      	strh	r3, [r4, #12]
 800cda2:	f04f 30ff 	mov.w	r0, #4294967295
 800cda6:	e7f3      	b.n	800cd90 <__ssrefill_r+0x22>

0800cda8 <__ssvfiscanf_r>:
 800cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cdb8:	49a6      	ldr	r1, [pc, #664]	; (800d054 <__ssvfiscanf_r+0x2ac>)
 800cdba:	91a0      	str	r1, [sp, #640]	; 0x280
 800cdbc:	f10d 0804 	add.w	r8, sp, #4
 800cdc0:	49a5      	ldr	r1, [pc, #660]	; (800d058 <__ssvfiscanf_r+0x2b0>)
 800cdc2:	4fa6      	ldr	r7, [pc, #664]	; (800d05c <__ssvfiscanf_r+0x2b4>)
 800cdc4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d060 <__ssvfiscanf_r+0x2b8>
 800cdc8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cdcc:	4606      	mov	r6, r0
 800cdce:	91a1      	str	r1, [sp, #644]	; 0x284
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	7813      	ldrb	r3, [r2, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 815a 	beq.w	800d08e <__ssvfiscanf_r+0x2e6>
 800cdda:	5dd9      	ldrb	r1, [r3, r7]
 800cddc:	f011 0108 	ands.w	r1, r1, #8
 800cde0:	f102 0501 	add.w	r5, r2, #1
 800cde4:	d019      	beq.n	800ce1a <__ssvfiscanf_r+0x72>
 800cde6:	6863      	ldr	r3, [r4, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	dd0f      	ble.n	800ce0c <__ssvfiscanf_r+0x64>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	5cba      	ldrb	r2, [r7, r2]
 800cdf2:	0712      	lsls	r2, r2, #28
 800cdf4:	d401      	bmi.n	800cdfa <__ssvfiscanf_r+0x52>
 800cdf6:	462a      	mov	r2, r5
 800cdf8:	e7eb      	b.n	800cdd2 <__ssvfiscanf_r+0x2a>
 800cdfa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cdfc:	3201      	adds	r2, #1
 800cdfe:	9245      	str	r2, [sp, #276]	; 0x114
 800ce00:	6862      	ldr	r2, [r4, #4]
 800ce02:	3301      	adds	r3, #1
 800ce04:	3a01      	subs	r2, #1
 800ce06:	6062      	str	r2, [r4, #4]
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	e7ec      	b.n	800cde6 <__ssvfiscanf_r+0x3e>
 800ce0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce0e:	4621      	mov	r1, r4
 800ce10:	4630      	mov	r0, r6
 800ce12:	4798      	blx	r3
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d0e9      	beq.n	800cdec <__ssvfiscanf_r+0x44>
 800ce18:	e7ed      	b.n	800cdf6 <__ssvfiscanf_r+0x4e>
 800ce1a:	2b25      	cmp	r3, #37	; 0x25
 800ce1c:	d012      	beq.n	800ce44 <__ssvfiscanf_r+0x9c>
 800ce1e:	469a      	mov	sl, r3
 800ce20:	6863      	ldr	r3, [r4, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f340 8091 	ble.w	800cf4a <__ssvfiscanf_r+0x1a2>
 800ce28:	6822      	ldr	r2, [r4, #0]
 800ce2a:	7813      	ldrb	r3, [r2, #0]
 800ce2c:	4553      	cmp	r3, sl
 800ce2e:	f040 812e 	bne.w	800d08e <__ssvfiscanf_r+0x2e6>
 800ce32:	6863      	ldr	r3, [r4, #4]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ce3a:	3201      	adds	r2, #1
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	6022      	str	r2, [r4, #0]
 800ce40:	9345      	str	r3, [sp, #276]	; 0x114
 800ce42:	e7d8      	b.n	800cdf6 <__ssvfiscanf_r+0x4e>
 800ce44:	9141      	str	r1, [sp, #260]	; 0x104
 800ce46:	9143      	str	r1, [sp, #268]	; 0x10c
 800ce48:	7853      	ldrb	r3, [r2, #1]
 800ce4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4c:	bf02      	ittt	eq
 800ce4e:	2310      	moveq	r3, #16
 800ce50:	1c95      	addeq	r5, r2, #2
 800ce52:	9341      	streq	r3, [sp, #260]	; 0x104
 800ce54:	220a      	movs	r2, #10
 800ce56:	46aa      	mov	sl, r5
 800ce58:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ce5c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d91d      	bls.n	800cea0 <__ssvfiscanf_r+0xf8>
 800ce64:	487e      	ldr	r0, [pc, #504]	; (800d060 <__ssvfiscanf_r+0x2b8>)
 800ce66:	2203      	movs	r2, #3
 800ce68:	f7f3 f9ca 	bl	8000200 <memchr>
 800ce6c:	b140      	cbz	r0, 800ce80 <__ssvfiscanf_r+0xd8>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	eba0 0009 	sub.w	r0, r0, r9
 800ce74:	fa03 f000 	lsl.w	r0, r3, r0
 800ce78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce7a:	4318      	orrs	r0, r3
 800ce7c:	9041      	str	r0, [sp, #260]	; 0x104
 800ce7e:	4655      	mov	r5, sl
 800ce80:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce84:	2b78      	cmp	r3, #120	; 0x78
 800ce86:	d806      	bhi.n	800ce96 <__ssvfiscanf_r+0xee>
 800ce88:	2b57      	cmp	r3, #87	; 0x57
 800ce8a:	d810      	bhi.n	800ceae <__ssvfiscanf_r+0x106>
 800ce8c:	2b25      	cmp	r3, #37	; 0x25
 800ce8e:	d0c6      	beq.n	800ce1e <__ssvfiscanf_r+0x76>
 800ce90:	d856      	bhi.n	800cf40 <__ssvfiscanf_r+0x198>
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d064      	beq.n	800cf60 <__ssvfiscanf_r+0x1b8>
 800ce96:	2303      	movs	r3, #3
 800ce98:	9347      	str	r3, [sp, #284]	; 0x11c
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	9342      	str	r3, [sp, #264]	; 0x108
 800ce9e:	e071      	b.n	800cf84 <__ssvfiscanf_r+0x1dc>
 800cea0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cea2:	fb02 1103 	mla	r1, r2, r3, r1
 800cea6:	3930      	subs	r1, #48	; 0x30
 800cea8:	9143      	str	r1, [sp, #268]	; 0x10c
 800ceaa:	4655      	mov	r5, sl
 800ceac:	e7d3      	b.n	800ce56 <__ssvfiscanf_r+0xae>
 800ceae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ceb2:	2a20      	cmp	r2, #32
 800ceb4:	d8ef      	bhi.n	800ce96 <__ssvfiscanf_r+0xee>
 800ceb6:	a101      	add	r1, pc, #4	; (adr r1, 800cebc <__ssvfiscanf_r+0x114>)
 800ceb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cebc:	0800cf6f 	.word	0x0800cf6f
 800cec0:	0800ce97 	.word	0x0800ce97
 800cec4:	0800ce97 	.word	0x0800ce97
 800cec8:	0800cfcd 	.word	0x0800cfcd
 800cecc:	0800ce97 	.word	0x0800ce97
 800ced0:	0800ce97 	.word	0x0800ce97
 800ced4:	0800ce97 	.word	0x0800ce97
 800ced8:	0800ce97 	.word	0x0800ce97
 800cedc:	0800ce97 	.word	0x0800ce97
 800cee0:	0800ce97 	.word	0x0800ce97
 800cee4:	0800ce97 	.word	0x0800ce97
 800cee8:	0800cfe3 	.word	0x0800cfe3
 800ceec:	0800cfb9 	.word	0x0800cfb9
 800cef0:	0800cf47 	.word	0x0800cf47
 800cef4:	0800cf47 	.word	0x0800cf47
 800cef8:	0800cf47 	.word	0x0800cf47
 800cefc:	0800ce97 	.word	0x0800ce97
 800cf00:	0800cfbd 	.word	0x0800cfbd
 800cf04:	0800ce97 	.word	0x0800ce97
 800cf08:	0800ce97 	.word	0x0800ce97
 800cf0c:	0800ce97 	.word	0x0800ce97
 800cf10:	0800ce97 	.word	0x0800ce97
 800cf14:	0800cff3 	.word	0x0800cff3
 800cf18:	0800cfc5 	.word	0x0800cfc5
 800cf1c:	0800cf67 	.word	0x0800cf67
 800cf20:	0800ce97 	.word	0x0800ce97
 800cf24:	0800ce97 	.word	0x0800ce97
 800cf28:	0800cfef 	.word	0x0800cfef
 800cf2c:	0800ce97 	.word	0x0800ce97
 800cf30:	0800cfb9 	.word	0x0800cfb9
 800cf34:	0800ce97 	.word	0x0800ce97
 800cf38:	0800ce97 	.word	0x0800ce97
 800cf3c:	0800cf6f 	.word	0x0800cf6f
 800cf40:	3b45      	subs	r3, #69	; 0x45
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	d8a7      	bhi.n	800ce96 <__ssvfiscanf_r+0xee>
 800cf46:	2305      	movs	r3, #5
 800cf48:	e01b      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cf4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cf4c:	4621      	mov	r1, r4
 800cf4e:	4630      	mov	r0, r6
 800cf50:	4798      	blx	r3
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f43f af68 	beq.w	800ce28 <__ssvfiscanf_r+0x80>
 800cf58:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	f040 808d 	bne.w	800d07a <__ssvfiscanf_r+0x2d2>
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
 800cf64:	e08f      	b.n	800d086 <__ssvfiscanf_r+0x2de>
 800cf66:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cf68:	f042 0220 	orr.w	r2, r2, #32
 800cf6c:	9241      	str	r2, [sp, #260]	; 0x104
 800cf6e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cf70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf74:	9241      	str	r2, [sp, #260]	; 0x104
 800cf76:	2210      	movs	r2, #16
 800cf78:	2b6f      	cmp	r3, #111	; 0x6f
 800cf7a:	9242      	str	r2, [sp, #264]	; 0x108
 800cf7c:	bf34      	ite	cc
 800cf7e:	2303      	movcc	r3, #3
 800cf80:	2304      	movcs	r3, #4
 800cf82:	9347      	str	r3, [sp, #284]	; 0x11c
 800cf84:	6863      	ldr	r3, [r4, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd42      	ble.n	800d010 <__ssvfiscanf_r+0x268>
 800cf8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cf8c:	0659      	lsls	r1, r3, #25
 800cf8e:	d404      	bmi.n	800cf9a <__ssvfiscanf_r+0x1f2>
 800cf90:	6823      	ldr	r3, [r4, #0]
 800cf92:	781a      	ldrb	r2, [r3, #0]
 800cf94:	5cba      	ldrb	r2, [r7, r2]
 800cf96:	0712      	lsls	r2, r2, #28
 800cf98:	d441      	bmi.n	800d01e <__ssvfiscanf_r+0x276>
 800cf9a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	dc50      	bgt.n	800d042 <__ssvfiscanf_r+0x29a>
 800cfa0:	466b      	mov	r3, sp
 800cfa2:	4622      	mov	r2, r4
 800cfa4:	a941      	add	r1, sp, #260	; 0x104
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	f000 f876 	bl	800d098 <_scanf_chars>
 800cfac:	2801      	cmp	r0, #1
 800cfae:	d06e      	beq.n	800d08e <__ssvfiscanf_r+0x2e6>
 800cfb0:	2802      	cmp	r0, #2
 800cfb2:	f47f af20 	bne.w	800cdf6 <__ssvfiscanf_r+0x4e>
 800cfb6:	e7cf      	b.n	800cf58 <__ssvfiscanf_r+0x1b0>
 800cfb8:	220a      	movs	r2, #10
 800cfba:	e7dd      	b.n	800cf78 <__ssvfiscanf_r+0x1d0>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9342      	str	r3, [sp, #264]	; 0x108
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e7de      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cfc4:	2308      	movs	r3, #8
 800cfc6:	9342      	str	r3, [sp, #264]	; 0x108
 800cfc8:	2304      	movs	r3, #4
 800cfca:	e7da      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4640      	mov	r0, r8
 800cfd0:	f000 f9ce 	bl	800d370 <__sccl>
 800cfd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfda:	9341      	str	r3, [sp, #260]	; 0x104
 800cfdc:	4605      	mov	r5, r0
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e7cf      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cfe2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe8:	9341      	str	r3, [sp, #260]	; 0x104
 800cfea:	2300      	movs	r3, #0
 800cfec:	e7c9      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cfee:	2302      	movs	r3, #2
 800cff0:	e7c7      	b.n	800cf82 <__ssvfiscanf_r+0x1da>
 800cff2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800cff4:	06c3      	lsls	r3, r0, #27
 800cff6:	f53f aefe 	bmi.w	800cdf6 <__ssvfiscanf_r+0x4e>
 800cffa:	9b00      	ldr	r3, [sp, #0]
 800cffc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cffe:	1d19      	adds	r1, r3, #4
 800d000:	9100      	str	r1, [sp, #0]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f010 0f01 	tst.w	r0, #1
 800d008:	bf14      	ite	ne
 800d00a:	801a      	strhne	r2, [r3, #0]
 800d00c:	601a      	streq	r2, [r3, #0]
 800d00e:	e6f2      	b.n	800cdf6 <__ssvfiscanf_r+0x4e>
 800d010:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d012:	4621      	mov	r1, r4
 800d014:	4630      	mov	r0, r6
 800d016:	4798      	blx	r3
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0b6      	beq.n	800cf8a <__ssvfiscanf_r+0x1e2>
 800d01c:	e79c      	b.n	800cf58 <__ssvfiscanf_r+0x1b0>
 800d01e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d020:	3201      	adds	r2, #1
 800d022:	9245      	str	r2, [sp, #276]	; 0x114
 800d024:	6862      	ldr	r2, [r4, #4]
 800d026:	3a01      	subs	r2, #1
 800d028:	2a00      	cmp	r2, #0
 800d02a:	6062      	str	r2, [r4, #4]
 800d02c:	dd02      	ble.n	800d034 <__ssvfiscanf_r+0x28c>
 800d02e:	3301      	adds	r3, #1
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	e7ad      	b.n	800cf90 <__ssvfiscanf_r+0x1e8>
 800d034:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d036:	4621      	mov	r1, r4
 800d038:	4630      	mov	r0, r6
 800d03a:	4798      	blx	r3
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d0a7      	beq.n	800cf90 <__ssvfiscanf_r+0x1e8>
 800d040:	e78a      	b.n	800cf58 <__ssvfiscanf_r+0x1b0>
 800d042:	2b04      	cmp	r3, #4
 800d044:	dc0e      	bgt.n	800d064 <__ssvfiscanf_r+0x2bc>
 800d046:	466b      	mov	r3, sp
 800d048:	4622      	mov	r2, r4
 800d04a:	a941      	add	r1, sp, #260	; 0x104
 800d04c:	4630      	mov	r0, r6
 800d04e:	f000 f87d 	bl	800d14c <_scanf_i>
 800d052:	e7ab      	b.n	800cfac <__ssvfiscanf_r+0x204>
 800d054:	0800ccf5 	.word	0x0800ccf5
 800d058:	0800cd6f 	.word	0x0800cd6f
 800d05c:	0800e439 	.word	0x0800e439
 800d060:	0800e80a 	.word	0x0800e80a
 800d064:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <__ssvfiscanf_r+0x2ec>)
 800d066:	2b00      	cmp	r3, #0
 800d068:	f43f aec5 	beq.w	800cdf6 <__ssvfiscanf_r+0x4e>
 800d06c:	466b      	mov	r3, sp
 800d06e:	4622      	mov	r2, r4
 800d070:	a941      	add	r1, sp, #260	; 0x104
 800d072:	4630      	mov	r0, r6
 800d074:	f7fb ff72 	bl	8008f5c <_scanf_float>
 800d078:	e798      	b.n	800cfac <__ssvfiscanf_r+0x204>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d080:	bf18      	it	ne
 800d082:	f04f 30ff 	movne.w	r0, #4294967295
 800d086:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d090:	e7f9      	b.n	800d086 <__ssvfiscanf_r+0x2de>
 800d092:	bf00      	nop
 800d094:	08008f5d 	.word	0x08008f5d

0800d098 <_scanf_chars>:
 800d098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d09c:	4615      	mov	r5, r2
 800d09e:	688a      	ldr	r2, [r1, #8]
 800d0a0:	4680      	mov	r8, r0
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	b932      	cbnz	r2, 800d0b4 <_scanf_chars+0x1c>
 800d0a6:	698a      	ldr	r2, [r1, #24]
 800d0a8:	2a00      	cmp	r2, #0
 800d0aa:	bf0c      	ite	eq
 800d0ac:	2201      	moveq	r2, #1
 800d0ae:	f04f 32ff 	movne.w	r2, #4294967295
 800d0b2:	608a      	str	r2, [r1, #8]
 800d0b4:	6822      	ldr	r2, [r4, #0]
 800d0b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d148 <_scanf_chars+0xb0>
 800d0ba:	06d1      	lsls	r1, r2, #27
 800d0bc:	bf5f      	itttt	pl
 800d0be:	681a      	ldrpl	r2, [r3, #0]
 800d0c0:	1d11      	addpl	r1, r2, #4
 800d0c2:	6019      	strpl	r1, [r3, #0]
 800d0c4:	6816      	ldrpl	r6, [r2, #0]
 800d0c6:	2700      	movs	r7, #0
 800d0c8:	69a0      	ldr	r0, [r4, #24]
 800d0ca:	b188      	cbz	r0, 800d0f0 <_scanf_chars+0x58>
 800d0cc:	2801      	cmp	r0, #1
 800d0ce:	d107      	bne.n	800d0e0 <_scanf_chars+0x48>
 800d0d0:	682a      	ldr	r2, [r5, #0]
 800d0d2:	7811      	ldrb	r1, [r2, #0]
 800d0d4:	6962      	ldr	r2, [r4, #20]
 800d0d6:	5c52      	ldrb	r2, [r2, r1]
 800d0d8:	b952      	cbnz	r2, 800d0f0 <_scanf_chars+0x58>
 800d0da:	2f00      	cmp	r7, #0
 800d0dc:	d031      	beq.n	800d142 <_scanf_chars+0xaa>
 800d0de:	e022      	b.n	800d126 <_scanf_chars+0x8e>
 800d0e0:	2802      	cmp	r0, #2
 800d0e2:	d120      	bne.n	800d126 <_scanf_chars+0x8e>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d0ec:	071b      	lsls	r3, r3, #28
 800d0ee:	d41a      	bmi.n	800d126 <_scanf_chars+0x8e>
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	06da      	lsls	r2, r3, #27
 800d0f4:	bf5e      	ittt	pl
 800d0f6:	682b      	ldrpl	r3, [r5, #0]
 800d0f8:	781b      	ldrbpl	r3, [r3, #0]
 800d0fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d0fe:	682a      	ldr	r2, [r5, #0]
 800d100:	686b      	ldr	r3, [r5, #4]
 800d102:	3201      	adds	r2, #1
 800d104:	602a      	str	r2, [r5, #0]
 800d106:	68a2      	ldr	r2, [r4, #8]
 800d108:	3b01      	subs	r3, #1
 800d10a:	3a01      	subs	r2, #1
 800d10c:	606b      	str	r3, [r5, #4]
 800d10e:	3701      	adds	r7, #1
 800d110:	60a2      	str	r2, [r4, #8]
 800d112:	b142      	cbz	r2, 800d126 <_scanf_chars+0x8e>
 800d114:	2b00      	cmp	r3, #0
 800d116:	dcd7      	bgt.n	800d0c8 <_scanf_chars+0x30>
 800d118:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d11c:	4629      	mov	r1, r5
 800d11e:	4640      	mov	r0, r8
 800d120:	4798      	blx	r3
 800d122:	2800      	cmp	r0, #0
 800d124:	d0d0      	beq.n	800d0c8 <_scanf_chars+0x30>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	f013 0310 	ands.w	r3, r3, #16
 800d12c:	d105      	bne.n	800d13a <_scanf_chars+0xa2>
 800d12e:	68e2      	ldr	r2, [r4, #12]
 800d130:	3201      	adds	r2, #1
 800d132:	60e2      	str	r2, [r4, #12]
 800d134:	69a2      	ldr	r2, [r4, #24]
 800d136:	b102      	cbz	r2, 800d13a <_scanf_chars+0xa2>
 800d138:	7033      	strb	r3, [r6, #0]
 800d13a:	6923      	ldr	r3, [r4, #16]
 800d13c:	443b      	add	r3, r7
 800d13e:	6123      	str	r3, [r4, #16]
 800d140:	2000      	movs	r0, #0
 800d142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d146:	bf00      	nop
 800d148:	0800e439 	.word	0x0800e439

0800d14c <_scanf_i>:
 800d14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d150:	4698      	mov	r8, r3
 800d152:	4b76      	ldr	r3, [pc, #472]	; (800d32c <_scanf_i+0x1e0>)
 800d154:	460c      	mov	r4, r1
 800d156:	4682      	mov	sl, r0
 800d158:	4616      	mov	r6, r2
 800d15a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d15e:	b087      	sub	sp, #28
 800d160:	ab03      	add	r3, sp, #12
 800d162:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d166:	4b72      	ldr	r3, [pc, #456]	; (800d330 <_scanf_i+0x1e4>)
 800d168:	69a1      	ldr	r1, [r4, #24]
 800d16a:	4a72      	ldr	r2, [pc, #456]	; (800d334 <_scanf_i+0x1e8>)
 800d16c:	2903      	cmp	r1, #3
 800d16e:	bf18      	it	ne
 800d170:	461a      	movne	r2, r3
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	9201      	str	r2, [sp, #4]
 800d176:	1e5a      	subs	r2, r3, #1
 800d178:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d17c:	bf88      	it	hi
 800d17e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d182:	4627      	mov	r7, r4
 800d184:	bf82      	ittt	hi
 800d186:	eb03 0905 	addhi.w	r9, r3, r5
 800d18a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d18e:	60a3      	strhi	r3, [r4, #8]
 800d190:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d194:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d198:	bf98      	it	ls
 800d19a:	f04f 0900 	movls.w	r9, #0
 800d19e:	6023      	str	r3, [r4, #0]
 800d1a0:	463d      	mov	r5, r7
 800d1a2:	f04f 0b00 	mov.w	fp, #0
 800d1a6:	6831      	ldr	r1, [r6, #0]
 800d1a8:	ab03      	add	r3, sp, #12
 800d1aa:	7809      	ldrb	r1, [r1, #0]
 800d1ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	f7f3 f825 	bl	8000200 <memchr>
 800d1b6:	b328      	cbz	r0, 800d204 <_scanf_i+0xb8>
 800d1b8:	f1bb 0f01 	cmp.w	fp, #1
 800d1bc:	d159      	bne.n	800d272 <_scanf_i+0x126>
 800d1be:	6862      	ldr	r2, [r4, #4]
 800d1c0:	b92a      	cbnz	r2, 800d1ce <_scanf_i+0x82>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	2308      	movs	r3, #8
 800d1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1ca:	6063      	str	r3, [r4, #4]
 800d1cc:	6022      	str	r2, [r4, #0]
 800d1ce:	6822      	ldr	r2, [r4, #0]
 800d1d0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d1d4:	6022      	str	r2, [r4, #0]
 800d1d6:	68a2      	ldr	r2, [r4, #8]
 800d1d8:	1e51      	subs	r1, r2, #1
 800d1da:	60a1      	str	r1, [r4, #8]
 800d1dc:	b192      	cbz	r2, 800d204 <_scanf_i+0xb8>
 800d1de:	6832      	ldr	r2, [r6, #0]
 800d1e0:	1c51      	adds	r1, r2, #1
 800d1e2:	6031      	str	r1, [r6, #0]
 800d1e4:	7812      	ldrb	r2, [r2, #0]
 800d1e6:	f805 2b01 	strb.w	r2, [r5], #1
 800d1ea:	6872      	ldr	r2, [r6, #4]
 800d1ec:	3a01      	subs	r2, #1
 800d1ee:	2a00      	cmp	r2, #0
 800d1f0:	6072      	str	r2, [r6, #4]
 800d1f2:	dc07      	bgt.n	800d204 <_scanf_i+0xb8>
 800d1f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d1f8:	4631      	mov	r1, r6
 800d1fa:	4650      	mov	r0, sl
 800d1fc:	4790      	blx	r2
 800d1fe:	2800      	cmp	r0, #0
 800d200:	f040 8085 	bne.w	800d30e <_scanf_i+0x1c2>
 800d204:	f10b 0b01 	add.w	fp, fp, #1
 800d208:	f1bb 0f03 	cmp.w	fp, #3
 800d20c:	d1cb      	bne.n	800d1a6 <_scanf_i+0x5a>
 800d20e:	6863      	ldr	r3, [r4, #4]
 800d210:	b90b      	cbnz	r3, 800d216 <_scanf_i+0xca>
 800d212:	230a      	movs	r3, #10
 800d214:	6063      	str	r3, [r4, #4]
 800d216:	6863      	ldr	r3, [r4, #4]
 800d218:	4947      	ldr	r1, [pc, #284]	; (800d338 <_scanf_i+0x1ec>)
 800d21a:	6960      	ldr	r0, [r4, #20]
 800d21c:	1ac9      	subs	r1, r1, r3
 800d21e:	f000 f8a7 	bl	800d370 <__sccl>
 800d222:	f04f 0b00 	mov.w	fp, #0
 800d226:	68a3      	ldr	r3, [r4, #8]
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d03d      	beq.n	800d2aa <_scanf_i+0x15e>
 800d22e:	6831      	ldr	r1, [r6, #0]
 800d230:	6960      	ldr	r0, [r4, #20]
 800d232:	f891 c000 	ldrb.w	ip, [r1]
 800d236:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d035      	beq.n	800d2aa <_scanf_i+0x15e>
 800d23e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d242:	d124      	bne.n	800d28e <_scanf_i+0x142>
 800d244:	0510      	lsls	r0, r2, #20
 800d246:	d522      	bpl.n	800d28e <_scanf_i+0x142>
 800d248:	f10b 0b01 	add.w	fp, fp, #1
 800d24c:	f1b9 0f00 	cmp.w	r9, #0
 800d250:	d003      	beq.n	800d25a <_scanf_i+0x10e>
 800d252:	3301      	adds	r3, #1
 800d254:	f109 39ff 	add.w	r9, r9, #4294967295
 800d258:	60a3      	str	r3, [r4, #8]
 800d25a:	6873      	ldr	r3, [r6, #4]
 800d25c:	3b01      	subs	r3, #1
 800d25e:	2b00      	cmp	r3, #0
 800d260:	6073      	str	r3, [r6, #4]
 800d262:	dd1b      	ble.n	800d29c <_scanf_i+0x150>
 800d264:	6833      	ldr	r3, [r6, #0]
 800d266:	3301      	adds	r3, #1
 800d268:	6033      	str	r3, [r6, #0]
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	3b01      	subs	r3, #1
 800d26e:	60a3      	str	r3, [r4, #8]
 800d270:	e7d9      	b.n	800d226 <_scanf_i+0xda>
 800d272:	f1bb 0f02 	cmp.w	fp, #2
 800d276:	d1ae      	bne.n	800d1d6 <_scanf_i+0x8a>
 800d278:	6822      	ldr	r2, [r4, #0]
 800d27a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d27e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d282:	d1bf      	bne.n	800d204 <_scanf_i+0xb8>
 800d284:	2310      	movs	r3, #16
 800d286:	6063      	str	r3, [r4, #4]
 800d288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d28c:	e7a2      	b.n	800d1d4 <_scanf_i+0x88>
 800d28e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d292:	6022      	str	r2, [r4, #0]
 800d294:	780b      	ldrb	r3, [r1, #0]
 800d296:	f805 3b01 	strb.w	r3, [r5], #1
 800d29a:	e7de      	b.n	800d25a <_scanf_i+0x10e>
 800d29c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d2a0:	4631      	mov	r1, r6
 800d2a2:	4650      	mov	r0, sl
 800d2a4:	4798      	blx	r3
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d0df      	beq.n	800d26a <_scanf_i+0x11e>
 800d2aa:	6823      	ldr	r3, [r4, #0]
 800d2ac:	05db      	lsls	r3, r3, #23
 800d2ae:	d50d      	bpl.n	800d2cc <_scanf_i+0x180>
 800d2b0:	42bd      	cmp	r5, r7
 800d2b2:	d909      	bls.n	800d2c8 <_scanf_i+0x17c>
 800d2b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d2b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d2bc:	4632      	mov	r2, r6
 800d2be:	4650      	mov	r0, sl
 800d2c0:	4798      	blx	r3
 800d2c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d2c6:	464d      	mov	r5, r9
 800d2c8:	42bd      	cmp	r5, r7
 800d2ca:	d02d      	beq.n	800d328 <_scanf_i+0x1dc>
 800d2cc:	6822      	ldr	r2, [r4, #0]
 800d2ce:	f012 0210 	ands.w	r2, r2, #16
 800d2d2:	d113      	bne.n	800d2fc <_scanf_i+0x1b0>
 800d2d4:	702a      	strb	r2, [r5, #0]
 800d2d6:	6863      	ldr	r3, [r4, #4]
 800d2d8:	9e01      	ldr	r6, [sp, #4]
 800d2da:	4639      	mov	r1, r7
 800d2dc:	4650      	mov	r0, sl
 800d2de:	47b0      	blx	r6
 800d2e0:	6821      	ldr	r1, [r4, #0]
 800d2e2:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e6:	f011 0f20 	tst.w	r1, #32
 800d2ea:	d013      	beq.n	800d314 <_scanf_i+0x1c8>
 800d2ec:	1d1a      	adds	r2, r3, #4
 800d2ee:	f8c8 2000 	str.w	r2, [r8]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6018      	str	r0, [r3, #0]
 800d2f6:	68e3      	ldr	r3, [r4, #12]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	60e3      	str	r3, [r4, #12]
 800d2fc:	1bed      	subs	r5, r5, r7
 800d2fe:	44ab      	add	fp, r5
 800d300:	6925      	ldr	r5, [r4, #16]
 800d302:	445d      	add	r5, fp
 800d304:	6125      	str	r5, [r4, #16]
 800d306:	2000      	movs	r0, #0
 800d308:	b007      	add	sp, #28
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30e:	f04f 0b00 	mov.w	fp, #0
 800d312:	e7ca      	b.n	800d2aa <_scanf_i+0x15e>
 800d314:	1d1a      	adds	r2, r3, #4
 800d316:	f8c8 2000 	str.w	r2, [r8]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f011 0f01 	tst.w	r1, #1
 800d320:	bf14      	ite	ne
 800d322:	8018      	strhne	r0, [r3, #0]
 800d324:	6018      	streq	r0, [r3, #0]
 800d326:	e7e6      	b.n	800d2f6 <_scanf_i+0x1aa>
 800d328:	2001      	movs	r0, #1
 800d32a:	e7ed      	b.n	800d308 <_scanf_i+0x1bc>
 800d32c:	0800dcc0 	.word	0x0800dcc0
 800d330:	0800d4ed 	.word	0x0800d4ed
 800d334:	0800a7bd 	.word	0x0800a7bd
 800d338:	0800e82e 	.word	0x0800e82e

0800d33c <_read_r>:
 800d33c:	b538      	push	{r3, r4, r5, lr}
 800d33e:	4d07      	ldr	r5, [pc, #28]	; (800d35c <_read_r+0x20>)
 800d340:	4604      	mov	r4, r0
 800d342:	4608      	mov	r0, r1
 800d344:	4611      	mov	r1, r2
 800d346:	2200      	movs	r2, #0
 800d348:	602a      	str	r2, [r5, #0]
 800d34a:	461a      	mov	r2, r3
 800d34c:	f7f4 fc6c 	bl	8001c28 <_read>
 800d350:	1c43      	adds	r3, r0, #1
 800d352:	d102      	bne.n	800d35a <_read_r+0x1e>
 800d354:	682b      	ldr	r3, [r5, #0]
 800d356:	b103      	cbz	r3, 800d35a <_read_r+0x1e>
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	bd38      	pop	{r3, r4, r5, pc}
 800d35c:	200007fc 	.word	0x200007fc

0800d360 <nan>:
 800d360:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d368 <nan+0x8>
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	00000000 	.word	0x00000000
 800d36c:	7ff80000 	.word	0x7ff80000

0800d370 <__sccl>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	780b      	ldrb	r3, [r1, #0]
 800d374:	4604      	mov	r4, r0
 800d376:	2b5e      	cmp	r3, #94	; 0x5e
 800d378:	bf0b      	itete	eq
 800d37a:	784b      	ldrbeq	r3, [r1, #1]
 800d37c:	1c48      	addne	r0, r1, #1
 800d37e:	1c88      	addeq	r0, r1, #2
 800d380:	2200      	movne	r2, #0
 800d382:	bf08      	it	eq
 800d384:	2201      	moveq	r2, #1
 800d386:	1e61      	subs	r1, r4, #1
 800d388:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d38c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d390:	42a9      	cmp	r1, r5
 800d392:	d1fb      	bne.n	800d38c <__sccl+0x1c>
 800d394:	b90b      	cbnz	r3, 800d39a <__sccl+0x2a>
 800d396:	3801      	subs	r0, #1
 800d398:	bd70      	pop	{r4, r5, r6, pc}
 800d39a:	f082 0201 	eor.w	r2, r2, #1
 800d39e:	54e2      	strb	r2, [r4, r3]
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d3a8:	292d      	cmp	r1, #45	; 0x2d
 800d3aa:	d006      	beq.n	800d3ba <__sccl+0x4a>
 800d3ac:	295d      	cmp	r1, #93	; 0x5d
 800d3ae:	d0f3      	beq.n	800d398 <__sccl+0x28>
 800d3b0:	b909      	cbnz	r1, 800d3b6 <__sccl+0x46>
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	e7f0      	b.n	800d398 <__sccl+0x28>
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	e7f1      	b.n	800d39e <__sccl+0x2e>
 800d3ba:	786e      	ldrb	r6, [r5, #1]
 800d3bc:	2e5d      	cmp	r6, #93	; 0x5d
 800d3be:	d0fa      	beq.n	800d3b6 <__sccl+0x46>
 800d3c0:	42b3      	cmp	r3, r6
 800d3c2:	dcf8      	bgt.n	800d3b6 <__sccl+0x46>
 800d3c4:	3502      	adds	r5, #2
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	3101      	adds	r1, #1
 800d3ca:	428e      	cmp	r6, r1
 800d3cc:	5462      	strb	r2, [r4, r1]
 800d3ce:	dcfb      	bgt.n	800d3c8 <__sccl+0x58>
 800d3d0:	1af1      	subs	r1, r6, r3
 800d3d2:	3901      	subs	r1, #1
 800d3d4:	1c58      	adds	r0, r3, #1
 800d3d6:	42b3      	cmp	r3, r6
 800d3d8:	bfa8      	it	ge
 800d3da:	2100      	movge	r1, #0
 800d3dc:	1843      	adds	r3, r0, r1
 800d3de:	e7e0      	b.n	800d3a2 <__sccl+0x32>

0800d3e0 <strncmp>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	b17a      	cbz	r2, 800d404 <strncmp+0x24>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	3901      	subs	r1, #1
 800d3e8:	1884      	adds	r4, r0, r2
 800d3ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d3f2:	4290      	cmp	r0, r2
 800d3f4:	d101      	bne.n	800d3fa <strncmp+0x1a>
 800d3f6:	42a3      	cmp	r3, r4
 800d3f8:	d101      	bne.n	800d3fe <strncmp+0x1e>
 800d3fa:	1a80      	subs	r0, r0, r2
 800d3fc:	bd10      	pop	{r4, pc}
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d1f3      	bne.n	800d3ea <strncmp+0xa>
 800d402:	e7fa      	b.n	800d3fa <strncmp+0x1a>
 800d404:	4610      	mov	r0, r2
 800d406:	e7f9      	b.n	800d3fc <strncmp+0x1c>

0800d408 <_strtoul_l.constprop.0>:
 800d408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d40c:	4f36      	ldr	r7, [pc, #216]	; (800d4e8 <_strtoul_l.constprop.0+0xe0>)
 800d40e:	4686      	mov	lr, r0
 800d410:	460d      	mov	r5, r1
 800d412:	4628      	mov	r0, r5
 800d414:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d418:	5de6      	ldrb	r6, [r4, r7]
 800d41a:	f016 0608 	ands.w	r6, r6, #8
 800d41e:	d1f8      	bne.n	800d412 <_strtoul_l.constprop.0+0xa>
 800d420:	2c2d      	cmp	r4, #45	; 0x2d
 800d422:	d12f      	bne.n	800d484 <_strtoul_l.constprop.0+0x7c>
 800d424:	782c      	ldrb	r4, [r5, #0]
 800d426:	2601      	movs	r6, #1
 800d428:	1c85      	adds	r5, r0, #2
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d057      	beq.n	800d4de <_strtoul_l.constprop.0+0xd6>
 800d42e:	2b10      	cmp	r3, #16
 800d430:	d109      	bne.n	800d446 <_strtoul_l.constprop.0+0x3e>
 800d432:	2c30      	cmp	r4, #48	; 0x30
 800d434:	d107      	bne.n	800d446 <_strtoul_l.constprop.0+0x3e>
 800d436:	7828      	ldrb	r0, [r5, #0]
 800d438:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d43c:	2858      	cmp	r0, #88	; 0x58
 800d43e:	d149      	bne.n	800d4d4 <_strtoul_l.constprop.0+0xcc>
 800d440:	786c      	ldrb	r4, [r5, #1]
 800d442:	2310      	movs	r3, #16
 800d444:	3502      	adds	r5, #2
 800d446:	f04f 38ff 	mov.w	r8, #4294967295
 800d44a:	2700      	movs	r7, #0
 800d44c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d450:	fb03 f908 	mul.w	r9, r3, r8
 800d454:	ea6f 0909 	mvn.w	r9, r9
 800d458:	4638      	mov	r0, r7
 800d45a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d45e:	f1bc 0f09 	cmp.w	ip, #9
 800d462:	d814      	bhi.n	800d48e <_strtoul_l.constprop.0+0x86>
 800d464:	4664      	mov	r4, ip
 800d466:	42a3      	cmp	r3, r4
 800d468:	dd22      	ble.n	800d4b0 <_strtoul_l.constprop.0+0xa8>
 800d46a:	2f00      	cmp	r7, #0
 800d46c:	db1d      	blt.n	800d4aa <_strtoul_l.constprop.0+0xa2>
 800d46e:	4580      	cmp	r8, r0
 800d470:	d31b      	bcc.n	800d4aa <_strtoul_l.constprop.0+0xa2>
 800d472:	d101      	bne.n	800d478 <_strtoul_l.constprop.0+0x70>
 800d474:	45a1      	cmp	r9, r4
 800d476:	db18      	blt.n	800d4aa <_strtoul_l.constprop.0+0xa2>
 800d478:	fb00 4003 	mla	r0, r0, r3, r4
 800d47c:	2701      	movs	r7, #1
 800d47e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d482:	e7ea      	b.n	800d45a <_strtoul_l.constprop.0+0x52>
 800d484:	2c2b      	cmp	r4, #43	; 0x2b
 800d486:	bf04      	itt	eq
 800d488:	782c      	ldrbeq	r4, [r5, #0]
 800d48a:	1c85      	addeq	r5, r0, #2
 800d48c:	e7cd      	b.n	800d42a <_strtoul_l.constprop.0+0x22>
 800d48e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d492:	f1bc 0f19 	cmp.w	ip, #25
 800d496:	d801      	bhi.n	800d49c <_strtoul_l.constprop.0+0x94>
 800d498:	3c37      	subs	r4, #55	; 0x37
 800d49a:	e7e4      	b.n	800d466 <_strtoul_l.constprop.0+0x5e>
 800d49c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d4a0:	f1bc 0f19 	cmp.w	ip, #25
 800d4a4:	d804      	bhi.n	800d4b0 <_strtoul_l.constprop.0+0xa8>
 800d4a6:	3c57      	subs	r4, #87	; 0x57
 800d4a8:	e7dd      	b.n	800d466 <_strtoul_l.constprop.0+0x5e>
 800d4aa:	f04f 37ff 	mov.w	r7, #4294967295
 800d4ae:	e7e6      	b.n	800d47e <_strtoul_l.constprop.0+0x76>
 800d4b0:	2f00      	cmp	r7, #0
 800d4b2:	da07      	bge.n	800d4c4 <_strtoul_l.constprop.0+0xbc>
 800d4b4:	2322      	movs	r3, #34	; 0x22
 800d4b6:	f8ce 3000 	str.w	r3, [lr]
 800d4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d4be:	b932      	cbnz	r2, 800d4ce <_strtoul_l.constprop.0+0xc6>
 800d4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4c4:	b106      	cbz	r6, 800d4c8 <_strtoul_l.constprop.0+0xc0>
 800d4c6:	4240      	negs	r0, r0
 800d4c8:	2a00      	cmp	r2, #0
 800d4ca:	d0f9      	beq.n	800d4c0 <_strtoul_l.constprop.0+0xb8>
 800d4cc:	b107      	cbz	r7, 800d4d0 <_strtoul_l.constprop.0+0xc8>
 800d4ce:	1e69      	subs	r1, r5, #1
 800d4d0:	6011      	str	r1, [r2, #0]
 800d4d2:	e7f5      	b.n	800d4c0 <_strtoul_l.constprop.0+0xb8>
 800d4d4:	2430      	movs	r4, #48	; 0x30
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1b5      	bne.n	800d446 <_strtoul_l.constprop.0+0x3e>
 800d4da:	2308      	movs	r3, #8
 800d4dc:	e7b3      	b.n	800d446 <_strtoul_l.constprop.0+0x3e>
 800d4de:	2c30      	cmp	r4, #48	; 0x30
 800d4e0:	d0a9      	beq.n	800d436 <_strtoul_l.constprop.0+0x2e>
 800d4e2:	230a      	movs	r3, #10
 800d4e4:	e7af      	b.n	800d446 <_strtoul_l.constprop.0+0x3e>
 800d4e6:	bf00      	nop
 800d4e8:	0800e439 	.word	0x0800e439

0800d4ec <_strtoul_r>:
 800d4ec:	f7ff bf8c 	b.w	800d408 <_strtoul_l.constprop.0>

0800d4f0 <__submore>:
 800d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f4:	460c      	mov	r4, r1
 800d4f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4fc:	4299      	cmp	r1, r3
 800d4fe:	d11d      	bne.n	800d53c <__submore+0x4c>
 800d500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d504:	f7fb f84c 	bl	80085a0 <_malloc_r>
 800d508:	b918      	cbnz	r0, 800d512 <__submore+0x22>
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d516:	63a3      	str	r3, [r4, #56]	; 0x38
 800d518:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d51c:	6360      	str	r0, [r4, #52]	; 0x34
 800d51e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d522:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d526:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d52a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d52e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d532:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d536:	6020      	str	r0, [r4, #0]
 800d538:	2000      	movs	r0, #0
 800d53a:	e7e8      	b.n	800d50e <__submore+0x1e>
 800d53c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d53e:	0077      	lsls	r7, r6, #1
 800d540:	463a      	mov	r2, r7
 800d542:	f000 f867 	bl	800d614 <_realloc_r>
 800d546:	4605      	mov	r5, r0
 800d548:	2800      	cmp	r0, #0
 800d54a:	d0de      	beq.n	800d50a <__submore+0x1a>
 800d54c:	eb00 0806 	add.w	r8, r0, r6
 800d550:	4601      	mov	r1, r0
 800d552:	4632      	mov	r2, r6
 800d554:	4640      	mov	r0, r8
 800d556:	f7fe fd81 	bl	800c05c <memcpy>
 800d55a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d55e:	f8c4 8000 	str.w	r8, [r4]
 800d562:	e7e9      	b.n	800d538 <__submore+0x48>

0800d564 <__ascii_wctomb>:
 800d564:	b149      	cbz	r1, 800d57a <__ascii_wctomb+0x16>
 800d566:	2aff      	cmp	r2, #255	; 0xff
 800d568:	bf85      	ittet	hi
 800d56a:	238a      	movhi	r3, #138	; 0x8a
 800d56c:	6003      	strhi	r3, [r0, #0]
 800d56e:	700a      	strbls	r2, [r1, #0]
 800d570:	f04f 30ff 	movhi.w	r0, #4294967295
 800d574:	bf98      	it	ls
 800d576:	2001      	movls	r0, #1
 800d578:	4770      	bx	lr
 800d57a:	4608      	mov	r0, r1
 800d57c:	4770      	bx	lr
	...

0800d580 <__assert_func>:
 800d580:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d582:	4614      	mov	r4, r2
 800d584:	461a      	mov	r2, r3
 800d586:	4b09      	ldr	r3, [pc, #36]	; (800d5ac <__assert_func+0x2c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4605      	mov	r5, r0
 800d58c:	68d8      	ldr	r0, [r3, #12]
 800d58e:	b14c      	cbz	r4, 800d5a4 <__assert_func+0x24>
 800d590:	4b07      	ldr	r3, [pc, #28]	; (800d5b0 <__assert_func+0x30>)
 800d592:	9100      	str	r1, [sp, #0]
 800d594:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d598:	4906      	ldr	r1, [pc, #24]	; (800d5b4 <__assert_func+0x34>)
 800d59a:	462b      	mov	r3, r5
 800d59c:	f000 f80e 	bl	800d5bc <fiprintf>
 800d5a0:	f7fa ff50 	bl	8008444 <abort>
 800d5a4:	4b04      	ldr	r3, [pc, #16]	; (800d5b8 <__assert_func+0x38>)
 800d5a6:	461c      	mov	r4, r3
 800d5a8:	e7f3      	b.n	800d592 <__assert_func+0x12>
 800d5aa:	bf00      	nop
 800d5ac:	2000003c 	.word	0x2000003c
 800d5b0:	0800e830 	.word	0x0800e830
 800d5b4:	0800e83d 	.word	0x0800e83d
 800d5b8:	0800e86b 	.word	0x0800e86b

0800d5bc <fiprintf>:
 800d5bc:	b40e      	push	{r1, r2, r3}
 800d5be:	b503      	push	{r0, r1, lr}
 800d5c0:	4601      	mov	r1, r0
 800d5c2:	ab03      	add	r3, sp, #12
 800d5c4:	4805      	ldr	r0, [pc, #20]	; (800d5dc <fiprintf+0x20>)
 800d5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ca:	6800      	ldr	r0, [r0, #0]
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	f000 f879 	bl	800d6c4 <_vfiprintf_r>
 800d5d2:	b002      	add	sp, #8
 800d5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d8:	b003      	add	sp, #12
 800d5da:	4770      	bx	lr
 800d5dc:	2000003c 	.word	0x2000003c

0800d5e0 <memmove>:
 800d5e0:	4288      	cmp	r0, r1
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	eb01 0402 	add.w	r4, r1, r2
 800d5e8:	d902      	bls.n	800d5f0 <memmove+0x10>
 800d5ea:	4284      	cmp	r4, r0
 800d5ec:	4623      	mov	r3, r4
 800d5ee:	d807      	bhi.n	800d600 <memmove+0x20>
 800d5f0:	1e43      	subs	r3, r0, #1
 800d5f2:	42a1      	cmp	r1, r4
 800d5f4:	d008      	beq.n	800d608 <memmove+0x28>
 800d5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5fe:	e7f8      	b.n	800d5f2 <memmove+0x12>
 800d600:	4402      	add	r2, r0
 800d602:	4601      	mov	r1, r0
 800d604:	428a      	cmp	r2, r1
 800d606:	d100      	bne.n	800d60a <memmove+0x2a>
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d60e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d612:	e7f7      	b.n	800d604 <memmove+0x24>

0800d614 <_realloc_r>:
 800d614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d618:	4680      	mov	r8, r0
 800d61a:	4614      	mov	r4, r2
 800d61c:	460e      	mov	r6, r1
 800d61e:	b921      	cbnz	r1, 800d62a <_realloc_r+0x16>
 800d620:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d624:	4611      	mov	r1, r2
 800d626:	f7fa bfbb 	b.w	80085a0 <_malloc_r>
 800d62a:	b92a      	cbnz	r2, 800d638 <_realloc_r+0x24>
 800d62c:	f7fa ff4c 	bl	80084c8 <_free_r>
 800d630:	4625      	mov	r5, r4
 800d632:	4628      	mov	r0, r5
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	f000 fa9a 	bl	800db70 <_malloc_usable_size_r>
 800d63c:	4284      	cmp	r4, r0
 800d63e:	4607      	mov	r7, r0
 800d640:	d802      	bhi.n	800d648 <_realloc_r+0x34>
 800d642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d646:	d812      	bhi.n	800d66e <_realloc_r+0x5a>
 800d648:	4621      	mov	r1, r4
 800d64a:	4640      	mov	r0, r8
 800d64c:	f7fa ffa8 	bl	80085a0 <_malloc_r>
 800d650:	4605      	mov	r5, r0
 800d652:	2800      	cmp	r0, #0
 800d654:	d0ed      	beq.n	800d632 <_realloc_r+0x1e>
 800d656:	42bc      	cmp	r4, r7
 800d658:	4622      	mov	r2, r4
 800d65a:	4631      	mov	r1, r6
 800d65c:	bf28      	it	cs
 800d65e:	463a      	movcs	r2, r7
 800d660:	f7fe fcfc 	bl	800c05c <memcpy>
 800d664:	4631      	mov	r1, r6
 800d666:	4640      	mov	r0, r8
 800d668:	f7fa ff2e 	bl	80084c8 <_free_r>
 800d66c:	e7e1      	b.n	800d632 <_realloc_r+0x1e>
 800d66e:	4635      	mov	r5, r6
 800d670:	e7df      	b.n	800d632 <_realloc_r+0x1e>

0800d672 <__sfputc_r>:
 800d672:	6893      	ldr	r3, [r2, #8]
 800d674:	3b01      	subs	r3, #1
 800d676:	2b00      	cmp	r3, #0
 800d678:	b410      	push	{r4}
 800d67a:	6093      	str	r3, [r2, #8]
 800d67c:	da08      	bge.n	800d690 <__sfputc_r+0x1e>
 800d67e:	6994      	ldr	r4, [r2, #24]
 800d680:	42a3      	cmp	r3, r4
 800d682:	db01      	blt.n	800d688 <__sfputc_r+0x16>
 800d684:	290a      	cmp	r1, #10
 800d686:	d103      	bne.n	800d690 <__sfputc_r+0x1e>
 800d688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d68c:	f000 b94a 	b.w	800d924 <__swbuf_r>
 800d690:	6813      	ldr	r3, [r2, #0]
 800d692:	1c58      	adds	r0, r3, #1
 800d694:	6010      	str	r0, [r2, #0]
 800d696:	7019      	strb	r1, [r3, #0]
 800d698:	4608      	mov	r0, r1
 800d69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <__sfputs_r>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	4614      	mov	r4, r2
 800d6a8:	18d5      	adds	r5, r2, r3
 800d6aa:	42ac      	cmp	r4, r5
 800d6ac:	d101      	bne.n	800d6b2 <__sfputs_r+0x12>
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	e007      	b.n	800d6c2 <__sfputs_r+0x22>
 800d6b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b6:	463a      	mov	r2, r7
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f7ff ffda 	bl	800d672 <__sfputc_r>
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	d1f3      	bne.n	800d6aa <__sfputs_r+0xa>
 800d6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6c4 <_vfiprintf_r>:
 800d6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	b09d      	sub	sp, #116	; 0x74
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	4698      	mov	r8, r3
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	b118      	cbz	r0, 800d6dc <_vfiprintf_r+0x18>
 800d6d4:	6983      	ldr	r3, [r0, #24]
 800d6d6:	b90b      	cbnz	r3, 800d6dc <_vfiprintf_r+0x18>
 800d6d8:	f7fe f888 	bl	800b7ec <__sinit>
 800d6dc:	4b89      	ldr	r3, [pc, #548]	; (800d904 <_vfiprintf_r+0x240>)
 800d6de:	429d      	cmp	r5, r3
 800d6e0:	d11b      	bne.n	800d71a <_vfiprintf_r+0x56>
 800d6e2:	6875      	ldr	r5, [r6, #4]
 800d6e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6e6:	07d9      	lsls	r1, r3, #31
 800d6e8:	d405      	bmi.n	800d6f6 <_vfiprintf_r+0x32>
 800d6ea:	89ab      	ldrh	r3, [r5, #12]
 800d6ec:	059a      	lsls	r2, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_vfiprintf_r+0x32>
 800d6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6f2:	f7fe fc8c 	bl	800c00e <__retarget_lock_acquire_recursive>
 800d6f6:	89ab      	ldrh	r3, [r5, #12]
 800d6f8:	071b      	lsls	r3, r3, #28
 800d6fa:	d501      	bpl.n	800d700 <_vfiprintf_r+0x3c>
 800d6fc:	692b      	ldr	r3, [r5, #16]
 800d6fe:	b9eb      	cbnz	r3, 800d73c <_vfiprintf_r+0x78>
 800d700:	4629      	mov	r1, r5
 800d702:	4630      	mov	r0, r6
 800d704:	f000 f960 	bl	800d9c8 <__swsetup_r>
 800d708:	b1c0      	cbz	r0, 800d73c <_vfiprintf_r+0x78>
 800d70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d70c:	07dc      	lsls	r4, r3, #31
 800d70e:	d50e      	bpl.n	800d72e <_vfiprintf_r+0x6a>
 800d710:	f04f 30ff 	mov.w	r0, #4294967295
 800d714:	b01d      	add	sp, #116	; 0x74
 800d716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71a:	4b7b      	ldr	r3, [pc, #492]	; (800d908 <_vfiprintf_r+0x244>)
 800d71c:	429d      	cmp	r5, r3
 800d71e:	d101      	bne.n	800d724 <_vfiprintf_r+0x60>
 800d720:	68b5      	ldr	r5, [r6, #8]
 800d722:	e7df      	b.n	800d6e4 <_vfiprintf_r+0x20>
 800d724:	4b79      	ldr	r3, [pc, #484]	; (800d90c <_vfiprintf_r+0x248>)
 800d726:	429d      	cmp	r5, r3
 800d728:	bf08      	it	eq
 800d72a:	68f5      	ldreq	r5, [r6, #12]
 800d72c:	e7da      	b.n	800d6e4 <_vfiprintf_r+0x20>
 800d72e:	89ab      	ldrh	r3, [r5, #12]
 800d730:	0598      	lsls	r0, r3, #22
 800d732:	d4ed      	bmi.n	800d710 <_vfiprintf_r+0x4c>
 800d734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d736:	f7fe fc6b 	bl	800c010 <__retarget_lock_release_recursive>
 800d73a:	e7e9      	b.n	800d710 <_vfiprintf_r+0x4c>
 800d73c:	2300      	movs	r3, #0
 800d73e:	9309      	str	r3, [sp, #36]	; 0x24
 800d740:	2320      	movs	r3, #32
 800d742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d746:	f8cd 800c 	str.w	r8, [sp, #12]
 800d74a:	2330      	movs	r3, #48	; 0x30
 800d74c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d910 <_vfiprintf_r+0x24c>
 800d750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d754:	f04f 0901 	mov.w	r9, #1
 800d758:	4623      	mov	r3, r4
 800d75a:	469a      	mov	sl, r3
 800d75c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d760:	b10a      	cbz	r2, 800d766 <_vfiprintf_r+0xa2>
 800d762:	2a25      	cmp	r2, #37	; 0x25
 800d764:	d1f9      	bne.n	800d75a <_vfiprintf_r+0x96>
 800d766:	ebba 0b04 	subs.w	fp, sl, r4
 800d76a:	d00b      	beq.n	800d784 <_vfiprintf_r+0xc0>
 800d76c:	465b      	mov	r3, fp
 800d76e:	4622      	mov	r2, r4
 800d770:	4629      	mov	r1, r5
 800d772:	4630      	mov	r0, r6
 800d774:	f7ff ff94 	bl	800d6a0 <__sfputs_r>
 800d778:	3001      	adds	r0, #1
 800d77a:	f000 80aa 	beq.w	800d8d2 <_vfiprintf_r+0x20e>
 800d77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d780:	445a      	add	r2, fp
 800d782:	9209      	str	r2, [sp, #36]	; 0x24
 800d784:	f89a 3000 	ldrb.w	r3, [sl]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 80a2 	beq.w	800d8d2 <_vfiprintf_r+0x20e>
 800d78e:	2300      	movs	r3, #0
 800d790:	f04f 32ff 	mov.w	r2, #4294967295
 800d794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d798:	f10a 0a01 	add.w	sl, sl, #1
 800d79c:	9304      	str	r3, [sp, #16]
 800d79e:	9307      	str	r3, [sp, #28]
 800d7a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d7a6:	4654      	mov	r4, sl
 800d7a8:	2205      	movs	r2, #5
 800d7aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ae:	4858      	ldr	r0, [pc, #352]	; (800d910 <_vfiprintf_r+0x24c>)
 800d7b0:	f7f2 fd26 	bl	8000200 <memchr>
 800d7b4:	9a04      	ldr	r2, [sp, #16]
 800d7b6:	b9d8      	cbnz	r0, 800d7f0 <_vfiprintf_r+0x12c>
 800d7b8:	06d1      	lsls	r1, r2, #27
 800d7ba:	bf44      	itt	mi
 800d7bc:	2320      	movmi	r3, #32
 800d7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7c2:	0713      	lsls	r3, r2, #28
 800d7c4:	bf44      	itt	mi
 800d7c6:	232b      	movmi	r3, #43	; 0x2b
 800d7c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d7d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d2:	d015      	beq.n	800d800 <_vfiprintf_r+0x13c>
 800d7d4:	9a07      	ldr	r2, [sp, #28]
 800d7d6:	4654      	mov	r4, sl
 800d7d8:	2000      	movs	r0, #0
 800d7da:	f04f 0c0a 	mov.w	ip, #10
 800d7de:	4621      	mov	r1, r4
 800d7e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7e4:	3b30      	subs	r3, #48	; 0x30
 800d7e6:	2b09      	cmp	r3, #9
 800d7e8:	d94e      	bls.n	800d888 <_vfiprintf_r+0x1c4>
 800d7ea:	b1b0      	cbz	r0, 800d81a <_vfiprintf_r+0x156>
 800d7ec:	9207      	str	r2, [sp, #28]
 800d7ee:	e014      	b.n	800d81a <_vfiprintf_r+0x156>
 800d7f0:	eba0 0308 	sub.w	r3, r0, r8
 800d7f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	9304      	str	r3, [sp, #16]
 800d7fc:	46a2      	mov	sl, r4
 800d7fe:	e7d2      	b.n	800d7a6 <_vfiprintf_r+0xe2>
 800d800:	9b03      	ldr	r3, [sp, #12]
 800d802:	1d19      	adds	r1, r3, #4
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	9103      	str	r1, [sp, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfbb      	ittet	lt
 800d80c:	425b      	neglt	r3, r3
 800d80e:	f042 0202 	orrlt.w	r2, r2, #2
 800d812:	9307      	strge	r3, [sp, #28]
 800d814:	9307      	strlt	r3, [sp, #28]
 800d816:	bfb8      	it	lt
 800d818:	9204      	strlt	r2, [sp, #16]
 800d81a:	7823      	ldrb	r3, [r4, #0]
 800d81c:	2b2e      	cmp	r3, #46	; 0x2e
 800d81e:	d10c      	bne.n	800d83a <_vfiprintf_r+0x176>
 800d820:	7863      	ldrb	r3, [r4, #1]
 800d822:	2b2a      	cmp	r3, #42	; 0x2a
 800d824:	d135      	bne.n	800d892 <_vfiprintf_r+0x1ce>
 800d826:	9b03      	ldr	r3, [sp, #12]
 800d828:	1d1a      	adds	r2, r3, #4
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	9203      	str	r2, [sp, #12]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	bfb8      	it	lt
 800d832:	f04f 33ff 	movlt.w	r3, #4294967295
 800d836:	3402      	adds	r4, #2
 800d838:	9305      	str	r3, [sp, #20]
 800d83a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d920 <_vfiprintf_r+0x25c>
 800d83e:	7821      	ldrb	r1, [r4, #0]
 800d840:	2203      	movs	r2, #3
 800d842:	4650      	mov	r0, sl
 800d844:	f7f2 fcdc 	bl	8000200 <memchr>
 800d848:	b140      	cbz	r0, 800d85c <_vfiprintf_r+0x198>
 800d84a:	2340      	movs	r3, #64	; 0x40
 800d84c:	eba0 000a 	sub.w	r0, r0, sl
 800d850:	fa03 f000 	lsl.w	r0, r3, r0
 800d854:	9b04      	ldr	r3, [sp, #16]
 800d856:	4303      	orrs	r3, r0
 800d858:	3401      	adds	r4, #1
 800d85a:	9304      	str	r3, [sp, #16]
 800d85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d860:	482c      	ldr	r0, [pc, #176]	; (800d914 <_vfiprintf_r+0x250>)
 800d862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d866:	2206      	movs	r2, #6
 800d868:	f7f2 fcca 	bl	8000200 <memchr>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d03f      	beq.n	800d8f0 <_vfiprintf_r+0x22c>
 800d870:	4b29      	ldr	r3, [pc, #164]	; (800d918 <_vfiprintf_r+0x254>)
 800d872:	bb1b      	cbnz	r3, 800d8bc <_vfiprintf_r+0x1f8>
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	3307      	adds	r3, #7
 800d878:	f023 0307 	bic.w	r3, r3, #7
 800d87c:	3308      	adds	r3, #8
 800d87e:	9303      	str	r3, [sp, #12]
 800d880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d882:	443b      	add	r3, r7
 800d884:	9309      	str	r3, [sp, #36]	; 0x24
 800d886:	e767      	b.n	800d758 <_vfiprintf_r+0x94>
 800d888:	fb0c 3202 	mla	r2, ip, r2, r3
 800d88c:	460c      	mov	r4, r1
 800d88e:	2001      	movs	r0, #1
 800d890:	e7a5      	b.n	800d7de <_vfiprintf_r+0x11a>
 800d892:	2300      	movs	r3, #0
 800d894:	3401      	adds	r4, #1
 800d896:	9305      	str	r3, [sp, #20]
 800d898:	4619      	mov	r1, r3
 800d89a:	f04f 0c0a 	mov.w	ip, #10
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8a4:	3a30      	subs	r2, #48	; 0x30
 800d8a6:	2a09      	cmp	r2, #9
 800d8a8:	d903      	bls.n	800d8b2 <_vfiprintf_r+0x1ee>
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0c5      	beq.n	800d83a <_vfiprintf_r+0x176>
 800d8ae:	9105      	str	r1, [sp, #20]
 800d8b0:	e7c3      	b.n	800d83a <_vfiprintf_r+0x176>
 800d8b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e7f0      	b.n	800d89e <_vfiprintf_r+0x1da>
 800d8bc:	ab03      	add	r3, sp, #12
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	462a      	mov	r2, r5
 800d8c2:	4b16      	ldr	r3, [pc, #88]	; (800d91c <_vfiprintf_r+0x258>)
 800d8c4:	a904      	add	r1, sp, #16
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7fa ff7e 	bl	80087c8 <_printf_float>
 800d8cc:	4607      	mov	r7, r0
 800d8ce:	1c78      	adds	r0, r7, #1
 800d8d0:	d1d6      	bne.n	800d880 <_vfiprintf_r+0x1bc>
 800d8d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8d4:	07d9      	lsls	r1, r3, #31
 800d8d6:	d405      	bmi.n	800d8e4 <_vfiprintf_r+0x220>
 800d8d8:	89ab      	ldrh	r3, [r5, #12]
 800d8da:	059a      	lsls	r2, r3, #22
 800d8dc:	d402      	bmi.n	800d8e4 <_vfiprintf_r+0x220>
 800d8de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8e0:	f7fe fb96 	bl	800c010 <__retarget_lock_release_recursive>
 800d8e4:	89ab      	ldrh	r3, [r5, #12]
 800d8e6:	065b      	lsls	r3, r3, #25
 800d8e8:	f53f af12 	bmi.w	800d710 <_vfiprintf_r+0x4c>
 800d8ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ee:	e711      	b.n	800d714 <_vfiprintf_r+0x50>
 800d8f0:	ab03      	add	r3, sp, #12
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	462a      	mov	r2, r5
 800d8f6:	4b09      	ldr	r3, [pc, #36]	; (800d91c <_vfiprintf_r+0x258>)
 800d8f8:	a904      	add	r1, sp, #16
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7fb fa08 	bl	8008d10 <_printf_i>
 800d900:	e7e4      	b.n	800d8cc <_vfiprintf_r+0x208>
 800d902:	bf00      	nop
 800d904:	0800e5ec 	.word	0x0800e5ec
 800d908:	0800e60c 	.word	0x0800e60c
 800d90c:	0800e5cc 	.word	0x0800e5cc
 800d910:	0800e804 	.word	0x0800e804
 800d914:	0800e80e 	.word	0x0800e80e
 800d918:	080087c9 	.word	0x080087c9
 800d91c:	0800d6a1 	.word	0x0800d6a1
 800d920:	0800e80a 	.word	0x0800e80a

0800d924 <__swbuf_r>:
 800d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d926:	460e      	mov	r6, r1
 800d928:	4614      	mov	r4, r2
 800d92a:	4605      	mov	r5, r0
 800d92c:	b118      	cbz	r0, 800d936 <__swbuf_r+0x12>
 800d92e:	6983      	ldr	r3, [r0, #24]
 800d930:	b90b      	cbnz	r3, 800d936 <__swbuf_r+0x12>
 800d932:	f7fd ff5b 	bl	800b7ec <__sinit>
 800d936:	4b21      	ldr	r3, [pc, #132]	; (800d9bc <__swbuf_r+0x98>)
 800d938:	429c      	cmp	r4, r3
 800d93a:	d12b      	bne.n	800d994 <__swbuf_r+0x70>
 800d93c:	686c      	ldr	r4, [r5, #4]
 800d93e:	69a3      	ldr	r3, [r4, #24]
 800d940:	60a3      	str	r3, [r4, #8]
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	071a      	lsls	r2, r3, #28
 800d946:	d52f      	bpl.n	800d9a8 <__swbuf_r+0x84>
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	b36b      	cbz	r3, 800d9a8 <__swbuf_r+0x84>
 800d94c:	6923      	ldr	r3, [r4, #16]
 800d94e:	6820      	ldr	r0, [r4, #0]
 800d950:	1ac0      	subs	r0, r0, r3
 800d952:	6963      	ldr	r3, [r4, #20]
 800d954:	b2f6      	uxtb	r6, r6
 800d956:	4283      	cmp	r3, r0
 800d958:	4637      	mov	r7, r6
 800d95a:	dc04      	bgt.n	800d966 <__swbuf_r+0x42>
 800d95c:	4621      	mov	r1, r4
 800d95e:	4628      	mov	r0, r5
 800d960:	f7fd fe72 	bl	800b648 <_fflush_r>
 800d964:	bb30      	cbnz	r0, 800d9b4 <__swbuf_r+0x90>
 800d966:	68a3      	ldr	r3, [r4, #8]
 800d968:	3b01      	subs	r3, #1
 800d96a:	60a3      	str	r3, [r4, #8]
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	1c5a      	adds	r2, r3, #1
 800d970:	6022      	str	r2, [r4, #0]
 800d972:	701e      	strb	r6, [r3, #0]
 800d974:	6963      	ldr	r3, [r4, #20]
 800d976:	3001      	adds	r0, #1
 800d978:	4283      	cmp	r3, r0
 800d97a:	d004      	beq.n	800d986 <__swbuf_r+0x62>
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	07db      	lsls	r3, r3, #31
 800d980:	d506      	bpl.n	800d990 <__swbuf_r+0x6c>
 800d982:	2e0a      	cmp	r6, #10
 800d984:	d104      	bne.n	800d990 <__swbuf_r+0x6c>
 800d986:	4621      	mov	r1, r4
 800d988:	4628      	mov	r0, r5
 800d98a:	f7fd fe5d 	bl	800b648 <_fflush_r>
 800d98e:	b988      	cbnz	r0, 800d9b4 <__swbuf_r+0x90>
 800d990:	4638      	mov	r0, r7
 800d992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d994:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <__swbuf_r+0x9c>)
 800d996:	429c      	cmp	r4, r3
 800d998:	d101      	bne.n	800d99e <__swbuf_r+0x7a>
 800d99a:	68ac      	ldr	r4, [r5, #8]
 800d99c:	e7cf      	b.n	800d93e <__swbuf_r+0x1a>
 800d99e:	4b09      	ldr	r3, [pc, #36]	; (800d9c4 <__swbuf_r+0xa0>)
 800d9a0:	429c      	cmp	r4, r3
 800d9a2:	bf08      	it	eq
 800d9a4:	68ec      	ldreq	r4, [r5, #12]
 800d9a6:	e7ca      	b.n	800d93e <__swbuf_r+0x1a>
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	f000 f80c 	bl	800d9c8 <__swsetup_r>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d0cb      	beq.n	800d94c <__swbuf_r+0x28>
 800d9b4:	f04f 37ff 	mov.w	r7, #4294967295
 800d9b8:	e7ea      	b.n	800d990 <__swbuf_r+0x6c>
 800d9ba:	bf00      	nop
 800d9bc:	0800e5ec 	.word	0x0800e5ec
 800d9c0:	0800e60c 	.word	0x0800e60c
 800d9c4:	0800e5cc 	.word	0x0800e5cc

0800d9c8 <__swsetup_r>:
 800d9c8:	4b32      	ldr	r3, [pc, #200]	; (800da94 <__swsetup_r+0xcc>)
 800d9ca:	b570      	push	{r4, r5, r6, lr}
 800d9cc:	681d      	ldr	r5, [r3, #0]
 800d9ce:	4606      	mov	r6, r0
 800d9d0:	460c      	mov	r4, r1
 800d9d2:	b125      	cbz	r5, 800d9de <__swsetup_r+0x16>
 800d9d4:	69ab      	ldr	r3, [r5, #24]
 800d9d6:	b913      	cbnz	r3, 800d9de <__swsetup_r+0x16>
 800d9d8:	4628      	mov	r0, r5
 800d9da:	f7fd ff07 	bl	800b7ec <__sinit>
 800d9de:	4b2e      	ldr	r3, [pc, #184]	; (800da98 <__swsetup_r+0xd0>)
 800d9e0:	429c      	cmp	r4, r3
 800d9e2:	d10f      	bne.n	800da04 <__swsetup_r+0x3c>
 800d9e4:	686c      	ldr	r4, [r5, #4]
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9ec:	0719      	lsls	r1, r3, #28
 800d9ee:	d42c      	bmi.n	800da4a <__swsetup_r+0x82>
 800d9f0:	06dd      	lsls	r5, r3, #27
 800d9f2:	d411      	bmi.n	800da18 <__swsetup_r+0x50>
 800d9f4:	2309      	movs	r3, #9
 800d9f6:	6033      	str	r3, [r6, #0]
 800d9f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9fc:	81a3      	strh	r3, [r4, #12]
 800d9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800da02:	e03e      	b.n	800da82 <__swsetup_r+0xba>
 800da04:	4b25      	ldr	r3, [pc, #148]	; (800da9c <__swsetup_r+0xd4>)
 800da06:	429c      	cmp	r4, r3
 800da08:	d101      	bne.n	800da0e <__swsetup_r+0x46>
 800da0a:	68ac      	ldr	r4, [r5, #8]
 800da0c:	e7eb      	b.n	800d9e6 <__swsetup_r+0x1e>
 800da0e:	4b24      	ldr	r3, [pc, #144]	; (800daa0 <__swsetup_r+0xd8>)
 800da10:	429c      	cmp	r4, r3
 800da12:	bf08      	it	eq
 800da14:	68ec      	ldreq	r4, [r5, #12]
 800da16:	e7e6      	b.n	800d9e6 <__swsetup_r+0x1e>
 800da18:	0758      	lsls	r0, r3, #29
 800da1a:	d512      	bpl.n	800da42 <__swsetup_r+0x7a>
 800da1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da1e:	b141      	cbz	r1, 800da32 <__swsetup_r+0x6a>
 800da20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da24:	4299      	cmp	r1, r3
 800da26:	d002      	beq.n	800da2e <__swsetup_r+0x66>
 800da28:	4630      	mov	r0, r6
 800da2a:	f7fa fd4d 	bl	80084c8 <_free_r>
 800da2e:	2300      	movs	r3, #0
 800da30:	6363      	str	r3, [r4, #52]	; 0x34
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	2300      	movs	r3, #0
 800da3c:	6063      	str	r3, [r4, #4]
 800da3e:	6923      	ldr	r3, [r4, #16]
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	f043 0308 	orr.w	r3, r3, #8
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	6923      	ldr	r3, [r4, #16]
 800da4c:	b94b      	cbnz	r3, 800da62 <__swsetup_r+0x9a>
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da58:	d003      	beq.n	800da62 <__swsetup_r+0x9a>
 800da5a:	4621      	mov	r1, r4
 800da5c:	4630      	mov	r0, r6
 800da5e:	f000 f847 	bl	800daf0 <__smakebuf_r>
 800da62:	89a0      	ldrh	r0, [r4, #12]
 800da64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da68:	f010 0301 	ands.w	r3, r0, #1
 800da6c:	d00a      	beq.n	800da84 <__swsetup_r+0xbc>
 800da6e:	2300      	movs	r3, #0
 800da70:	60a3      	str	r3, [r4, #8]
 800da72:	6963      	ldr	r3, [r4, #20]
 800da74:	425b      	negs	r3, r3
 800da76:	61a3      	str	r3, [r4, #24]
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	b943      	cbnz	r3, 800da8e <__swsetup_r+0xc6>
 800da7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da80:	d1ba      	bne.n	800d9f8 <__swsetup_r+0x30>
 800da82:	bd70      	pop	{r4, r5, r6, pc}
 800da84:	0781      	lsls	r1, r0, #30
 800da86:	bf58      	it	pl
 800da88:	6963      	ldrpl	r3, [r4, #20]
 800da8a:	60a3      	str	r3, [r4, #8]
 800da8c:	e7f4      	b.n	800da78 <__swsetup_r+0xb0>
 800da8e:	2000      	movs	r0, #0
 800da90:	e7f7      	b.n	800da82 <__swsetup_r+0xba>
 800da92:	bf00      	nop
 800da94:	2000003c 	.word	0x2000003c
 800da98:	0800e5ec 	.word	0x0800e5ec
 800da9c:	0800e60c 	.word	0x0800e60c
 800daa0:	0800e5cc 	.word	0x0800e5cc

0800daa4 <__swhatbuf_r>:
 800daa4:	b570      	push	{r4, r5, r6, lr}
 800daa6:	460e      	mov	r6, r1
 800daa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daac:	2900      	cmp	r1, #0
 800daae:	b096      	sub	sp, #88	; 0x58
 800dab0:	4614      	mov	r4, r2
 800dab2:	461d      	mov	r5, r3
 800dab4:	da08      	bge.n	800dac8 <__swhatbuf_r+0x24>
 800dab6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800daba:	2200      	movs	r2, #0
 800dabc:	602a      	str	r2, [r5, #0]
 800dabe:	061a      	lsls	r2, r3, #24
 800dac0:	d410      	bmi.n	800dae4 <__swhatbuf_r+0x40>
 800dac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dac6:	e00e      	b.n	800dae6 <__swhatbuf_r+0x42>
 800dac8:	466a      	mov	r2, sp
 800daca:	f000 f859 	bl	800db80 <_fstat_r>
 800dace:	2800      	cmp	r0, #0
 800dad0:	dbf1      	blt.n	800dab6 <__swhatbuf_r+0x12>
 800dad2:	9a01      	ldr	r2, [sp, #4]
 800dad4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dad8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dadc:	425a      	negs	r2, r3
 800dade:	415a      	adcs	r2, r3
 800dae0:	602a      	str	r2, [r5, #0]
 800dae2:	e7ee      	b.n	800dac2 <__swhatbuf_r+0x1e>
 800dae4:	2340      	movs	r3, #64	; 0x40
 800dae6:	2000      	movs	r0, #0
 800dae8:	6023      	str	r3, [r4, #0]
 800daea:	b016      	add	sp, #88	; 0x58
 800daec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800daf0 <__smakebuf_r>:
 800daf0:	898b      	ldrh	r3, [r1, #12]
 800daf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daf4:	079d      	lsls	r5, r3, #30
 800daf6:	4606      	mov	r6, r0
 800daf8:	460c      	mov	r4, r1
 800dafa:	d507      	bpl.n	800db0c <__smakebuf_r+0x1c>
 800dafc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	6123      	str	r3, [r4, #16]
 800db04:	2301      	movs	r3, #1
 800db06:	6163      	str	r3, [r4, #20]
 800db08:	b002      	add	sp, #8
 800db0a:	bd70      	pop	{r4, r5, r6, pc}
 800db0c:	ab01      	add	r3, sp, #4
 800db0e:	466a      	mov	r2, sp
 800db10:	f7ff ffc8 	bl	800daa4 <__swhatbuf_r>
 800db14:	9900      	ldr	r1, [sp, #0]
 800db16:	4605      	mov	r5, r0
 800db18:	4630      	mov	r0, r6
 800db1a:	f7fa fd41 	bl	80085a0 <_malloc_r>
 800db1e:	b948      	cbnz	r0, 800db34 <__smakebuf_r+0x44>
 800db20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db24:	059a      	lsls	r2, r3, #22
 800db26:	d4ef      	bmi.n	800db08 <__smakebuf_r+0x18>
 800db28:	f023 0303 	bic.w	r3, r3, #3
 800db2c:	f043 0302 	orr.w	r3, r3, #2
 800db30:	81a3      	strh	r3, [r4, #12]
 800db32:	e7e3      	b.n	800dafc <__smakebuf_r+0xc>
 800db34:	4b0d      	ldr	r3, [pc, #52]	; (800db6c <__smakebuf_r+0x7c>)
 800db36:	62b3      	str	r3, [r6, #40]	; 0x28
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	6020      	str	r0, [r4, #0]
 800db3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db40:	81a3      	strh	r3, [r4, #12]
 800db42:	9b00      	ldr	r3, [sp, #0]
 800db44:	6163      	str	r3, [r4, #20]
 800db46:	9b01      	ldr	r3, [sp, #4]
 800db48:	6120      	str	r0, [r4, #16]
 800db4a:	b15b      	cbz	r3, 800db64 <__smakebuf_r+0x74>
 800db4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db50:	4630      	mov	r0, r6
 800db52:	f000 f827 	bl	800dba4 <_isatty_r>
 800db56:	b128      	cbz	r0, 800db64 <__smakebuf_r+0x74>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f023 0303 	bic.w	r3, r3, #3
 800db5e:	f043 0301 	orr.w	r3, r3, #1
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	89a0      	ldrh	r0, [r4, #12]
 800db66:	4305      	orrs	r5, r0
 800db68:	81a5      	strh	r5, [r4, #12]
 800db6a:	e7cd      	b.n	800db08 <__smakebuf_r+0x18>
 800db6c:	0800b785 	.word	0x0800b785

0800db70 <_malloc_usable_size_r>:
 800db70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db74:	1f18      	subs	r0, r3, #4
 800db76:	2b00      	cmp	r3, #0
 800db78:	bfbc      	itt	lt
 800db7a:	580b      	ldrlt	r3, [r1, r0]
 800db7c:	18c0      	addlt	r0, r0, r3
 800db7e:	4770      	bx	lr

0800db80 <_fstat_r>:
 800db80:	b538      	push	{r3, r4, r5, lr}
 800db82:	4d07      	ldr	r5, [pc, #28]	; (800dba0 <_fstat_r+0x20>)
 800db84:	2300      	movs	r3, #0
 800db86:	4604      	mov	r4, r0
 800db88:	4608      	mov	r0, r1
 800db8a:	4611      	mov	r1, r2
 800db8c:	602b      	str	r3, [r5, #0]
 800db8e:	f7f4 f890 	bl	8001cb2 <_fstat>
 800db92:	1c43      	adds	r3, r0, #1
 800db94:	d102      	bne.n	800db9c <_fstat_r+0x1c>
 800db96:	682b      	ldr	r3, [r5, #0]
 800db98:	b103      	cbz	r3, 800db9c <_fstat_r+0x1c>
 800db9a:	6023      	str	r3, [r4, #0]
 800db9c:	bd38      	pop	{r3, r4, r5, pc}
 800db9e:	bf00      	nop
 800dba0:	200007fc 	.word	0x200007fc

0800dba4 <_isatty_r>:
 800dba4:	b538      	push	{r3, r4, r5, lr}
 800dba6:	4d06      	ldr	r5, [pc, #24]	; (800dbc0 <_isatty_r+0x1c>)
 800dba8:	2300      	movs	r3, #0
 800dbaa:	4604      	mov	r4, r0
 800dbac:	4608      	mov	r0, r1
 800dbae:	602b      	str	r3, [r5, #0]
 800dbb0:	f7f4 f88f 	bl	8001cd2 <_isatty>
 800dbb4:	1c43      	adds	r3, r0, #1
 800dbb6:	d102      	bne.n	800dbbe <_isatty_r+0x1a>
 800dbb8:	682b      	ldr	r3, [r5, #0]
 800dbba:	b103      	cbz	r3, 800dbbe <_isatty_r+0x1a>
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	bd38      	pop	{r3, r4, r5, pc}
 800dbc0:	200007fc 	.word	0x200007fc

0800dbc4 <_init>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	bf00      	nop
 800dbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbca:	bc08      	pop	{r3}
 800dbcc:	469e      	mov	lr, r3
 800dbce:	4770      	bx	lr

0800dbd0 <_fini>:
 800dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd2:	bf00      	nop
 800dbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd6:	bc08      	pop	{r3}
 800dbd8:	469e      	mov	lr, r3
 800dbda:	4770      	bx	lr
