
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  0800da00  0800da00  0001da00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6cc  0800e6cc  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6cc  0800e6cc  0001e6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6d4  0800e6d4  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e6d4  0800e6d4  0001e6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6dc  0800e6dc  0001e6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800e6e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  20000210  0800e8f0  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  0800e8f0  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023075  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004163  00000000  00000000  000432b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00047418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00048958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a8f  00000000  00000000  00049d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a52b  00000000  00000000  0007279f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea808  00000000  00000000  0008ccca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001774d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000852c  00000000  00000000  00177524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d9e8 	.word	0x0800d9e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800d9e8 	.word	0x0800d9e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_DMA_Init+0x38>)
 8001000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <MX_DMA_Init+0x38>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6493      	str	r3, [r2, #72]	; 0x48
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_DMA_Init+0x38>)
 800100c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2010      	movs	r0, #16
 800101c:	f002 f93f 	bl	800329e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001020:	2010      	movs	r0, #16
 8001022:	f002 f958 	bl	80032d6 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB8   ------> S_TIM16_CH1
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b5c      	ldr	r3, [pc, #368]	; (80011bc <MX_GPIO_Init+0x188>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a5b      	ldr	r2, [pc, #364]	; (80011bc <MX_GPIO_Init+0x188>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <MX_GPIO_Init+0x188>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <MX_GPIO_Init+0x188>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a55      	ldr	r2, [pc, #340]	; (80011bc <MX_GPIO_Init+0x188>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b53      	ldr	r3, [pc, #332]	; (80011bc <MX_GPIO_Init+0x188>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b50      	ldr	r3, [pc, #320]	; (80011bc <MX_GPIO_Init+0x188>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <MX_GPIO_Init+0x188>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <MX_GPIO_Init+0x188>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <MX_GPIO_Init+0x188>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a49      	ldr	r2, [pc, #292]	; (80011bc <MX_GPIO_Init+0x188>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <MX_GPIO_Init+0x188>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010aa:	2200      	movs	r2, #0
 80010ac:	f248 11b0 	movw	r1, #33200	; 0x81b0
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f002 fc8a 	bl	80039cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f242 0160 	movw	r1, #8288	; 0x2060
 80010be:	4840      	ldr	r0, [pc, #256]	; (80011c0 <MX_GPIO_Init+0x18c>)
 80010c0:	f002 fc84 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	483e      	ldr	r0, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010ca:	f002 fc7f 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4837      	ldr	r0, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x190>)
 80010e6:	f002 faf7 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80010ea:	f248 13b0 	movw	r3, #33200	; 0x81b0
 80010ee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001106:	f002 fae7 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800110a:	2340      	movs	r3, #64	; 0x40
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001112:	2301      	movs	r3, #1
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f002 fada 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 8001124:	f242 0360 	movw	r3, #8288	; 0x2060
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4820      	ldr	r0, [pc, #128]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800113e:	f002 facb 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001142:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001154:	2305      	movs	r3, #5
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <MX_GPIO_Init+0x18c>)
 8001160:	f002 faba 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4812      	ldr	r0, [pc, #72]	; (80011c4 <MX_GPIO_Init+0x190>)
 800117c:	f002 faac 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001192:	230e      	movs	r3, #14
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4808      	ldr	r0, [pc, #32]	; (80011c0 <MX_GPIO_Init+0x18c>)
 800119e:	f002 fa9b 	bl	80036d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	2028      	movs	r0, #40	; 0x28
 80011a8:	f002 f879 	bl	800329e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ac:	2028      	movs	r0, #40	; 0x28
 80011ae:	f002 f892 	bl	80032d6 <HAL_NVIC_EnableIRQ>

}
 80011b2:	bf00      	nop
 80011b4:	3728      	adds	r7, #40	; 0x28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000
 80011c0:	48000400 	.word	0x48000400
 80011c4:	48000800 	.word	0x48000800

080011c8 <_ZN3PinC1Ev>:
    uint16_t pin;
    bool valid;
    TIM_HandleTypeDef* p_tim;
    unsigned int tim_channel;

    Pin() : port(nullptr), pin(0), valid(false), p_tim(nullptr), tim_channel(0) {}
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	809a      	strh	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	719a      	strb	r2, [r3, #6]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_ZN3PinC1EP12GPIO_TypeDeft>:
    Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true), p_tim(nullptr), tim_channel(0) {} // no timer
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	4613      	mov	r3, r2
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	68ba      	ldr	r2, [r7, #8]
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	88fa      	ldrh	r2, [r7, #6]
 8001214:	809a      	strh	r2, [r3, #4]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2201      	movs	r2, #1
 800121a:	719a      	strb	r2, [r3, #6]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>:
    Pin(GPIO_TypeDef* p, uint16_t pn, TIM_HandleTypeDef* t, unsigned int c) : port(p), pin(pn), valid(true), p_tim(t), tim_channel(c) {}
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4613      	mov	r3, r2
 8001244:	80fb      	strh	r3, [r7, #6]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	68ba      	ldr	r2, [r7, #8]
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	88fa      	ldrh	r2, [r7, #6]
 8001250:	809a      	strh	r2, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2201      	movs	r2, #1
 8001256:	719a      	strb	r2, [r3, #6]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <_ZNSt11char_traitsIcE6assignERcRKc>:
#if __cpp_lib_three_way_comparison
      using comparison_category = strong_ordering;
#endif

      static _GLIBCXX17_CONSTEXPR void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
      { __c1 = __c2; }
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_ZNSt12_Base_bitsetILj1EEC1Ey>:
      _GLIBCXX_CONSTEXPR _Base_bitset() _GLIBCXX_NOEXCEPT
      : _M_w(0)
      { }

#if __cplusplus >= 201103L
      constexpr _Base_bitset(unsigned long long __val) noexcept
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	e9c7 2300 	strd	r2, r3, [r7]
#else
      _Base_bitset(unsigned long __val)
#endif
      : _M_w(__val)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]
      { }
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>:
      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbyte(size_t __pos) _GLIBCXX_NOEXCEPT
      { return (__pos % _GLIBCXX_BITSET_BITS_PER_WORD) / __CHAR_BIT__; }

      static _GLIBCXX_CONSTEXPR size_t
      _S_whichbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
      {  return __pos % _GLIBCXX_BITSET_BITS_PER_WORD; }
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f003 031f 	and.w	r3, r3, #31
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>:

      static _GLIBCXX_CONSTEXPR _WordT
      _S_maskbit(size_t __pos) _GLIBCXX_NOEXCEPT
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffec 	bl	80012b0 <_ZNSt12_Base_bitsetILj1EE11_S_whichbitEj>
 80012d8:	4603      	mov	r3, r0
 80012da:	2201      	movs	r2, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>:
      _WordT&
      _M_getword(size_t) _GLIBCXX_NOEXCEPT
      { return _M_w; }

      _GLIBCXX_CONSTEXPR _WordT
      _M_getword(size_t) const _GLIBCXX_NOEXCEPT
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
      { return _M_w; }
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7fe ffaf 	bl	8000270 <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <_Z5printPKc+0x2c>)
 800131e:	f005 fa07 	bl	8006730 <HAL_UART_Transmit>
 8001322:	4603      	mov	r3, r0
 8001324:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000070c 	.word	0x2000070c

08001334 <printf>:
int printf(const char* s, ...){
 8001334:	b40f      	push	{r0, r1, r2, r3}
 8001336:	b580      	push	{r7, lr}
 8001338:	b0c2      	sub	sp, #264	; 0x108
 800133a:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 800133c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001348:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 800134a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800134e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001352:	f107 0008 	add.w	r0, r7, #8
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800135c:	f009 f980 	bl	800a660 <vsiprintf>
	perror(buffer);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f007 ffdd 	bl	8009324 <perror>
	print(buffer);
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffc8 	bl	8001304 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ff79 	bl	8000270 <strlen>
 800137e:	4603      	mov	r3, r0
}
 8001380:	4618      	mov	r0, r3
 8001382:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001386:	46bd      	mov	sp, r7
 8001388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800138c:	b004      	add	sp, #16
 800138e:	4770      	bx	lr

08001390 <_Z12print_CYTRONPc>:
//Pin AMT22_1(GPIOC, GPIO_PIN_7);
RoverArmMotor Waist(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);



void print_CYTRON(char* msg){
 8001390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001394:	b08f      	sub	sp, #60	; 0x3c
 8001396:	af0a      	add	r7, sp, #40	; 0x28
 8001398:	60f8      	str	r0, [r7, #12]
  current_angle = Wrist_Roll.get_current_angle();
 800139a:	481f      	ldr	r0, [pc, #124]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 800139c:	f001 fac6 	bl	800292c <_ZN13RoverArmMotor17get_current_angleEv>
 80013a0:	eeb0 7a40 	vmov.f32	s14, s0
 80013a4:	eef0 7a60 	vmov.f32	s15, s1
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <_Z12print_CYTRONPc+0x8c>)
 80013aa:	ed83 7b00 	vstr	d7, [r3]
  current_angle_sw = Wrist_Roll.get_current_angle_sw();
 80013ae:	481a      	ldr	r0, [pc, #104]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 80013b0:	f001 fb02 	bl	80029b8 <_ZN13RoverArmMotor20get_current_angle_swEv>
 80013b4:	eeb0 7a40 	vmov.f32	s14, s0
 80013b8:	eef0 7a60 	vmov.f32	s15, s1
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <_Z12print_CYTRONPc+0x90>)
 80013be:	ed83 7b00 	vstr	d7, [r3]
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <_Z12print_CYTRONPc+0x8c>)
 80013c4:	ed93 7b00 	vldr	d7, [r3]
 80013c8:	ed87 7b00 	vstr	d7, [r7]
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <_Z12print_CYTRONPc+0x90>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	4911      	ldr	r1, [pc, #68]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 80013d4:	e9d1 0150 	ldrd	r0, r1, [r1, #320]	; 0x140
 80013d8:	4c0f      	ldr	r4, [pc, #60]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 80013da:	e9d4 4558 	ldrd	r4, r5, [r4, #352]	; 0x160
 80013de:	4e0e      	ldr	r6, [pc, #56]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 80013e0:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
    msg, current_angle, current_angle_sw, Wrist_Roll.setpoint, Wrist_Roll.zero_angle_sw,
    Wrist_Roll.internalPIDInstance._outputSum, *Wrist_Roll.internalPIDInstance._myOutput);
 80013e4:	4e0c      	ldr	r6, [pc, #48]	; (8001418 <_Z12print_CYTRONPc+0x88>)
 80013e6:	6c76      	ldr	r6, [r6, #68]	; 0x44
  printf("%s angle_raw %.2f, angle_sw %.2f, setpoint %.2f, zero_sw %.2f, _outputSum %.2f, output %.2f\r\n", 
 80013e8:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80013ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80013f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80013f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80013f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001400:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001404:	68f9      	ldr	r1, [r7, #12]
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <_Z12print_CYTRONPc+0x94>)
 8001408:	f7ff ff94 	bl	8001334 <printf>
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001416:	bf00      	nop
 8001418:	20000278 	.word	0x20000278
 800141c:	20000230 	.word	0x20000230
 8001420:	20000238 	.word	0x20000238
 8001424:	0800da00 	.word	0x0800da00

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b090      	sub	sp, #64	; 0x40
 800142c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142e:	f001 fdbb 	bl	8002fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001432:	f000 f8d7 	bl	80015e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001436:	f7ff fdfd 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 800143a:	f7ff fddd 	bl	8000ff8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800143e:	f000 ff41 	bl	80022c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001442:	f000 fb37 	bl	8001ab4 <MX_SPI1_Init>
//  MX_SPI2_Init();
  MX_SPI3_Init();
 8001446:	f000 fb73 	bl	8001b30 <MX_SPI3_Init>
  MX_TIM1_Init();
 800144a:	f000 fd67 	bl	8001f1c <MX_TIM1_Init>
  MX_TIM2_Init();
 800144e:	f000 fe11 	bl	8002074 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 8001452:	2363      	movs	r3, #99	; 0x63
 8001454:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t encoderData_2 = 99;
 8001456:	2363      	movs	r3, #99	; 0x63
 8001458:	86bb      	strh	r3, [r7, #52]	; 0x34
  uint16_t encoderData_3 = 99;
 800145a:	2363      	movs	r3, #99	; 0x63
 800145c:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t encoder_max = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t encoder_min = 4100;
 8001462:	f241 0304 	movw	r3, #4100	; 0x1004
 8001466:	85fb      	strh	r3, [r7, #46]	; 0x2e
  HAL_TIM_Base_Start(&htim1);
 8001468:	484d      	ldr	r0, [pc, #308]	; (80015a0 <main+0x178>)
 800146a:	f004 f929 	bl	80056c0 <HAL_TIM_Base_Start>

  /*---AMT22 setup---*/
  // resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);

  /*---SERVO setup---*/
  int32_t  CH2_ESC = 1500-1;
 800146e:	f240 53db 	movw	r3, #1499	; 0x5db
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001474:	2104      	movs	r1, #4
 8001476:	484a      	ldr	r0, [pc, #296]	; (80015a0 <main+0x178>)
 8001478:	f004 f9d0 	bl	800581c <HAL_TIM_PWM_Start>
  HAL_Delay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001480:	f001 fe0e 	bl	80030a0 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1500-1);
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <main+0x178>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f240 52db 	movw	r2, #1499	; 0x5db
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(500);
 800148e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001492:	f001 fe05 	bl	80030a0 <HAL_Delay>




  /*---CYTRON setup---*/
  int32_t  CH2_DC = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
  HAL_Delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f001 fe00 	bl	80030a0 <HAL_Delay>
  Wrist_Roll.wrist_waist = 1;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <main+0x17c>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
  Wrist_Roll.begin(aggKp, aggKi, aggKd, regKp, regKi, regKd);
 80014a8:	4b3f      	ldr	r3, [pc, #252]	; (80015a8 <main+0x180>)
 80014aa:	ed93 7b00 	vldr	d7, [r3]
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <main+0x184>)
 80014b0:	ed93 6b00 	vldr	d6, [r3]
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <main+0x188>)
 80014b6:	ed93 2b00 	vldr	d2, [r3]
 80014ba:	4b3e      	ldr	r3, [pc, #248]	; (80015b4 <main+0x18c>)
 80014bc:	ed93 3b00 	vldr	d3, [r3]
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <main+0x190>)
 80014c2:	ed93 4b00 	vldr	d4, [r3]
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <main+0x194>)
 80014c8:	ed93 5b00 	vldr	d5, [r3]
 80014cc:	eeb0 1a46 	vmov.f32	s2, s12
 80014d0:	eef0 1a66 	vmov.f32	s3, s13
 80014d4:	eeb0 0a47 	vmov.f32	s0, s14
 80014d8:	eef0 0a67 	vmov.f32	s1, s15
 80014dc:	4831      	ldr	r0, [pc, #196]	; (80015a4 <main+0x17c>)
 80014de:	f001 f897 	bl	8002610 <_ZN13RoverArmMotor5beginEdddddd>
  Wrist_Roll.setAngleLimits(2, 120.0f); //for angle limits test
 80014e2:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001590 <main+0x168>
 80014e6:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8001598 <main+0x170>
 80014ea:	482e      	ldr	r0, [pc, #184]	; (80015a4 <main+0x17c>)
 80014ec:	f001 f9d1 	bl	8002892 <_ZN13RoverArmMotor14setAngleLimitsEdd>
  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
  // current_angle = Wrist_Roll.get_current_angle();
  // printf("current angle is %f\r\n, current_angle");
  // Wrist_Roll.newSetpoint(current_angle + 150);

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 30);
 80014f0:	4b33      	ldr	r3, [pc, #204]	; (80015c0 <main+0x198>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	221e      	movs	r2, #30
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
  while(!brakeSet){
 80014f8:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <main+0x19c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d103      	bne.n	8001508 <main+0xe0>
    print_CYTRON("BRAKE");
 8001500:	4831      	ldr	r0, [pc, #196]	; (80015c8 <main+0x1a0>)
 8001502:	f7ff ff45 	bl	8001390 <_Z12print_CYTRONPc>
  while(!brakeSet){
 8001506:	e7f7      	b.n	80014f8 <main+0xd0>
    // printf("waiting for brake set\r\n");
  }
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001508:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <main+0x198>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	639a      	str	r2, [r3, #56]	; 0x38

  /*---UART setup---*/
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001510:	2201      	movs	r2, #1
 8001512:	492e      	ldr	r1, [pc, #184]	; (80015cc <main+0x1a4>)
 8001514:	482e      	ldr	r0, [pc, #184]	; (80015d0 <main+0x1a8>)
 8001516:	f005 f99f 	bl	8006858 <HAL_UART_Receive_IT>
    // printf("encoder 2 gives %d\r\n", encoderData_2);
    // printf("encoder 3 gives %d\r\n", encoderData_3);
    // // int16_t* turn_count = (int16_t*)malloc(2*sizeof(int16_t));

    int16_t turn_count[2];
    getTurnCounterSPI(turn_count, &hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 800151a:	f107 0008 	add.w	r0, r7, #8
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <main+0x178>)
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	230c      	movs	r3, #12
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <main+0x1ac>)
 800152a:	492b      	ldr	r1, [pc, #172]	; (80015d8 <main+0x1b0>)
 800152c:	f006 fc9b 	bl	8007e66 <getTurnCounterSPI>
    printf("count is %d and %d\r\n", turn_count[0], turn_count[1]);
 8001530:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001534:	4619      	mov	r1, r3
 8001536:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800153a:	461a      	mov	r2, r3
 800153c:	4827      	ldr	r0, [pc, #156]	; (80015dc <main+0x1b4>)
 800153e:	f7ff fef9 	bl	8001334 <printf>
    std::bitset<16> y(turn_count[1]);
 8001542:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001546:	b21b      	sxth	r3, r3
 8001548:	17da      	asrs	r2, r3, #31
 800154a:	461c      	mov	r4, r3
 800154c:	4615      	mov	r5, r2
 800154e:	1d39      	adds	r1, r7, #4
 8001550:	4622      	mov	r2, r4
 8001552:	462b      	mov	r3, r5
 8001554:	4608      	mov	r0, r1
 8001556:	f000 f974 	bl	8001842 <_ZNSt6bitsetILj16EEC1Ey>
    printf("%s\r\n", y.to_string().c_str());
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	1d3a      	adds	r2, r7, #4
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 f982 	bl	800186c <_ZNKSt6bitsetILj16EE9to_stringB5cxx11Ev>
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fe4f 	bl	8008210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001572:	4603      	mov	r3, r0
 8001574:	4619      	mov	r1, r3
 8001576:	481a      	ldr	r0, [pc, #104]	; (80015e0 <main+0x1b8>)
 8001578:	f7ff fedc 	bl	8001334 <printf>
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4618      	mov	r0, r3
 8001582:	f006 fdf1 	bl	8008168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    // std::cout << y << '\n';
    HAL_Delay(100);
 8001586:	2064      	movs	r0, #100	; 0x64
 8001588:	f001 fd8a 	bl	80030a0 <HAL_Delay>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800158c:	e7c5      	b.n	800151a <main+0xf2>
 800158e:	bf00      	nop
 8001590:	00000000 	.word	0x00000000
 8001594:	405e0000 	.word	0x405e0000
 8001598:	00000000 	.word	0x00000000
 800159c:	40000000 	.word	0x40000000
 80015a0:	20000674 	.word	0x20000674
 80015a4:	20000278 	.word	0x20000278
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000010 	.word	0x20000010
 80015b4:	20000018 	.word	0x20000018
 80015b8:	20000020 	.word	0x20000020
 80015bc:	20000028 	.word	0x20000028
 80015c0:	200006c0 	.word	0x200006c0
 80015c4:	20000240 	.word	0x20000240
 80015c8:	0800da60 	.word	0x0800da60
 80015cc:	20000560 	.word	0x20000560
 80015d0:	2000070c 	.word	0x2000070c
 80015d4:	48000800 	.word	0x48000800
 80015d8:	200005a8 	.word	0x200005a8
 80015dc:	0800da68 	.word	0x0800da68
 80015e0:	0800da80 	.word	0x0800da80

080015e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	; 0x58
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2244      	movs	r2, #68	; 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 fe9a 	bl	800832c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	; 0x200
 800160a:	f002 fa1d 	bl	8003a48 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	bf14      	ite	ne
 8001614:	2301      	movne	r3, #1
 8001616:	2300      	moveq	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800161e:	f000 f90b 	bl	8001838 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001622:	2302      	movs	r3, #2
 8001624:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800162a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162c:	2310      	movs	r3, #16
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001630:	2302      	movs	r3, #2
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800163c:	230a      	movs	r3, #10
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001640:	2307      	movs	r3, #7
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fa4f 	bl	8003af4 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf14      	ite	ne
 800165c:	2301      	movne	r3, #1
 800165e:	2300      	moveq	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8001666:	f000 f8e7 	bl	8001838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	230f      	movs	r3, #15
 800166c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166e:	2303      	movs	r3, #3
 8001670:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	2104      	movs	r1, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fe4a 	bl	800431c <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8001698:	f000 f8ce 	bl	8001838 <Error_Handler>
  }
}
 800169c:	bf00      	nop
 800169e:	3758      	adds	r7, #88	; 0x58
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  // if(!brakeSet) {
    if(GPIO_Pin == B1_Pin) // INT Source is pin A9
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b4:	d115      	bne.n	80016e2 <HAL_GPIO_EXTI_Callback+0x3e>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  // set encoder stationary
 80016b6:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <HAL_GPIO_EXTI_Callback+0x44>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(100);  
 80016be:	2064      	movs	r0, #100	; 0x64
 80016c0:	f001 fcee 	bl	80030a0 <HAL_Delay>
      button_counter++;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_GPIO_EXTI_Callback+0x48>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_GPIO_EXTI_Callback+0x48>)
 80016cc:	6013      	str	r3, [r2, #0]
      Wrist_Roll.set_zero_angle_sw();
 80016ce:	4808      	ldr	r0, [pc, #32]	; (80016f0 <HAL_GPIO_EXTI_Callback+0x4c>)
 80016d0:	f001 f903 	bl	80028da <_ZN13RoverArmMotor17set_zero_angle_swEv>
      brakeSet = 1;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <HAL_GPIO_EXTI_Callback+0x50>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]
      HAL_Delay(100);
 80016da:	2064      	movs	r0, #100	; 0x64
 80016dc:	f001 fce0 	bl	80030a0 <HAL_Delay>
      return;
 80016e0:	bf00      	nop
    }
  // }
}
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200006c0 	.word	0x200006c0
 80016ec:	200003e0 	.word	0x200003e0
 80016f0:	20000278 	.word	0x20000278
 80016f4:	20000240 	.word	0x20000240

080016f8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af04      	add	r7, sp, #16
 80016fe:	6078      	str	r0, [r7, #4]
  // if(huart->Instance == USART2)
  // {
    if(rx_index < RX_BUFFER_SIZE - 1) // check if buffer is not full
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b1c      	cmp	r3, #28
 8001706:	d850      	bhi.n	80017aa <HAL_UART_RxCpltCallback+0xb2>
    {
      rx_buffer[rx_index++] = (uint8_t)rx_data[0]; // add received byte to buffer
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	1c5a      	adds	r2, r3, #1
 800170e:	493e      	ldr	r1, [pc, #248]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 8001710:	600a      	str	r2, [r1, #0]
 8001712:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_UART_RxCpltCallback+0x114>)
 8001714:	7811      	ldrb	r1, [r2, #0]
 8001716:	4a3e      	ldr	r2, [pc, #248]	; (8001810 <HAL_UART_RxCpltCallback+0x118>)
 8001718:	54d1      	strb	r1, [r2, r3]
      if(rx_data[0] == '\n' || rx_data[0] == '\r') // check for Enter key
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_UART_RxCpltCallback+0x114>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b0a      	cmp	r3, #10
 8001720:	d003      	beq.n	800172a <HAL_UART_RxCpltCallback+0x32>
 8001722:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_UART_RxCpltCallback+0x114>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b0d      	cmp	r3, #13
 8001728:	d165      	bne.n	80017f6 <HAL_UART_RxCpltCallback+0xfe>
      {
        rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a38      	ldr	r2, [pc, #224]	; (8001810 <HAL_UART_RxCpltCallback+0x118>)
 8001730:	2100      	movs	r1, #0
 8001732:	54d1      	strb	r1, [r2, r3]
        rx_index = 0; // reset buffer index
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
        // do something with the received data
        sscanf(rx_buffer, "%lf %lf %lf", &Kp, &Ki, &Kd);
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 8001742:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_UART_RxCpltCallback+0x128>)
 8001744:	4832      	ldr	r0, [pc, #200]	; (8001810 <HAL_UART_RxCpltCallback+0x118>)
 8001746:	f007 fe6f 	bl	8009428 <siscanf>
        Wrist_Roll.set_PID_params(Kp, Ki, Kd, Kp, Ki, Kd);
 800174a:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 800174c:	ed93 7b00 	vldr	d7, [r3]
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 8001752:	ed93 6b00 	vldr	d6, [r3]
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 8001758:	ed93 2b00 	vldr	d2, [r3]
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 800175e:	ed93 3b00 	vldr	d3, [r3]
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 8001764:	ed93 4b00 	vldr	d4, [r3]
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 800176a:	ed93 5b00 	vldr	d5, [r3]
 800176e:	eeb0 1a46 	vmov.f32	s2, s12
 8001772:	eef0 1a66 	vmov.f32	s3, s13
 8001776:	eeb0 0a47 	vmov.f32	s0, s14
 800177a:	eef0 0a67 	vmov.f32	s1, s15
 800177e:	4829      	ldr	r0, [pc, #164]	; (8001824 <HAL_UART_RxCpltCallback+0x12c>)
 8001780:	f001 f83c 	bl	80027fc <_ZN13RoverArmMotor14set_PID_paramsEdddddd>
        printf("set to Kp: %lf, Ki: %lf, Kd: %lf\r\n", Kp, Ki, Kd);
 8001784:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 8001786:	e9d3 4500 	ldrd	r4, r5, [r3]
 800178a:	4b23      	ldr	r3, [pc, #140]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4920      	ldr	r1, [pc, #128]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 8001792:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800179a:	e9cd 2300 	strd	r2, r3, [sp]
 800179e:	4622      	mov	r2, r4
 80017a0:	462b      	mov	r3, r5
 80017a2:	4821      	ldr	r0, [pc, #132]	; (8001828 <HAL_UART_RxCpltCallback+0x130>)
 80017a4:	f7ff fdc6 	bl	8001334 <printf>
 80017a8:	e025      	b.n	80017f6 <HAL_UART_RxCpltCallback+0xfe>
      }
    }
    else if (rx_index == RX_BUFFER_SIZE - 1) // buffer is full
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b1d      	cmp	r3, #29
 80017b0:	d121      	bne.n	80017f6 <HAL_UART_RxCpltCallback+0xfe>
    {
      rx_buffer[rx_index] = '\0'; // add null terminator to make it a string
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_UART_RxCpltCallback+0x118>)
 80017b8:	2100      	movs	r1, #0
 80017ba:	54d1      	strb	r1, [r2, r3]
      rx_index = 0; // reset buffer index
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_UART_RxCpltCallback+0x110>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
      // do something with the received data
      sscanf(rx_buffer, "%lf %lf %lf\n", &Kp, &Ki, &Kd);
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 80017ca:	4918      	ldr	r1, [pc, #96]	; (800182c <HAL_UART_RxCpltCallback+0x134>)
 80017cc:	4810      	ldr	r0, [pc, #64]	; (8001810 <HAL_UART_RxCpltCallback+0x118>)
 80017ce:	f007 fe2b 	bl	8009428 <siscanf>
      printf("Kp: %lf, Ki: %lf, Kd: %lf\r\n", Kp, Ki, Kd);
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_UART_RxCpltCallback+0x124>)
 80017d4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_UART_RxCpltCallback+0x120>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	490d      	ldr	r1, [pc, #52]	; (8001814 <HAL_UART_RxCpltCallback+0x11c>)
 80017e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80017e8:	e9cd 2300 	strd	r2, r3, [sp]
 80017ec:	4622      	mov	r2, r4
 80017ee:	462b      	mov	r3, r5
 80017f0:	480f      	ldr	r0, [pc, #60]	; (8001830 <HAL_UART_RxCpltCallback+0x138>)
 80017f2:	f7ff fd9f 	bl	8001334 <printf>
    }
  // }
  HAL_UART_Receive_IT(&huart2, rx_data, 1); // start listening for next byte
 80017f6:	2201      	movs	r2, #1
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <HAL_UART_RxCpltCallback+0x114>)
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <HAL_UART_RxCpltCallback+0x13c>)
 80017fc:	f005 f82c 	bl	8006858 <HAL_UART_Receive_IT>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bdb0      	pop	{r4, r5, r7, pc}
 8001808:	20000588 	.word	0x20000588
 800180c:	20000560 	.word	0x20000560
 8001810:	20000568 	.word	0x20000568
 8001814:	200005a0 	.word	0x200005a0
 8001818:	20000598 	.word	0x20000598
 800181c:	20000590 	.word	0x20000590
 8001820:	0800da88 	.word	0x0800da88
 8001824:	20000278 	.word	0x20000278
 8001828:	0800da94 	.word	0x0800da94
 800182c:	0800dab8 	.word	0x0800dab8
 8001830:	0800dac8 	.word	0x0800dac8
 8001834:	2000070c 	.word	0x2000070c

08001838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800183c:	b672      	cpsid	i
}
 800183e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001840:	e7fe      	b.n	8001840 <Error_Handler+0x8>

08001842 <_ZNSt6bitsetILj16EEC1Ey>:
      _GLIBCXX_CONSTEXPR bitset() _GLIBCXX_NOEXCEPT
      { }

      /// Initial bits bitwise-copied from a single word (others set to zero).
#if __cplusplus >= 201103L
      constexpr bitset(unsigned long long __val) noexcept
 8001842:	b590      	push	{r4, r7, lr}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	e9c7 2300 	strd	r2, r3, [r7]
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
 800184e:	68fc      	ldr	r4, [r7, #12]
 8001850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001854:	f000 f818 	bl	8001888 <_ZNSt13_Sanitize_valILj16ELb1EE18_S_do_sanitize_valEy>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	f7ff fd17 	bl	8001290 <_ZNSt12_Base_bitsetILj1EEC1Ey>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <_ZNKSt6bitsetILj16EE9to_stringB5cxx11Ev>:
	  return to_string<_CharT, std::char_traits<_CharT>,
	                   std::allocator<_CharT> >(__zero, __one);
	}

      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
      {
	return to_string<char, std::char_traits<char>,
	                 std::allocator<char> >();
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f814 	bl	80018a8 <_ZNKSt6bitsetILj16EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>
      }
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_ZNSt13_Sanitize_valILj16ELb1EE18_S_do_sanitize_valEy>:
      _S_do_sanitize_val(unsigned long long __val)
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	e9c7 0100 	strd	r0, r1, [r7]
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
 8001892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001896:	b282      	uxth	r2, r0
 8001898:	2300      	movs	r3, #0
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_ZNKSt6bitsetILj16EE9to_stringIcSt11char_traitsIcESaIcEEENSt7__cxx1112basic_stringIT_T0_T1_EEv>:
	to_string() const
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	  std::basic_string<_CharT, _Traits, _Alloc> __result;
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f006 fc51 	bl	800815a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	  _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
 80018b8:	2331      	movs	r3, #49	; 0x31
 80018ba:	2230      	movs	r2, #48	; 0x30
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f000 f805 	bl	80018ce <_ZNKSt6bitsetILj16EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>
	  return __result;
 80018c4:	bf00      	nop
	}
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_ZNKSt6bitsetILj16EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_>:
      }

  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
      void
      bitset<_Nb>::
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	4611      	mov	r1, r2
 80018da:	461a      	mov	r2, r3
 80018dc:	460b      	mov	r3, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
			_CharT __zero, _CharT __one) const
      {
	__s.assign(_Nb, __zero);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	461a      	mov	r2, r3
 80018e8:	2110      	movs	r1, #16
 80018ea:	68b8      	ldr	r0, [r7, #8]
 80018ec:	f006 fc86 	bl	80081fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>
	for (size_t __i = _Nb; __i > 0; --__i)
 80018f0:	2310      	movs	r3, #16
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d019      	beq.n	800192e <_ZNKSt6bitsetILj16EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x60>
	  if (_Unchecked_test(__i - 1))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	4619      	mov	r1, r3
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f818 	bl	8001936 <_ZNKSt6bitsetILj16EE15_Unchecked_testEj>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00c      	beq.n	8001926 <_ZNKSt6bitsetILj16EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x58>
	    _Traits::assign(__s[_Nb - __i], __one);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f1c3 0310 	rsb	r3, r3, #16
 8001912:	4619      	mov	r1, r3
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f006 fc2d 	bl	8008174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800191a:	4602      	mov	r2, r0
 800191c:	1dbb      	adds	r3, r7, #6
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff fca6 	bl	8001272 <_ZNSt11char_traitsIcE6assignERcRKc>
	for (size_t __i = _Nb; __i > 0; --__i)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3b01      	subs	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e7e2      	b.n	80018f4 <_ZNKSt6bitsetILj16EE17_M_copy_to_stringIcSt11char_traitsIcESaIcEEEvRNSt7__cxx1112basic_stringIT_T0_T1_EES7_S7_+0x26>
      }
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZNKSt6bitsetILj16EE15_Unchecked_testEj>:
      _Unchecked_test(size_t __pos) const _GLIBCXX_NOEXCEPT
 8001936:	b590      	push	{r4, r7, lr}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6839      	ldr	r1, [r7, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fccf 	bl	80012e8 <_ZNKSt12_Base_bitsetILj1EE10_M_getwordEj>
 800194a:	4604      	mov	r4, r0
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f7ff fcbc 	bl	80012ca <_ZNSt12_Base_bitsetILj1EE10_S_maskbitEj>
 8001952:	4603      	mov	r3, r0
 8001954:	4023      	ands	r3, r4
		!= static_cast<_WordT>(0)); }
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001968:	b5b0      	push	{r4, r5, r7, lr}
 800196a:	b09a      	sub	sp, #104	; 0x68
 800196c:	af10      	add	r7, sp, #64	; 0x40
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d172      	bne.n	8001a5e <_Z41__static_initialization_and_destruction_0ii+0xf6>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800197e:	4293      	cmp	r3, r2
 8001980:	d16d      	bne.n	8001a5e <_Z41__static_initialization_and_destruction_0ii+0xf6>
Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 8001982:	2220      	movs	r2, #32
 8001984:	493c      	ldr	r1, [pc, #240]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001986:	483d      	ldr	r0, [pc, #244]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001988:	f7ff fc38 	bl	80011fc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin, &htim2, TIM_CHANNEL_2);
 800198c:	2304      	movs	r3, #4
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001992:	2208      	movs	r2, #8
 8001994:	4938      	ldr	r1, [pc, #224]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001996:	483b      	ldr	r0, [pc, #236]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001998:	f7ff fc4d 	bl	8001236 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
Pin AMT22_1(GPIOC, GPIO_PIN_7);
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	493a      	ldr	r1, [pc, #232]	; (8001a88 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 80019a0:	483a      	ldr	r0, [pc, #232]	; (8001a8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80019a2:	f7ff fc2b 	bl	80011fc <_ZN3PinC1EP12GPIO_TypeDeft>
RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fc0c 	bl	80011c8 <_ZN3PinC1Ev>
 80019b0:	4c34      	ldr	r4, [pc, #208]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 80019b2:	ad0b      	add	r5, sp, #44	; 0x2c
 80019b4:	f107 0308 	add.w	r3, r7, #8
 80019b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019ba:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019be:	2300      	movs	r3, #0
 80019c0:	930a      	str	r3, [sp, #40]	; 0x28
 80019c2:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 80019c4:	ad06      	add	r5, sp, #24
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 80019ce:	ad02      	add	r5, sp, #8
 80019d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80019d6:	466a      	mov	r2, sp
 80019d8:	f104 0308 	add.w	r3, r4, #8
 80019dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80019e4:	e894 000c 	ldmia.w	r4, {r2, r3}
 80019e8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001a68 <_Z41__static_initialization_and_destruction_0ii+0x100>
 80019ec:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001a70 <_Z41__static_initialization_and_destruction_0ii+0x108>
 80019f0:	4927      	ldr	r1, [pc, #156]	; (8001a90 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 80019f2:	4828      	ldr	r0, [pc, #160]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 80019f4:	f000 fd65 	bl	80024c2 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
Pin SERVO_PWM_1(SERVO_PWM_1_GPIO_Port, SERVO_PWM_1_Pin, &htim1, TIM_CHANNEL_2);
 80019f8:	2304      	movs	r3, #4
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x130>)
 80019fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a02:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a06:	4825      	ldr	r0, [pc, #148]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x134>)
 8001a08:	f7ff fc15 	bl	8001236 <_ZN3PinC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefj>
RoverArmMotor Waist(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fbd9 	bl	80011c8 <_ZN3PinC1Ev>
 8001a16:	4c1b      	ldr	r4, [pc, #108]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001a18:	ad0b      	add	r5, sp, #44	; 0x2c
 8001a1a:	f107 0318 	add.w	r3, r7, #24
 8001a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a24:	2300      	movs	r3, #0
 8001a26:	930a      	str	r3, [sp, #40]	; 0x28
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001a2a:	ad06      	add	r5, sp, #24
 8001a2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a2e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001a34:	ad02      	add	r5, sp, #8
 8001a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a3c:	466a      	mov	r2, sp
 8001a3e:	f104 0308 	add.w	r3, r4, #8
 8001a42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a46:	e882 0003 	stmia.w	r2, {r0, r1}
 8001a4a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001a4e:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8001a68 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8001a52:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001a70 <_Z41__static_initialization_and_destruction_0ii+0x108>
 8001a56:	490e      	ldr	r1, [pc, #56]	; (8001a90 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0x138>)
 8001a5a:	f000 fd32 	bl	80024c2 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>
}
 8001a5e:	bf00      	nop
 8001a60:	3728      	adds	r7, #40	; 0x28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	bf00      	nop
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40767000 	.word	0x40767000
	...
 8001a78:	48000400 	.word	0x48000400
 8001a7c:	20000244 	.word	0x20000244
 8001a80:	200006c0 	.word	0x200006c0
 8001a84:	20000254 	.word	0x20000254
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	20000264 	.word	0x20000264
 8001a90:	200005a8 	.word	0x200005a8
 8001a94:	20000278 	.word	0x20000278
 8001a98:	20000674 	.word	0x20000674
 8001a9c:	200003e4 	.word	0x200003e4
 8001aa0:	200003f8 	.word	0x200003f8

08001aa4 <_GLOBAL__sub_I_aggKp>:
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff ff5b 	bl	8001968 <_Z41__static_initialization_and_destruction_0ii>
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <MX_SPI1_Init+0x78>)
 8001abc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ac4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001ace:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ad2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ae6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001aea:	2228      	movs	r2, #40	; 0x28
 8001aec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001b02:	2207      	movs	r2, #7
 8001b04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001b0e:	2208      	movs	r2, #8
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_SPI1_Init+0x74>)
 8001b14:	f003 f962 	bl	8004ddc <HAL_SPI_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b1e:	f7ff fe8b 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200005a8 	.word	0x200005a8
 8001b2c:	40013000 	.word	0x40013000

08001b30 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <MX_SPI3_Init+0x78>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b4a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b66:	2220      	movs	r2, #32
 8001b68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b7e:	2207      	movs	r2, #7
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_SPI3_Init+0x74>)
 8001b90:	f003 f924 	bl	8004ddc <HAL_SPI_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f7ff fe4d 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000060c 	.word	0x2000060c
 8001ba8:	40003c00 	.word	0x40003c00

08001bac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a2f      	ldr	r2, [pc, #188]	; (8001c88 <HAL_SPI_MspInit+0xdc>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12a      	bne.n	8001c24 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bce:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	4a2e      	ldr	r2, [pc, #184]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bd8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	4a28      	ldr	r2, [pc, #160]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8001bfe:	f641 0302 	movw	r3, #6146	; 0x1802
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c10:	2305      	movs	r3, #5
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f001 fd5b 	bl	80036d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001c22:	e02d      	b.n	8001c80 <HAL_SPI_MspInit+0xd4>
  else if(spiHandle->Instance==SPI3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_SPI_MspInit+0xe4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d128      	bne.n	8001c80 <HAL_SPI_MspInit+0xd4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <HAL_SPI_MspInit+0xe0>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c70:	2306      	movs	r3, #6
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	; (8001c94 <HAL_SPI_MspInit+0xe8>)
 8001c7c:	f001 fd2c 	bl	80036d8 <HAL_GPIO_Init>
}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40003c00 	.word	0x40003c00
 8001c94:	48000800 	.word	0x48000800

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_MspInit+0x44>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x44>)
 8001cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_MspInit+0x44>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_MspInit+0x44>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_MspInit+0x44>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0x4>

08001ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cea:	e7fe      	b.n	8001cea <HardFault_Handler+0x4>

08001cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <MemManage_Handler+0x4>

08001cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <BusFault_Handler+0x4>

08001cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <UsageFault_Handler+0x4>

08001cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d2c:	f001 f998 	bl	8003060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Channel6_IRQHandler+0x10>)
 8001d3a:	f001 fc1e 	bl	800357a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000790 	.word	0x20000790

08001d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <USART2_IRQHandler+0x10>)
 8001d4e:	f004 fdd9 	bl	8006904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000070c 	.word	0x2000070c

08001d5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d64:	f001 fe4a 	bl	80039fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d86:	f006 fa6f 	bl	8008268 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00a      	b.n	8001dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dc2:	f3af 8000 	nop.w
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf0      	blt.n	8001dc2 <_read+0x12>
  }

  return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e009      	b.n	8001e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf1      	blt.n	8001dfc <_write+0x12>
  }
  return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:

int _close(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_isatty>:

int _isatty(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f006 f9d4 	bl	8008268 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20010000 	.word	0x20010000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000670 	.word	0x20000670
 8001ef4:	200007f0 	.word	0x200007f0

08001ef8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b09a      	sub	sp, #104	; 0x68
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	222c      	movs	r2, #44	; 0x2c
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f006 f9e8 	bl	800832c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f5c:	4b43      	ldr	r3, [pc, #268]	; (800206c <MX_TIM1_Init+0x150>)
 8001f5e:	4a44      	ldr	r2, [pc, #272]	; (8002070 <MX_TIM1_Init+0x154>)
 8001f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8001f62:	4b42      	ldr	r3, [pc, #264]	; (800206c <MX_TIM1_Init+0x150>)
 8001f64:	224f      	movs	r2, #79	; 0x4f
 8001f66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <MX_TIM1_Init+0x150>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	; (800206c <MX_TIM1_Init+0x150>)
 8001f70:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001f74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <MX_TIM1_Init+0x150>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <MX_TIM1_Init+0x150>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b3a      	ldr	r3, [pc, #232]	; (800206c <MX_TIM1_Init+0x150>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f88:	4838      	ldr	r0, [pc, #224]	; (800206c <MX_TIM1_Init+0x150>)
 8001f8a:	f003 fb41 	bl	8005610 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f7ff fc50 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4831      	ldr	r0, [pc, #196]	; (800206c <MX_TIM1_Init+0x150>)
 8001fa6:	f003 fe2b 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001fb0:	f7ff fc42 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fb4:	482d      	ldr	r0, [pc, #180]	; (800206c <MX_TIM1_Init+0x150>)
 8001fb6:	f003 fbcf 	bl	8005758 <HAL_TIM_PWM_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001fc0:	f7ff fc3a 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4825      	ldr	r0, [pc, #148]	; (800206c <MX_TIM1_Init+0x150>)
 8001fd8:	f004 fa7e 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fe2:	f7ff fc29 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe6:	2360      	movs	r3, #96	; 0x60
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002006:	2204      	movs	r2, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4818      	ldr	r0, [pc, #96]	; (800206c <MX_TIM1_Init+0x150>)
 800200c:	f003 fce4 	bl	80059d8 <HAL_TIM_PWM_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002016:	f7ff fc0f 	bl	8001838 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002032:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800203c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM1_Init+0x150>)
 8002050:	f004 faa8 	bl	80065a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800205a:	f7ff fbed 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM1_Init+0x150>)
 8002060:	f000 f8d4 	bl	800220c <HAL_TIM_MspPostInit>

}
 8002064:	bf00      	nop
 8002066:	3768      	adds	r7, #104	; 0x68
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000674 	.word	0x20000674
 8002070:	40012c00 	.word	0x40012c00

08002074 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002094:	463b      	mov	r3, r7
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020a6:	4b2d      	ldr	r3, [pc, #180]	; (800215c <MX_TIM2_Init+0xe8>)
 80020a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <MX_TIM2_Init+0xe8>)
 80020b0:	224f      	movs	r2, #79	; 0x4f
 80020b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b29      	ldr	r3, [pc, #164]	; (800215c <MX_TIM2_Init+0xe8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <MX_TIM2_Init+0xe8>)
 80020bc:	2263      	movs	r2, #99	; 0x63
 80020be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b26      	ldr	r3, [pc, #152]	; (800215c <MX_TIM2_Init+0xe8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <MX_TIM2_Init+0xe8>)
 80020c8:	2280      	movs	r2, #128	; 0x80
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020cc:	4823      	ldr	r0, [pc, #140]	; (800215c <MX_TIM2_Init+0xe8>)
 80020ce:	f003 fa9f 	bl	8005610 <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020d8:	f7ff fbae 	bl	8001838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	4619      	mov	r1, r3
 80020e8:	481c      	ldr	r0, [pc, #112]	; (800215c <MX_TIM2_Init+0xe8>)
 80020ea:	f003 fd89 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020f4:	f7ff fba0 	bl	8001838 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020f8:	4818      	ldr	r0, [pc, #96]	; (800215c <MX_TIM2_Init+0xe8>)
 80020fa:	f003 fb2d 	bl	8005758 <HAL_TIM_PWM_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002104:	f7ff fb98 	bl	8001838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_TIM2_Init+0xe8>)
 8002118:	f004 f9de 	bl	80064d8 <HAL_TIMEx_MasterConfigSynchronization>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002122:	f7ff fb89 	bl	8001838 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002126:	2360      	movs	r3, #96	; 0x60
 8002128:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002136:	463b      	mov	r3, r7
 8002138:	2204      	movs	r2, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM2_Init+0xe8>)
 800213e:	f003 fc4b 	bl	80059d8 <HAL_TIM_PWM_ConfigChannel>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002148:	f7ff fb76 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM2_Init+0xe8>)
 800214e:	f000 f85d 	bl	800220c <HAL_TIM_MspPostInit>

}
 8002152:	bf00      	nop
 8002154:	3738      	adds	r7, #56	; 0x38
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200006c0 	.word	0x200006c0

08002160 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <HAL_TIM_Base_MspInit+0xa0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10c      	bne.n	800219c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002182:	4b20      	ldr	r3, [pc, #128]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	4a1f      	ldr	r2, [pc, #124]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 8002188:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800218c:	6613      	str	r3, [r2, #96]	; 0x60
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800219a:	e02d      	b.n	80021f8 <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d128      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a6:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	4a16      	ldr	r2, [pc, #88]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	4a10      	ldr	r2, [pc, #64]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_TIM_Base_MspInit+0xa4>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e8:	2301      	movs	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <HAL_TIM_Base_MspInit+0xa8>)
 80021f4:	f001 fa70 	bl	80036d8 <HAL_GPIO_Init>
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	; 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40021000 	.word	0x40021000
 8002208:	48000400 	.word	0x48000400

0800220c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a23      	ldr	r2, [pc, #140]	; (80022b8 <HAL_TIM_MspPostInit+0xac>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d11e      	bne.n	800226c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin;
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002266:	f001 fa37 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800226a:	e020      	b.n	80022ae <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d11b      	bne.n	80022ae <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a10      	ldr	r2, [pc, #64]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <HAL_TIM_MspPostInit+0xb0>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 800228e:	2308      	movs	r3, #8
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800229e:	2301      	movs	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4805      	ldr	r0, [pc, #20]	; (80022c0 <HAL_TIM_MspPostInit+0xb4>)
 80022aa:	f001 fa15 	bl	80036d8 <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	48000400 	.word	0x48000400

080022c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <MX_USART2_UART_Init+0x5c>)
 80022cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022de:	2200      	movs	r2, #0
 80022e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_USART2_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_USART2_UART_Init+0x58>)
 8002302:	2200      	movs	r2, #0
 8002304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART2_UART_Init+0x58>)
 8002308:	f004 f9c4 	bl	8006694 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002312:	f7ff fa91 	bl	8001838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000070c 	.word	0x2000070c
 8002320:	40004400 	.word	0x40004400

08002324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0a2      	sub	sp, #136	; 0x88
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2260      	movs	r2, #96	; 0x60
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f005 fff1 	bl	800832c <memset>
  if(uartHandle->Instance==USART2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a38      	ldr	r2, [pc, #224]	; (8002430 <HAL_UART_MspInit+0x10c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d169      	bne.n	8002428 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002354:	2302      	movs	r3, #2
 8002356:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002358:	2300      	movs	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4618      	mov	r0, r3
 8002362:	f002 f9ff 	bl	8004764 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800236c:	f7ff fa64 	bl	8001838 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002370:	4b30      	ldr	r3, [pc, #192]	; (8002434 <HAL_UART_MspInit+0x110>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <HAL_UART_MspInit+0x110>)
 8002376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
 800237c:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_UART_MspInit+0x110>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_UART_MspInit+0x110>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	4a29      	ldr	r2, [pc, #164]	; (8002434 <HAL_UART_MspInit+0x110>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002394:	4b27      	ldr	r3, [pc, #156]	; (8002434 <HAL_UART_MspInit+0x110>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023a0:	230c      	movs	r3, #12
 80023a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b2:	2307      	movs	r3, #7
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023bc:	4619      	mov	r1, r3
 80023be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c2:	f001 f989 	bl	80036d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <HAL_UART_MspInit+0x118>)
 80023ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023ce:	2202      	movs	r2, #2
 80023d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d8:	4b17      	ldr	r3, [pc, #92]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023e0:	2280      	movs	r2, #128	; 0x80
 80023e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80023fc:	480e      	ldr	r0, [pc, #56]	; (8002438 <HAL_UART_MspInit+0x114>)
 80023fe:	f000 ff85 	bl	800330c <HAL_DMA_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002408:	f7ff fa16 	bl	8001838 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_UART_MspInit+0x114>)
 8002410:	671a      	str	r2, [r3, #112]	; 0x70
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_UART_MspInit+0x114>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	2026      	movs	r0, #38	; 0x26
 800241e:	f000 ff3e 	bl	800329e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002422:	2026      	movs	r0, #38	; 0x26
 8002424:	f000 ff57 	bl	80032d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002428:	bf00      	nop
 800242a:	3788      	adds	r7, #136	; 0x88
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40004400 	.word	0x40004400
 8002434:	40021000 	.word	0x40021000
 8002438:	20000790 	.word	0x20000790
 800243c:	4002006c 	.word	0x4002006c

08002440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002444:	f7ff fd58 	bl	8001ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002448:	480c      	ldr	r0, [pc, #48]	; (800247c <LoopForever+0x6>)
  ldr r1, =_edata
 800244a:	490d      	ldr	r1, [pc, #52]	; (8002480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <LoopForever+0xe>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002450:	e002      	b.n	8002458 <LoopCopyDataInit>

08002452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002456:	3304      	adds	r3, #4

08002458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800245c:	d3f9      	bcc.n	8002452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800245e:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002460:	4c0a      	ldr	r4, [pc, #40]	; (800248c <LoopForever+0x16>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002464:	e001      	b.n	800246a <LoopFillZerobss>

08002466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002468:	3204      	adds	r2, #4

0800246a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800246a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800246c:	d3fb      	bcc.n	8002466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800246e:	f005 ff01 	bl	8008274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002472:	f7fe ffd9 	bl	8001428 <main>

08002476 <LoopForever>:

LoopForever:
    b LoopForever
 8002476:	e7fe      	b.n	8002476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002480:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002484:	0800e6e0 	.word	0x0800e6e0
  ldr r2, =_sbss
 8002488:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800248c:	200007f0 	.word	0x200007f0

08002490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002490:	e7fe      	b.n	8002490 <ADC1_IRQHandler>

08002492 <_ZN9movingAvgC1Ei>:
#define MOVINGAVG_H_INCLUDED

class movingAvg
{
    public:
        movingAvg(int interval)
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
            : m_interval{interval}, m_nbrReadings{0}, m_sum{0}, m_next{0} {}
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_ZN13RoverArmMotorC1EP19__SPI_HandleTypeDef3PinS2_S2_iddS2_>:
 * @param  minimum_angle: minimum angle of the motor
 * @param  maximum_angle: maximum angle of the motor
 * @param  brake_pin: pin for the brake or limit switch
 * @retval None
 */
RoverArmMotor::RoverArmMotor(SPI_HandleTypeDef* spi_handle, Pin pwm_pin, Pin dir_pin, Pin encoder_pin, int esc_type, double minimum_angle, double maximum_angle, Pin brake_pin)
 80024c2:	b082      	sub	sp, #8
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	6178      	str	r0, [r7, #20]
 80024cc:	6139      	str	r1, [r7, #16]
 80024ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80024d2:	e881 000c 	stmia.w	r1, {r2, r3}
 80024d6:	ed87 0b02 	vstr	d0, [r7, #8]
 80024da:	ed87 1b00 	vstr	d1, [r7]
                :internalPIDInstance(&input, &output, &setpoint, regularKp, regularKi, regularKd, _PID_CD_DIRECT)
                ,internalAveragerInstance(15){
 80024de:	6978      	ldr	r0, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f503 729c 	add.w	r2, r3, #312	; 0x138
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8002504:	2300      	movs	r3, #0
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	eeb0 2a45 	vmov.f32	s4, s10
 800250c:	eef0 2a65 	vmov.f32	s5, s11
 8002510:	eeb0 1a46 	vmov.f32	s2, s12
 8002514:	eef0 1a66 	vmov.f32	s3, s13
 8002518:	eeb0 0a47 	vmov.f32	s0, s14
 800251c:	eef0 0a67 	vmov.f32	s1, s15
 8002520:	4623      	mov	r3, r4
 8002522:	f000 fb55 	bl	8002bd0 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3370      	adds	r3, #112	; 0x70
 800252a:	210f      	movs	r1, #15
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ffb0 	bl	8002492 <_ZN9movingAvgC1Ei>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	33b8      	adds	r3, #184	; 0xb8
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fe46 	bl	80011c8 <_ZN3PinC1Ev>
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	33c8      	adds	r3, #200	; 0xc8
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fe41 	bl	80011c8 <_ZN3PinC1Ev>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	33d8      	adds	r3, #216	; 0xd8
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fe3c 	bl	80011c8 <_ZN3PinC1Ev>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	33e8      	adds	r3, #232	; 0xe8
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fe37 	bl	80011c8 <_ZN3PinC1Ev>

    //constructor
    spi = spi_handle;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    pwm = pwm_pin;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8002568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800256c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800256e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dir = dir_pin;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8002578:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800257c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    encoder = encoder_pin;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8002588:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800258c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800258e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    brake = brake_pin;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8002598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800259c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    escType = esc_type;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    lowestAngle = minimum_angle;
 80025aa:	6979      	ldr	r1, [r7, #20]
 80025ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025b0:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = maximum_angle;
 80025b4:	6979      	ldr	r1, [r7, #20]
 80025b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025ba:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108

    //clean up variables
    input = 0;
 80025be:	6979      	ldr	r1, [r7, #20]
 80025c0:	f04f 0200 	mov.w	r2, #0
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    output = 0;
 80025cc:	6979      	ldr	r1, [r7, #20]
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
    lastAngle = 0;
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9c1 2348 	strd	r2, r3, [r1, #288]	; 0x120
    sw_angle = 1;  //use software angle
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    zero_angle_sw = 0;  //mn297
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
    
}
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4618      	mov	r0, r3
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800260a:	b002      	add	sp, #8
 800260c:	4770      	bx	lr
	...

08002610 <_ZN13RoverArmMotor5beginEdddddd>:

void RoverArmMotor::begin(double aggP, double aggI, double aggD, double regP, double regI, double regD){
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	; 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	6378      	str	r0, [r7, #52]	; 0x34
 8002618:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 800261c:	ed87 1b08 	vstr	d1, [r7, #32]
 8002620:	ed87 2b06 	vstr	d2, [r7, #24]
 8002624:	ed87 3b04 	vstr	d3, [r7, #16]
 8002628:	ed87 4b02 	vstr	d4, [r7, #8]
 800262c:	ed87 5b00 	vstr	d5, [r7]


    /*------------------Initialize timers------------------*/ 
    HAL_TIM_PWM_Start(pwm.p_tim, pwm.tim_channel);
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f003 f8ec 	bl	800581c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(pwm.p_tim, pwm.tim_channel, 0); // stop motor
 8002644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002646:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <_ZN13RoverArmMotor5beginEdddddd+0x4c>
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
 800265a:	e035      	b.n	80026c8 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d106      	bne.n	8002674 <_ZN13RoverArmMotor5beginEdddddd+0x64>
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
 8002672:	e029      	b.n	80026c8 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800267a:	2b08      	cmp	r3, #8
 800267c:	d106      	bne.n	800268c <_ZN13RoverArmMotor5beginEdddddd+0x7c>
 800267e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002680:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
 800268a:	e01d      	b.n	80026c8 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d106      	bne.n	80026a4 <_ZN13RoverArmMotor5beginEdddddd+0x94>
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2200      	movs	r2, #0
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
 80026a2:	e011      	b.n	80026c8 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80026a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026aa:	2b10      	cmp	r3, #16
 80026ac:	d106      	bne.n	80026bc <_ZN13RoverArmMotor5beginEdddddd+0xac>
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	659a      	str	r2, [r3, #88]	; 0x58
 80026ba:	e005      	b.n	80026c8 <_ZN13RoverArmMotor5beginEdddddd+0xb8>
 80026bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c


    /*------------------set PID parameters------------------*/
    if(escType == CYTRON){
 80026c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <_ZN13RoverArmMotor5beginEdddddd+0xd4>
        internalPIDInstance.SetOutputLimits(5, 99); // PWM duty cycle mn297 TOOD: check this
 80026d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d4:	ed9f 1b40 	vldr	d1, [pc, #256]	; 80027d8 <_ZN13RoverArmMotor5beginEdddddd+0x1c8>
 80026d8:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80027e0 <_ZN13RoverArmMotor5beginEdddddd+0x1d0>
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 faf2 	bl	8002cc6 <_ZN3PID15SetOutputLimitsEdd>
 80026e2:	e00c      	b.n	80026fe <_ZN13RoverArmMotor5beginEdddddd+0xee>
    }
    else if(escType == BLUE_ROBOTICS){
 80026e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <_ZN13RoverArmMotor5beginEdddddd+0xee>
        internalPIDInstance.SetOutputLimits(0, 400); // 1500 +- 400 for BlueRobotics ESC
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80027e8 <_ZN13RoverArmMotor5beginEdddddd+0x1d8>
 80026f4:	ed9f 0b3e 	vldr	d0, [pc, #248]	; 80027f0 <_ZN13RoverArmMotor5beginEdddddd+0x1e0>
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 fae4 	bl	8002cc6 <_ZN3PID15SetOutputLimitsEdd>
    }
    
    /*------------------Initialize moving average------------------*/
    internalAveragerInstance.begin();
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	3370      	adds	r3, #112	; 0x70
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f9fd 	bl	8002b02 <_ZN9movingAvg5beginEv>

    /*------------------Initialize PID------------------*/
    internalPIDInstance.Init();
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fa83 	bl	8002c16 <_ZN3PID4InitEv>
    internalPIDInstance.SetMode(_PID_MODE_AUTOMATIC);
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	2101      	movs	r1, #1
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fab8 	bl	8002c8a <_ZN3PID7SetModeE15PIDMode_TypeDef>
    /*------------------Get setpoint------------------*/
    // Get current location and set it as setpoint. Essential to prevent jerkiness
    // as the microcontroller initializes.
    // adcResult = internalAveragerInstance.reading(analogRead(encoder));
    //after setup, currentAngle is same as setpoint
    currentAngle = get_current_angle();    // fix setpoint not equal to current angle
 800271a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800271c:	f000 f906 	bl	800292c <_ZN13RoverArmMotor17get_current_angleEv>
 8002720:	eeb0 7a40 	vmov.f32	s14, s0
 8002724:	eef0 7a60 	vmov.f32	s15, s1
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    setpoint = currentAngle;
 800272e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002730:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8002734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002736:	e9c1 2350 	strd	r2, r3, [r1, #320]	; 0x140



    /*------------------Set PID parameters------------------*/
    regularKp = regP;
 800273a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800273c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002740:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002744:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800274a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 800274e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002754:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 8002758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800275a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800275e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002764:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002768:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 800276c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800276e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002772:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98

    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800278a:	eeb0 2a45 	vmov.f32	s4, s10
 800278e:	eef0 2a65 	vmov.f32	s5, s11
 8002792:	eeb0 1a46 	vmov.f32	s2, s12
 8002796:	eef0 1a66 	vmov.f32	s3, s13
 800279a:	eeb0 0a47 	vmov.f32	s0, s14
 800279e:	eef0 0a67 	vmov.f32	s1, s15
 80027a2:	4610      	mov	r0, r2
 80027a4:	f000 fafd 	bl	8002da2 <_ZN3PID10SetTuningsEddd>
    // if(brake)  engageBrake(); //use brake if there is one
    if (brake.valid != 0)  engageBrake(); //use brake if there is one
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <_ZN13RoverArmMotor5beginEdddddd+0x1a8>
 80027b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027b4:	f000 f8a3 	bl	80028fe <_ZN13RoverArmMotor11engageBrakeEv>

    //initialize the multiplier bool to false and the multiplier to 1. 
    wrist_waist = false; 
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
    //multiplier = 1;
    gearRatio = 1;  //TODO check if this is correct
 80027c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <_ZN13RoverArmMotor5beginEdddddd+0x1e8>)
 80027c8:	e9c1 2354 	strd	r2, r3, [r1, #336]	; 0x150

}
 80027cc:	bf00      	nop
 80027ce:	3738      	adds	r7, #56	; 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	f3af 8000 	nop.w
 80027d8:	00000000 	.word	0x00000000
 80027dc:	4058c000 	.word	0x4058c000
 80027e0:	00000000 	.word	0x00000000
 80027e4:	40140000 	.word	0x40140000
 80027e8:	00000000 	.word	0x00000000
 80027ec:	40790000 	.word	0x40790000
	...
 80027f8:	3ff00000 	.word	0x3ff00000

080027fc <_ZN13RoverArmMotor14set_PID_paramsEdddddd>:

    //------------------Update angle------------------//
    lastAngle = currentAngle;
    
}
void RoverArmMotor::set_PID_params(double aggP, double aggI, double aggD, double regP, double regI, double regD) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08e      	sub	sp, #56	; 0x38
 8002800:	af00      	add	r7, sp, #0
 8002802:	6378      	str	r0, [r7, #52]	; 0x34
 8002804:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 8002808:	ed87 1b08 	vstr	d1, [r7, #32]
 800280c:	ed87 2b06 	vstr	d2, [r7, #24]
 8002810:	ed87 3b04 	vstr	d3, [r7, #16]
 8002814:	ed87 4b02 	vstr	d4, [r7, #8]
 8002818:	ed87 5b00 	vstr	d5, [r7]
    regularKp = regP;
 800281c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800281e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002822:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    regularKi = regI;
 8002826:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800282c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    regularKd = regD;
 8002830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002836:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    aggressiveKp = aggP;
 800283a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800283c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002840:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    aggressiveKi = aggI;
 8002844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002846:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800284a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
    aggressiveKd = aggD;
 800284e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002854:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
    internalPIDInstance.SetTunings(regularKp, regularKi, regularKd);
 8002858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	ed93 7b28 	vldr	d7, [r3, #160]	; 0xa0
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	ed93 6b2a 	vldr	d6, [r3, #168]	; 0xa8
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 800286c:	eeb0 2a45 	vmov.f32	s4, s10
 8002870:	eef0 2a65 	vmov.f32	s5, s11
 8002874:	eeb0 1a46 	vmov.f32	s2, s12
 8002878:	eef0 1a66 	vmov.f32	s3, s13
 800287c:	eeb0 0a47 	vmov.f32	s0, s14
 8002880:	eef0 0a67 	vmov.f32	s1, s15
 8002884:	4610      	mov	r0, r2
 8002886:	f000 fa8c 	bl	8002da2 <_ZN3PID10SetTuningsEddd>
}
 800288a:	bf00      	nop
 800288c:	3738      	adds	r7, #56	; 0x38
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZN13RoverArmMotor14setAngleLimitsEdd>:

// void RoverArmMotor::setGearRatio(double ratio){
//     gearRatio = ratio;
// }

void RoverArmMotor::setAngleLimits(double lowest, double highest){
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	6178      	str	r0, [r7, #20]
 800289a:	ed87 0b02 	vstr	d0, [r7, #8]
 800289e:	ed87 1b00 	vstr	d1, [r7]
    lowestAngle = lowest * gearRatio;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80028a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028ac:	f7fd fea4 	bl	80005f8 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	6979      	ldr	r1, [r7, #20]
 80028b6:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
    highestAngle = highest * gearRatio;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	e9d3 0154 	ldrd	r0, r1, [r3, #336]	; 0x150
 80028c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028c4:	f7fd fe98 	bl	80005f8 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	6979      	ldr	r1, [r7, #20]
 80028ce:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZN13RoverArmMotor17set_zero_angle_swEv>:
    setZeroSPI(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::reset_encoder(){
    resetAMT22(spi, encoder.port, encoder.pin, nullptr); //timer not used, so nullptr
}
void RoverArmMotor::set_zero_angle_sw(){
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    zero_angle_sw = this->get_current_angle();
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f822 	bl	800292c <_ZN13RoverArmMotor17get_current_angleEv>
 80028e8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ec:	eef0 7a60 	vmov.f32	s15, s1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	ed83 7b58 	vstr	d7, [r3, #352]	; 0x160
}  //mn297 software zero angle
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <_ZN13RoverArmMotor11engageBrakeEv>:
    //   digitalWrite(brake, LOW);  
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_RESET); //mn297
    }
}

void RoverArmMotor::engageBrake(){
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
    if(brake.valid != 0){
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <_ZN13RoverArmMotor11engageBrakeEv+0x26>
    //    digitalWrite(brake, HIGH); 
    HAL_GPIO_WritePin(brake.port, brake.pin, GPIO_PIN_SET); //mn297
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800291c:	2201      	movs	r2, #1
 800291e:	4619      	mov	r1, r3
 8002920:	f001 f854 	bl	80039cc <HAL_GPIO_WritePin>
    }
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_ZN13RoverArmMotor17get_current_angleEv>:
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
    adcResult = internalAveragerInstance.reading(encoderData);  // implicit cast to int
    currentAngle = mapFloat((float) adcResult, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
    return currentAngle / gearRatio;
}
double RoverArmMotor::get_current_angle(){    //mn297
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
 8002932:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 8002946:	2300      	movs	r3, #0
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	230c      	movs	r3, #12
 800294c:	f005 f9fb 	bl	8007d46 <getPositionSPI>
 8002950:	4603      	mov	r3, r0
 8002952:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	ee07 3a90 	vmov	s15, r3
 800295a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800295e:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80029ac <_ZN13RoverArmMotor17get_current_angleEv+0x80>
 8002962:	eddf 1a13 	vldr	s3, [pc, #76]	; 80029b0 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 8002966:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80029b4 <_ZN13RoverArmMotor17get_current_angleEv+0x88>
 800296a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80029b0 <_ZN13RoverArmMotor17get_current_angleEv+0x84>
 800296e:	eeb0 0a67 	vmov.f32	s0, s15
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f88a 	bl	8002a8c <_ZN13RoverArmMotor8mapFloatEfffff>
 8002978:	eeb0 7a40 	vmov.f32	s14, s0
 800297c:	eef0 7a60 	vmov.f32	s15, s1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    return currentAngle / gearRatio;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002992:	f7fd ff5b 	bl	800084c <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ec43 2b17 	vmov	d7, r2, r3
}
 800299e:	eeb0 0a47 	vmov.f32	s0, s14
 80029a2:	eef0 0a67 	vmov.f32	s1, s15
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	43b38000 	.word	0x43b38000
 80029b0:	00000000 	.word	0x00000000
 80029b4:	457ff000 	.word	0x457ff000

080029b8 <_ZN13RoverArmMotor20get_current_angle_swEv>:
double RoverArmMotor::get_current_angle_sw(){    //TODO mn297
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
    // return currentAngle / gearRatio;
    uint16_t encoderData = getPositionSPI(spi, encoder.port, encoder.pin, 12, nullptr); //timer not used, so nullptr
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 20dc 	ldrh.w	r2, [r3, #220]	; 0xdc
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	230c      	movs	r3, #12
 80029d8:	f005 f9b5 	bl	8007d46 <getPositionSPI>
 80029dc:	4603      	mov	r3, r0
 80029de:	81fb      	strh	r3, [r7, #14]
    currentAngle = mapFloat((float) encoderData, MIN_ADC_VALUE, MAX_ADC_VALUE, 0, 359.0f); //mn297 potentiometer encoder
 80029e0:	89fb      	ldrh	r3, [r7, #14]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8002a7c <_ZN13RoverArmMotor20get_current_angle_swEv+0xc4>
 80029ee:	eddf 1a24 	vldr	s3, [pc, #144]	; 8002a80 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80029f2:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8002a84 <_ZN13RoverArmMotor20get_current_angle_swEv+0xcc>
 80029f6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8002a80 <_ZN13RoverArmMotor20get_current_angle_swEv+0xc8>
 80029fa:	eeb0 0a67 	vmov.f32	s0, s15
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f844 	bl	8002a8c <_ZN13RoverArmMotor8mapFloatEfffff>
 8002a04:	eeb0 7a40 	vmov.f32	s14, s0
 8002a08:	eef0 7a60 	vmov.f32	s15, s1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
    
    double diff = currentAngle - zero_angle_sw;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e9d3 0146 	ldrd	r0, r1, [r3, #280]	; 0x118
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	e9d3 2358 	ldrd	r2, r3, [r3, #352]	; 0x160
 8002a1e:	f7fd fc33 	bl	8000288 <__aeabi_dsub>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if(diff < 0) diff += 360;
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	f04f 0300 	mov.w	r3, #0
 8002a32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a36:	f7fe f851 	bl	8000adc <__aeabi_dcmplt>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <_ZN13RoverArmMotor20get_current_angle_swEv+0x9e>
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <_ZN13RoverArmMotor20get_current_angle_swEv+0xd0>)
 8002a46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a4a:	f7fd fc1f 	bl	800028c <__adddf3>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return diff / gearRatio;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8002a5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a60:	f7fd fef4 	bl	800084c <__aeabi_ddiv>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	ec43 2b17 	vmov	d7, r2, r3
}
 8002a6c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a70:	eef0 0a67 	vmov.f32	s1, s15
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	43b38000 	.word	0x43b38000
 8002a80:	00000000 	.word	0x00000000
 8002a84:	457ff000 	.word	0x457ff000
 8002a88:	40768000 	.word	0x40768000

08002a8c <_ZN13RoverArmMotor8mapFloatEfffff>:

double RoverArmMotor::getCurrentOutput(){
    return output;
}

double RoverArmMotor::mapFloat(float x, float in_min, float in_max, float out_min, float out_max){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6178      	str	r0, [r7, #20]
 8002a94:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a98:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002aa0:	edc7 1a01 	vstr	s3, [r7, #4]
 8002aa4:	ed87 2a00 	vstr	s4, [r7]
    double result = ((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8002aa8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ab4:	edd7 6a00 	vldr	s13, [r7]
 8002ab8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002abc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ac0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ac4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd32 	bl	8000548 <__aeabi_f2d>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return result; 
 8002aec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002af0:	ec43 2b17 	vmov	d7, r2, r3
    }
 8002af4:	eeb0 0a47 	vmov.f32	s0, s14
 8002af8:	eef0 0a67 	vmov.f32	s1, s15
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <_ZN9movingAvg5beginEv>:

#include <movingAvg.h>

// initialize - allocate the interval array
void movingAvg::begin()
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
    m_readings = new int[m_interval];
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d201      	bcs.n	8002b1a <_ZN9movingAvg5beginEv+0x18>
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	e001      	b.n	8002b1e <_ZN9movingAvg5beginEv+0x1c>
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 fa7a 	bl	8008018 <_Znaj>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	611a      	str	r2, [r3, #16]
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	0000      	movs	r0, r0
	...

08002b38 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~ Constructor ~~~~~~~~~~~~~~~~ */
PID::PID() { }

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8002b40:	6239      	str	r1, [r7, #32]
 8002b42:	61fa      	str	r2, [r7, #28]
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b4a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b4e:	ed87 2b00 	vstr	d2, [r7]
{
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_myOutput   = Output;
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	645a      	str	r2, [r3, #68]	; 0x44
	_myInput    = Input;
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	6a3a      	ldr	r2, [r7, #32]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
	_mySetpoint = Setpoint;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	649a      	str	r2, [r3, #72]	; 0x48
	_inAuto     = (PIDMode_TypeDef)_FALSE;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2200      	movs	r2, #0
 8002b68:	705a      	strb	r2, [r3, #1]
	
	PID::SetOutputLimits(0, _PID_8BIT_PWM_MAX);
 8002b6a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002bc0 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x88>
 8002b6e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002bc8 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef+0x90>
 8002b72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b74:	f000 f8a7 	bl	8002cc6 <_ZN3PID15SetOutputLimitsEdd>
	
	_sampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	2264      	movs	r2, #100	; 0x64
 8002b7c:	609a      	str	r2, [r3, #8]
	
	PID::SetControllerDirection(ControllerDirection);
 8002b7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b82:	4619      	mov	r1, r3
 8002b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b86:	f000 f9cf 	bl	8002f28 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>
	PID::SetTunings(Kp, Ki, Kd, POn);
 8002b8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b8e:	4619      	mov	r1, r3
 8002b90:	ed97 2b00 	vldr	d2, [r7]
 8002b94:	ed97 1b02 	vldr	d1, [r7, #8]
 8002b98:	ed97 0b04 	vldr	d0, [r7, #16]
 8002b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b9e:	f000 f91b 	bl	8002dd8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
	
	_lastTime = GetTime() - _sampleTime;
 8002ba2:	f000 fa71 	bl	8003088 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	605a      	str	r2, [r3, #4]
	
}
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	f3af 8000 	nop.w
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	406fe000 	.word	0x406fe000
	...

08002bd0 <_ZN3PIDC1EPdS0_S0_ddd13PIDCD_TypeDef>:

PID::PID(double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDCD_TypeDef ControllerDirection) : PID::PID(Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection)
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	6278      	str	r0, [r7, #36]	; 0x24
 8002bd8:	6239      	str	r1, [r7, #32]
 8002bda:	61fa      	str	r2, [r7, #28]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	ed87 0b04 	vstr	d0, [r7, #16]
 8002be2:	ed87 1b02 	vstr	d1, [r7, #8]
 8002be6:	ed87 2b00 	vstr	d2, [r7]
 8002bea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	ed97 2b00 	vldr	d2, [r7]
 8002bf8:	ed97 1b02 	vldr	d1, [r7, #8]
 8002bfc:	ed97 0b04 	vldr	d0, [r7, #16]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c08:	f7ff ff96 	bl	8002b38 <_ZN3PIDC1EPdS0_S0_ddd14PIDPON_TypeDef13PIDCD_TypeDef>
{ }
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_ZN3PID4InitEv>:



/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID::Init(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	_outputSum = *_myOutput;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	_lastInput = *_myInput;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (_outputSum > _outMax)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c46:	f7fd ff67 	bl	8000b18 <__aeabi_dcmpgt>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <_ZN3PID4InitEv+0x48>
	{
		_outputSum = _outMax;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		_outputSum = _outMin;
	}
	else { }	
	
}
 8002c5c:	e011      	b.n	8002c82 <_ZN3PID4InitEv+0x6c>
	else if (_outputSum < _outMin)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c6a:	f7fd ff37 	bl	8000adc <__aeabi_dcmplt>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d100      	bne.n	8002c76 <_ZN3PID4InitEv+0x60>
}
 8002c74:	e005      	b.n	8002c82 <_ZN3PID4InitEv+0x6c>
		_outputSum = _outMin;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <_ZN3PID7SetModeE15PIDMode_TypeDef>:
	
}

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID::SetMode(PIDMode_TypeDef Mode)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !_inAuto)
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d006      	beq.n	8002cb8 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <_ZN3PID7SetModeE15PIDMode_TypeDef+0x2e>
	{
		Init();
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffaf 	bl	8002c16 <_ZN3PID4InitEv>
	}
	
	_inAuto = (PIDMode_TypeDef)newAuto;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	705a      	strb	r2, [r3, #1]
	
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <_ZN3PID15SetOutputLimitsEdd>:
	return _inAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID::SetOutputLimits(double Min, double Max)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6178      	str	r0, [r7, #20]
 8002cce:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cd2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002cd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cde:	f7fd ff11 	bl	8000b04 <__aeabi_dcmpge>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d158      	bne.n	8002d9a <_ZN3PID15SetOutputLimitsEdd+0xd4>
	{
		return;
	}
	
	_outMin = Min;
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cee:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	_outMax = Max;
 8002cf2:	6979      	ldr	r1, [r7, #20]
 8002cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (_inAuto)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	785b      	ldrb	r3, [r3, #1]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d04b      	beq.n	8002d9c <_ZN3PID15SetOutputLimitsEdd+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*_myOutput > _outMax)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d12:	f7fd ff01 	bl	8000b18 <__aeabi_dcmpgt>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d007      	beq.n	8002d2c <_ZN3PID15SetOutputLimitsEdd+0x66>
		{
			*_myOutput = _outMax;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d26:	e9c1 2300 	strd	r2, r3, [r1]
 8002d2a:	e012      	b.n	8002d52 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		}
		else if (*_myOutput < _outMin)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d3a:	f7fd fecf 	bl	8000adc <__aeabi_dcmplt>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <_ZN3PID15SetOutputLimitsEdd+0x8c>
		{
			*_myOutput = _outMin;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d4e:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (_outputSum > _outMax)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d5e:	f7fd fedb 	bl	8000b18 <__aeabi_dcmpgt>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d006      	beq.n	8002d76 <_ZN3PID15SetOutputLimitsEdd+0xb0>
		{
			_outputSum = _outMax;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002d6e:	6979      	ldr	r1, [r7, #20]
 8002d70:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d74:	e012      	b.n	8002d9c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		}
		else if (_outputSum < _outMin)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d82:	f7fd feab 	bl	8000adc <__aeabi_dcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		{
			_outputSum = _outMin;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002d98:	e000      	b.n	8002d9c <_ZN3PID15SetOutputLimitsEdd+0xd6>
		return;
 8002d9a:	bf00      	nop
		}
		else { }
		
	}
	
}
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_ZN3PID10SetTuningsEddd>:

/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID::SetTunings(double Kp, double Ki, double Kd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	61f8      	str	r0, [r7, #28]
 8002daa:	ed87 0b04 	vstr	d0, [r7, #16]
 8002dae:	ed87 1b02 	vstr	d1, [r7, #8]
 8002db2:	ed87 2b00 	vstr	d2, [r7]
	PID::SetTunings(Kp, Ki, Kd, _pOn);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	789b      	ldrb	r3, [r3, #2]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	ed97 2b00 	vldr	d2, [r7]
 8002dc0:	ed97 1b02 	vldr	d1, [r7, #8]
 8002dc4:	ed97 0b04 	vldr	d0, [r7, #16]
 8002dc8:	69f8      	ldr	r0, [r7, #28]
 8002dca:	f000 f805 	bl	8002dd8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>
}
 8002dce:	bf00      	nop
 8002dd0:	3720      	adds	r7, #32
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef>:
void PID::SetTunings(double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	61f8      	str	r0, [r7, #28]
 8002de0:	ed87 0b04 	vstr	d0, [r7, #16]
 8002de4:	ed87 1b02 	vstr	d1, [r7, #8]
 8002de8:	ed87 2b00 	vstr	d2, [r7]
 8002dec:	460b      	mov	r3, r1
 8002dee:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002dfc:	f7fd fe6e 	bl	8000adc <__aeabi_dcmplt>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 8089 	bne.w	8002f1a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e14:	f7fd fe62 	bl	8000adc <__aeabi_dcmplt>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d17d      	bne.n	8002f1a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e2a:	f7fd fe57 	bl	8000adc <__aeabi_dcmplt>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d172      	bne.n	8002f1a <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	_pOn    = POn;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	7efa      	ldrb	r2, [r7, #27]
 8002e38:	709a      	strb	r2, [r3, #2]
	_pOnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002e3a:	7efb      	ldrb	r3, [r7, #27]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	701a      	strb	r2, [r3, #0]

	_dispKp = Kp;
 8002e4c:	69f9      	ldr	r1, [r7, #28]
 8002e4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e52:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_dispKi = Ki;
 8002e56:	69f9      	ldr	r1, [r7, #28]
 8002e58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_dispKd = Kd;
 8002e60:	69f9      	ldr	r1, [r7, #28]
 8002e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e66:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)_sampleTime) / 1000;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd fb48 	bl	8000504 <__aeabi_ui2d>
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x14c>)
 8002e7a:	f7fd fce7 	bl	800084c <__aeabi_ddiv>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	_kp = Kp;
 8002e86:	69f9      	ldr	r1, [r7, #28]
 8002e88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_ki = Ki * SampleTimeInSec;
 8002e90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e98:	f7fd fbae 	bl	80005f8 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	69f9      	ldr	r1, [r7, #28]
 8002ea2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	_kd = Kd / SampleTimeInSec;
 8002ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eae:	f7fd fccd 	bl	800084c <__aeabi_ddiv>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	69f9      	ldr	r1, [r7, #28]
 8002eb8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (_controllerDirection == _PID_CD_REVERSE)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	78db      	ldrb	r3, [r3, #3]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d12b      	bne.n	8002f1c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
	{
		
		_kp = (0 - _kp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002eca:	f04f 0000 	mov.w	r0, #0
 8002ece:	f04f 0100 	mov.w	r1, #0
 8002ed2:	f7fd f9d9 	bl	8000288 <__aeabi_dsub>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	f7fd f9cb 	bl	8000288 <__aeabi_dsub>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	69f9      	ldr	r1, [r7, #28]
 8002ef8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f02:	f04f 0000 	mov.w	r0, #0
 8002f06:	f04f 0100 	mov.w	r1, #0
 8002f0a:	f7fd f9bd 	bl	8000288 <__aeabi_dsub>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	69f9      	ldr	r1, [r7, #28]
 8002f14:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002f18:	e000      	b.n	8002f1c <_ZN3PID10SetTuningsEddd14PIDPON_TypeDef+0x144>
		return;
 8002f1a:	bf00      	nop
		
	}
	
}
 8002f1c:	3728      	adds	r7, #40	; 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	408f4000 	.word	0x408f4000

08002f28 <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID::SetControllerDirection(PIDCD_TypeDef Direction)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((_inAuto) && (Direction != _controllerDirection))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02e      	beq.n	8002f9a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	78db      	ldrb	r3, [r3, #3]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d029      	beq.n	8002f9a <_ZN3PID22SetControllerDirectionE13PIDCD_TypeDef+0x72>
	{
		
		_kp = (0 - _kp);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f4c:	f04f 0000 	mov.w	r0, #0
 8002f50:	f04f 0100 	mov.w	r1, #0
 8002f54:	f7fd f998 	bl	8000288 <__aeabi_dsub>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		_ki = (0 - _ki);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	f7fd f98a 	bl	8000288 <__aeabi_dsub>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		_kd = (0 - _kd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002f84:	f04f 0000 	mov.w	r0, #0
 8002f88:	f04f 0100 	mov.w	r1, #0
 8002f8c:	f7fd f97c 	bl	8000288 <__aeabi_dsub>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	_controllerDirection = Direction;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	70da      	strb	r2, [r3, #3]
	
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb2:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_Init+0x3c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <HAL_Init+0x3c>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f000 f962 	bl	8003288 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	f000 f80f 	bl	8002fe8 <HAL_InitTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	e001      	b.n	8002fda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fd6:	f7fe fe5f 	bl	8001c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40022000 	.word	0x40022000

08002fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ff4:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_InitTick+0x6c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d023      	beq.n	8003044 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_InitTick+0x70>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_InitTick+0x6c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4619      	mov	r1, r3
 8003006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300a:	fbb3 f3f1 	udiv	r3, r3, r1
 800300e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f000 f96d 	bl	80032f2 <HAL_SYSTICK_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d809      	bhi.n	8003038 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f000 f937 	bl	800329e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <HAL_InitTick+0x74>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e007      	b.n	8003048 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e004      	b.n	8003048 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	73fb      	strb	r3, [r7, #15]
 8003042:	e001      	b.n	8003048 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000038 	.word	0x20000038
 8003058:	20000030 	.word	0x20000030
 800305c:	20000034 	.word	0x20000034

08003060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x20>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x24>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4413      	add	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_IncTick+0x24>)
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000038 	.word	0x20000038
 8003084:	200007d8 	.word	0x200007d8

08003088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return uwTick;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_GetTick+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	200007d8 	.word	0x200007d8

080030a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff ffee 	bl	8003088 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d005      	beq.n	80030c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_Delay+0x44>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030c6:	bf00      	nop
 80030c8:	f7ff ffde 	bl	8003088 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d8f7      	bhi.n	80030c8 <HAL_Delay+0x28>
  {
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000038 	.word	0x20000038

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	; (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4907      	ldr	r1, [pc, #28]	; (8003184 <__NVIC_EnableIRQ+0x38>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000e100 	.word	0xe000e100

08003188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	2b00      	cmp	r3, #0
 800319a:	db0a      	blt.n	80031b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <__NVIC_SetPriority+0x4c>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	440b      	add	r3, r1
 80031ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b0:	e00a      	b.n	80031c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4908      	ldr	r1, [pc, #32]	; (80031d8 <__NVIC_SetPriority+0x50>)
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	3b04      	subs	r3, #4
 80031c0:	0112      	lsls	r2, r2, #4
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	440b      	add	r3, r1
 80031c6:	761a      	strb	r2, [r3, #24]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000e100 	.word	0xe000e100
 80031d8:	e000ed00 	.word	0xe000ed00

080031dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b089      	sub	sp, #36	; 0x24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f1c3 0307 	rsb	r3, r3, #7
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf28      	it	cs
 80031fa:	2304      	movcs	r3, #4
 80031fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3304      	adds	r3, #4
 8003202:	2b06      	cmp	r3, #6
 8003204:	d902      	bls.n	800320c <NVIC_EncodePriority+0x30>
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3b03      	subs	r3, #3
 800320a:	e000      	b.n	800320e <NVIC_EncodePriority+0x32>
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	f04f 32ff 	mov.w	r2, #4294967295
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	401a      	ands	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003224:	f04f 31ff 	mov.w	r1, #4294967295
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	43d9      	mvns	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003234:	4313      	orrs	r3, r2
         );
}
 8003236:	4618      	mov	r0, r3
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003254:	d301      	bcc.n	800325a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003256:	2301      	movs	r3, #1
 8003258:	e00f      	b.n	800327a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <SysTick_Config+0x40>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3b01      	subs	r3, #1
 8003260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003262:	210f      	movs	r1, #15
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f7ff ff8e 	bl	8003188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326c:	4b05      	ldr	r3, [pc, #20]	; (8003284 <SysTick_Config+0x40>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003272:	4b04      	ldr	r3, [pc, #16]	; (8003284 <SysTick_Config+0x40>)
 8003274:	2207      	movs	r2, #7
 8003276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ff29 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	60b9      	str	r1, [r7, #8]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b0:	f7ff ff3e 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	6978      	ldr	r0, [r7, #20]
 80032bc:	f7ff ff8e 	bl	80031dc <NVIC_EncodePriority>
 80032c0:	4602      	mov	r2, r0
 80032c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c6:	4611      	mov	r1, r2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff5d 	bl	8003188 <__NVIC_SetPriority>
}
 80032ce:	bf00      	nop
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff ff31 	bl	800314c <__NVIC_EnableIRQ>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff ffa2 	bl	8003244 <SysTick_Config>
 8003300:	4603      	mov	r3, r0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
	...

0800330c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e098      	b.n	8003450 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_DMA_Init+0x150>)
 8003326:	429a      	cmp	r2, r3
 8003328:	d80f      	bhi.n	800334a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_DMA_Init+0x154>)
 8003332:	4413      	add	r3, r2
 8003334:	4a4b      	ldr	r2, [pc, #300]	; (8003464 <HAL_DMA_Init+0x158>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a48      	ldr	r2, [pc, #288]	; (8003468 <HAL_DMA_Init+0x15c>)
 8003346:	641a      	str	r2, [r3, #64]	; 0x40
 8003348:	e00e      	b.n	8003368 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_DMA_Init+0x160>)
 8003352:	4413      	add	r3, r2
 8003354:	4a43      	ldr	r2, [pc, #268]	; (8003464 <HAL_DMA_Init+0x158>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	009a      	lsls	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a42      	ldr	r2, [pc, #264]	; (8003470 <HAL_DMA_Init+0x164>)
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800338c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c2:	d039      	beq.n	8003438 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	4a27      	ldr	r2, [pc, #156]	; (8003468 <HAL_DMA_Init+0x15c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d11a      	bne.n	8003404 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ce:	4b29      	ldr	r3, [pc, #164]	; (8003474 <HAL_DMA_Init+0x168>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	f003 031c 	and.w	r3, r3, #28
 80033da:	210f      	movs	r1, #15
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	4924      	ldr	r1, [pc, #144]	; (8003474 <HAL_DMA_Init+0x168>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_DMA_Init+0x168>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 031c 	and.w	r3, r3, #28
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	491d      	ldr	r1, [pc, #116]	; (8003474 <HAL_DMA_Init+0x168>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
 8003402:	e019      	b.n	8003438 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_DMA_Init+0x16c>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f003 031c 	and.w	r3, r3, #28
 8003410:	210f      	movs	r1, #15
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43db      	mvns	r3, r3
 8003418:	4917      	ldr	r1, [pc, #92]	; (8003478 <HAL_DMA_Init+0x16c>)
 800341a:	4013      	ands	r3, r2
 800341c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_DMA_Init+0x16c>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f003 031c 	and.w	r3, r3, #28
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	4911      	ldr	r1, [pc, #68]	; (8003478 <HAL_DMA_Init+0x16c>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40020407 	.word	0x40020407
 8003460:	bffdfff8 	.word	0xbffdfff8
 8003464:	cccccccd 	.word	0xcccccccd
 8003468:	40020000 	.word	0x40020000
 800346c:	bffdfbf8 	.word	0xbffdfbf8
 8003470:	40020400 	.word	0x40020400
 8003474:	400200a8 	.word	0x400200a8
 8003478:	400204a8 	.word	0x400204a8

0800347c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2204      	movs	r2, #4
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e022      	b.n	80034ec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 020e 	bic.w	r2, r2, #14
 80034b4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	f003 021c 	and.w	r2, r3, #28
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2101      	movs	r1, #1
 80034d4:	fa01 f202 	lsl.w	r2, r1, r2
 80034d8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d005      	beq.n	800351c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2204      	movs	r2, #4
 8003514:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	e029      	b.n	8003570 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 020e 	bic.w	r2, r2, #14
 800352a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 021c 	and.w	r2, r3, #28
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
    }
  }
  return status;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f003 031c 	and.w	r3, r3, #28
 800359a:	2204      	movs	r2, #4
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d026      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x7a>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d021      	beq.n	80035f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0204 	bic.w	r2, r2, #4
 80035cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f003 021c 	and.w	r2, r3, #28
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	2104      	movs	r1, #4
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d071      	beq.n	80036ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80035f2:	e06c      	b.n	80036ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f003 031c 	and.w	r3, r3, #28
 80035fc:	2202      	movs	r2, #2
 80035fe:	409a      	lsls	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4013      	ands	r3, r2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d02e      	beq.n	8003666 <HAL_DMA_IRQHandler+0xec>
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d029      	beq.n	8003666 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 020a 	bic.w	r2, r2, #10
 800362e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363c:	f003 021c 	and.w	r2, r3, #28
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2102      	movs	r1, #2
 8003646:	fa01 f202 	lsl.w	r2, r1, r2
 800364a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d038      	beq.n	80036ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003664:	e033      	b.n	80036ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	f003 031c 	and.w	r3, r3, #28
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d02a      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x156>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d025      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 020e 	bic.w	r2, r2, #14
 8003692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 021c 	and.w	r2, r3, #28
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
}
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036e6:	e154      	b.n	8003992 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2101      	movs	r1, #1
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	4013      	ands	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8146 	beq.w	800398c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d005      	beq.n	8003718 <HAL_GPIO_Init+0x40>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d130      	bne.n	800377a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800374e:	2201      	movs	r2, #1
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	f003 0201 	and.w	r2, r3, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b03      	cmp	r3, #3
 8003784:	d017      	beq.n	80037b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d123      	bne.n	800380a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	08da      	lsrs	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	3208      	adds	r2, #8
 80037ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	6939      	ldr	r1, [r7, #16]
 8003806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2203      	movs	r2, #3
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 0203 	and.w	r2, r3, #3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80a0 	beq.w	800398c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384c:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_GPIO_Init+0x2d8>)
 800384e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003850:	4a57      	ldr	r2, [pc, #348]	; (80039b0 <HAL_GPIO_Init+0x2d8>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6613      	str	r3, [r2, #96]	; 0x60
 8003858:	4b55      	ldr	r3, [pc, #340]	; (80039b0 <HAL_GPIO_Init+0x2d8>)
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003864:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_GPIO_Init+0x2dc>)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	3302      	adds	r3, #2
 800386c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	220f      	movs	r2, #15
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800388e:	d019      	beq.n	80038c4 <HAL_GPIO_Init+0x1ec>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <HAL_GPIO_Init+0x2e0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_GPIO_Init+0x1e8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a48      	ldr	r2, [pc, #288]	; (80039bc <HAL_GPIO_Init+0x2e4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00d      	beq.n	80038bc <HAL_GPIO_Init+0x1e4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a47      	ldr	r2, [pc, #284]	; (80039c0 <HAL_GPIO_Init+0x2e8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0x1e0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a46      	ldr	r2, [pc, #280]	; (80039c4 <HAL_GPIO_Init+0x2ec>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_GPIO_Init+0x1dc>
 80038b0:	2304      	movs	r3, #4
 80038b2:	e008      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038b4:	2307      	movs	r3, #7
 80038b6:	e006      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038b8:	2303      	movs	r3, #3
 80038ba:	e004      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038bc:	2302      	movs	r3, #2
 80038be:	e002      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c4:	2300      	movs	r3, #0
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	f002 0203 	and.w	r2, r2, #3
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	4093      	lsls	r3, r2
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038d6:	4937      	ldr	r1, [pc, #220]	; (80039b4 <HAL_GPIO_Init+0x2dc>)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038e4:	4b38      	ldr	r3, [pc, #224]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003908:	4a2f      	ldr	r2, [pc, #188]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	43db      	mvns	r3, r3
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003932:	4a25      	ldr	r2, [pc, #148]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	43db      	mvns	r3, r3
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	43db      	mvns	r3, r3
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4013      	ands	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003986:	4a10      	ldr	r2, [pc, #64]	; (80039c8 <HAL_GPIO_Init+0x2f0>)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	3301      	adds	r3, #1
 8003990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f aea3 	bne.w	80036e8 <HAL_GPIO_Init+0x10>
  }
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40010000 	.word	0x40010000
 80039b8:	48000400 	.word	0x48000400
 80039bc:	48000800 	.word	0x48000800
 80039c0:	48000c00 	.word	0x48000c00
 80039c4:	48001000 	.word	0x48001000
 80039c8:	40010400 	.word	0x40010400

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039e8:	e002      	b.n	80039f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a12:	4a05      	ldr	r2, [pc, #20]	; (8003a28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fe42 	bl	80016a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40010400 	.word	0x40010400

08003a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	40007000 	.word	0x40007000

08003a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d130      	bne.n	8003aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d038      	beq.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2232      	movs	r2, #50	; 0x32
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8c:	e002      	b.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f2      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa8:	4b0f      	ldr	r3, [pc, #60]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d110      	bne.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e00f      	b.n	8003ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d007      	beq.n	8003ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ac8:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad0:	4a05      	ldr	r2, [pc, #20]	; (8003ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	20000030 	.word	0x20000030
 8003af0:	431bde83 	.word	0x431bde83

08003af4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d102      	bne.n	8003b08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f000 bc02 	b.w	800430c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4b96      	ldr	r3, [pc, #600]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b12:	4b94      	ldr	r3, [pc, #592]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80e4 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4c>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b0c      	cmp	r3, #12
 8003b34:	f040 808b 	bne.w	8003c4e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	f040 8087 	bne.w	8003c4e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x64>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e3d9      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1a      	ldr	r2, [r3, #32]
 8003b5c:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_RCC_OscConfig+0x7e>
 8003b68:	4b7e      	ldr	r3, [pc, #504]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	e005      	b.n	8003b7e <HAL_RCC_OscConfig+0x8a>
 8003b72:	4b7c      	ldr	r3, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d223      	bcs.n	8003bca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fd8c 	bl	80046a4 <RCC_SetFlashLatencyFromMSIRange>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e3ba      	b.n	800430c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a72      	ldr	r2, [pc, #456]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003b9c:	f043 0308 	orr.w	r3, r3, #8
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b70      	ldr	r3, [pc, #448]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	496d      	ldr	r1, [pc, #436]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	4968      	ldr	r1, [pc, #416]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
 8003bc8:	e025      	b.n	8003c16 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bca:	4b66      	ldr	r3, [pc, #408]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a65      	ldr	r2, [pc, #404]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	f043 0308 	orr.w	r3, r3, #8
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4960      	ldr	r1, [pc, #384]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	495b      	ldr	r1, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fd4c 	bl	80046a4 <RCC_SetFlashLatencyFromMSIRange>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e37a      	b.n	800430c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c16:	f000 fc81 	bl	800451c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b51      	ldr	r3, [pc, #324]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	4950      	ldr	r1, [pc, #320]	; (8003d68 <HAL_RCC_OscConfig+0x274>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <HAL_RCC_OscConfig+0x278>)
 8003c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c36:	4b4e      	ldr	r3, [pc, #312]	; (8003d70 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff f9d4 	bl	8002fe8 <HAL_InitTick>
 8003c40:	4603      	mov	r3, r0
 8003c42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d052      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	e35e      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d032      	beq.n	8003cbc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c56:	4b43      	ldr	r3, [pc, #268]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a42      	ldr	r2, [pc, #264]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c62:	f7ff fa11 	bl	8003088 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c6a:	f7ff fa0d 	bl	8003088 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e347      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c88:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b33      	ldr	r3, [pc, #204]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	4930      	ldr	r1, [pc, #192]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca6:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	492b      	ldr	r1, [pc, #172]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
 8003cba:	e01a      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cbc:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc8:	f7ff f9de 	bl	8003088 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd0:	f7ff f9da 	bl	8003088 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e314      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1dc>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d073      	beq.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x21c>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d10e      	bne.n	8003d28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b03      	cmp	r3, #3
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d063      	beq.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d15f      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e2f1      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d30:	d106      	bne.n	8003d40 <HAL_RCC_OscConfig+0x24c>
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e025      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d48:	d114      	bne.n	8003d74 <HAL_RCC_OscConfig+0x280>
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a05      	ldr	r2, [pc, #20]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a02      	ldr	r2, [pc, #8]	; (8003d64 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e013      	b.n	8003d8c <HAL_RCC_OscConfig+0x298>
 8003d64:	40021000 	.word	0x40021000
 8003d68:	0800daf0 	.word	0x0800daf0
 8003d6c:	20000030 	.word	0x20000030
 8003d70:	20000034 	.word	0x20000034
 8003d74:	4ba0      	ldr	r3, [pc, #640]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a9f      	ldr	r2, [pc, #636]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9c      	ldr	r2, [pc, #624]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7ff f978 	bl	8003088 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7ff f974 	bl	8003088 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e2ae      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x2a8>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7ff f964 	bl	8003088 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7ff f960 	bl	8003088 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e29a      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2d0>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d060      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x310>
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d119      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d116      	bne.n	8003e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	4b7c      	ldr	r3, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x328>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e277      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1c:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	061b      	lsls	r3, r3, #24
 8003e2a:	4973      	ldr	r1, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e30:	e040      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d023      	beq.n	8003e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6e      	ldr	r2, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e46:	f7ff f91f 	bl	8003088 <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4e:	f7ff f91b 	bl	8003088 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e255      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e60:	4b65      	ldr	r3, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	495f      	ldr	r1, [pc, #380]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	e018      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5c      	ldr	r2, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7ff f8fb 	bl	8003088 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e96:	f7ff f8f7 	bl	8003088 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e231      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea8:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0308 	and.w	r3, r3, #8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01c      	beq.n	8003f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec8:	4b4b      	ldr	r3, [pc, #300]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ece:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7ff f8d6 	bl	8003088 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee0:	f7ff f8d2 	bl	8003088 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e20c      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ef      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x3ec>
 8003f00:	e01b      	b.n	8003f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f02:	4b3d      	ldr	r3, [pc, #244]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f08:	4a3b      	ldr	r2, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7ff f8b9 	bl	8003088 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7ff f8b5 	bl	8003088 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e1ef      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f2c:	4b32      	ldr	r3, [pc, #200]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1ef      	bne.n	8003f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80a6 	beq.w	8004094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5c:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	6593      	str	r3, [r2, #88]	; 0x58
 8003f64:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d118      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8c:	f7ff f87c 	bl	8003088 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7ff f878 	bl	8003088 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1b2      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCC_OscConfig+0x508>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d108      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4d8>
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fca:	e029      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d115      	bne.n	8004000 <HAL_RCC_OscConfig+0x50c>
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0304 	orr.w	r3, r3, #4
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	4a03      	ldr	r2, [pc, #12]	; (8003ff8 <HAL_RCC_OscConfig+0x504>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff4:	e014      	b.n	8004020 <HAL_RCC_OscConfig+0x52c>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	4b9a      	ldr	r3, [pc, #616]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	4a99      	ldr	r2, [pc, #612]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004010:	4b96      	ldr	r3, [pc, #600]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004016:	4a95      	ldr	r2, [pc, #596]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004018:	f023 0304 	bic.w	r3, r3, #4
 800401c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7ff f82e 	bl	8003088 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800402e:	e00a      	b.n	8004046 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7ff f82a 	bl	8003088 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e162      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004046:	4b89      	ldr	r3, [pc, #548]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ed      	beq.n	8004030 <HAL_RCC_OscConfig+0x53c>
 8004054:	e015      	b.n	8004082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7ff f817 	bl	8003088 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7ff f813 	bl	8003088 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	; 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e14b      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004074:	4b7d      	ldr	r3, [pc, #500]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ed      	bne.n	800405e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d105      	bne.n	8004094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004088:	4b78      	ldr	r3, [pc, #480]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4a77      	ldr	r2, [pc, #476]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d03c      	beq.n	800411a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040a8:	4b70      	ldr	r3, [pc, #448]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80040aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ae:	4a6f      	ldr	r2, [pc, #444]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b8:	f7fe ffe6 	bl	8003088 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c0:	f7fe ffe2 	bl	8003088 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e11c      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d2:	4b66      	ldr	r3, [pc, #408]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80040d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0ef      	beq.n	80040c0 <HAL_RCC_OscConfig+0x5cc>
 80040e0:	e01b      	b.n	800411a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e2:	4b62      	ldr	r3, [pc, #392]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80040e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e8:	4a60      	ldr	r2, [pc, #384]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe ffc9 	bl	8003088 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fa:	f7fe ffc5 	bl	8003088 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e0ff      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800410c:	4b57      	ldr	r3, [pc, #348]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800410e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1ef      	bne.n	80040fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80f3 	beq.w	800430a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	f040 80c9 	bne.w	80042c0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800412e:	4b4f      	ldr	r3, [pc, #316]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f003 0203 	and.w	r2, r3, #3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	429a      	cmp	r2, r3
 8004140:	d12c      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	3b01      	subs	r3, #1
 800414e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d123      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004160:	429a      	cmp	r2, r3
 8004162:	d11b      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d113      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d109      	bne.n	800419c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	3b01      	subs	r3, #1
 8004196:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d06b      	beq.n	8004274 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d062      	beq.n	8004268 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a2:	4b32      	ldr	r3, [pc, #200]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0ac      	b.n	800430c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041b2:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2d      	ldr	r2, [pc, #180]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80041b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041bc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041be:	f7fe ff63 	bl	8003088 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fe ff5f 	bl	8003088 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e099      	b.n	800430c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b21      	ldr	r3, [pc, #132]	; (800426c <HAL_RCC_OscConfig+0x778>)
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b21      	ldr	r3, [pc, #132]	; (8004270 <HAL_RCC_OscConfig+0x77c>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	4311      	orrs	r1, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041fe:	0212      	lsls	r2, r2, #8
 8004200:	4311      	orrs	r1, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004206:	0852      	lsrs	r2, r2, #1
 8004208:	3a01      	subs	r2, #1
 800420a:	0552      	lsls	r2, r2, #21
 800420c:	4311      	orrs	r1, r2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0652      	lsls	r2, r2, #25
 8004218:	4311      	orrs	r1, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800421e:	06d2      	lsls	r2, r2, #27
 8004220:	430a      	orrs	r2, r1
 8004222:	4912      	ldr	r1, [pc, #72]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004224:	4313      	orrs	r3, r2
 8004226:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0f      	ldr	r2, [pc, #60]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800422e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004232:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <HAL_RCC_OscConfig+0x778>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a0c      	ldr	r2, [pc, #48]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800423a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800423e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004240:	f7fe ff22 	bl	8003088 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fe ff1e 	bl	8003088 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e058      	b.n	800430c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <HAL_RCC_OscConfig+0x778>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004266:	e050      	b.n	800430a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e04f      	b.n	800430c <HAL_RCC_OscConfig+0x818>
 800426c:	40021000 	.word	0x40021000
 8004270:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004274:	4b27      	ldr	r3, [pc, #156]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d144      	bne.n	800430a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004280:	4b24      	ldr	r3, [pc, #144]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 8004286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 8004292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004296:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004298:	f7fe fef6 	bl	8003088 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fe fef2 	bl	8003088 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e02c      	b.n	800430c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b2:	4b18      	ldr	r3, [pc, #96]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x7ac>
 80042be:	e024      	b.n	800430a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d01f      	beq.n	8004306 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fe fed9 	bl	8003088 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042da:	f7fe fed5 	bl	8003088 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e00f      	b.n	800430c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f0      	bne.n	80042da <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	4905      	ldr	r1, [pc, #20]	; (8004314 <HAL_RCC_OscConfig+0x820>)
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_RCC_OscConfig+0x824>)
 8004300:	4013      	ands	r3, r2
 8004302:	60cb      	str	r3, [r1, #12]
 8004304:	e001      	b.n	800430a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3720      	adds	r7, #32
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	feeefffc 	.word	0xfeeefffc

0800431c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0e7      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004330:	4b75      	ldr	r3, [pc, #468]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d910      	bls.n	8004360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b72      	ldr	r3, [pc, #456]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 0207 	bic.w	r2, r3, #7
 8004346:	4970      	ldr	r1, [pc, #448]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b6e      	ldr	r3, [pc, #440]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0cf      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	4b66      	ldr	r3, [pc, #408]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004378:	429a      	cmp	r2, r3
 800437a:	d908      	bls.n	800438e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437c:	4b63      	ldr	r3, [pc, #396]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4960      	ldr	r1, [pc, #384]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04c      	beq.n	8004434 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043a2:	4b5a      	ldr	r3, [pc, #360]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d121      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0a6      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ba:	4b54      	ldr	r3, [pc, #336]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d115      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e09a      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043d2:	4b4e      	ldr	r3, [pc, #312]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e08e      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e2:	4b4a      	ldr	r3, [pc, #296]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e086      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043f2:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	4943      	ldr	r1, [pc, #268]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fe fe40 	bl	8003088 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	e00a      	b.n	8004422 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440c:	f7fe fe3c 	bl	8003088 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	f241 3288 	movw	r2, #5000	; 0x1388
 800441a:	4293      	cmp	r3, r2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e06e      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004422:	4b3a      	ldr	r3, [pc, #232]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 020c 	and.w	r2, r3, #12
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	429a      	cmp	r2, r3
 8004432:	d1eb      	bne.n	800440c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	4b31      	ldr	r3, [pc, #196]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800444c:	429a      	cmp	r2, r3
 800444e:	d208      	bcs.n	8004462 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004450:	4b2e      	ldr	r3, [pc, #184]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	492b      	ldr	r1, [pc, #172]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004462:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d210      	bcs.n	8004492 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004470:	4b25      	ldr	r3, [pc, #148]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f023 0207 	bic.w	r2, r3, #7
 8004478:	4923      	ldr	r1, [pc, #140]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004480:	4b21      	ldr	r3, [pc, #132]	; (8004508 <HAL_RCC_ClockConfig+0x1ec>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d001      	beq.n	8004492 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e036      	b.n	8004500 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449e:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4918      	ldr	r1, [pc, #96]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4910      	ldr	r1, [pc, #64]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044d0:	f000 f824 	bl	800451c <HAL_RCC_GetSysClockFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCC_ClockConfig+0x1f0>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	490b      	ldr	r1, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x1f4>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	4a09      	ldr	r2, [pc, #36]	; (8004514 <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044f0:	4b09      	ldr	r3, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x1fc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fe fd77 	bl	8002fe8 <HAL_InitTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80044fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40022000 	.word	0x40022000
 800450c:	40021000 	.word	0x40021000
 8004510:	0800daf0 	.word	0x0800daf0
 8004514:	20000030 	.word	0x20000030
 8004518:	20000034 	.word	0x20000034

0800451c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800452a:	4b3e      	ldr	r3, [pc, #248]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004534:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x34>
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d121      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d11e      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004550:	4b34      	ldr	r3, [pc, #208]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d107      	bne.n	800456c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800455c:	4b31      	ldr	r3, [pc, #196]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 800455e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e005      	b.n	8004578 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004578:	4a2b      	ldr	r2, [pc, #172]	; (8004628 <HAL_RCC_GetSysClockFreq+0x10c>)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004580:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800458c:	e00a      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d102      	bne.n	800459a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004594:	4b25      	ldr	r3, [pc, #148]	; (800462c <HAL_RCC_GetSysClockFreq+0x110>)
 8004596:	61bb      	str	r3, [r7, #24]
 8004598:	e004      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045a0:	4b23      	ldr	r3, [pc, #140]	; (8004630 <HAL_RCC_GetSysClockFreq+0x114>)
 80045a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d134      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d003      	beq.n	80045c8 <HAL_RCC_GetSysClockFreq+0xac>
 80045c0:	e005      	b.n	80045ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCC_GetSysClockFreq+0x110>)
 80045c4:	617b      	str	r3, [r7, #20]
      break;
 80045c6:	e005      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_RCC_GetSysClockFreq+0x114>)
 80045ca:	617b      	str	r3, [r7, #20]
      break;
 80045cc:	e002      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	617b      	str	r3, [r7, #20]
      break;
 80045d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045d4:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	3301      	adds	r3, #1
 80045e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	fb03 f202 	mul.w	r2, r3, r2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <HAL_RCC_GetSysClockFreq+0x108>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	0e5b      	lsrs	r3, r3, #25
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	3301      	adds	r3, #1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004612:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004614:	69bb      	ldr	r3, [r7, #24]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000
 8004628:	0800db08 	.word	0x0800db08
 800462c:	00f42400 	.word	0x00f42400
 8004630:	007a1200 	.word	0x007a1200

08004634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <HAL_RCC_GetHCLKFreq+0x14>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000030 	.word	0x20000030

0800464c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004650:	f7ff fff0 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800466c:	4618      	mov	r0, r3
 800466e:	bd80      	pop	{r7, pc}
 8004670:	40021000 	.word	0x40021000
 8004674:	0800db00 	.word	0x0800db00

08004678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800467c:	f7ff ffda 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8004680:	4602      	mov	r2, r0
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	0adb      	lsrs	r3, r3, #11
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	4904      	ldr	r1, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800468e:	5ccb      	ldrb	r3, [r1, r3]
 8004690:	f003 031f 	and.w	r3, r3, #31
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004698:	4618      	mov	r0, r3
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	0800db00 	.word	0x0800db00

080046a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046b0:	4b2a      	ldr	r3, [pc, #168]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046bc:	f7ff f9b6 	bl	8003a2c <HAL_PWREx_GetVoltageRange>
 80046c0:	6178      	str	r0, [r7, #20]
 80046c2:	e014      	b.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	4a24      	ldr	r2, [pc, #144]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6593      	str	r3, [r2, #88]	; 0x58
 80046d0:	4b22      	ldr	r3, [pc, #136]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046dc:	f7ff f9a6 	bl	8003a2c <HAL_PWREx_GetVoltageRange>
 80046e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046e2:	4b1e      	ldr	r3, [pc, #120]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e6:	4a1d      	ldr	r2, [pc, #116]	; (800475c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f4:	d10b      	bne.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b80      	cmp	r3, #128	; 0x80
 80046fa:	d919      	bls.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004700:	d902      	bls.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004702:	2302      	movs	r3, #2
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e013      	b.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004708:	2301      	movs	r3, #1
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e010      	b.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d902      	bls.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004714:	2303      	movs	r3, #3
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e00a      	b.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d102      	bne.n	8004726 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004720:	2302      	movs	r3, #2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e004      	b.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b70      	cmp	r3, #112	; 0x70
 800472a:	d101      	bne.n	8004730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800472c:	2301      	movs	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 0207 	bic.w	r2, r3, #7
 8004738:	4909      	ldr	r1, [pc, #36]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	429a      	cmp	r2, r3
 800474c:	d001      	beq.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	40022000 	.word	0x40022000

08004764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800476c:	2300      	movs	r3, #0
 800476e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004770:	2300      	movs	r3, #0
 8004772:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477c:	2b00      	cmp	r3, #0
 800477e:	d031      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004788:	d01a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800478a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800478e:	d814      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004794:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004798:	d10f      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800479a:	4b5d      	ldr	r3, [pc, #372]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4a5c      	ldr	r2, [pc, #368]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a6:	e00c      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	2100      	movs	r1, #0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 fa22 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b8:	e003      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	74fb      	strb	r3, [r7, #19]
      break;
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80047c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c8:	4b51      	ldr	r3, [pc, #324]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	494e      	ldr	r1, [pc, #312]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047de:	e001      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 809e 	beq.w	800492e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047f6:	4b46      	ldr	r3, [pc, #280]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00d      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004810:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004816:	6593      	str	r3, [r2, #88]	; 0x58
 8004818:	4b3d      	ldr	r3, [pc, #244]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004824:	2301      	movs	r3, #1
 8004826:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a39      	ldr	r2, [pc, #228]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004834:	f7fe fc28 	bl	8003088 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800483a:	e009      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fe fc24 	bl	8003088 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d902      	bls.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	74fb      	strb	r3, [r7, #19]
        break;
 800484e:	e005      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004850:	4b30      	ldr	r3, [pc, #192]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0ef      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15a      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004862:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01e      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d019      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004888:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	4a1f      	ldr	r2, [pc, #124]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800489a:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	4a1b      	ldr	r2, [pc, #108]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048aa:	4a19      	ldr	r2, [pc, #100]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7fe fbe4 	bl	8003088 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	e00b      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fe fbe0 	bl	8003088 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d902      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	74fb      	strb	r3, [r7, #19]
            break;
 80048da:	e006      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0ec      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80048ea:	7cfb      	ldrb	r3, [r7, #19]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f0:	4b07      	ldr	r3, [pc, #28]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	4904      	ldr	r1, [pc, #16]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004900:	4313      	orrs	r3, r2
 8004902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004906:	e009      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800490e:	bf00      	nop
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491c:	7c7b      	ldrb	r3, [r7, #17]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b8d      	ldr	r3, [pc, #564]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004926:	4a8c      	ldr	r2, [pc, #560]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800493a:	4b87      	ldr	r3, [pc, #540]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	f023 0203 	bic.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4983      	ldr	r1, [pc, #524]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800495c:	4b7e      	ldr	r3, [pc, #504]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 020c 	bic.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	497b      	ldr	r1, [pc, #492]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800497e:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004984:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	4972      	ldr	r1, [pc, #456]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a0:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	496a      	ldr	r1, [pc, #424]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	4961      	ldr	r1, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049e4:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	4959      	ldr	r1, [pc, #356]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a06:	4b54      	ldr	r3, [pc, #336]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a14:	4950      	ldr	r1, [pc, #320]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a28:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	4948      	ldr	r1, [pc, #288]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a4a:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	493f      	ldr	r1, [pc, #252]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d028      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7a:	4937      	ldr	r1, [pc, #220]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a31      	ldr	r2, [pc, #196]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a96:	60d3      	str	r3, [r2, #12]
 8004a98:	e011      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aa2:	d10c      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f8a4 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ab4:	7cfb      	ldrb	r3, [r7, #19]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aca:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	491f      	ldr	r1, [pc, #124]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4a1a      	ldr	r2, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004af4:	60d3      	str	r3, [r2, #12]
 8004af6:	e011      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f875 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004b18:	7cfb      	ldrb	r3, [r7, #19]
 8004b1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02b      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	4908      	ldr	r1, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b46:	d109      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a02      	ldr	r2, [pc, #8]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b52:	60d3      	str	r3, [r2, #12]
 8004b54:	e014      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f843 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b76:	7cfb      	ldrb	r3, [r7, #19]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004b7c:	7cfb      	ldrb	r3, [r7, #19]
 8004b7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d01c      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	4916      	ldr	r1, [pc, #88]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f820 	bl	8004bf8 <RCCEx_PLLSAI1_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	4904      	ldr	r1, [pc, #16]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40021000 	.word	0x40021000

08004bf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c06:	4b74      	ldr	r3, [pc, #464]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d018      	beq.n	8004c44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c12:	4b71      	ldr	r3, [pc, #452]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0203 	and.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10d      	bne.n	8004c3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
       ||
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c2a:	4b6b      	ldr	r3, [pc, #428]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	091b      	lsrs	r3, r3, #4
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
       ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d047      	beq.n	8004cce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	e044      	b.n	8004cce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d018      	beq.n	8004c7e <RCCEx_PLLSAI1_Config+0x86>
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d825      	bhi.n	8004c9c <RCCEx_PLLSAI1_Config+0xa4>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d002      	beq.n	8004c5a <RCCEx_PLLSAI1_Config+0x62>
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d009      	beq.n	8004c6c <RCCEx_PLLSAI1_Config+0x74>
 8004c58:	e020      	b.n	8004c9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c5a:	4b5f      	ldr	r3, [pc, #380]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d11d      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e01a      	b.n	8004ca2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d116      	bne.n	8004ca6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7c:	e013      	b.n	8004ca6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c8a:	4b53      	ldr	r3, [pc, #332]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c9a:	e006      	b.n	8004caa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e004      	b.n	8004cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e002      	b.n	8004cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cb2:	4b49      	ldr	r3, [pc, #292]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	4943      	ldr	r1, [pc, #268]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d17c      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cd4:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3f      	ldr	r2, [pc, #252]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fe f9d2 	bl	8003088 <HAL_GetTick>
 8004ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ce6:	e009      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce8:	f7fe f9ce 	bl	8003088 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cfa:	e005      	b.n	8004d08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1ef      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d15f      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d110      	bne.n	8004d36 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d14:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6892      	ldr	r2, [r2, #8]
 8004d24:	0211      	lsls	r1, r2, #8
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68d2      	ldr	r2, [r2, #12]
 8004d2a:	06d2      	lsls	r2, r2, #27
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	492a      	ldr	r1, [pc, #168]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	610b      	str	r3, [r1, #16]
 8004d34:	e027      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d112      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d3c:	4b26      	ldr	r3, [pc, #152]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6892      	ldr	r2, [r2, #8]
 8004d4c:	0211      	lsls	r1, r2, #8
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6912      	ldr	r2, [r2, #16]
 8004d52:	0852      	lsrs	r2, r2, #1
 8004d54:	3a01      	subs	r2, #1
 8004d56:	0552      	lsls	r2, r2, #21
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	491f      	ldr	r1, [pc, #124]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
 8004d60:	e011      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d62:	4b1d      	ldr	r3, [pc, #116]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6892      	ldr	r2, [r2, #8]
 8004d72:	0211      	lsls	r1, r2, #8
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6952      	ldr	r2, [r2, #20]
 8004d78:	0852      	lsrs	r2, r2, #1
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	0652      	lsls	r2, r2, #25
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	4915      	ldr	r1, [pc, #84]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a13      	ldr	r2, [pc, #76]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d90:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fe f979 	bl	8003088 <HAL_GetTick>
 8004d96:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d98:	e009      	b.n	8004dae <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d9a:	f7fe f975 	bl	8003088 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d902      	bls.n	8004dae <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	73fb      	strb	r3, [r7, #15]
          break;
 8004dac:	e005      	b.n	8004dba <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0ef      	beq.n	8004d9a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dc0:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	4903      	ldr	r1, [pc, #12]	; (8004dd8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000

08004ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e095      	b.n	8004f1a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d009      	beq.n	8004e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
 8004e06:	e005      	b.n	8004e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc febc 	bl	8001bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e54:	d902      	bls.n	8004e5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e002      	b.n	8004e62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e6a:	d007      	beq.n	8004e7c <HAL_SPI_Init+0xa0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	ea42 0103 	orr.w	r1, r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	f003 0204 	and.w	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ef8:	ea42 0103 	orr.w	r1, r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b08a      	sub	sp, #40	; 0x28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f30:	2301      	movs	r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x26>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e1fb      	b.n	8005340 <HAL_SPI_TransmitReceive+0x41e>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f50:	f7fe f89a 	bl	8003088 <HAL_GetTick>
 8004f54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f64:	887b      	ldrh	r3, [r7, #2]
 8004f66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f6c:	7efb      	ldrb	r3, [r7, #27]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d00e      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x6e>
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f78:	d106      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d102      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x66>
 8004f82:	7efb      	ldrb	r3, [r7, #27]
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d003      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f8e:	e1cd      	b.n	800532c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <HAL_SPI_TransmitReceive+0x80>
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fa8:	e1c0      	b.n	800532c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d003      	beq.n	8004fbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	887a      	ldrh	r2, [r7, #2]
 8004fea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005000:	d802      	bhi.n	8005008 <HAL_SPI_TransmitReceive+0xe6>
 8005002:	8a3b      	ldrh	r3, [r7, #16]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d908      	bls.n	800501a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	e007      	b.n	800502a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005028:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d007      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005050:	d97c      	bls.n	800514c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x13e>
 800505a:	8a7b      	ldrh	r3, [r7, #18]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d169      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	881a      	ldrh	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005084:	e056      	b.n	8005134 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d11b      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x1aa>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_SPI_TransmitReceive+0x1aa>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d113      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d11c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x1f2>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	b292      	uxth	r2, r2
 80050f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005110:	2301      	movs	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005114:	f7fd ffb8 	bl	8003088 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005120:	429a      	cmp	r2, r3
 8005122:	d807      	bhi.n	8005134 <HAL_SPI_TransmitReceive+0x212>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d003      	beq.n	8005134 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005132:	e0fb      	b.n	800532c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1a3      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x164>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d19d      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x164>
 800514a:	e0df      	b.n	800530c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_SPI_TransmitReceive+0x23a>
 8005154:	8a7b      	ldrh	r3, [r7, #18]
 8005156:	2b01      	cmp	r3, #1
 8005158:	f040 80cb 	bne.w	80052f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	d912      	bls.n	800518c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b02      	subs	r3, #2
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800518a:	e0b2      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	330c      	adds	r3, #12
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051b2:	e09e      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d134      	bne.n	800522c <HAL_SPI_TransmitReceive+0x30a>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02f      	beq.n	800522c <HAL_SPI_TransmitReceive+0x30a>
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d12c      	bne.n	800522c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d912      	bls.n	8005202 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	881a      	ldrh	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	1c9a      	adds	r2, r3, #2
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b02      	subs	r3, #2
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005200:	e012      	b.n	8005228 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d148      	bne.n	80052cc <HAL_SPI_TransmitReceive+0x3aa>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d042      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d923      	bls.n	800529a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	b292      	uxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	1c9a      	adds	r2, r3, #2
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b02      	subs	r3, #2
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	d81f      	bhi.n	80052c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005296:	605a      	str	r2, [r3, #4]
 8005298:	e016      	b.n	80052c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f103 020c 	add.w	r2, r3, #12
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	7812      	ldrb	r2, [r2, #0]
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c8:	2301      	movs	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052cc:	f7fd fedc 	bl	8003088 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d8:	429a      	cmp	r2, r3
 80052da:	d803      	bhi.n	80052e4 <HAL_SPI_TransmitReceive+0x3c2>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d102      	bne.n	80052ea <HAL_SPI_TransmitReceive+0x3c8>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052f0:	e01c      	b.n	800532c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f af5b 	bne.w	80051b4 <HAL_SPI_TransmitReceive+0x292>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	f47f af54 	bne.w	80051b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f937 	bl	8005584 <SPI_EndRxTxTransaction>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d006      	beq.n	800532a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	661a      	str	r2, [r3, #96]	; 0x60
 8005328:	e000      	b.n	800532c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800532a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800533c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005340:	4618      	mov	r0, r3
 8005342:	3728      	adds	r7, #40	; 0x28
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005358:	f7fd fe96 	bl	8003088 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4413      	add	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005368:	f7fd fe8e 	bl	8003088 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536e:	4b39      	ldr	r3, [pc, #228]	; (8005454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	0d1b      	lsrs	r3, r3, #20
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537e:	e054      	b.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d050      	beq.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005388:	f7fd fe7e 	bl	8003088 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	429a      	cmp	r2, r3
 8005396:	d902      	bls.n	800539e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d13d      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b6:	d111      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c0:	d004      	beq.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d107      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d10f      	bne.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e017      	b.n	800544a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d19b      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000030 	.word	0x20000030

08005458 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800546a:	f7fd fe0d 	bl	8003088 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	4413      	add	r3, r2
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800547a:	f7fd fe05 	bl	8003088 <HAL_GetTick>
 800547e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005488:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	00da      	lsls	r2, r3, #3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	0d1b      	lsrs	r3, r3, #20
 8005498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80054a0:	e060      	b.n	8005564 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054a8:	d107      	bne.n	80054ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d050      	beq.n	8005564 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c2:	f7fd fde1 	bl	8003088 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d902      	bls.n	80054d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d13d      	bne.n	8005554 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f0:	d111      	bne.n	8005516 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fa:	d004      	beq.n	8005506 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d107      	bne.n	8005516 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	d10f      	bne.n	8005540 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e010      	b.n	8005576 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	3b01      	subs	r3, #1
 8005562:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d196      	bne.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3728      	adds	r7, #40	; 0x28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000030 	.word	0x20000030

08005584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2200      	movs	r2, #0
 8005598:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff ff5b 	bl	8005458 <SPI_WaitFifoStateUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ac:	f043 0220 	orr.w	r2, r3, #32
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e027      	b.n	8005608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fec0 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	f043 0220 	orr.w	r2, r3, #32
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e014      	b.n	8005608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f7ff ff34 	bl	8005458 <SPI_WaitFifoStateUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e000      	b.n	8005608 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e049      	b.n	80056b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fc fd92 	bl	8002160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 fba0 	bl	8005d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d001      	beq.n	80056d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e033      	b.n	8005740 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_TIM_Base_Start+0x8c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIM_Base_Start+0x3e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f2:	d004      	beq.n	80056fe <HAL_TIM_Base_Start+0x3e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a15      	ldr	r2, [pc, #84]	; (8005750 <HAL_TIM_Base_Start+0x90>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d115      	bne.n	800572a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_TIM_Base_Start+0x94>)
 8005706:	4013      	ands	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d015      	beq.n	800573c <HAL_TIM_Base_Start+0x7c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005716:	d011      	beq.n	800573c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	e008      	b.n	800573c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e000      	b.n	800573e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40014000 	.word	0x40014000
 8005754:	00010007 	.word	0x00010007

08005758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e049      	b.n	80057fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f841 	bl	8005806 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fafc 	bl	8005d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800580e:	bf00      	nop
 8005810:	370c      	adds	r7, #12
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_TIM_PWM_Start+0x24>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	e03c      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d109      	bne.n	800585a <HAL_TIM_PWM_Start+0x3e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	e02f      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b08      	cmp	r3, #8
 800585e:	d109      	bne.n	8005874 <HAL_TIM_PWM_Start+0x58>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b01      	cmp	r3, #1
 800586a:	bf14      	ite	ne
 800586c:	2301      	movne	r3, #1
 800586e:	2300      	moveq	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e022      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	2b0c      	cmp	r3, #12
 8005878:	d109      	bne.n	800588e <HAL_TIM_PWM_Start+0x72>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b01      	cmp	r3, #1
 8005884:	bf14      	ite	ne
 8005886:	2301      	movne	r3, #1
 8005888:	2300      	moveq	r3, #0
 800588a:	b2db      	uxtb	r3, r3
 800588c:	e015      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b10      	cmp	r3, #16
 8005892:	d109      	bne.n	80058a8 <HAL_TIM_PWM_Start+0x8c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	e008      	b.n	80058ba <HAL_TIM_PWM_Start+0x9e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07e      	b.n	80059c0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_PWM_Start+0xb6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d0:	e023      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_PWM_Start+0xc6>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e0:	e01b      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d104      	bne.n	80058f2 <HAL_TIM_PWM_Start+0xd6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f0:	e013      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b0c      	cmp	r3, #12
 80058f6:	d104      	bne.n	8005902 <HAL_TIM_PWM_Start+0xe6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005900:	e00b      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d104      	bne.n	8005912 <HAL_TIM_PWM_Start+0xf6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005910:	e003      	b.n	800591a <HAL_TIM_PWM_Start+0xfe>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2202      	movs	r2, #2
 8005916:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fdb2 	bl	800648c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a26      	ldr	r2, [pc, #152]	; (80059c8 <HAL_TIM_PWM_Start+0x1ac>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d009      	beq.n	8005946 <HAL_TIM_PWM_Start+0x12a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a25      	ldr	r2, [pc, #148]	; (80059cc <HAL_TIM_PWM_Start+0x1b0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d004      	beq.n	8005946 <HAL_TIM_PWM_Start+0x12a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a23      	ldr	r2, [pc, #140]	; (80059d0 <HAL_TIM_PWM_Start+0x1b4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d101      	bne.n	800594a <HAL_TIM_PWM_Start+0x12e>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <HAL_TIM_PWM_Start+0x130>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800595e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_TIM_PWM_Start+0x1ac>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIM_PWM_Start+0x162>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d004      	beq.n	800597e <HAL_TIM_PWM_Start+0x162>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a14      	ldr	r2, [pc, #80]	; (80059cc <HAL_TIM_PWM_Start+0x1b0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d115      	bne.n	80059aa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <HAL_TIM_PWM_Start+0x1b8>)
 8005986:	4013      	ands	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b06      	cmp	r3, #6
 800598e:	d015      	beq.n	80059bc <HAL_TIM_PWM_Start+0x1a0>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005996:	d011      	beq.n	80059bc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	e008      	b.n	80059bc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f042 0201 	orr.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	e000      	b.n	80059be <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40014400 	.word	0x40014400
 80059d4:	00010007 	.word	0x00010007

080059d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0ff      	b.n	8005bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b14      	cmp	r3, #20
 8005a02:	f200 80f0 	bhi.w	8005be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a06:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	08005be7 	.word	0x08005be7
 8005a14:	08005be7 	.word	0x08005be7
 8005a18:	08005be7 	.word	0x08005be7
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005be7 	.word	0x08005be7
 8005a24:	08005be7 	.word	0x08005be7
 8005a28:	08005be7 	.word	0x08005be7
 8005a2c:	08005ae3 	.word	0x08005ae3
 8005a30:	08005be7 	.word	0x08005be7
 8005a34:	08005be7 	.word	0x08005be7
 8005a38:	08005be7 	.word	0x08005be7
 8005a3c:	08005b23 	.word	0x08005b23
 8005a40:	08005be7 	.word	0x08005be7
 8005a44:	08005be7 	.word	0x08005be7
 8005a48:	08005be7 	.word	0x08005be7
 8005a4c:	08005b65 	.word	0x08005b65
 8005a50:	08005be7 	.word	0x08005be7
 8005a54:	08005be7 	.word	0x08005be7
 8005a58:	08005be7 	.word	0x08005be7
 8005a5c:	08005ba5 	.word	0x08005ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 f9f8 	bl	8005e5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0204 	bic.w	r2, r2, #4
 8005a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6999      	ldr	r1, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	619a      	str	r2, [r3, #24]
      break;
 8005a9e:	e0a5      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fa54 	bl	8005f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	619a      	str	r2, [r3, #24]
      break;
 8005ae0:	e084      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 faad 	bl	8006048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0208 	orr.w	r2, r2, #8
 8005afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0204 	bic.w	r2, r2, #4
 8005b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	61da      	str	r2, [r3, #28]
      break;
 8005b20:	e064      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fb05 	bl	8006138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69d9      	ldr	r1, [r3, #28]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	021a      	lsls	r2, r3, #8
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	61da      	str	r2, [r3, #28]
      break;
 8005b62:	e043      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fb42 	bl	80061f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ba2:	e023      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fb7a 	bl	80062a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005be4:	e002      	b.n	8005bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop

08005c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b6      	b.n	8005d8a <HAL_TIM_ConfigClockSource+0x18a>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d03e      	beq.n	8005cd8 <HAL_TIM_ConfigClockSource+0xd8>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5e:	f200 8087 	bhi.w	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c66:	f000 8086 	beq.w	8005d76 <HAL_TIM_ConfigClockSource+0x176>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d87f      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c70:	2b70      	cmp	r3, #112	; 0x70
 8005c72:	d01a      	beq.n	8005caa <HAL_TIM_ConfigClockSource+0xaa>
 8005c74:	2b70      	cmp	r3, #112	; 0x70
 8005c76:	d87b      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c78:	2b60      	cmp	r3, #96	; 0x60
 8005c7a:	d050      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0x11e>
 8005c7c:	2b60      	cmp	r3, #96	; 0x60
 8005c7e:	d877      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c80:	2b50      	cmp	r3, #80	; 0x50
 8005c82:	d03c      	beq.n	8005cfe <HAL_TIM_ConfigClockSource+0xfe>
 8005c84:	2b50      	cmp	r3, #80	; 0x50
 8005c86:	d873      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d058      	beq.n	8005d3e <HAL_TIM_ConfigClockSource+0x13e>
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d86f      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c90:	2b30      	cmp	r3, #48	; 0x30
 8005c92:	d064      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15e>
 8005c94:	2b30      	cmp	r3, #48	; 0x30
 8005c96:	d86b      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d060      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15e>
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d867      	bhi.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d05c      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15e>
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d05a      	beq.n	8005d5e <HAL_TIM_ConfigClockSource+0x15e>
 8005ca8:	e062      	b.n	8005d70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f000 fbc7 	bl	800644c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ccc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	609a      	str	r2, [r3, #8]
      break;
 8005cd6:	e04f      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6899      	ldr	r1, [r3, #8]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f000 fbb0 	bl	800644c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfa:	609a      	str	r2, [r3, #8]
      break;
 8005cfc:	e03c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 fb24 	bl	8006358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2150      	movs	r1, #80	; 0x50
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fb7d 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005d1c:	e02c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6859      	ldr	r1, [r3, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f000 fb43 	bl	80063b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2160      	movs	r1, #96	; 0x60
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fb6d 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005d3c:	e01c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f000 fb04 	bl	8006358 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2140      	movs	r1, #64	; 0x40
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb5d 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005d5c:	e00c      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4619      	mov	r1, r3
 8005d68:	4610      	mov	r0, r2
 8005d6a:	f000 fb54 	bl	8006416 <TIM_ITRx_SetConfig>
      break;
 8005d6e:	e003      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      break;
 8005d74:	e000      	b.n	8005d78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0xbc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d003      	beq.n	8005db4 <TIM_Base_SetConfig+0x20>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db2:	d108      	bne.n	8005dc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <TIM_Base_SetConfig+0xbc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_Base_SetConfig+0x52>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd4:	d007      	beq.n	8005de6 <TIM_Base_SetConfig+0x52>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <TIM_Base_SetConfig+0xc0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_Base_SetConfig+0x52>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <TIM_Base_SetConfig+0xc4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d108      	bne.n	8005df8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <TIM_Base_SetConfig+0xbc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0xa0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a0b      	ldr	r2, [pc, #44]	; (8005e54 <TIM_Base_SetConfig+0xc0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0xa0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <TIM_Base_SetConfig+0xc4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d103      	bne.n	8005e3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	615a      	str	r2, [r3, #20]
}
 8005e42:	bf00      	nop
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400

08005e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f023 0201 	bic.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0302 	bic.w	r3, r3, #2
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a24      	ldr	r2, [pc, #144]	; (8005f48 <TIM_OC1_SetConfig+0xec>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d007      	beq.n	8005ecc <TIM_OC1_SetConfig+0x70>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <TIM_OC1_SetConfig+0xf0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC1_SetConfig+0x70>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <TIM_OC1_SetConfig+0xf4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d10c      	bne.n	8005ee6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0308 	bic.w	r3, r3, #8
 8005ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 0304 	bic.w	r3, r3, #4
 8005ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <TIM_OC1_SetConfig+0xec>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_OC1_SetConfig+0xa2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC1_SetConfig+0xf0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC1_SetConfig+0xa2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <TIM_OC1_SetConfig+0xf4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400

08005f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0320 	bic.w	r3, r3, #32
 8005fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a22      	ldr	r2, [pc, #136]	; (800603c <TIM_OC2_SetConfig+0xe8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d10d      	bne.n	8005fd4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a19      	ldr	r2, [pc, #100]	; (800603c <TIM_OC2_SetConfig+0xe8>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_OC2_SetConfig+0x98>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a18      	ldr	r2, [pc, #96]	; (8006040 <TIM_OC2_SetConfig+0xec>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_OC2_SetConfig+0x98>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a17      	ldr	r2, [pc, #92]	; (8006044 <TIM_OC2_SetConfig+0xf0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d113      	bne.n	8006014 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400

08006048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0303 	bic.w	r3, r3, #3
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	021b      	lsls	r3, r3, #8
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a21      	ldr	r2, [pc, #132]	; (800612c <TIM_OC3_SetConfig+0xe4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10d      	bne.n	80060c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <TIM_OC3_SetConfig+0xe4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d007      	beq.n	80060de <TIM_OC3_SetConfig+0x96>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a17      	ldr	r2, [pc, #92]	; (8006130 <TIM_OC3_SetConfig+0xe8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d003      	beq.n	80060de <TIM_OC3_SetConfig+0x96>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <TIM_OC3_SetConfig+0xec>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d113      	bne.n	8006106 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	4313      	orrs	r3, r2
 8006104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	621a      	str	r2, [r3, #32]
}
 8006120:	bf00      	nop
 8006122:	371c      	adds	r7, #28
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400

08006138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <TIM_OC4_SetConfig+0xb0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_OC4_SetConfig+0x74>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a13      	ldr	r2, [pc, #76]	; (80061ec <TIM_OC4_SetConfig+0xb4>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_OC4_SetConfig+0x74>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <TIM_OC4_SetConfig+0xb8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d109      	bne.n	80061c0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40014000 	.word	0x40014000
 80061f0:	40014400 	.word	0x40014400

080061f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006238:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a13      	ldr	r2, [pc, #76]	; (8006298 <TIM_OC5_SetConfig+0xa4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_OC5_SetConfig+0x6a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <TIM_OC5_SetConfig+0xa8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_OC5_SetConfig+0x6a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a11      	ldr	r2, [pc, #68]	; (80062a0 <TIM_OC5_SetConfig+0xac>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d109      	bne.n	8006272 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006264:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	621a      	str	r2, [r3, #32]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40014000 	.word	0x40014000
 80062a0:	40014400 	.word	0x40014400

080062a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	051b      	lsls	r3, r3, #20
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a14      	ldr	r2, [pc, #80]	; (800634c <TIM_OC6_SetConfig+0xa8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d007      	beq.n	8006310 <TIM_OC6_SetConfig+0x6c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <TIM_OC6_SetConfig+0xac>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d003      	beq.n	8006310 <TIM_OC6_SetConfig+0x6c>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a12      	ldr	r2, [pc, #72]	; (8006354 <TIM_OC6_SetConfig+0xb0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d109      	bne.n	8006324 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006316:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	029b      	lsls	r3, r3, #10
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	621a      	str	r2, [r3, #32]
}
 800633e:	bf00      	nop
 8006340:	371c      	adds	r7, #28
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400

08006358 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0201 	bic.w	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f023 030a 	bic.w	r3, r3, #10
 8006394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0210 	bic.w	r2, r3, #16
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	f043 0307 	orr.w	r3, r3, #7
 8006438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	021a      	lsls	r2, r3, #8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	431a      	orrs	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	609a      	str	r2, [r3, #8]
}
 8006480:	bf00      	nop
 8006482:	371c      	adds	r7, #28
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 031f 	and.w	r3, r3, #31
 800649e:	2201      	movs	r2, #1
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1a      	ldr	r2, [r3, #32]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	43db      	mvns	r3, r3
 80064ae:	401a      	ands	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	fa01 f303 	lsl.w	r3, r1, r3
 80064c4:	431a      	orrs	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]
}
 80064ca:	bf00      	nop
 80064cc:	371c      	adds	r7, #28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d101      	bne.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e04f      	b.n	8006590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d108      	bne.n	800652c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006520:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	4313      	orrs	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a14      	ldr	r2, [pc, #80]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d004      	beq.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d10c      	bne.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800656a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40012c00 	.word	0x40012c00
 80065a0:	40014000 	.word	0x40014000

080065a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e060      	b.n	8006682 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	041b      	lsls	r3, r3, #16
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d115      	bne.n	8006670 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	051b      	lsls	r3, r3, #20
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00

08006694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e040      	b.n	8006728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fb fe34 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fc18 	bl	8006f08 <UART_SetConfig>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e022      	b.n	8006728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fe66 	bl	80073bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800670e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 feed 	bl	8007500 <UART_CheckIdleState>
 8006726:	4603      	mov	r3, r0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	; 0x28
 8006734:	af02      	add	r7, sp, #8
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	603b      	str	r3, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006744:	2b20      	cmp	r3, #32
 8006746:	f040 8082 	bne.w	800684e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <HAL_UART_Transmit+0x26>
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e07a      	b.n	8006850 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006760:	2b01      	cmp	r3, #1
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit+0x38>
 8006764:	2302      	movs	r3, #2
 8006766:	e073      	b.n	8006850 <HAL_UART_Transmit+0x120>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2221      	movs	r2, #33	; 0x21
 800677c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800677e:	f7fc fc83 	bl	8003088 <HAL_GetTick>
 8006782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	88fa      	ldrh	r2, [r7, #6]
 8006790:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679c:	d108      	bne.n	80067b0 <HAL_UART_Transmit+0x80>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d104      	bne.n	80067b0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	e003      	b.n	80067b8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80067c0:	e02d      	b.n	800681e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2180      	movs	r1, #128	; 0x80
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f000 fee0 	bl	8007592 <UART_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e039      	b.n	8006850 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ee:	b292      	uxth	r2, r2
 80067f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	3302      	adds	r3, #2
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e008      	b.n	800680c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	781a      	ldrb	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	b292      	uxth	r2, r2
 8006804:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006812:	b29b      	uxth	r3, r3
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1cb      	bne.n	80067c2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2200      	movs	r2, #0
 8006832:	2140      	movs	r1, #64	; 0x40
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 feac 	bl	8007592 <UART_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e005      	b.n	8006850 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	e000      	b.n	8006850 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800684e:	2302      	movs	r3, #2
  }
}
 8006850:	4618      	mov	r0, r3
 8006852:	3720      	adds	r7, #32
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800686a:	2b20      	cmp	r3, #32
 800686c:	d142      	bne.n	80068f4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_UART_Receive_IT+0x22>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e03b      	b.n	80068f6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006884:	2b01      	cmp	r3, #1
 8006886:	d101      	bne.n	800688c <HAL_UART_Receive_IT+0x34>
 8006888:	2302      	movs	r3, #2
 800688a:	e034      	b.n	80068f6 <HAL_UART_Receive_IT+0x9e>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a18      	ldr	r2, [pc, #96]	; (8006900 <HAL_UART_Receive_IT+0xa8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d01f      	beq.n	80068e4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d018      	beq.n	80068e4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	613b      	str	r3, [r7, #16]
   return(result);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	69f9      	ldr	r1, [r7, #28]
 80068d6:	6a3a      	ldr	r2, [r7, #32]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 ff16 	bl	800771c <UART_Start_Receive_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	e000      	b.n	80068f6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80068f4:	2302      	movs	r3, #2
  }
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3728      	adds	r7, #40	; 0x28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40008000 	.word	0x40008000

08006904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b0ba      	sub	sp, #232	; 0xe8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800692a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800692e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006932:	4013      	ands	r3, r2
 8006934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d115      	bne.n	800696c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00f      	beq.n	800696c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800694c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d009      	beq.n	800696c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 82a6 	beq.w	8006eae <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
      }
      return;
 800696a:	e2a0      	b.n	8006eae <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800696c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8117 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006982:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006986:	4b85      	ldr	r3, [pc, #532]	; (8006b9c <HAL_UART_IRQHandler+0x298>)
 8006988:	4013      	ands	r3, r2
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 810a 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d011      	beq.n	80069c0 <HAL_UART_IRQHandler+0xbc>
 800699c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2201      	movs	r2, #1
 80069ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069b6:	f043 0201 	orr.w	r2, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d011      	beq.n	80069f0 <HAL_UART_IRQHandler+0xec>
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00b      	beq.n	80069f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2202      	movs	r2, #2
 80069de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d011      	beq.n	8006a20 <HAL_UART_IRQHandler+0x11c>
 80069fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2204      	movs	r2, #4
 8006a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a16:	f043 0202 	orr.w	r2, r3, #2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a24:	f003 0308 	and.w	r3, r3, #8
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d017      	beq.n	8006a5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a52:	f043 0208 	orr.w	r2, r3, #8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <HAL_UART_IRQHandler+0x18a>
 8006a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00c      	beq.n	8006a8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a84:	f043 0220 	orr.w	r2, r3, #32
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 820c 	beq.w	8006eb2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d005      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d04f      	beq.n	8006b86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fee2 	bl	80078b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d141      	bne.n	8006b7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3308      	adds	r3, #8
 8006b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1d9      	bne.n	8006afa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d013      	beq.n	8006b76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <HAL_UART_IRQHandler+0x29c>)
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fc fccc 	bl	80034f8 <HAL_DMA_Abort_IT>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d017      	beq.n	8006b96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	e00f      	b.n	8006b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f9b0 	bl	8006edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	e00b      	b.n	8006b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9ac 	bl	8006edc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	e007      	b.n	8006b96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9a8 	bl	8006edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006b94:	e18d      	b.n	8006eb2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b96:	bf00      	nop
    return;
 8006b98:	e18b      	b.n	8006eb2 <HAL_UART_IRQHandler+0x5ae>
 8006b9a:	bf00      	nop
 8006b9c:	04000120 	.word	0x04000120
 8006ba0:	08007977 	.word	0x08007977

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	f040 8146 	bne.w	8006e3a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bb2:	f003 0310 	and.w	r3, r3, #16
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 813f 	beq.w	8006e3a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 8138 	beq.w	8006e3a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	f040 80b4 	bne.w	8006d4a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 815f 	beq.w	8006eb6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c02:	429a      	cmp	r2, r3
 8006c04:	f080 8157 	bcs.w	8006eb6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 8085 	bne.w	8006d2e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c5e:	e841 2300 	strex	r3, r2, [r1]
 8006c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1da      	bne.n	8006c24 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3308      	adds	r3, #8
 8006c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c80:	f023 0301 	bic.w	r3, r3, #1
 8006c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3308      	adds	r3, #8
 8006c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e1      	bne.n	8006c6e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3308      	adds	r3, #8
 8006cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cb4:	e853 3f00 	ldrex	r3, [r3]
 8006cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e3      	bne.n	8006caa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e4      	bne.n	8006cee <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fc fba7 	bl	800347c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f8d4 	bl	8006ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d48:	e0b5      	b.n	8006eb6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80a7 	beq.w	8006eba <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 80a2 	beq.w	8006eba <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d98:	647b      	str	r3, [r7, #68]	; 0x44
 8006d9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e4      	bne.n	8006d76 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	623b      	str	r3, [r7, #32]
   return(result);
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dd0:	633a      	str	r2, [r7, #48]	; 0x30
 8006dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd8:	e841 2300 	strex	r3, r2, [r1]
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1e3      	bne.n	8006dac <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	e853 3f00 	ldrex	r3, [r3]
 8006e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0310 	bic.w	r3, r3, #16
 8006e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e18:	61fb      	str	r3, [r7, #28]
 8006e1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	69b9      	ldr	r1, [r7, #24]
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	617b      	str	r3, [r7, #20]
   return(result);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e4      	bne.n	8006df6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f85c 	bl	8006ef0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e38:	e03f      	b.n	8006eba <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00e      	beq.n	8006e64 <HAL_UART_IRQHandler+0x560>
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 ff2a 	bl	8007cb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e62:	e02d      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00e      	beq.n	8006e8e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01c      	beq.n	8006ebe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
    }
    return;
 8006e8c:	e017      	b.n	8006ebe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d012      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
 8006e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fd7b 	bl	80079a2 <UART_EndTransmit_IT>
    return;
 8006eac:	e008      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eae:	bf00      	nop
 8006eb0:	e006      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006eb2:	bf00      	nop
 8006eb4:	e004      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eb6:	bf00      	nop
 8006eb8:	e002      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ebe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ec0:	37e8      	adds	r7, #232	; 0xe8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop

08006ec8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f0c:	b08a      	sub	sp, #40	; 0x28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b9e      	ldr	r3, [pc, #632]	; (80071b0 <UART_SetConfig+0x2a8>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	6812      	ldr	r2, [r2, #0]
 8006f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f40:	430b      	orrs	r3, r1
 8006f42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a93      	ldr	r2, [pc, #588]	; (80071b4 <UART_SetConfig+0x2ac>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d004      	beq.n	8006f74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f84:	430a      	orrs	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a8a      	ldr	r2, [pc, #552]	; (80071b8 <UART_SetConfig+0x2b0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d126      	bne.n	8006fe0 <UART_SetConfig+0xd8>
 8006f92:	4b8a      	ldr	r3, [pc, #552]	; (80071bc <UART_SetConfig+0x2b4>)
 8006f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d81b      	bhi.n	8006fd8 <UART_SetConfig+0xd0>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0xa0>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fc1 	.word	0x08006fc1
 8006fb4:	08006fd1 	.word	0x08006fd1
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fbe:	e0ab      	b.n	8007118 <UART_SetConfig+0x210>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc6:	e0a7      	b.n	8007118 <UART_SetConfig+0x210>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fce:	e0a3      	b.n	8007118 <UART_SetConfig+0x210>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fd6:	e09f      	b.n	8007118 <UART_SetConfig+0x210>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fde:	e09b      	b.n	8007118 <UART_SetConfig+0x210>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a76      	ldr	r2, [pc, #472]	; (80071c0 <UART_SetConfig+0x2b8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d138      	bne.n	800705c <UART_SetConfig+0x154>
 8006fea:	4b74      	ldr	r3, [pc, #464]	; (80071bc <UART_SetConfig+0x2b4>)
 8006fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff0:	f003 030c 	and.w	r3, r3, #12
 8006ff4:	2b0c      	cmp	r3, #12
 8006ff6:	d82d      	bhi.n	8007054 <UART_SetConfig+0x14c>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0xf8>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	08007035 	.word	0x08007035
 8007004:	08007055 	.word	0x08007055
 8007008:	08007055 	.word	0x08007055
 800700c:	08007055 	.word	0x08007055
 8007010:	08007045 	.word	0x08007045
 8007014:	08007055 	.word	0x08007055
 8007018:	08007055 	.word	0x08007055
 800701c:	08007055 	.word	0x08007055
 8007020:	0800703d 	.word	0x0800703d
 8007024:	08007055 	.word	0x08007055
 8007028:	08007055 	.word	0x08007055
 800702c:	08007055 	.word	0x08007055
 8007030:	0800704d 	.word	0x0800704d
 8007034:	2300      	movs	r3, #0
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703a:	e06d      	b.n	8007118 <UART_SetConfig+0x210>
 800703c:	2302      	movs	r3, #2
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007042:	e069      	b.n	8007118 <UART_SetConfig+0x210>
 8007044:	2304      	movs	r3, #4
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704a:	e065      	b.n	8007118 <UART_SetConfig+0x210>
 800704c:	2308      	movs	r3, #8
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007052:	e061      	b.n	8007118 <UART_SetConfig+0x210>
 8007054:	2310      	movs	r3, #16
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800705a:	e05d      	b.n	8007118 <UART_SetConfig+0x210>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a58      	ldr	r2, [pc, #352]	; (80071c4 <UART_SetConfig+0x2bc>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d125      	bne.n	80070b2 <UART_SetConfig+0x1aa>
 8007066:	4b55      	ldr	r3, [pc, #340]	; (80071bc <UART_SetConfig+0x2b4>)
 8007068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007070:	2b30      	cmp	r3, #48	; 0x30
 8007072:	d016      	beq.n	80070a2 <UART_SetConfig+0x19a>
 8007074:	2b30      	cmp	r3, #48	; 0x30
 8007076:	d818      	bhi.n	80070aa <UART_SetConfig+0x1a2>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d00a      	beq.n	8007092 <UART_SetConfig+0x18a>
 800707c:	2b20      	cmp	r3, #32
 800707e:	d814      	bhi.n	80070aa <UART_SetConfig+0x1a2>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <UART_SetConfig+0x182>
 8007084:	2b10      	cmp	r3, #16
 8007086:	d008      	beq.n	800709a <UART_SetConfig+0x192>
 8007088:	e00f      	b.n	80070aa <UART_SetConfig+0x1a2>
 800708a:	2300      	movs	r3, #0
 800708c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007090:	e042      	b.n	8007118 <UART_SetConfig+0x210>
 8007092:	2302      	movs	r3, #2
 8007094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007098:	e03e      	b.n	8007118 <UART_SetConfig+0x210>
 800709a:	2304      	movs	r3, #4
 800709c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a0:	e03a      	b.n	8007118 <UART_SetConfig+0x210>
 80070a2:	2308      	movs	r3, #8
 80070a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070a8:	e036      	b.n	8007118 <UART_SetConfig+0x210>
 80070aa:	2310      	movs	r3, #16
 80070ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b0:	e032      	b.n	8007118 <UART_SetConfig+0x210>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3f      	ldr	r2, [pc, #252]	; (80071b4 <UART_SetConfig+0x2ac>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d12a      	bne.n	8007112 <UART_SetConfig+0x20a>
 80070bc:	4b3f      	ldr	r3, [pc, #252]	; (80071bc <UART_SetConfig+0x2b4>)
 80070be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ca:	d01a      	beq.n	8007102 <UART_SetConfig+0x1fa>
 80070cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d0:	d81b      	bhi.n	800710a <UART_SetConfig+0x202>
 80070d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d6:	d00c      	beq.n	80070f2 <UART_SetConfig+0x1ea>
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d815      	bhi.n	800710a <UART_SetConfig+0x202>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <UART_SetConfig+0x1e2>
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e6:	d008      	beq.n	80070fa <UART_SetConfig+0x1f2>
 80070e8:	e00f      	b.n	800710a <UART_SetConfig+0x202>
 80070ea:	2300      	movs	r3, #0
 80070ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f0:	e012      	b.n	8007118 <UART_SetConfig+0x210>
 80070f2:	2302      	movs	r3, #2
 80070f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070f8:	e00e      	b.n	8007118 <UART_SetConfig+0x210>
 80070fa:	2304      	movs	r3, #4
 80070fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007100:	e00a      	b.n	8007118 <UART_SetConfig+0x210>
 8007102:	2308      	movs	r3, #8
 8007104:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007108:	e006      	b.n	8007118 <UART_SetConfig+0x210>
 800710a:	2310      	movs	r3, #16
 800710c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007110:	e002      	b.n	8007118 <UART_SetConfig+0x210>
 8007112:	2310      	movs	r3, #16
 8007114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a25      	ldr	r2, [pc, #148]	; (80071b4 <UART_SetConfig+0x2ac>)
 800711e:	4293      	cmp	r3, r2
 8007120:	f040 808a 	bne.w	8007238 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007128:	2b08      	cmp	r3, #8
 800712a:	d824      	bhi.n	8007176 <UART_SetConfig+0x26e>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <UART_SetConfig+0x22c>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007159 	.word	0x08007159
 8007138:	08007177 	.word	0x08007177
 800713c:	08007161 	.word	0x08007161
 8007140:	08007177 	.word	0x08007177
 8007144:	08007167 	.word	0x08007167
 8007148:	08007177 	.word	0x08007177
 800714c:	08007177 	.word	0x08007177
 8007150:	08007177 	.word	0x08007177
 8007154:	0800716f 	.word	0x0800716f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fd fa78 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 800715c:	61f8      	str	r0, [r7, #28]
        break;
 800715e:	e010      	b.n	8007182 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007160:	4b19      	ldr	r3, [pc, #100]	; (80071c8 <UART_SetConfig+0x2c0>)
 8007162:	61fb      	str	r3, [r7, #28]
        break;
 8007164:	e00d      	b.n	8007182 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007166:	f7fd f9d9 	bl	800451c <HAL_RCC_GetSysClockFreq>
 800716a:	61f8      	str	r0, [r7, #28]
        break;
 800716c:	e009      	b.n	8007182 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800716e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007172:	61fb      	str	r3, [r7, #28]
        break;
 8007174:	e005      	b.n	8007182 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007180:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8109 	beq.w	800739c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4413      	add	r3, r2
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	429a      	cmp	r2, r3
 8007198:	d305      	bcc.n	80071a6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071a0:	69fa      	ldr	r2, [r7, #28]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d912      	bls.n	80071cc <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071ac:	e0f6      	b.n	800739c <UART_SetConfig+0x494>
 80071ae:	bf00      	nop
 80071b0:	efff69f3 	.word	0xefff69f3
 80071b4:	40008000 	.word	0x40008000
 80071b8:	40013800 	.word	0x40013800
 80071bc:	40021000 	.word	0x40021000
 80071c0:	40004400 	.word	0x40004400
 80071c4:	40004800 	.word	0x40004800
 80071c8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2200      	movs	r2, #0
 80071d0:	461c      	mov	r4, r3
 80071d2:	4615      	mov	r5, r2
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	022b      	lsls	r3, r5, #8
 80071de:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071e2:	0222      	lsls	r2, r4, #8
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	6849      	ldr	r1, [r1, #4]
 80071e8:	0849      	lsrs	r1, r1, #1
 80071ea:	2000      	movs	r0, #0
 80071ec:	4688      	mov	r8, r1
 80071ee:	4681      	mov	r9, r0
 80071f0:	eb12 0a08 	adds.w	sl, r2, r8
 80071f4:	eb43 0b09 	adc.w	fp, r3, r9
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007206:	4650      	mov	r0, sl
 8007208:	4659      	mov	r1, fp
 800720a:	f7f9 fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4613      	mov	r3, r2
 8007214:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800721c:	d308      	bcc.n	8007230 <UART_SetConfig+0x328>
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007224:	d204      	bcs.n	8007230 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69ba      	ldr	r2, [r7, #24]
 800722c:	60da      	str	r2, [r3, #12]
 800722e:	e0b5      	b.n	800739c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007236:	e0b1      	b.n	800739c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	d15d      	bne.n	80072fe <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8007242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007246:	2b08      	cmp	r3, #8
 8007248:	d827      	bhi.n	800729a <UART_SetConfig+0x392>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <UART_SetConfig+0x348>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	08007275 	.word	0x08007275
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007285 	.word	0x08007285
 800725c:	0800729b 	.word	0x0800729b
 8007260:	0800728b 	.word	0x0800728b
 8007264:	0800729b 	.word	0x0800729b
 8007268:	0800729b 	.word	0x0800729b
 800726c:	0800729b 	.word	0x0800729b
 8007270:	08007293 	.word	0x08007293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007274:	f7fd f9ea 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8007278:	61f8      	str	r0, [r7, #28]
        break;
 800727a:	e014      	b.n	80072a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800727c:	f7fd f9fc 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8007280:	61f8      	str	r0, [r7, #28]
        break;
 8007282:	e010      	b.n	80072a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007284:	4b4c      	ldr	r3, [pc, #304]	; (80073b8 <UART_SetConfig+0x4b0>)
 8007286:	61fb      	str	r3, [r7, #28]
        break;
 8007288:	e00d      	b.n	80072a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800728a:	f7fd f947 	bl	800451c <HAL_RCC_GetSysClockFreq>
 800728e:	61f8      	str	r0, [r7, #28]
        break;
 8007290:	e009      	b.n	80072a6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007296:	61fb      	str	r3, [r7, #28]
        break;
 8007298:	e005      	b.n	80072a6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d077      	beq.n	800739c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	005a      	lsls	r2, r3, #1
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	441a      	add	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	2b0f      	cmp	r3, #15
 80072c6:	d916      	bls.n	80072f6 <UART_SetConfig+0x3ee>
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ce:	d212      	bcs.n	80072f6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f023 030f 	bic.w	r3, r3, #15
 80072d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	085b      	lsrs	r3, r3, #1
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	8afb      	ldrh	r3, [r7, #22]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	8afa      	ldrh	r2, [r7, #22]
 80072f2:	60da      	str	r2, [r3, #12]
 80072f4:	e052      	b.n	800739c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80072fc:	e04e      	b.n	800739c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007302:	2b08      	cmp	r3, #8
 8007304:	d827      	bhi.n	8007356 <UART_SetConfig+0x44e>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x404>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007331 	.word	0x08007331
 8007310:	08007339 	.word	0x08007339
 8007314:	08007341 	.word	0x08007341
 8007318:	08007357 	.word	0x08007357
 800731c:	08007347 	.word	0x08007347
 8007320:	08007357 	.word	0x08007357
 8007324:	08007357 	.word	0x08007357
 8007328:	08007357 	.word	0x08007357
 800732c:	0800734f 	.word	0x0800734f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fd f98c 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8007334:	61f8      	str	r0, [r7, #28]
        break;
 8007336:	e014      	b.n	8007362 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007338:	f7fd f99e 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 800733c:	61f8      	str	r0, [r7, #28]
        break;
 800733e:	e010      	b.n	8007362 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007340:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <UART_SetConfig+0x4b0>)
 8007342:	61fb      	str	r3, [r7, #28]
        break;
 8007344:	e00d      	b.n	8007362 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007346:	f7fd f8e9 	bl	800451c <HAL_RCC_GetSysClockFreq>
 800734a:	61f8      	str	r0, [r7, #28]
        break;
 800734c:	e009      	b.n	8007362 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007352:	61fb      	str	r3, [r7, #28]
        break;
 8007354:	e005      	b.n	8007362 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007360:	bf00      	nop
    }

    if (pclk != 0U)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d019      	beq.n	800739c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	085a      	lsrs	r2, r3, #1
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	441a      	add	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2b0f      	cmp	r3, #15
 8007380:	d909      	bls.n	8007396 <UART_SetConfig+0x48e>
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007388:	d205      	bcs.n	8007396 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	60da      	str	r2, [r3, #12]
 8007394:	e002      	b.n	800739c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3728      	adds	r7, #40	; 0x28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073b6:	bf00      	nop
 80073b8:	00f42400 	.word	0x00f42400

080073bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	f003 0308 	and.w	r3, r3, #8
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f003 0310 	and.w	r3, r3, #16
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ba:	d10a      	bne.n	80074d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007510:	f7fb fdba 	bl	8003088 <HAL_GetTick>
 8007514:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	2b08      	cmp	r3, #8
 8007522:	d10e      	bne.n	8007542 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f82d 	bl	8007592 <UART_WaitOnFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e023      	b.n	800758a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b04      	cmp	r3, #4
 800754e:	d10e      	bne.n	800756e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f817 	bl	8007592 <UART_WaitOnFlagUntilTimeout>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e00d      	b.n	800758a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b09c      	sub	sp, #112	; 0x70
 8007596:	af00      	add	r7, sp, #0
 8007598:	60f8      	str	r0, [r7, #12]
 800759a:	60b9      	str	r1, [r7, #8]
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	4613      	mov	r3, r2
 80075a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a2:	e0a5      	b.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	f000 80a1 	beq.w	80076f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ae:	f7fb fd6b 	bl	8003088 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d302      	bcc.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80075be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d13e      	bne.n	8007642 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075d8:	667b      	str	r3, [r7, #100]	; 0x64
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	461a      	mov	r2, r3
 80075e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075ea:	e841 2300 	strex	r3, r2, [r1]
 80075ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80075f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1e6      	bne.n	80075c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3308      	adds	r3, #8
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007608:	f023 0301 	bic.w	r3, r3, #1
 800760c:	663b      	str	r3, [r7, #96]	; 0x60
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007616:	64ba      	str	r2, [r7, #72]	; 0x48
 8007618:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800761c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e067      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 0304 	and.w	r3, r3, #4
 800764c:	2b00      	cmp	r3, #0
 800764e:	d04f      	beq.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765e:	d147      	bne.n	80076f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007668:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800767e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
 800768a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800768e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e6      	bne.n	800766a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3308      	adds	r3, #8
 80076a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	613b      	str	r3, [r7, #16]
   return(result);
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3308      	adds	r3, #8
 80076ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076bc:	623a      	str	r2, [r7, #32]
 80076be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	6a3a      	ldr	r2, [r7, #32]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2220      	movs	r2, #32
 80076e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e010      	b.n	8007712 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	4013      	ands	r3, r2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	bf0c      	ite	eq
 8007700:	2301      	moveq	r3, #1
 8007702:	2300      	movne	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	429a      	cmp	r2, r3
 800770c:	f43f af4a 	beq.w	80075a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3770      	adds	r7, #112	; 0x70
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800771c:	b480      	push	{r7}
 800771e:	b097      	sub	sp, #92	; 0x5c
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	4613      	mov	r3, r2
 8007728:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800774e:	d10e      	bne.n	800776e <UART_Start_Receive_IT+0x52>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d105      	bne.n	8007764 <UART_Start_Receive_IT+0x48>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800775e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007762:	e02d      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	22ff      	movs	r2, #255	; 0xff
 8007768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800776c:	e028      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10d      	bne.n	8007792 <UART_Start_Receive_IT+0x76>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <UART_Start_Receive_IT+0x6c>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	22ff      	movs	r2, #255	; 0xff
 8007782:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007786:	e01b      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	227f      	movs	r2, #127	; 0x7f
 800778c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007790:	e016      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800779a:	d10d      	bne.n	80077b8 <UART_Start_Receive_IT+0x9c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <UART_Start_Receive_IT+0x92>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	227f      	movs	r2, #127	; 0x7f
 80077a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ac:	e008      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	223f      	movs	r2, #63	; 0x3f
 80077b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077b6:	e003      	b.n	80077c0 <UART_Start_Receive_IT+0xa4>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2222      	movs	r2, #34	; 0x22
 80077cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3308      	adds	r3, #8
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e0:	f043 0301 	orr.w	r3, r3, #1
 80077e4:	657b      	str	r3, [r7, #84]	; 0x54
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3308      	adds	r3, #8
 80077ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80077f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e5      	bne.n	80077ce <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780a:	d107      	bne.n	800781c <UART_Start_Receive_IT+0x100>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d103      	bne.n	800781c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a24      	ldr	r2, [pc, #144]	; (80078a8 <UART_Start_Receive_IT+0x18c>)
 8007818:	665a      	str	r2, [r3, #100]	; 0x64
 800781a:	e002      	b.n	8007822 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a23      	ldr	r2, [pc, #140]	; (80078ac <UART_Start_Receive_IT+0x190>)
 8007820:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d019      	beq.n	8007866 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800785e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_Start_Receive_IT+0x116>
 8007864:	e018      	b.n	8007898 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	613b      	str	r3, [r7, #16]
   return(result);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	f043 0320 	orr.w	r3, r3, #32
 800787a:	653b      	str	r3, [r7, #80]	; 0x50
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007884:	623b      	str	r3, [r7, #32]
 8007886:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69f9      	ldr	r1, [r7, #28]
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	61bb      	str	r3, [r7, #24]
   return(result);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e6      	bne.n	8007866 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	375c      	adds	r7, #92	; 0x5c
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	08007b57 	.word	0x08007b57
 80078ac:	080079f7 	.word	0x080079f7

080078b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b095      	sub	sp, #84	; 0x54
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d6:	643b      	str	r3, [r7, #64]	; 0x40
 80078d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e6      	bne.n	80078b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	64bb      	str	r3, [r7, #72]	; 0x48
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3308      	adds	r3, #8
 8007908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800790a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e5      	bne.n	80078ea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007922:	2b01      	cmp	r3, #1
 8007924:	d118      	bne.n	8007958 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	60bb      	str	r3, [r7, #8]
   return(result);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0310 	bic.w	r3, r3, #16
 800793a:	647b      	str	r3, [r7, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	461a      	mov	r2, r3
 8007942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007944:	61bb      	str	r3, [r7, #24]
 8007946:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6979      	ldr	r1, [r7, #20]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	613b      	str	r3, [r7, #16]
   return(result);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e6      	bne.n	8007926 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2220      	movs	r2, #32
 800795c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	665a      	str	r2, [r3, #100]	; 0x64
}
 800796a:	bf00      	nop
 800796c:	3754      	adds	r7, #84	; 0x54
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b084      	sub	sp, #16
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff faa1 	bl	8006edc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b088      	sub	sp, #32
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	e853 3f00 	ldrex	r3, [r3]
 80079b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079be:	61fb      	str	r3, [r7, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	69ba      	ldr	r2, [r7, #24]
 80079d0:	e841 2300 	strex	r3, r2, [r1]
 80079d4:	613b      	str	r3, [r7, #16]
   return(result);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1e6      	bne.n	80079aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fa6d 	bl	8006ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ee:	bf00      	nop
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80079f6:	b580      	push	{r7, lr}
 80079f8:	b096      	sub	sp, #88	; 0x58
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a0c:	2b22      	cmp	r3, #34	; 0x22
 8007a0e:	f040 8094 	bne.w	8007b3a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a18:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007a20:	b2d9      	uxtb	r1, r3
 8007a22:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	400a      	ands	r2, r1
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d179      	bne.n	8007b4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	647b      	str	r3, [r7, #68]	; 0x44
 8007a7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e6      	bne.n	8007a5a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f023 0301 	bic.w	r3, r3, #1
 8007aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007aac:	633a      	str	r2, [r7, #48]	; 0x30
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ab4:	e841 2300 	strex	r3, r2, [r1]
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e5      	bne.n	8007a8c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d12e      	bne.n	8007b32 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0310 	bic.w	r3, r3, #16
 8007aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	69b9      	ldr	r1, [r7, #24]
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	617b      	str	r3, [r7, #20]
   return(result);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	69db      	ldr	r3, [r3, #28]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d103      	bne.n	8007b22 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2210      	movs	r2, #16
 8007b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff f9e0 	bl	8006ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b30:	e00d      	b.n	8007b4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7f9 fde0 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8007b38:	e009      	b.n	8007b4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	8b1b      	ldrh	r3, [r3, #24]
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0208 	orr.w	r2, r2, #8
 8007b4a:	b292      	uxth	r2, r2
 8007b4c:	831a      	strh	r2, [r3, #24]
}
 8007b4e:	bf00      	nop
 8007b50:	3758      	adds	r7, #88	; 0x58
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b096      	sub	sp, #88	; 0x58
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b6c:	2b22      	cmp	r3, #34	; 0x22
 8007b6e:	f040 8094 	bne.w	8007c9a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b78:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b82:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007b86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b90:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b96:	1c9a      	adds	r2, r3, #2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d179      	bne.n	8007cae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e6      	bne.n	8007bba <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2220      	movs	r2, #32
 8007c24:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d12e      	bne.n	8007c92 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	f023 0310 	bic.w	r3, r3, #16
 8007c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c58:	61bb      	str	r3, [r7, #24]
 8007c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	e841 2300 	strex	r3, r2, [r1]
 8007c64:	613b      	str	r3, [r7, #16]
   return(result);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1e6      	bne.n	8007c3a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d103      	bne.n	8007c82 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2210      	movs	r2, #16
 8007c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff f930 	bl	8006ef0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c90:	e00d      	b.n	8007cae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7f9 fd30 	bl	80016f8 <HAL_UART_RxCpltCallback>
}
 8007c98:	e009      	b.n	8007cae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	8b1b      	ldrh	r3, [r3, #24]
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0208 	orr.w	r2, r2, #8
 8007caa:	b292      	uxth	r2, r2
 8007cac:	831a      	strh	r2, [r3, #24]
}
 8007cae:	bf00      	nop
 8007cb0:	3758      	adds	r7, #88	; 0x58
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	807b      	strh	r3, [r7, #2]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8007cda:	787a      	ldrb	r2, [r7, #1]
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fb fe73 	bl	80039cc <HAL_GPIO_WritePin>
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b088      	sub	sp, #32
 8007cf2:	af02      	add	r7, sp, #8
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	72fb      	strb	r3, [r7, #11]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	2200      	movs	r2, #0
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7ff ffde 	bl	8007cca <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007d0e:	200a      	movs	r0, #10
 8007d10:	f000 f968 	bl	8007fe4 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8007d14:	f107 0217 	add.w	r2, r7, #23
 8007d18:	f107 010b 	add.w	r1, r7, #11
 8007d1c:	230a      	movs	r3, #10
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2301      	movs	r3, #1
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7fd f8fd 	bl	8004f22 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007d28:	200a      	movs	r0, #10
 8007d2a:	f000 f95b 	bl	8007fe4 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8007d2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007d32:	893b      	ldrh	r3, [r7, #8]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff ffc7 	bl	8007cca <setCSLine>

  return data;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b08c      	sub	sp, #48	; 0x30
 8007d4a:	af02      	add	r7, sp, #8
 8007d4c:	60f8      	str	r0, [r7, #12]
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	4611      	mov	r1, r2
 8007d52:	461a      	mov	r2, r3
 8007d54:	460b      	mov	r3, r1
 8007d56:	80fb      	strh	r3, [r7, #6]
 8007d58:	4613      	mov	r3, r2
 8007d5a:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8007d5c:	88fa      	ldrh	r2, [r7, #6]
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	2300      	movs	r3, #0
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4613      	mov	r3, r2
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff ffbe 	bl	8007cee <spiWriteRead>
 8007d72:	4603      	mov	r3, r0
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8007d7a:	200a      	movs	r0, #10
 8007d7c:	f000 f932 	bl	8007fe4 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	2301      	movs	r3, #1
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	2100      	movs	r1, #0
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff ffac 	bl	8007cee <spiWriteRead>
 8007d96:	4603      	mov	r3, r0
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8007da0:	2300      	movs	r3, #0
 8007da2:	623b      	str	r3, [r7, #32]
 8007da4:	e010      	b.n	8007dc8 <getPositionSPI+0x82>
 8007da6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	fa42 f303 	asr.w	r3, r2, r3
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	b2d9      	uxtb	r1, r3
 8007db6:	f107 0210 	add.w	r2, r7, #16
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	460a      	mov	r2, r1
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	623b      	str	r3, [r7, #32]
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	ddeb      	ble.n	8007da6 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8007dce:	7ffb      	ldrb	r3, [r7, #31]
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	7f7a      	ldrb	r2, [r7, #29]
 8007dd4:	7efb      	ldrb	r3, [r7, #27]
 8007dd6:	4053      	eors	r3, r2
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	7e7b      	ldrb	r3, [r7, #25]
 8007ddc:	4053      	eors	r3, r2
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	4053      	eors	r3, r2
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	7d7b      	ldrb	r3, [r7, #21]
 8007de8:	4053      	eors	r3, r2
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	7cfb      	ldrb	r3, [r7, #19]
 8007dee:	4053      	eors	r3, r2
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	7c7b      	ldrb	r3, [r7, #17]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	4299      	cmp	r1, r3
 8007e00:	d11e      	bne.n	8007e40 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8007e02:	7fbb      	ldrb	r3, [r7, #30]
 8007e04:	4619      	mov	r1, r3
 8007e06:	7f3a      	ldrb	r2, [r7, #28]
 8007e08:	7ebb      	ldrb	r3, [r7, #26]
 8007e0a:	4053      	eors	r3, r2
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	7e3b      	ldrb	r3, [r7, #24]
 8007e10:	4053      	eors	r3, r2
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	7dbb      	ldrb	r3, [r7, #22]
 8007e16:	4053      	eors	r3, r2
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	7d3b      	ldrb	r3, [r7, #20]
 8007e1c:	4053      	eors	r3, r2
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	7cbb      	ldrb	r3, [r7, #18]
 8007e22:	4053      	eors	r3, r2
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	7c3b      	ldrb	r3, [r7, #16]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	4299      	cmp	r1, r3
 8007e34:	d104      	bne.n	8007e40 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8007e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007e3e:	e002      	b.n	8007e46 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8007e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e44:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8007e46:	797b      	ldrb	r3, [r7, #5]
 8007e48:	2b0c      	cmp	r3, #12
 8007e4a:	d107      	bne.n	8007e5c <getPositionSPI+0x116>
 8007e4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d002      	beq.n	8007e5c <getPositionSPI+0x116>
 8007e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e58:	089b      	lsrs	r3, r3, #2
 8007e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8007e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3728      	adds	r7, #40	; 0x28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <getTurnCounterSPI>:
void getTurnCounterSPI(int16_t* returnArr, SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b090      	sub	sp, #64	; 0x40
 8007e6a:	af02      	add	r7, sp, #8
 8007e6c:	60f8      	str	r0, [r7, #12]
 8007e6e:	60b9      	str	r1, [r7, #8]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	807b      	strh	r3, [r7, #2]
	uint8_t binaryArray[16];        //after receiving the position and turn we will populate this array and use it for calculating the checksum
	int16_t position, turns;

	//get first byte of position which is the high byte, shift it 8 bits. don't release line for the first byte. then, get the lower byte and
	// or it with the variable to complete the read
	position_raw = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 8007e74:	887a      	ldrh	r2, [r7, #2]
 8007e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	2100      	movs	r1, #0
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f7ff ff32 	bl	8007cee <spiWriteRead>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	021b      	lsls	r3, r3, #8
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	delay_us_AMT22(AMT22_DELAY);
 8007e90:	200a      	movs	r0, #10
 8007e92:	f000 f8a7 	bl	8007fe4 <delay_us_AMT22>
	position_raw |= (spiWriteRead(hspi, AMT22_TURNS, encoderPort, encoderPin, 0, timer));
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	21a0      	movs	r1, #160	; 0xa0
 8007ea6:	68b8      	ldr	r0, [r7, #8]
 8007ea8:	f7ff ff21 	bl	8007cee <spiWriteRead>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	delay_us_AMT22(AMT22_DELAY);
 8007eb6:	200a      	movs	r0, #10
 8007eb8:	f000 f894 	bl	8007fe4 <delay_us_AMT22>

	//same thing with the turn counter
	turns_raw = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 8007ebc:	887a      	ldrh	r2, [r7, #2]
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	2100      	movs	r1, #0
 8007ecc:	68b8      	ldr	r0, [r7, #8]
 8007ece:	f7ff ff0e 	bl	8007cee <spiWriteRead>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	62bb      	str	r3, [r7, #40]	; 0x28
	delay_us_AMT22(AMT22_DELAY);
 8007ed8:	200a      	movs	r0, #10
 8007eda:	f000 f883 	bl	8007fe4 <delay_us_AMT22>
	turns_raw |= (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer));
 8007ede:	887a      	ldrh	r2, [r7, #2]
 8007ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	2100      	movs	r1, #0
 8007eee:	68b8      	ldr	r0, [r7, #8]
 8007ef0:	f7ff fefd 	bl	8007cee <spiWriteRead>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	4313      	orrs	r3, r2
 8007efc:	62bb      	str	r3, [r7, #40]	; 0x28

	//run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
	for(int i = 0; i < 16; i++){binaryArray[i] = (0x01) & (position_raw >> (i));}
 8007efe:	2300      	movs	r3, #0
 8007f00:	633b      	str	r3, [r7, #48]	; 0x30
 8007f02:	e010      	b.n	8007f26 <getTurnCounterSPI+0xc0>
 8007f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f08:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	b2d9      	uxtb	r1, r3
 8007f14:	f107 0214 	add.w	r2, r7, #20
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	4413      	add	r3, r2
 8007f1c:	460a      	mov	r2, r1
 8007f1e:	701a      	strb	r2, [r3, #0]
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	3301      	adds	r3, #1
 8007f24:	633b      	str	r3, [r7, #48]	; 0x30
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	2b0f      	cmp	r3, #15
 8007f2a:	ddeb      	ble.n	8007f04 <getTurnCounterSPI+0x9e>

	//using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8007f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f30:	4619      	mov	r1, r3
 8007f32:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f36:	7ffb      	ldrb	r3, [r7, #31]
 8007f38:	4053      	eors	r3, r2
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	7f7b      	ldrb	r3, [r7, #29]
 8007f3e:	4053      	eors	r3, r2
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	7efb      	ldrb	r3, [r7, #27]
 8007f44:	4053      	eors	r3, r2
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	7e7b      	ldrb	r3, [r7, #25]
 8007f4a:	4053      	eors	r3, r2
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	4053      	eors	r3, r2
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	7d7b      	ldrb	r3, [r7, #21]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	bf0c      	ite	eq
 8007f5a:	2301      	moveq	r3, #1
 8007f5c:	2300      	movne	r3, #0
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d121      	bne.n	8007fa8 <getTurnCounterSPI+0x142>
		 && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8007f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007f6e:	7fbb      	ldrb	r3, [r7, #30]
 8007f70:	4053      	eors	r3, r2
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	7f3b      	ldrb	r3, [r7, #28]
 8007f76:	4053      	eors	r3, r2
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	7ebb      	ldrb	r3, [r7, #26]
 8007f7c:	4053      	eors	r3, r2
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	7e3b      	ldrb	r3, [r7, #24]
 8007f82:	4053      	eors	r3, r2
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	7dbb      	ldrb	r3, [r7, #22]
 8007f88:	4053      	eors	r3, r2
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	7d3b      	ldrb	r3, [r7, #20]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	bf0c      	ite	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	2300      	movne	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d105      	bne.n	8007fa8 <getTurnCounterSPI+0x142>
	{
	 //we got back a good position, so just mask away the checkbits
	 // bitstream &= 0x3FFF;
	 // position = bitstream;
		position = (position_raw & 0x3FFF);
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007fa4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007fa6:	e002      	b.n	8007fae <getTurnCounterSPI+0x148>
	}
	else{position = 0xFFFF;} // bad position
 8007fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fac:	86fb      	strh	r3, [r7, #54]	; 0x36

  //if the resolution is 12-bits, and position wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (position != 0xFFFF)) position = position >> 2;
 8007fae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007fb2:	2b0c      	cmp	r3, #12
 8007fb4:	d103      	bne.n	8007fbe <getTurnCounterSPI+0x158>
 8007fb6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007fba:	109b      	asrs	r3, r3, #2
 8007fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
	// {
	//   turns = 0xFFFF; //bad position
	// }

	// populate return array
  turns = (0xC000 | turns_raw);
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8007fc6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
	returnArr[0] = position;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007fd2:	801a      	strh	r2, [r3, #0]
	returnArr[1] = turns;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3302      	adds	r3, #2
 8007fd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007fda:	801a      	strh	r2, [r3, #0]

}
 8007fdc:	bf00      	nop
 8007fde:	3738      	adds	r7, #56	; 0x38
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <delay_us_AMT22+0x30>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8007ff6:	bf00      	nop
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <delay_us_AMT22+0x30>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ffe:	88fb      	ldrh	r3, [r7, #6]
 8008000:	429a      	cmp	r2, r3
 8008002:	d3f9      	bcc.n	8007ff8 <delay_us_AMT22+0x14>
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000674 	.word	0x20000674

08008018 <_Znaj>:
 8008018:	f000 b8fe 	b.w	8008218 <_Znwj>

0800801c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800801c:	b10a      	cbz	r2, 8008022 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800801e:	f000 b95d 	b.w	80082dc <memcpy>
 8008022:	4770      	bx	lr

08008024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008024:	b508      	push	{r3, lr}
 8008026:	680b      	ldr	r3, [r1, #0]
 8008028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802c:	d302      	bcc.n	8008034 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800802e:	480d      	ldr	r0, [pc, #52]	; (8008064 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008030:	f000 f906 	bl	8008240 <_ZSt20__throw_length_errorPKc>
 8008034:	4293      	cmp	r3, r2
 8008036:	d90b      	bls.n	8008050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008038:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800803c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008040:	d206      	bcs.n	8008050 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008042:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008046:	bf2a      	itet	cs
 8008048:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800804c:	6008      	strcc	r0, [r1, #0]
 800804e:	600b      	strcs	r3, [r1, #0]
 8008050:	6808      	ldr	r0, [r1, #0]
 8008052:	3001      	adds	r0, #1
 8008054:	d501      	bpl.n	800805a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008056:	f000 f8f0 	bl	800823a <_ZSt17__throw_bad_allocv>
 800805a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800805e:	f000 b8db 	b.w	8008218 <_Znwj>
 8008062:	bf00      	nop
 8008064:	0800db38 	.word	0x0800db38

08008068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008068:	f850 3b08 	ldr.w	r3, [r0], #8
 800806c:	4283      	cmp	r3, r0
 800806e:	d002      	beq.n	8008076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008070:	4618      	mov	r0, r3
 8008072:	f000 b8cf 	b.w	8008214 <_ZdlPv>
 8008076:	4770      	bx	lr

08008078 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8008078:	6840      	ldr	r0, [r0, #4]
 800807a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800807e:	3901      	subs	r1, #1
 8008080:	1a09      	subs	r1, r1, r0
 8008082:	4291      	cmp	r1, r2
 8008084:	b508      	push	{r3, lr}
 8008086:	d202      	bcs.n	800808e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8008088:	4618      	mov	r0, r3
 800808a:	f000 f8d9 	bl	8008240 <_ZSt20__throw_length_errorPKc>
 800808e:	bd08      	pop	{r3, pc}

08008090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008090:	2a01      	cmp	r2, #1
 8008092:	b410      	push	{r4}
 8008094:	d104      	bne.n	80080a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8008096:	780a      	ldrb	r2, [r1, #0]
 8008098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800809c:	7002      	strb	r2, [r0, #0]
 800809e:	4770      	bx	lr
 80080a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a4:	f7ff bfba 	b.w	800801c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080080a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80080a8:	2a01      	cmp	r2, #1
 80080aa:	b430      	push	{r4, r5}
 80080ac:	d103      	bne.n	80080b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 80080ae:	780b      	ldrb	r3, [r1, #0]
 80080b0:	7003      	strb	r3, [r0, #0]
 80080b2:	bc30      	pop	{r4, r5}
 80080b4:	4770      	bx	lr
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d0fb      	beq.n	80080b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80080ba:	bc30      	pop	{r4, r5}
 80080bc:	f000 b91c 	b.w	80082f8 <memmove>

080080c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80080c0:	460b      	mov	r3, r1
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	b410      	push	{r4}
 80080c6:	4611      	mov	r1, r2
 80080c8:	4604      	mov	r4, r0
 80080ca:	d103      	bne.n	80080d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80080cc:	7022      	strb	r2, [r4, #0]
 80080ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0fa      	beq.n	80080ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80080d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080dc:	461a      	mov	r2, r3
 80080de:	f000 b925 	b.w	800832c <memset>

080080e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80080e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80080e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80080e8:	461f      	mov	r7, r3
 80080ea:	6843      	ldr	r3, [r0, #4]
 80080ec:	eb01 0802 	add.w	r8, r1, r2
 80080f0:	1ab2      	subs	r2, r6, r2
 80080f2:	441a      	add	r2, r3
 80080f4:	eba3 0908 	sub.w	r9, r3, r8
 80080f8:	4603      	mov	r3, r0
 80080fa:	9201      	str	r2, [sp, #4]
 80080fc:	f853 2b08 	ldr.w	r2, [r3], #8
 8008100:	429a      	cmp	r2, r3
 8008102:	bf18      	it	ne
 8008104:	6882      	ldrne	r2, [r0, #8]
 8008106:	460d      	mov	r5, r1
 8008108:	bf08      	it	eq
 800810a:	220f      	moveq	r2, #15
 800810c:	a901      	add	r1, sp, #4
 800810e:	4604      	mov	r4, r0
 8008110:	f7ff ff88 	bl	8008024 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008114:	4682      	mov	sl, r0
 8008116:	b11d      	cbz	r5, 8008120 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8008118:	6821      	ldr	r1, [r4, #0]
 800811a:	462a      	mov	r2, r5
 800811c:	f7ff ffb8 	bl	8008090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008120:	b137      	cbz	r7, 8008130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008122:	b12e      	cbz	r6, 8008130 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008124:	4632      	mov	r2, r6
 8008126:	4639      	mov	r1, r7
 8008128:	eb0a 0005 	add.w	r0, sl, r5
 800812c:	f7ff ffb0 	bl	8008090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008130:	f1b9 0f00 	cmp.w	r9, #0
 8008134:	d007      	beq.n	8008146 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8008136:	6821      	ldr	r1, [r4, #0]
 8008138:	4435      	add	r5, r6
 800813a:	464a      	mov	r2, r9
 800813c:	4441      	add	r1, r8
 800813e:	eb0a 0005 	add.w	r0, sl, r5
 8008142:	f7ff ffa5 	bl	8008090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff ff8e 	bl	8008068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	f8c4 a000 	str.w	sl, [r4]
 8008152:	60a3      	str	r3, [r4, #8]
 8008154:	b002      	add	sp, #8
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800815a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800815a:	f100 0208 	add.w	r2, r0, #8
 800815e:	6002      	str	r2, [r0, #0]
 8008160:	2200      	movs	r2, #0
 8008162:	6042      	str	r2, [r0, #4]
 8008164:	7202      	strb	r2, [r0, #8]
 8008166:	4770      	bx	lr

08008168 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008168:	b510      	push	{r4, lr}
 800816a:	4604      	mov	r4, r0
 800816c:	f7ff ff7c 	bl	8008068 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8008170:	4620      	mov	r0, r4
 8008172:	bd10      	pop	{r4, pc}

08008174 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8008174:	6800      	ldr	r0, [r0, #0]
 8008176:	4408      	add	r0, r1
 8008178:	4770      	bx	lr
	...

0800817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 800817c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008180:	4616      	mov	r6, r2
 8008182:	461d      	mov	r5, r3
 8008184:	4604      	mov	r4, r0
 8008186:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 8008188:	462a      	mov	r2, r5
 800818a:	460f      	mov	r7, r1
 800818c:	4631      	mov	r1, r6
 800818e:	f7ff ff73 	bl	8008078 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8008192:	4623      	mov	r3, r4
 8008194:	6862      	ldr	r2, [r4, #4]
 8008196:	f853 0b08 	ldr.w	r0, [r3], #8
 800819a:	4298      	cmp	r0, r3
 800819c:	bf18      	it	ne
 800819e:	68a3      	ldrne	r3, [r4, #8]
 80081a0:	eba5 0806 	sub.w	r8, r5, r6
 80081a4:	4490      	add	r8, r2
 80081a6:	bf08      	it	eq
 80081a8:	230f      	moveq	r3, #15
 80081aa:	4543      	cmp	r3, r8
 80081ac:	d31b      	bcc.n	80081e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80081ae:	19f3      	adds	r3, r6, r7
 80081b0:	1ad2      	subs	r2, r2, r3
 80081b2:	d006      	beq.n	80081c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80081b4:	42ae      	cmp	r6, r5
 80081b6:	d004      	beq.n	80081c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80081b8:	4438      	add	r0, r7
 80081ba:	1981      	adds	r1, r0, r6
 80081bc:	4428      	add	r0, r5
 80081be:	f7ff ff73 	bl	80080a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80081c2:	b135      	cbz	r5, 80081d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80081ca:	4629      	mov	r1, r5
 80081cc:	4438      	add	r0, r7
 80081ce:	f7ff ff77 	bl	80080c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f8c4 8004 	str.w	r8, [r4, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	4620      	mov	r0, r4
 80081dc:	f803 2008 	strb.w	r2, [r3, r8]
 80081e0:	b002      	add	sp, #8
 80081e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e6:	9500      	str	r5, [sp, #0]
 80081e8:	2300      	movs	r3, #0
 80081ea:	4632      	mov	r2, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	4620      	mov	r0, r4
 80081f0:	f7ff ff77 	bl	80080e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80081f4:	e7e5      	b.n	80081c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 80081f6:	bf00      	nop
 80081f8:	0800db50 	.word	0x0800db50

080081fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEjc>:
 80081fc:	b507      	push	{r0, r1, r2, lr}
 80081fe:	9200      	str	r2, [sp, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	6842      	ldr	r2, [r0, #4]
 8008204:	2100      	movs	r1, #0
 8008206:	f7ff ffb9 	bl	800817c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 800820a:	b003      	add	sp, #12
 800820c:	f85d fb04 	ldr.w	pc, [sp], #4

08008210 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008210:	6800      	ldr	r0, [r0, #0]
 8008212:	4770      	bx	lr

08008214 <_ZdlPv>:
 8008214:	f000 b85a 	b.w	80082cc <free>

08008218 <_Znwj>:
 8008218:	2801      	cmp	r0, #1
 800821a:	bf38      	it	cc
 800821c:	2001      	movcc	r0, #1
 800821e:	b510      	push	{r4, lr}
 8008220:	4604      	mov	r4, r0
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f84a 	bl	80082bc <malloc>
 8008228:	b930      	cbnz	r0, 8008238 <_Znwj+0x20>
 800822a:	f000 f80d 	bl	8008248 <_ZSt15get_new_handlerv>
 800822e:	b908      	cbnz	r0, 8008234 <_Znwj+0x1c>
 8008230:	f000 f812 	bl	8008258 <abort>
 8008234:	4780      	blx	r0
 8008236:	e7f4      	b.n	8008222 <_Znwj+0xa>
 8008238:	bd10      	pop	{r4, pc}

0800823a <_ZSt17__throw_bad_allocv>:
 800823a:	b508      	push	{r3, lr}
 800823c:	f000 f80c 	bl	8008258 <abort>

08008240 <_ZSt20__throw_length_errorPKc>:
 8008240:	b508      	push	{r3, lr}
 8008242:	f000 f809 	bl	8008258 <abort>
	...

08008248 <_ZSt15get_new_handlerv>:
 8008248:	4b02      	ldr	r3, [pc, #8]	; (8008254 <_ZSt15get_new_handlerv+0xc>)
 800824a:	6818      	ldr	r0, [r3, #0]
 800824c:	f3bf 8f5b 	dmb	ish
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	200007dc 	.word	0x200007dc

08008258 <abort>:
 8008258:	b508      	push	{r3, lr}
 800825a:	2006      	movs	r0, #6
 800825c:	f001 f8a8 	bl	80093b0 <raise>
 8008260:	2001      	movs	r0, #1
 8008262:	f7f9 fd9b 	bl	8001d9c <_exit>
	...

08008268 <__errno>:
 8008268:	4b01      	ldr	r3, [pc, #4]	; (8008270 <__errno+0x8>)
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	2000003c 	.word	0x2000003c

08008274 <__libc_init_array>:
 8008274:	b570      	push	{r4, r5, r6, lr}
 8008276:	4d0d      	ldr	r5, [pc, #52]	; (80082ac <__libc_init_array+0x38>)
 8008278:	4c0d      	ldr	r4, [pc, #52]	; (80082b0 <__libc_init_array+0x3c>)
 800827a:	1b64      	subs	r4, r4, r5
 800827c:	10a4      	asrs	r4, r4, #2
 800827e:	2600      	movs	r6, #0
 8008280:	42a6      	cmp	r6, r4
 8008282:	d109      	bne.n	8008298 <__libc_init_array+0x24>
 8008284:	4d0b      	ldr	r5, [pc, #44]	; (80082b4 <__libc_init_array+0x40>)
 8008286:	4c0c      	ldr	r4, [pc, #48]	; (80082b8 <__libc_init_array+0x44>)
 8008288:	f005 fbae 	bl	800d9e8 <_init>
 800828c:	1b64      	subs	r4, r4, r5
 800828e:	10a4      	asrs	r4, r4, #2
 8008290:	2600      	movs	r6, #0
 8008292:	42a6      	cmp	r6, r4
 8008294:	d105      	bne.n	80082a2 <__libc_init_array+0x2e>
 8008296:	bd70      	pop	{r4, r5, r6, pc}
 8008298:	f855 3b04 	ldr.w	r3, [r5], #4
 800829c:	4798      	blx	r3
 800829e:	3601      	adds	r6, #1
 80082a0:	e7ee      	b.n	8008280 <__libc_init_array+0xc>
 80082a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a6:	4798      	blx	r3
 80082a8:	3601      	adds	r6, #1
 80082aa:	e7f2      	b.n	8008292 <__libc_init_array+0x1e>
 80082ac:	0800e6d4 	.word	0x0800e6d4
 80082b0:	0800e6d4 	.word	0x0800e6d4
 80082b4:	0800e6d4 	.word	0x0800e6d4
 80082b8:	0800e6dc 	.word	0x0800e6dc

080082bc <malloc>:
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <malloc+0xc>)
 80082be:	4601      	mov	r1, r0
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	f000 b8a7 	b.w	8008414 <_malloc_r>
 80082c6:	bf00      	nop
 80082c8:	2000003c 	.word	0x2000003c

080082cc <free>:
 80082cc:	4b02      	ldr	r3, [pc, #8]	; (80082d8 <free+0xc>)
 80082ce:	4601      	mov	r1, r0
 80082d0:	6818      	ldr	r0, [r3, #0]
 80082d2:	f000 b833 	b.w	800833c <_free_r>
 80082d6:	bf00      	nop
 80082d8:	2000003c 	.word	0x2000003c

080082dc <memcpy>:
 80082dc:	440a      	add	r2, r1
 80082de:	4291      	cmp	r1, r2
 80082e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082e4:	d100      	bne.n	80082e8 <memcpy+0xc>
 80082e6:	4770      	bx	lr
 80082e8:	b510      	push	{r4, lr}
 80082ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f2:	4291      	cmp	r1, r2
 80082f4:	d1f9      	bne.n	80082ea <memcpy+0xe>
 80082f6:	bd10      	pop	{r4, pc}

080082f8 <memmove>:
 80082f8:	4288      	cmp	r0, r1
 80082fa:	b510      	push	{r4, lr}
 80082fc:	eb01 0402 	add.w	r4, r1, r2
 8008300:	d902      	bls.n	8008308 <memmove+0x10>
 8008302:	4284      	cmp	r4, r0
 8008304:	4623      	mov	r3, r4
 8008306:	d807      	bhi.n	8008318 <memmove+0x20>
 8008308:	1e43      	subs	r3, r0, #1
 800830a:	42a1      	cmp	r1, r4
 800830c:	d008      	beq.n	8008320 <memmove+0x28>
 800830e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008316:	e7f8      	b.n	800830a <memmove+0x12>
 8008318:	4402      	add	r2, r0
 800831a:	4601      	mov	r1, r0
 800831c:	428a      	cmp	r2, r1
 800831e:	d100      	bne.n	8008322 <memmove+0x2a>
 8008320:	bd10      	pop	{r4, pc}
 8008322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800832a:	e7f7      	b.n	800831c <memmove+0x24>

0800832c <memset>:
 800832c:	4402      	add	r2, r0
 800832e:	4603      	mov	r3, r0
 8008330:	4293      	cmp	r3, r2
 8008332:	d100      	bne.n	8008336 <memset+0xa>
 8008334:	4770      	bx	lr
 8008336:	f803 1b01 	strb.w	r1, [r3], #1
 800833a:	e7f9      	b.n	8008330 <memset+0x4>

0800833c <_free_r>:
 800833c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800833e:	2900      	cmp	r1, #0
 8008340:	d044      	beq.n	80083cc <_free_r+0x90>
 8008342:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008346:	9001      	str	r0, [sp, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	f1a1 0404 	sub.w	r4, r1, #4
 800834e:	bfb8      	it	lt
 8008350:	18e4      	addlt	r4, r4, r3
 8008352:	f003 fdbb 	bl	800becc <__malloc_lock>
 8008356:	4a1e      	ldr	r2, [pc, #120]	; (80083d0 <_free_r+0x94>)
 8008358:	9801      	ldr	r0, [sp, #4]
 800835a:	6813      	ldr	r3, [r2, #0]
 800835c:	b933      	cbnz	r3, 800836c <_free_r+0x30>
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	6014      	str	r4, [r2, #0]
 8008362:	b003      	add	sp, #12
 8008364:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008368:	f003 bdb6 	b.w	800bed8 <__malloc_unlock>
 800836c:	42a3      	cmp	r3, r4
 800836e:	d908      	bls.n	8008382 <_free_r+0x46>
 8008370:	6825      	ldr	r5, [r4, #0]
 8008372:	1961      	adds	r1, r4, r5
 8008374:	428b      	cmp	r3, r1
 8008376:	bf01      	itttt	eq
 8008378:	6819      	ldreq	r1, [r3, #0]
 800837a:	685b      	ldreq	r3, [r3, #4]
 800837c:	1949      	addeq	r1, r1, r5
 800837e:	6021      	streq	r1, [r4, #0]
 8008380:	e7ed      	b.n	800835e <_free_r+0x22>
 8008382:	461a      	mov	r2, r3
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	b10b      	cbz	r3, 800838c <_free_r+0x50>
 8008388:	42a3      	cmp	r3, r4
 800838a:	d9fa      	bls.n	8008382 <_free_r+0x46>
 800838c:	6811      	ldr	r1, [r2, #0]
 800838e:	1855      	adds	r5, r2, r1
 8008390:	42a5      	cmp	r5, r4
 8008392:	d10b      	bne.n	80083ac <_free_r+0x70>
 8008394:	6824      	ldr	r4, [r4, #0]
 8008396:	4421      	add	r1, r4
 8008398:	1854      	adds	r4, r2, r1
 800839a:	42a3      	cmp	r3, r4
 800839c:	6011      	str	r1, [r2, #0]
 800839e:	d1e0      	bne.n	8008362 <_free_r+0x26>
 80083a0:	681c      	ldr	r4, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	6053      	str	r3, [r2, #4]
 80083a6:	4421      	add	r1, r4
 80083a8:	6011      	str	r1, [r2, #0]
 80083aa:	e7da      	b.n	8008362 <_free_r+0x26>
 80083ac:	d902      	bls.n	80083b4 <_free_r+0x78>
 80083ae:	230c      	movs	r3, #12
 80083b0:	6003      	str	r3, [r0, #0]
 80083b2:	e7d6      	b.n	8008362 <_free_r+0x26>
 80083b4:	6825      	ldr	r5, [r4, #0]
 80083b6:	1961      	adds	r1, r4, r5
 80083b8:	428b      	cmp	r3, r1
 80083ba:	bf04      	itt	eq
 80083bc:	6819      	ldreq	r1, [r3, #0]
 80083be:	685b      	ldreq	r3, [r3, #4]
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	bf04      	itt	eq
 80083c4:	1949      	addeq	r1, r1, r5
 80083c6:	6021      	streq	r1, [r4, #0]
 80083c8:	6054      	str	r4, [r2, #4]
 80083ca:	e7ca      	b.n	8008362 <_free_r+0x26>
 80083cc:	b003      	add	sp, #12
 80083ce:	bd30      	pop	{r4, r5, pc}
 80083d0:	200007e0 	.word	0x200007e0

080083d4 <sbrk_aligned>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	4e0e      	ldr	r6, [pc, #56]	; (8008410 <sbrk_aligned+0x3c>)
 80083d8:	460c      	mov	r4, r1
 80083da:	6831      	ldr	r1, [r6, #0]
 80083dc:	4605      	mov	r5, r0
 80083de:	b911      	cbnz	r1, 80083e6 <sbrk_aligned+0x12>
 80083e0:	f000 ffa8 	bl	8009334 <_sbrk_r>
 80083e4:	6030      	str	r0, [r6, #0]
 80083e6:	4621      	mov	r1, r4
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 ffa3 	bl	8009334 <_sbrk_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	d00a      	beq.n	8008408 <sbrk_aligned+0x34>
 80083f2:	1cc4      	adds	r4, r0, #3
 80083f4:	f024 0403 	bic.w	r4, r4, #3
 80083f8:	42a0      	cmp	r0, r4
 80083fa:	d007      	beq.n	800840c <sbrk_aligned+0x38>
 80083fc:	1a21      	subs	r1, r4, r0
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 ff98 	bl	8009334 <_sbrk_r>
 8008404:	3001      	adds	r0, #1
 8008406:	d101      	bne.n	800840c <sbrk_aligned+0x38>
 8008408:	f04f 34ff 	mov.w	r4, #4294967295
 800840c:	4620      	mov	r0, r4
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	200007e4 	.word	0x200007e4

08008414 <_malloc_r>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	1ccd      	adds	r5, r1, #3
 800841a:	f025 0503 	bic.w	r5, r5, #3
 800841e:	3508      	adds	r5, #8
 8008420:	2d0c      	cmp	r5, #12
 8008422:	bf38      	it	cc
 8008424:	250c      	movcc	r5, #12
 8008426:	2d00      	cmp	r5, #0
 8008428:	4607      	mov	r7, r0
 800842a:	db01      	blt.n	8008430 <_malloc_r+0x1c>
 800842c:	42a9      	cmp	r1, r5
 800842e:	d905      	bls.n	800843c <_malloc_r+0x28>
 8008430:	230c      	movs	r3, #12
 8008432:	603b      	str	r3, [r7, #0]
 8008434:	2600      	movs	r6, #0
 8008436:	4630      	mov	r0, r6
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	4e2e      	ldr	r6, [pc, #184]	; (80084f8 <_malloc_r+0xe4>)
 800843e:	f003 fd45 	bl	800becc <__malloc_lock>
 8008442:	6833      	ldr	r3, [r6, #0]
 8008444:	461c      	mov	r4, r3
 8008446:	bb34      	cbnz	r4, 8008496 <_malloc_r+0x82>
 8008448:	4629      	mov	r1, r5
 800844a:	4638      	mov	r0, r7
 800844c:	f7ff ffc2 	bl	80083d4 <sbrk_aligned>
 8008450:	1c43      	adds	r3, r0, #1
 8008452:	4604      	mov	r4, r0
 8008454:	d14d      	bne.n	80084f2 <_malloc_r+0xde>
 8008456:	6834      	ldr	r4, [r6, #0]
 8008458:	4626      	mov	r6, r4
 800845a:	2e00      	cmp	r6, #0
 800845c:	d140      	bne.n	80084e0 <_malloc_r+0xcc>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	4631      	mov	r1, r6
 8008462:	4638      	mov	r0, r7
 8008464:	eb04 0803 	add.w	r8, r4, r3
 8008468:	f000 ff64 	bl	8009334 <_sbrk_r>
 800846c:	4580      	cmp	r8, r0
 800846e:	d13a      	bne.n	80084e6 <_malloc_r+0xd2>
 8008470:	6821      	ldr	r1, [r4, #0]
 8008472:	3503      	adds	r5, #3
 8008474:	1a6d      	subs	r5, r5, r1
 8008476:	f025 0503 	bic.w	r5, r5, #3
 800847a:	3508      	adds	r5, #8
 800847c:	2d0c      	cmp	r5, #12
 800847e:	bf38      	it	cc
 8008480:	250c      	movcc	r5, #12
 8008482:	4629      	mov	r1, r5
 8008484:	4638      	mov	r0, r7
 8008486:	f7ff ffa5 	bl	80083d4 <sbrk_aligned>
 800848a:	3001      	adds	r0, #1
 800848c:	d02b      	beq.n	80084e6 <_malloc_r+0xd2>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	442b      	add	r3, r5
 8008492:	6023      	str	r3, [r4, #0]
 8008494:	e00e      	b.n	80084b4 <_malloc_r+0xa0>
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	1b52      	subs	r2, r2, r5
 800849a:	d41e      	bmi.n	80084da <_malloc_r+0xc6>
 800849c:	2a0b      	cmp	r2, #11
 800849e:	d916      	bls.n	80084ce <_malloc_r+0xba>
 80084a0:	1961      	adds	r1, r4, r5
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	6025      	str	r5, [r4, #0]
 80084a6:	bf18      	it	ne
 80084a8:	6059      	strne	r1, [r3, #4]
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	bf08      	it	eq
 80084ae:	6031      	streq	r1, [r6, #0]
 80084b0:	5162      	str	r2, [r4, r5]
 80084b2:	604b      	str	r3, [r1, #4]
 80084b4:	4638      	mov	r0, r7
 80084b6:	f104 060b 	add.w	r6, r4, #11
 80084ba:	f003 fd0d 	bl	800bed8 <__malloc_unlock>
 80084be:	f026 0607 	bic.w	r6, r6, #7
 80084c2:	1d23      	adds	r3, r4, #4
 80084c4:	1af2      	subs	r2, r6, r3
 80084c6:	d0b6      	beq.n	8008436 <_malloc_r+0x22>
 80084c8:	1b9b      	subs	r3, r3, r6
 80084ca:	50a3      	str	r3, [r4, r2]
 80084cc:	e7b3      	b.n	8008436 <_malloc_r+0x22>
 80084ce:	6862      	ldr	r2, [r4, #4]
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	bf0c      	ite	eq
 80084d4:	6032      	streq	r2, [r6, #0]
 80084d6:	605a      	strne	r2, [r3, #4]
 80084d8:	e7ec      	b.n	80084b4 <_malloc_r+0xa0>
 80084da:	4623      	mov	r3, r4
 80084dc:	6864      	ldr	r4, [r4, #4]
 80084de:	e7b2      	b.n	8008446 <_malloc_r+0x32>
 80084e0:	4634      	mov	r4, r6
 80084e2:	6876      	ldr	r6, [r6, #4]
 80084e4:	e7b9      	b.n	800845a <_malloc_r+0x46>
 80084e6:	230c      	movs	r3, #12
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	4638      	mov	r0, r7
 80084ec:	f003 fcf4 	bl	800bed8 <__malloc_unlock>
 80084f0:	e7a1      	b.n	8008436 <_malloc_r+0x22>
 80084f2:	6025      	str	r5, [r4, #0]
 80084f4:	e7de      	b.n	80084b4 <_malloc_r+0xa0>
 80084f6:	bf00      	nop
 80084f8:	200007e0 	.word	0x200007e0

080084fc <__cvt>:
 80084fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008500:	ec55 4b10 	vmov	r4, r5, d0
 8008504:	2d00      	cmp	r5, #0
 8008506:	460e      	mov	r6, r1
 8008508:	4619      	mov	r1, r3
 800850a:	462b      	mov	r3, r5
 800850c:	bfbb      	ittet	lt
 800850e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008512:	461d      	movlt	r5, r3
 8008514:	2300      	movge	r3, #0
 8008516:	232d      	movlt	r3, #45	; 0x2d
 8008518:	700b      	strb	r3, [r1, #0]
 800851a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800851c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008520:	4691      	mov	r9, r2
 8008522:	f023 0820 	bic.w	r8, r3, #32
 8008526:	bfbc      	itt	lt
 8008528:	4622      	movlt	r2, r4
 800852a:	4614      	movlt	r4, r2
 800852c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008530:	d005      	beq.n	800853e <__cvt+0x42>
 8008532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008536:	d100      	bne.n	800853a <__cvt+0x3e>
 8008538:	3601      	adds	r6, #1
 800853a:	2102      	movs	r1, #2
 800853c:	e000      	b.n	8008540 <__cvt+0x44>
 800853e:	2103      	movs	r1, #3
 8008540:	ab03      	add	r3, sp, #12
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	ab02      	add	r3, sp, #8
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	ec45 4b10 	vmov	d0, r4, r5
 800854c:	4653      	mov	r3, sl
 800854e:	4632      	mov	r2, r6
 8008550:	f002 f93e 	bl	800a7d0 <_dtoa_r>
 8008554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008558:	4607      	mov	r7, r0
 800855a:	d102      	bne.n	8008562 <__cvt+0x66>
 800855c:	f019 0f01 	tst.w	r9, #1
 8008560:	d022      	beq.n	80085a8 <__cvt+0xac>
 8008562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008566:	eb07 0906 	add.w	r9, r7, r6
 800856a:	d110      	bne.n	800858e <__cvt+0x92>
 800856c:	783b      	ldrb	r3, [r7, #0]
 800856e:	2b30      	cmp	r3, #48	; 0x30
 8008570:	d10a      	bne.n	8008588 <__cvt+0x8c>
 8008572:	2200      	movs	r2, #0
 8008574:	2300      	movs	r3, #0
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f8 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800857e:	b918      	cbnz	r0, 8008588 <__cvt+0x8c>
 8008580:	f1c6 0601 	rsb	r6, r6, #1
 8008584:	f8ca 6000 	str.w	r6, [sl]
 8008588:	f8da 3000 	ldr.w	r3, [sl]
 800858c:	4499      	add	r9, r3
 800858e:	2200      	movs	r2, #0
 8008590:	2300      	movs	r3, #0
 8008592:	4620      	mov	r0, r4
 8008594:	4629      	mov	r1, r5
 8008596:	f7f8 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800859a:	b108      	cbz	r0, 80085a0 <__cvt+0xa4>
 800859c:	f8cd 900c 	str.w	r9, [sp, #12]
 80085a0:	2230      	movs	r2, #48	; 0x30
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	454b      	cmp	r3, r9
 80085a6:	d307      	bcc.n	80085b8 <__cvt+0xbc>
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ac:	1bdb      	subs	r3, r3, r7
 80085ae:	4638      	mov	r0, r7
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	b004      	add	sp, #16
 80085b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085b8:	1c59      	adds	r1, r3, #1
 80085ba:	9103      	str	r1, [sp, #12]
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	e7f0      	b.n	80085a2 <__cvt+0xa6>

080085c0 <__exponent>:
 80085c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c2:	4603      	mov	r3, r0
 80085c4:	2900      	cmp	r1, #0
 80085c6:	bfb8      	it	lt
 80085c8:	4249      	neglt	r1, r1
 80085ca:	f803 2b02 	strb.w	r2, [r3], #2
 80085ce:	bfb4      	ite	lt
 80085d0:	222d      	movlt	r2, #45	; 0x2d
 80085d2:	222b      	movge	r2, #43	; 0x2b
 80085d4:	2909      	cmp	r1, #9
 80085d6:	7042      	strb	r2, [r0, #1]
 80085d8:	dd2a      	ble.n	8008630 <__exponent+0x70>
 80085da:	f10d 0407 	add.w	r4, sp, #7
 80085de:	46a4      	mov	ip, r4
 80085e0:	270a      	movs	r7, #10
 80085e2:	46a6      	mov	lr, r4
 80085e4:	460a      	mov	r2, r1
 80085e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80085ea:	fb07 1516 	mls	r5, r7, r6, r1
 80085ee:	3530      	adds	r5, #48	; 0x30
 80085f0:	2a63      	cmp	r2, #99	; 0x63
 80085f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80085f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085fa:	4631      	mov	r1, r6
 80085fc:	dcf1      	bgt.n	80085e2 <__exponent+0x22>
 80085fe:	3130      	adds	r1, #48	; 0x30
 8008600:	f1ae 0502 	sub.w	r5, lr, #2
 8008604:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008608:	1c44      	adds	r4, r0, #1
 800860a:	4629      	mov	r1, r5
 800860c:	4561      	cmp	r1, ip
 800860e:	d30a      	bcc.n	8008626 <__exponent+0x66>
 8008610:	f10d 0209 	add.w	r2, sp, #9
 8008614:	eba2 020e 	sub.w	r2, r2, lr
 8008618:	4565      	cmp	r5, ip
 800861a:	bf88      	it	hi
 800861c:	2200      	movhi	r2, #0
 800861e:	4413      	add	r3, r2
 8008620:	1a18      	subs	r0, r3, r0
 8008622:	b003      	add	sp, #12
 8008624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800862e:	e7ed      	b.n	800860c <__exponent+0x4c>
 8008630:	2330      	movs	r3, #48	; 0x30
 8008632:	3130      	adds	r1, #48	; 0x30
 8008634:	7083      	strb	r3, [r0, #2]
 8008636:	70c1      	strb	r1, [r0, #3]
 8008638:	1d03      	adds	r3, r0, #4
 800863a:	e7f1      	b.n	8008620 <__exponent+0x60>

0800863c <_printf_float>:
 800863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008640:	ed2d 8b02 	vpush	{d8}
 8008644:	b08d      	sub	sp, #52	; 0x34
 8008646:	460c      	mov	r4, r1
 8008648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800864c:	4616      	mov	r6, r2
 800864e:	461f      	mov	r7, r3
 8008650:	4605      	mov	r5, r0
 8008652:	f003 fc0f 	bl	800be74 <_localeconv_r>
 8008656:	f8d0 a000 	ldr.w	sl, [r0]
 800865a:	4650      	mov	r0, sl
 800865c:	f7f7 fe08 	bl	8000270 <strlen>
 8008660:	2300      	movs	r3, #0
 8008662:	930a      	str	r3, [sp, #40]	; 0x28
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	f8d8 3000 	ldr.w	r3, [r8]
 800866c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	f103 0208 	add.w	r2, r3, #8
 800867a:	f8c8 2000 	str.w	r2, [r8]
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008686:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800868a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	f8cd 8018 	str.w	r8, [sp, #24]
 8008694:	ee08 0a10 	vmov	s16, r0
 8008698:	4b9f      	ldr	r3, [pc, #636]	; (8008918 <_printf_float+0x2dc>)
 800869a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800869e:	f04f 32ff 	mov.w	r2, #4294967295
 80086a2:	f7f8 fa43 	bl	8000b2c <__aeabi_dcmpun>
 80086a6:	bb88      	cbnz	r0, 800870c <_printf_float+0xd0>
 80086a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ac:	4b9a      	ldr	r3, [pc, #616]	; (8008918 <_printf_float+0x2dc>)
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	f7f8 fa1d 	bl	8000af0 <__aeabi_dcmple>
 80086b6:	bb48      	cbnz	r0, 800870c <_printf_float+0xd0>
 80086b8:	2200      	movs	r2, #0
 80086ba:	2300      	movs	r3, #0
 80086bc:	4640      	mov	r0, r8
 80086be:	4649      	mov	r1, r9
 80086c0:	f7f8 fa0c 	bl	8000adc <__aeabi_dcmplt>
 80086c4:	b110      	cbz	r0, 80086cc <_printf_float+0x90>
 80086c6:	232d      	movs	r3, #45	; 0x2d
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086cc:	4b93      	ldr	r3, [pc, #588]	; (800891c <_printf_float+0x2e0>)
 80086ce:	4894      	ldr	r0, [pc, #592]	; (8008920 <_printf_float+0x2e4>)
 80086d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086d4:	bf94      	ite	ls
 80086d6:	4698      	movls	r8, r3
 80086d8:	4680      	movhi	r8, r0
 80086da:	2303      	movs	r3, #3
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	f023 0204 	bic.w	r2, r3, #4
 80086e4:	6022      	str	r2, [r4, #0]
 80086e6:	f04f 0900 	mov.w	r9, #0
 80086ea:	9700      	str	r7, [sp, #0]
 80086ec:	4633      	mov	r3, r6
 80086ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80086f0:	4621      	mov	r1, r4
 80086f2:	4628      	mov	r0, r5
 80086f4:	f000 f9d8 	bl	8008aa8 <_printf_common>
 80086f8:	3001      	adds	r0, #1
 80086fa:	f040 8090 	bne.w	800881e <_printf_float+0x1e2>
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	b00d      	add	sp, #52	; 0x34
 8008704:	ecbd 8b02 	vpop	{d8}
 8008708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870c:	4642      	mov	r2, r8
 800870e:	464b      	mov	r3, r9
 8008710:	4640      	mov	r0, r8
 8008712:	4649      	mov	r1, r9
 8008714:	f7f8 fa0a 	bl	8000b2c <__aeabi_dcmpun>
 8008718:	b140      	cbz	r0, 800872c <_printf_float+0xf0>
 800871a:	464b      	mov	r3, r9
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfbc      	itt	lt
 8008720:	232d      	movlt	r3, #45	; 0x2d
 8008722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008726:	487f      	ldr	r0, [pc, #508]	; (8008924 <_printf_float+0x2e8>)
 8008728:	4b7f      	ldr	r3, [pc, #508]	; (8008928 <_printf_float+0x2ec>)
 800872a:	e7d1      	b.n	80086d0 <_printf_float+0x94>
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008732:	9206      	str	r2, [sp, #24]
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	d13f      	bne.n	80087b8 <_printf_float+0x17c>
 8008738:	2306      	movs	r3, #6
 800873a:	6063      	str	r3, [r4, #4]
 800873c:	9b05      	ldr	r3, [sp, #20]
 800873e:	6861      	ldr	r1, [r4, #4]
 8008740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008744:	2300      	movs	r3, #0
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	ab0a      	add	r3, sp, #40	; 0x28
 800874a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800874e:	ab09      	add	r3, sp, #36	; 0x24
 8008750:	ec49 8b10 	vmov	d0, r8, r9
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	6022      	str	r2, [r4, #0]
 8008758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800875c:	4628      	mov	r0, r5
 800875e:	f7ff fecd 	bl	80084fc <__cvt>
 8008762:	9b06      	ldr	r3, [sp, #24]
 8008764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008766:	2b47      	cmp	r3, #71	; 0x47
 8008768:	4680      	mov	r8, r0
 800876a:	d108      	bne.n	800877e <_printf_float+0x142>
 800876c:	1cc8      	adds	r0, r1, #3
 800876e:	db02      	blt.n	8008776 <_printf_float+0x13a>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	4299      	cmp	r1, r3
 8008774:	dd41      	ble.n	80087fa <_printf_float+0x1be>
 8008776:	f1ab 0b02 	sub.w	fp, fp, #2
 800877a:	fa5f fb8b 	uxtb.w	fp, fp
 800877e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008782:	d820      	bhi.n	80087c6 <_printf_float+0x18a>
 8008784:	3901      	subs	r1, #1
 8008786:	465a      	mov	r2, fp
 8008788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800878c:	9109      	str	r1, [sp, #36]	; 0x24
 800878e:	f7ff ff17 	bl	80085c0 <__exponent>
 8008792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008794:	1813      	adds	r3, r2, r0
 8008796:	2a01      	cmp	r2, #1
 8008798:	4681      	mov	r9, r0
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	dc02      	bgt.n	80087a4 <_printf_float+0x168>
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	07d2      	lsls	r2, r2, #31
 80087a2:	d501      	bpl.n	80087a8 <_printf_float+0x16c>
 80087a4:	3301      	adds	r3, #1
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d09c      	beq.n	80086ea <_printf_float+0xae>
 80087b0:	232d      	movs	r3, #45	; 0x2d
 80087b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b6:	e798      	b.n	80086ea <_printf_float+0xae>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	2a47      	cmp	r2, #71	; 0x47
 80087bc:	d1be      	bne.n	800873c <_printf_float+0x100>
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1bc      	bne.n	800873c <_printf_float+0x100>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7b9      	b.n	800873a <_printf_float+0xfe>
 80087c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087ca:	d118      	bne.n	80087fe <_printf_float+0x1c2>
 80087cc:	2900      	cmp	r1, #0
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	dd0b      	ble.n	80087ea <_printf_float+0x1ae>
 80087d2:	6121      	str	r1, [r4, #16]
 80087d4:	b913      	cbnz	r3, 80087dc <_printf_float+0x1a0>
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	07d0      	lsls	r0, r2, #31
 80087da:	d502      	bpl.n	80087e2 <_printf_float+0x1a6>
 80087dc:	3301      	adds	r3, #1
 80087de:	440b      	add	r3, r1
 80087e0:	6123      	str	r3, [r4, #16]
 80087e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087e4:	f04f 0900 	mov.w	r9, #0
 80087e8:	e7de      	b.n	80087a8 <_printf_float+0x16c>
 80087ea:	b913      	cbnz	r3, 80087f2 <_printf_float+0x1b6>
 80087ec:	6822      	ldr	r2, [r4, #0]
 80087ee:	07d2      	lsls	r2, r2, #31
 80087f0:	d501      	bpl.n	80087f6 <_printf_float+0x1ba>
 80087f2:	3302      	adds	r3, #2
 80087f4:	e7f4      	b.n	80087e0 <_printf_float+0x1a4>
 80087f6:	2301      	movs	r3, #1
 80087f8:	e7f2      	b.n	80087e0 <_printf_float+0x1a4>
 80087fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008800:	4299      	cmp	r1, r3
 8008802:	db05      	blt.n	8008810 <_printf_float+0x1d4>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	6121      	str	r1, [r4, #16]
 8008808:	07d8      	lsls	r0, r3, #31
 800880a:	d5ea      	bpl.n	80087e2 <_printf_float+0x1a6>
 800880c:	1c4b      	adds	r3, r1, #1
 800880e:	e7e7      	b.n	80087e0 <_printf_float+0x1a4>
 8008810:	2900      	cmp	r1, #0
 8008812:	bfd4      	ite	le
 8008814:	f1c1 0202 	rsble	r2, r1, #2
 8008818:	2201      	movgt	r2, #1
 800881a:	4413      	add	r3, r2
 800881c:	e7e0      	b.n	80087e0 <_printf_float+0x1a4>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	055a      	lsls	r2, r3, #21
 8008822:	d407      	bmi.n	8008834 <_printf_float+0x1f8>
 8008824:	6923      	ldr	r3, [r4, #16]
 8008826:	4642      	mov	r2, r8
 8008828:	4631      	mov	r1, r6
 800882a:	4628      	mov	r0, r5
 800882c:	47b8      	blx	r7
 800882e:	3001      	adds	r0, #1
 8008830:	d12c      	bne.n	800888c <_printf_float+0x250>
 8008832:	e764      	b.n	80086fe <_printf_float+0xc2>
 8008834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008838:	f240 80e0 	bls.w	80089fc <_printf_float+0x3c0>
 800883c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008840:	2200      	movs	r2, #0
 8008842:	2300      	movs	r3, #0
 8008844:	f7f8 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8008848:	2800      	cmp	r0, #0
 800884a:	d034      	beq.n	80088b6 <_printf_float+0x27a>
 800884c:	4a37      	ldr	r2, [pc, #220]	; (800892c <_printf_float+0x2f0>)
 800884e:	2301      	movs	r3, #1
 8008850:	4631      	mov	r1, r6
 8008852:	4628      	mov	r0, r5
 8008854:	47b8      	blx	r7
 8008856:	3001      	adds	r0, #1
 8008858:	f43f af51 	beq.w	80086fe <_printf_float+0xc2>
 800885c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008860:	429a      	cmp	r2, r3
 8008862:	db02      	blt.n	800886a <_printf_float+0x22e>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	07d8      	lsls	r0, r3, #31
 8008868:	d510      	bpl.n	800888c <_printf_float+0x250>
 800886a:	ee18 3a10 	vmov	r3, s16
 800886e:	4652      	mov	r2, sl
 8008870:	4631      	mov	r1, r6
 8008872:	4628      	mov	r0, r5
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f af41 	beq.w	80086fe <_printf_float+0xc2>
 800887c:	f04f 0800 	mov.w	r8, #0
 8008880:	f104 091a 	add.w	r9, r4, #26
 8008884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008886:	3b01      	subs	r3, #1
 8008888:	4543      	cmp	r3, r8
 800888a:	dc09      	bgt.n	80088a0 <_printf_float+0x264>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	079b      	lsls	r3, r3, #30
 8008890:	f100 8105 	bmi.w	8008a9e <_printf_float+0x462>
 8008894:	68e0      	ldr	r0, [r4, #12]
 8008896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008898:	4298      	cmp	r0, r3
 800889a:	bfb8      	it	lt
 800889c:	4618      	movlt	r0, r3
 800889e:	e730      	b.n	8008702 <_printf_float+0xc6>
 80088a0:	2301      	movs	r3, #1
 80088a2:	464a      	mov	r2, r9
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	f43f af27 	beq.w	80086fe <_printf_float+0xc2>
 80088b0:	f108 0801 	add.w	r8, r8, #1
 80088b4:	e7e6      	b.n	8008884 <_printf_float+0x248>
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dc39      	bgt.n	8008930 <_printf_float+0x2f4>
 80088bc:	4a1b      	ldr	r2, [pc, #108]	; (800892c <_printf_float+0x2f0>)
 80088be:	2301      	movs	r3, #1
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af19 	beq.w	80086fe <_printf_float+0xc2>
 80088cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088d0:	4313      	orrs	r3, r2
 80088d2:	d102      	bne.n	80088da <_printf_float+0x29e>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d5d8      	bpl.n	800888c <_printf_float+0x250>
 80088da:	ee18 3a10 	vmov	r3, s16
 80088de:	4652      	mov	r2, sl
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f af09 	beq.w	80086fe <_printf_float+0xc2>
 80088ec:	f04f 0900 	mov.w	r9, #0
 80088f0:	f104 0a1a 	add.w	sl, r4, #26
 80088f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f6:	425b      	negs	r3, r3
 80088f8:	454b      	cmp	r3, r9
 80088fa:	dc01      	bgt.n	8008900 <_printf_float+0x2c4>
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	e792      	b.n	8008826 <_printf_float+0x1ea>
 8008900:	2301      	movs	r3, #1
 8008902:	4652      	mov	r2, sl
 8008904:	4631      	mov	r1, r6
 8008906:	4628      	mov	r0, r5
 8008908:	47b8      	blx	r7
 800890a:	3001      	adds	r0, #1
 800890c:	f43f aef7 	beq.w	80086fe <_printf_float+0xc2>
 8008910:	f109 0901 	add.w	r9, r9, #1
 8008914:	e7ee      	b.n	80088f4 <_printf_float+0x2b8>
 8008916:	bf00      	nop
 8008918:	7fefffff 	.word	0x7fefffff
 800891c:	0800db74 	.word	0x0800db74
 8008920:	0800db78 	.word	0x0800db78
 8008924:	0800db80 	.word	0x0800db80
 8008928:	0800db7c 	.word	0x0800db7c
 800892c:	0800e679 	.word	0x0800e679
 8008930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008934:	429a      	cmp	r2, r3
 8008936:	bfa8      	it	ge
 8008938:	461a      	movge	r2, r3
 800893a:	2a00      	cmp	r2, #0
 800893c:	4691      	mov	r9, r2
 800893e:	dc37      	bgt.n	80089b0 <_printf_float+0x374>
 8008940:	f04f 0b00 	mov.w	fp, #0
 8008944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008948:	f104 021a 	add.w	r2, r4, #26
 800894c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800894e:	9305      	str	r3, [sp, #20]
 8008950:	eba3 0309 	sub.w	r3, r3, r9
 8008954:	455b      	cmp	r3, fp
 8008956:	dc33      	bgt.n	80089c0 <_printf_float+0x384>
 8008958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800895c:	429a      	cmp	r2, r3
 800895e:	db3b      	blt.n	80089d8 <_printf_float+0x39c>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	07da      	lsls	r2, r3, #31
 8008964:	d438      	bmi.n	80089d8 <_printf_float+0x39c>
 8008966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008968:	9a05      	ldr	r2, [sp, #20]
 800896a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800896c:	1a9a      	subs	r2, r3, r2
 800896e:	eba3 0901 	sub.w	r9, r3, r1
 8008972:	4591      	cmp	r9, r2
 8008974:	bfa8      	it	ge
 8008976:	4691      	movge	r9, r2
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	dc35      	bgt.n	80089ea <_printf_float+0x3ae>
 800897e:	f04f 0800 	mov.w	r8, #0
 8008982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008986:	f104 0a1a 	add.w	sl, r4, #26
 800898a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800898e:	1a9b      	subs	r3, r3, r2
 8008990:	eba3 0309 	sub.w	r3, r3, r9
 8008994:	4543      	cmp	r3, r8
 8008996:	f77f af79 	ble.w	800888c <_printf_float+0x250>
 800899a:	2301      	movs	r3, #1
 800899c:	4652      	mov	r2, sl
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f aeaa 	beq.w	80086fe <_printf_float+0xc2>
 80089aa:	f108 0801 	add.w	r8, r8, #1
 80089ae:	e7ec      	b.n	800898a <_printf_float+0x34e>
 80089b0:	4613      	mov	r3, r2
 80089b2:	4631      	mov	r1, r6
 80089b4:	4642      	mov	r2, r8
 80089b6:	4628      	mov	r0, r5
 80089b8:	47b8      	blx	r7
 80089ba:	3001      	adds	r0, #1
 80089bc:	d1c0      	bne.n	8008940 <_printf_float+0x304>
 80089be:	e69e      	b.n	80086fe <_printf_float+0xc2>
 80089c0:	2301      	movs	r3, #1
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	9205      	str	r2, [sp, #20]
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	f43f ae97 	beq.w	80086fe <_printf_float+0xc2>
 80089d0:	9a05      	ldr	r2, [sp, #20]
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	e7b9      	b.n	800894c <_printf_float+0x310>
 80089d8:	ee18 3a10 	vmov	r3, s16
 80089dc:	4652      	mov	r2, sl
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	d1be      	bne.n	8008966 <_printf_float+0x32a>
 80089e8:	e689      	b.n	80086fe <_printf_float+0xc2>
 80089ea:	9a05      	ldr	r2, [sp, #20]
 80089ec:	464b      	mov	r3, r9
 80089ee:	4442      	add	r2, r8
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	d1c1      	bne.n	800897e <_printf_float+0x342>
 80089fa:	e680      	b.n	80086fe <_printf_float+0xc2>
 80089fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089fe:	2a01      	cmp	r2, #1
 8008a00:	dc01      	bgt.n	8008a06 <_printf_float+0x3ca>
 8008a02:	07db      	lsls	r3, r3, #31
 8008a04:	d538      	bpl.n	8008a78 <_printf_float+0x43c>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f ae74 	beq.w	80086fe <_printf_float+0xc2>
 8008a16:	ee18 3a10 	vmov	r3, s16
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	47b8      	blx	r7
 8008a22:	3001      	adds	r0, #1
 8008a24:	f43f ae6b 	beq.w	80086fe <_printf_float+0xc2>
 8008a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f7f8 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a34:	b9d8      	cbnz	r0, 8008a6e <_printf_float+0x432>
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a38:	f108 0201 	add.w	r2, r8, #1
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	d10e      	bne.n	8008a66 <_printf_float+0x42a>
 8008a48:	e659      	b.n	80086fe <_printf_float+0xc2>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	4652      	mov	r2, sl
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	f43f ae52 	beq.w	80086fe <_printf_float+0xc2>
 8008a5a:	f108 0801 	add.w	r8, r8, #1
 8008a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a60:	3b01      	subs	r3, #1
 8008a62:	4543      	cmp	r3, r8
 8008a64:	dcf1      	bgt.n	8008a4a <_printf_float+0x40e>
 8008a66:	464b      	mov	r3, r9
 8008a68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a6c:	e6dc      	b.n	8008828 <_printf_float+0x1ec>
 8008a6e:	f04f 0800 	mov.w	r8, #0
 8008a72:	f104 0a1a 	add.w	sl, r4, #26
 8008a76:	e7f2      	b.n	8008a5e <_printf_float+0x422>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4642      	mov	r2, r8
 8008a7c:	e7df      	b.n	8008a3e <_printf_float+0x402>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	464a      	mov	r2, r9
 8008a82:	4631      	mov	r1, r6
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b8      	blx	r7
 8008a88:	3001      	adds	r0, #1
 8008a8a:	f43f ae38 	beq.w	80086fe <_printf_float+0xc2>
 8008a8e:	f108 0801 	add.w	r8, r8, #1
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a96:	1a5b      	subs	r3, r3, r1
 8008a98:	4543      	cmp	r3, r8
 8008a9a:	dcf0      	bgt.n	8008a7e <_printf_float+0x442>
 8008a9c:	e6fa      	b.n	8008894 <_printf_float+0x258>
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	f104 0919 	add.w	r9, r4, #25
 8008aa6:	e7f4      	b.n	8008a92 <_printf_float+0x456>

08008aa8 <_printf_common>:
 8008aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aac:	4616      	mov	r6, r2
 8008aae:	4699      	mov	r9, r3
 8008ab0:	688a      	ldr	r2, [r1, #8]
 8008ab2:	690b      	ldr	r3, [r1, #16]
 8008ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	bfb8      	it	lt
 8008abc:	4613      	movlt	r3, r2
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	b10a      	cbz	r2, 8008ace <_printf_common+0x26>
 8008aca:	3301      	adds	r3, #1
 8008acc:	6033      	str	r3, [r6, #0]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	0699      	lsls	r1, r3, #26
 8008ad2:	bf42      	ittt	mi
 8008ad4:	6833      	ldrmi	r3, [r6, #0]
 8008ad6:	3302      	addmi	r3, #2
 8008ad8:	6033      	strmi	r3, [r6, #0]
 8008ada:	6825      	ldr	r5, [r4, #0]
 8008adc:	f015 0506 	ands.w	r5, r5, #6
 8008ae0:	d106      	bne.n	8008af0 <_printf_common+0x48>
 8008ae2:	f104 0a19 	add.w	sl, r4, #25
 8008ae6:	68e3      	ldr	r3, [r4, #12]
 8008ae8:	6832      	ldr	r2, [r6, #0]
 8008aea:	1a9b      	subs	r3, r3, r2
 8008aec:	42ab      	cmp	r3, r5
 8008aee:	dc26      	bgt.n	8008b3e <_printf_common+0x96>
 8008af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008af4:	1e13      	subs	r3, r2, #0
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	bf18      	it	ne
 8008afa:	2301      	movne	r3, #1
 8008afc:	0692      	lsls	r2, r2, #26
 8008afe:	d42b      	bmi.n	8008b58 <_printf_common+0xb0>
 8008b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b04:	4649      	mov	r1, r9
 8008b06:	4638      	mov	r0, r7
 8008b08:	47c0      	blx	r8
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	d01e      	beq.n	8008b4c <_printf_common+0xa4>
 8008b0e:	6823      	ldr	r3, [r4, #0]
 8008b10:	68e5      	ldr	r5, [r4, #12]
 8008b12:	6832      	ldr	r2, [r6, #0]
 8008b14:	f003 0306 	and.w	r3, r3, #6
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	bf08      	it	eq
 8008b1c:	1aad      	subeq	r5, r5, r2
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	bf0c      	ite	eq
 8008b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b28:	2500      	movne	r5, #0
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	bfc4      	itt	gt
 8008b2e:	1a9b      	subgt	r3, r3, r2
 8008b30:	18ed      	addgt	r5, r5, r3
 8008b32:	2600      	movs	r6, #0
 8008b34:	341a      	adds	r4, #26
 8008b36:	42b5      	cmp	r5, r6
 8008b38:	d11a      	bne.n	8008b70 <_printf_common+0xc8>
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	e008      	b.n	8008b50 <_printf_common+0xa8>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4652      	mov	r2, sl
 8008b42:	4649      	mov	r1, r9
 8008b44:	4638      	mov	r0, r7
 8008b46:	47c0      	blx	r8
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d103      	bne.n	8008b54 <_printf_common+0xac>
 8008b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b54:	3501      	adds	r5, #1
 8008b56:	e7c6      	b.n	8008ae6 <_printf_common+0x3e>
 8008b58:	18e1      	adds	r1, r4, r3
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	2030      	movs	r0, #48	; 0x30
 8008b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b62:	4422      	add	r2, r4
 8008b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b6c:	3302      	adds	r3, #2
 8008b6e:	e7c7      	b.n	8008b00 <_printf_common+0x58>
 8008b70:	2301      	movs	r3, #1
 8008b72:	4622      	mov	r2, r4
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0e6      	beq.n	8008b4c <_printf_common+0xa4>
 8008b7e:	3601      	adds	r6, #1
 8008b80:	e7d9      	b.n	8008b36 <_printf_common+0x8e>
	...

08008b84 <_printf_i>:
 8008b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	7e0f      	ldrb	r7, [r1, #24]
 8008b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b8c:	2f78      	cmp	r7, #120	; 0x78
 8008b8e:	4691      	mov	r9, r2
 8008b90:	4680      	mov	r8, r0
 8008b92:	460c      	mov	r4, r1
 8008b94:	469a      	mov	sl, r3
 8008b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b9a:	d807      	bhi.n	8008bac <_printf_i+0x28>
 8008b9c:	2f62      	cmp	r7, #98	; 0x62
 8008b9e:	d80a      	bhi.n	8008bb6 <_printf_i+0x32>
 8008ba0:	2f00      	cmp	r7, #0
 8008ba2:	f000 80d8 	beq.w	8008d56 <_printf_i+0x1d2>
 8008ba6:	2f58      	cmp	r7, #88	; 0x58
 8008ba8:	f000 80a3 	beq.w	8008cf2 <_printf_i+0x16e>
 8008bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bb4:	e03a      	b.n	8008c2c <_printf_i+0xa8>
 8008bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bba:	2b15      	cmp	r3, #21
 8008bbc:	d8f6      	bhi.n	8008bac <_printf_i+0x28>
 8008bbe:	a101      	add	r1, pc, #4	; (adr r1, 8008bc4 <_printf_i+0x40>)
 8008bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bc4:	08008c1d 	.word	0x08008c1d
 8008bc8:	08008c31 	.word	0x08008c31
 8008bcc:	08008bad 	.word	0x08008bad
 8008bd0:	08008bad 	.word	0x08008bad
 8008bd4:	08008bad 	.word	0x08008bad
 8008bd8:	08008bad 	.word	0x08008bad
 8008bdc:	08008c31 	.word	0x08008c31
 8008be0:	08008bad 	.word	0x08008bad
 8008be4:	08008bad 	.word	0x08008bad
 8008be8:	08008bad 	.word	0x08008bad
 8008bec:	08008bad 	.word	0x08008bad
 8008bf0:	08008d3d 	.word	0x08008d3d
 8008bf4:	08008c61 	.word	0x08008c61
 8008bf8:	08008d1f 	.word	0x08008d1f
 8008bfc:	08008bad 	.word	0x08008bad
 8008c00:	08008bad 	.word	0x08008bad
 8008c04:	08008d5f 	.word	0x08008d5f
 8008c08:	08008bad 	.word	0x08008bad
 8008c0c:	08008c61 	.word	0x08008c61
 8008c10:	08008bad 	.word	0x08008bad
 8008c14:	08008bad 	.word	0x08008bad
 8008c18:	08008d27 	.word	0x08008d27
 8008c1c:	682b      	ldr	r3, [r5, #0]
 8008c1e:	1d1a      	adds	r2, r3, #4
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	602a      	str	r2, [r5, #0]
 8008c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e0a3      	b.n	8008d78 <_printf_i+0x1f4>
 8008c30:	6820      	ldr	r0, [r4, #0]
 8008c32:	6829      	ldr	r1, [r5, #0]
 8008c34:	0606      	lsls	r6, r0, #24
 8008c36:	f101 0304 	add.w	r3, r1, #4
 8008c3a:	d50a      	bpl.n	8008c52 <_printf_i+0xce>
 8008c3c:	680e      	ldr	r6, [r1, #0]
 8008c3e:	602b      	str	r3, [r5, #0]
 8008c40:	2e00      	cmp	r6, #0
 8008c42:	da03      	bge.n	8008c4c <_printf_i+0xc8>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	4276      	negs	r6, r6
 8008c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c4c:	485e      	ldr	r0, [pc, #376]	; (8008dc8 <_printf_i+0x244>)
 8008c4e:	230a      	movs	r3, #10
 8008c50:	e019      	b.n	8008c86 <_printf_i+0x102>
 8008c52:	680e      	ldr	r6, [r1, #0]
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c5a:	bf18      	it	ne
 8008c5c:	b236      	sxthne	r6, r6
 8008c5e:	e7ef      	b.n	8008c40 <_printf_i+0xbc>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	6820      	ldr	r0, [r4, #0]
 8008c64:	1d19      	adds	r1, r3, #4
 8008c66:	6029      	str	r1, [r5, #0]
 8008c68:	0601      	lsls	r1, r0, #24
 8008c6a:	d501      	bpl.n	8008c70 <_printf_i+0xec>
 8008c6c:	681e      	ldr	r6, [r3, #0]
 8008c6e:	e002      	b.n	8008c76 <_printf_i+0xf2>
 8008c70:	0646      	lsls	r6, r0, #25
 8008c72:	d5fb      	bpl.n	8008c6c <_printf_i+0xe8>
 8008c74:	881e      	ldrh	r6, [r3, #0]
 8008c76:	4854      	ldr	r0, [pc, #336]	; (8008dc8 <_printf_i+0x244>)
 8008c78:	2f6f      	cmp	r7, #111	; 0x6f
 8008c7a:	bf0c      	ite	eq
 8008c7c:	2308      	moveq	r3, #8
 8008c7e:	230a      	movne	r3, #10
 8008c80:	2100      	movs	r1, #0
 8008c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c86:	6865      	ldr	r5, [r4, #4]
 8008c88:	60a5      	str	r5, [r4, #8]
 8008c8a:	2d00      	cmp	r5, #0
 8008c8c:	bfa2      	ittt	ge
 8008c8e:	6821      	ldrge	r1, [r4, #0]
 8008c90:	f021 0104 	bicge.w	r1, r1, #4
 8008c94:	6021      	strge	r1, [r4, #0]
 8008c96:	b90e      	cbnz	r6, 8008c9c <_printf_i+0x118>
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	d04d      	beq.n	8008d38 <_printf_i+0x1b4>
 8008c9c:	4615      	mov	r5, r2
 8008c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ca6:	5dc7      	ldrb	r7, [r0, r7]
 8008ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cac:	4637      	mov	r7, r6
 8008cae:	42bb      	cmp	r3, r7
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	d9f4      	bls.n	8008c9e <_printf_i+0x11a>
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d10b      	bne.n	8008cd0 <_printf_i+0x14c>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	07de      	lsls	r6, r3, #31
 8008cbc:	d508      	bpl.n	8008cd0 <_printf_i+0x14c>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	6861      	ldr	r1, [r4, #4]
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	bfde      	ittt	le
 8008cc6:	2330      	movle	r3, #48	; 0x30
 8008cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ccc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cd0:	1b52      	subs	r2, r2, r5
 8008cd2:	6122      	str	r2, [r4, #16]
 8008cd4:	f8cd a000 	str.w	sl, [sp]
 8008cd8:	464b      	mov	r3, r9
 8008cda:	aa03      	add	r2, sp, #12
 8008cdc:	4621      	mov	r1, r4
 8008cde:	4640      	mov	r0, r8
 8008ce0:	f7ff fee2 	bl	8008aa8 <_printf_common>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d14c      	bne.n	8008d82 <_printf_i+0x1fe>
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b004      	add	sp, #16
 8008cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cf2:	4835      	ldr	r0, [pc, #212]	; (8008dc8 <_printf_i+0x244>)
 8008cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cf8:	6829      	ldr	r1, [r5, #0]
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d00:	6029      	str	r1, [r5, #0]
 8008d02:	061d      	lsls	r5, r3, #24
 8008d04:	d514      	bpl.n	8008d30 <_printf_i+0x1ac>
 8008d06:	07df      	lsls	r7, r3, #31
 8008d08:	bf44      	itt	mi
 8008d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d0e:	6023      	strmi	r3, [r4, #0]
 8008d10:	b91e      	cbnz	r6, 8008d1a <_printf_i+0x196>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	f023 0320 	bic.w	r3, r3, #32
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	e7b0      	b.n	8008c80 <_printf_i+0xfc>
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	f043 0320 	orr.w	r3, r3, #32
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	2378      	movs	r3, #120	; 0x78
 8008d28:	4828      	ldr	r0, [pc, #160]	; (8008dcc <_printf_i+0x248>)
 8008d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d2e:	e7e3      	b.n	8008cf8 <_printf_i+0x174>
 8008d30:	0659      	lsls	r1, r3, #25
 8008d32:	bf48      	it	mi
 8008d34:	b2b6      	uxthmi	r6, r6
 8008d36:	e7e6      	b.n	8008d06 <_printf_i+0x182>
 8008d38:	4615      	mov	r5, r2
 8008d3a:	e7bb      	b.n	8008cb4 <_printf_i+0x130>
 8008d3c:	682b      	ldr	r3, [r5, #0]
 8008d3e:	6826      	ldr	r6, [r4, #0]
 8008d40:	6961      	ldr	r1, [r4, #20]
 8008d42:	1d18      	adds	r0, r3, #4
 8008d44:	6028      	str	r0, [r5, #0]
 8008d46:	0635      	lsls	r5, r6, #24
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	d501      	bpl.n	8008d50 <_printf_i+0x1cc>
 8008d4c:	6019      	str	r1, [r3, #0]
 8008d4e:	e002      	b.n	8008d56 <_printf_i+0x1d2>
 8008d50:	0670      	lsls	r0, r6, #25
 8008d52:	d5fb      	bpl.n	8008d4c <_printf_i+0x1c8>
 8008d54:	8019      	strh	r1, [r3, #0]
 8008d56:	2300      	movs	r3, #0
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	4615      	mov	r5, r2
 8008d5c:	e7ba      	b.n	8008cd4 <_printf_i+0x150>
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	602a      	str	r2, [r5, #0]
 8008d64:	681d      	ldr	r5, [r3, #0]
 8008d66:	6862      	ldr	r2, [r4, #4]
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f7f7 fa30 	bl	80001d0 <memchr>
 8008d70:	b108      	cbz	r0, 8008d76 <_printf_i+0x1f2>
 8008d72:	1b40      	subs	r0, r0, r5
 8008d74:	6060      	str	r0, [r4, #4]
 8008d76:	6863      	ldr	r3, [r4, #4]
 8008d78:	6123      	str	r3, [r4, #16]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d80:	e7a8      	b.n	8008cd4 <_printf_i+0x150>
 8008d82:	6923      	ldr	r3, [r4, #16]
 8008d84:	462a      	mov	r2, r5
 8008d86:	4649      	mov	r1, r9
 8008d88:	4640      	mov	r0, r8
 8008d8a:	47d0      	blx	sl
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	d0ab      	beq.n	8008ce8 <_printf_i+0x164>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	079b      	lsls	r3, r3, #30
 8008d94:	d413      	bmi.n	8008dbe <_printf_i+0x23a>
 8008d96:	68e0      	ldr	r0, [r4, #12]
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	4298      	cmp	r0, r3
 8008d9c:	bfb8      	it	lt
 8008d9e:	4618      	movlt	r0, r3
 8008da0:	e7a4      	b.n	8008cec <_printf_i+0x168>
 8008da2:	2301      	movs	r3, #1
 8008da4:	4632      	mov	r2, r6
 8008da6:	4649      	mov	r1, r9
 8008da8:	4640      	mov	r0, r8
 8008daa:	47d0      	blx	sl
 8008dac:	3001      	adds	r0, #1
 8008dae:	d09b      	beq.n	8008ce8 <_printf_i+0x164>
 8008db0:	3501      	adds	r5, #1
 8008db2:	68e3      	ldr	r3, [r4, #12]
 8008db4:	9903      	ldr	r1, [sp, #12]
 8008db6:	1a5b      	subs	r3, r3, r1
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	dcf2      	bgt.n	8008da2 <_printf_i+0x21e>
 8008dbc:	e7eb      	b.n	8008d96 <_printf_i+0x212>
 8008dbe:	2500      	movs	r5, #0
 8008dc0:	f104 0619 	add.w	r6, r4, #25
 8008dc4:	e7f5      	b.n	8008db2 <_printf_i+0x22e>
 8008dc6:	bf00      	nop
 8008dc8:	0800db84 	.word	0x0800db84
 8008dcc:	0800db95 	.word	0x0800db95

08008dd0 <_scanf_float>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	4617      	mov	r7, r2
 8008dd8:	9303      	str	r3, [sp, #12]
 8008dda:	688b      	ldr	r3, [r1, #8]
 8008ddc:	1e5a      	subs	r2, r3, #1
 8008dde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008de2:	bf83      	ittte	hi
 8008de4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008de8:	195b      	addhi	r3, r3, r5
 8008dea:	9302      	strhi	r3, [sp, #8]
 8008dec:	2300      	movls	r3, #0
 8008dee:	bf86      	itte	hi
 8008df0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008df4:	608b      	strhi	r3, [r1, #8]
 8008df6:	9302      	strls	r3, [sp, #8]
 8008df8:	680b      	ldr	r3, [r1, #0]
 8008dfa:	468b      	mov	fp, r1
 8008dfc:	2500      	movs	r5, #0
 8008dfe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e02:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	465e      	mov	r6, fp
 8008e10:	46aa      	mov	sl, r5
 8008e12:	46a9      	mov	r9, r5
 8008e14:	9501      	str	r5, [sp, #4]
 8008e16:	68a2      	ldr	r2, [r4, #8]
 8008e18:	b152      	cbz	r2, 8008e30 <_scanf_float+0x60>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e20:	d864      	bhi.n	8008eec <_scanf_float+0x11c>
 8008e22:	2b40      	cmp	r3, #64	; 0x40
 8008e24:	d83c      	bhi.n	8008ea0 <_scanf_float+0xd0>
 8008e26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e2a:	b2c8      	uxtb	r0, r1
 8008e2c:	280e      	cmp	r0, #14
 8008e2e:	d93a      	bls.n	8008ea6 <_scanf_float+0xd6>
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	d003      	beq.n	8008e3e <_scanf_float+0x6e>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e42:	f1ba 0f01 	cmp.w	sl, #1
 8008e46:	f200 8113 	bhi.w	8009070 <_scanf_float+0x2a0>
 8008e4a:	455e      	cmp	r6, fp
 8008e4c:	f200 8105 	bhi.w	800905a <_scanf_float+0x28a>
 8008e50:	2501      	movs	r5, #1
 8008e52:	4628      	mov	r0, r5
 8008e54:	b007      	add	sp, #28
 8008e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e5e:	2a0d      	cmp	r2, #13
 8008e60:	d8e6      	bhi.n	8008e30 <_scanf_float+0x60>
 8008e62:	a101      	add	r1, pc, #4	; (adr r1, 8008e68 <_scanf_float+0x98>)
 8008e64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e68:	08008fa7 	.word	0x08008fa7
 8008e6c:	08008e31 	.word	0x08008e31
 8008e70:	08008e31 	.word	0x08008e31
 8008e74:	08008e31 	.word	0x08008e31
 8008e78:	08009007 	.word	0x08009007
 8008e7c:	08008fdf 	.word	0x08008fdf
 8008e80:	08008e31 	.word	0x08008e31
 8008e84:	08008e31 	.word	0x08008e31
 8008e88:	08008fb5 	.word	0x08008fb5
 8008e8c:	08008e31 	.word	0x08008e31
 8008e90:	08008e31 	.word	0x08008e31
 8008e94:	08008e31 	.word	0x08008e31
 8008e98:	08008e31 	.word	0x08008e31
 8008e9c:	08008f6d 	.word	0x08008f6d
 8008ea0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ea4:	e7db      	b.n	8008e5e <_scanf_float+0x8e>
 8008ea6:	290e      	cmp	r1, #14
 8008ea8:	d8c2      	bhi.n	8008e30 <_scanf_float+0x60>
 8008eaa:	a001      	add	r0, pc, #4	; (adr r0, 8008eb0 <_scanf_float+0xe0>)
 8008eac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008eb0:	08008f5f 	.word	0x08008f5f
 8008eb4:	08008e31 	.word	0x08008e31
 8008eb8:	08008f5f 	.word	0x08008f5f
 8008ebc:	08008ff3 	.word	0x08008ff3
 8008ec0:	08008e31 	.word	0x08008e31
 8008ec4:	08008f0d 	.word	0x08008f0d
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f49 	.word	0x08008f49
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f49 	.word	0x08008f49
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	2b6e      	cmp	r3, #110	; 0x6e
 8008eee:	d809      	bhi.n	8008f04 <_scanf_float+0x134>
 8008ef0:	2b60      	cmp	r3, #96	; 0x60
 8008ef2:	d8b2      	bhi.n	8008e5a <_scanf_float+0x8a>
 8008ef4:	2b54      	cmp	r3, #84	; 0x54
 8008ef6:	d077      	beq.n	8008fe8 <_scanf_float+0x218>
 8008ef8:	2b59      	cmp	r3, #89	; 0x59
 8008efa:	d199      	bne.n	8008e30 <_scanf_float+0x60>
 8008efc:	2d07      	cmp	r5, #7
 8008efe:	d197      	bne.n	8008e30 <_scanf_float+0x60>
 8008f00:	2508      	movs	r5, #8
 8008f02:	e029      	b.n	8008f58 <_scanf_float+0x188>
 8008f04:	2b74      	cmp	r3, #116	; 0x74
 8008f06:	d06f      	beq.n	8008fe8 <_scanf_float+0x218>
 8008f08:	2b79      	cmp	r3, #121	; 0x79
 8008f0a:	e7f6      	b.n	8008efa <_scanf_float+0x12a>
 8008f0c:	6821      	ldr	r1, [r4, #0]
 8008f0e:	05c8      	lsls	r0, r1, #23
 8008f10:	d51a      	bpl.n	8008f48 <_scanf_float+0x178>
 8008f12:	9b02      	ldr	r3, [sp, #8]
 8008f14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f18:	6021      	str	r1, [r4, #0]
 8008f1a:	f109 0901 	add.w	r9, r9, #1
 8008f1e:	b11b      	cbz	r3, 8008f28 <_scanf_float+0x158>
 8008f20:	3b01      	subs	r3, #1
 8008f22:	3201      	adds	r2, #1
 8008f24:	9302      	str	r3, [sp, #8]
 8008f26:	60a2      	str	r2, [r4, #8]
 8008f28:	68a3      	ldr	r3, [r4, #8]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	60a3      	str	r3, [r4, #8]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	3301      	adds	r3, #1
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	f340 8084 	ble.w	8009048 <_scanf_float+0x278>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	603b      	str	r3, [r7, #0]
 8008f46:	e766      	b.n	8008e16 <_scanf_float+0x46>
 8008f48:	eb1a 0f05 	cmn.w	sl, r5
 8008f4c:	f47f af70 	bne.w	8008e30 <_scanf_float+0x60>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	f806 3b01 	strb.w	r3, [r6], #1
 8008f5c:	e7e4      	b.n	8008f28 <_scanf_float+0x158>
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	0610      	lsls	r0, r2, #24
 8008f62:	f57f af65 	bpl.w	8008e30 <_scanf_float+0x60>
 8008f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f6a:	e7f4      	b.n	8008f56 <_scanf_float+0x186>
 8008f6c:	f1ba 0f00 	cmp.w	sl, #0
 8008f70:	d10e      	bne.n	8008f90 <_scanf_float+0x1c0>
 8008f72:	f1b9 0f00 	cmp.w	r9, #0
 8008f76:	d10e      	bne.n	8008f96 <_scanf_float+0x1c6>
 8008f78:	6822      	ldr	r2, [r4, #0]
 8008f7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f82:	d108      	bne.n	8008f96 <_scanf_float+0x1c6>
 8008f84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f88:	6022      	str	r2, [r4, #0]
 8008f8a:	f04f 0a01 	mov.w	sl, #1
 8008f8e:	e7e3      	b.n	8008f58 <_scanf_float+0x188>
 8008f90:	f1ba 0f02 	cmp.w	sl, #2
 8008f94:	d055      	beq.n	8009042 <_scanf_float+0x272>
 8008f96:	2d01      	cmp	r5, #1
 8008f98:	d002      	beq.n	8008fa0 <_scanf_float+0x1d0>
 8008f9a:	2d04      	cmp	r5, #4
 8008f9c:	f47f af48 	bne.w	8008e30 <_scanf_float+0x60>
 8008fa0:	3501      	adds	r5, #1
 8008fa2:	b2ed      	uxtb	r5, r5
 8008fa4:	e7d8      	b.n	8008f58 <_scanf_float+0x188>
 8008fa6:	f1ba 0f01 	cmp.w	sl, #1
 8008faa:	f47f af41 	bne.w	8008e30 <_scanf_float+0x60>
 8008fae:	f04f 0a02 	mov.w	sl, #2
 8008fb2:	e7d1      	b.n	8008f58 <_scanf_float+0x188>
 8008fb4:	b97d      	cbnz	r5, 8008fd6 <_scanf_float+0x206>
 8008fb6:	f1b9 0f00 	cmp.w	r9, #0
 8008fba:	f47f af3c 	bne.w	8008e36 <_scanf_float+0x66>
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fc4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fc8:	f47f af39 	bne.w	8008e3e <_scanf_float+0x6e>
 8008fcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fd0:	6022      	str	r2, [r4, #0]
 8008fd2:	2501      	movs	r5, #1
 8008fd4:	e7c0      	b.n	8008f58 <_scanf_float+0x188>
 8008fd6:	2d03      	cmp	r5, #3
 8008fd8:	d0e2      	beq.n	8008fa0 <_scanf_float+0x1d0>
 8008fda:	2d05      	cmp	r5, #5
 8008fdc:	e7de      	b.n	8008f9c <_scanf_float+0x1cc>
 8008fde:	2d02      	cmp	r5, #2
 8008fe0:	f47f af26 	bne.w	8008e30 <_scanf_float+0x60>
 8008fe4:	2503      	movs	r5, #3
 8008fe6:	e7b7      	b.n	8008f58 <_scanf_float+0x188>
 8008fe8:	2d06      	cmp	r5, #6
 8008fea:	f47f af21 	bne.w	8008e30 <_scanf_float+0x60>
 8008fee:	2507      	movs	r5, #7
 8008ff0:	e7b2      	b.n	8008f58 <_scanf_float+0x188>
 8008ff2:	6822      	ldr	r2, [r4, #0]
 8008ff4:	0591      	lsls	r1, r2, #22
 8008ff6:	f57f af1b 	bpl.w	8008e30 <_scanf_float+0x60>
 8008ffa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ffe:	6022      	str	r2, [r4, #0]
 8009000:	f8cd 9004 	str.w	r9, [sp, #4]
 8009004:	e7a8      	b.n	8008f58 <_scanf_float+0x188>
 8009006:	6822      	ldr	r2, [r4, #0]
 8009008:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800900c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009010:	d006      	beq.n	8009020 <_scanf_float+0x250>
 8009012:	0550      	lsls	r0, r2, #21
 8009014:	f57f af0c 	bpl.w	8008e30 <_scanf_float+0x60>
 8009018:	f1b9 0f00 	cmp.w	r9, #0
 800901c:	f43f af0f 	beq.w	8008e3e <_scanf_float+0x6e>
 8009020:	0591      	lsls	r1, r2, #22
 8009022:	bf58      	it	pl
 8009024:	9901      	ldrpl	r1, [sp, #4]
 8009026:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800902a:	bf58      	it	pl
 800902c:	eba9 0101 	subpl.w	r1, r9, r1
 8009030:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009034:	bf58      	it	pl
 8009036:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800903a:	6022      	str	r2, [r4, #0]
 800903c:	f04f 0900 	mov.w	r9, #0
 8009040:	e78a      	b.n	8008f58 <_scanf_float+0x188>
 8009042:	f04f 0a03 	mov.w	sl, #3
 8009046:	e787      	b.n	8008f58 <_scanf_float+0x188>
 8009048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800904c:	4639      	mov	r1, r7
 800904e:	4640      	mov	r0, r8
 8009050:	4798      	blx	r3
 8009052:	2800      	cmp	r0, #0
 8009054:	f43f aedf 	beq.w	8008e16 <_scanf_float+0x46>
 8009058:	e6ea      	b.n	8008e30 <_scanf_float+0x60>
 800905a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800905e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009062:	463a      	mov	r2, r7
 8009064:	4640      	mov	r0, r8
 8009066:	4798      	blx	r3
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	3b01      	subs	r3, #1
 800906c:	6123      	str	r3, [r4, #16]
 800906e:	e6ec      	b.n	8008e4a <_scanf_float+0x7a>
 8009070:	1e6b      	subs	r3, r5, #1
 8009072:	2b06      	cmp	r3, #6
 8009074:	d825      	bhi.n	80090c2 <_scanf_float+0x2f2>
 8009076:	2d02      	cmp	r5, #2
 8009078:	d836      	bhi.n	80090e8 <_scanf_float+0x318>
 800907a:	455e      	cmp	r6, fp
 800907c:	f67f aee8 	bls.w	8008e50 <_scanf_float+0x80>
 8009080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009084:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009088:	463a      	mov	r2, r7
 800908a:	4640      	mov	r0, r8
 800908c:	4798      	blx	r3
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	3b01      	subs	r3, #1
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	e7f1      	b.n	800907a <_scanf_float+0x2aa>
 8009096:	9802      	ldr	r0, [sp, #8]
 8009098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800909c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090a0:	9002      	str	r0, [sp, #8]
 80090a2:	463a      	mov	r2, r7
 80090a4:	4640      	mov	r0, r8
 80090a6:	4798      	blx	r3
 80090a8:	6923      	ldr	r3, [r4, #16]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6123      	str	r3, [r4, #16]
 80090ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090b2:	fa5f fa8a 	uxtb.w	sl, sl
 80090b6:	f1ba 0f02 	cmp.w	sl, #2
 80090ba:	d1ec      	bne.n	8009096 <_scanf_float+0x2c6>
 80090bc:	3d03      	subs	r5, #3
 80090be:	b2ed      	uxtb	r5, r5
 80090c0:	1b76      	subs	r6, r6, r5
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	05da      	lsls	r2, r3, #23
 80090c6:	d52f      	bpl.n	8009128 <_scanf_float+0x358>
 80090c8:	055b      	lsls	r3, r3, #21
 80090ca:	d510      	bpl.n	80090ee <_scanf_float+0x31e>
 80090cc:	455e      	cmp	r6, fp
 80090ce:	f67f aebf 	bls.w	8008e50 <_scanf_float+0x80>
 80090d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090da:	463a      	mov	r2, r7
 80090dc:	4640      	mov	r0, r8
 80090de:	4798      	blx	r3
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	3b01      	subs	r3, #1
 80090e4:	6123      	str	r3, [r4, #16]
 80090e6:	e7f1      	b.n	80090cc <_scanf_float+0x2fc>
 80090e8:	46aa      	mov	sl, r5
 80090ea:	9602      	str	r6, [sp, #8]
 80090ec:	e7df      	b.n	80090ae <_scanf_float+0x2de>
 80090ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	2965      	cmp	r1, #101	; 0x65
 80090f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80090fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	d00c      	beq.n	800911c <_scanf_float+0x34c>
 8009102:	2945      	cmp	r1, #69	; 0x45
 8009104:	d00a      	beq.n	800911c <_scanf_float+0x34c>
 8009106:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800910a:	463a      	mov	r2, r7
 800910c:	4640      	mov	r0, r8
 800910e:	4798      	blx	r3
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009116:	3b01      	subs	r3, #1
 8009118:	1eb5      	subs	r5, r6, #2
 800911a:	6123      	str	r3, [r4, #16]
 800911c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009120:	463a      	mov	r2, r7
 8009122:	4640      	mov	r0, r8
 8009124:	4798      	blx	r3
 8009126:	462e      	mov	r6, r5
 8009128:	6825      	ldr	r5, [r4, #0]
 800912a:	f015 0510 	ands.w	r5, r5, #16
 800912e:	d159      	bne.n	80091e4 <_scanf_float+0x414>
 8009130:	7035      	strb	r5, [r6, #0]
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800913c:	d11b      	bne.n	8009176 <_scanf_float+0x3a6>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	454b      	cmp	r3, r9
 8009142:	eba3 0209 	sub.w	r2, r3, r9
 8009146:	d123      	bne.n	8009190 <_scanf_float+0x3c0>
 8009148:	2200      	movs	r2, #0
 800914a:	4659      	mov	r1, fp
 800914c:	4640      	mov	r0, r8
 800914e:	f001 f9e5 	bl	800a51c <_strtod_r>
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	f012 0f02 	tst.w	r2, #2
 800915a:	ec57 6b10 	vmov	r6, r7, d0
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	d021      	beq.n	80091a6 <_scanf_float+0x3d6>
 8009162:	9903      	ldr	r1, [sp, #12]
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	600a      	str	r2, [r1, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	e9c3 6700 	strd	r6, r7, [r3]
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	60e3      	str	r3, [r4, #12]
 8009174:	e66d      	b.n	8008e52 <_scanf_float+0x82>
 8009176:	9b04      	ldr	r3, [sp, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0e5      	beq.n	8009148 <_scanf_float+0x378>
 800917c:	9905      	ldr	r1, [sp, #20]
 800917e:	230a      	movs	r3, #10
 8009180:	462a      	mov	r2, r5
 8009182:	3101      	adds	r1, #1
 8009184:	4640      	mov	r0, r8
 8009186:	f001 fa51 	bl	800a62c <_strtol_r>
 800918a:	9b04      	ldr	r3, [sp, #16]
 800918c:	9e05      	ldr	r6, [sp, #20]
 800918e:	1ac2      	subs	r2, r0, r3
 8009190:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009194:	429e      	cmp	r6, r3
 8009196:	bf28      	it	cs
 8009198:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800919c:	4912      	ldr	r1, [pc, #72]	; (80091e8 <_scanf_float+0x418>)
 800919e:	4630      	mov	r0, r6
 80091a0:	f000 f922 	bl	80093e8 <siprintf>
 80091a4:	e7d0      	b.n	8009148 <_scanf_float+0x378>
 80091a6:	9903      	ldr	r1, [sp, #12]
 80091a8:	f012 0f04 	tst.w	r2, #4
 80091ac:	f103 0204 	add.w	r2, r3, #4
 80091b0:	600a      	str	r2, [r1, #0]
 80091b2:	d1d9      	bne.n	8009168 <_scanf_float+0x398>
 80091b4:	f8d3 8000 	ldr.w	r8, [r3]
 80091b8:	ee10 2a10 	vmov	r2, s0
 80091bc:	ee10 0a10 	vmov	r0, s0
 80091c0:	463b      	mov	r3, r7
 80091c2:	4639      	mov	r1, r7
 80091c4:	f7f7 fcb2 	bl	8000b2c <__aeabi_dcmpun>
 80091c8:	b128      	cbz	r0, 80091d6 <_scanf_float+0x406>
 80091ca:	4808      	ldr	r0, [pc, #32]	; (80091ec <_scanf_float+0x41c>)
 80091cc:	f000 f8c2 	bl	8009354 <nanf>
 80091d0:	ed88 0a00 	vstr	s0, [r8]
 80091d4:	e7cb      	b.n	800916e <_scanf_float+0x39e>
 80091d6:	4630      	mov	r0, r6
 80091d8:	4639      	mov	r1, r7
 80091da:	f7f7 fd05 	bl	8000be8 <__aeabi_d2f>
 80091de:	f8c8 0000 	str.w	r0, [r8]
 80091e2:	e7c4      	b.n	800916e <_scanf_float+0x39e>
 80091e4:	2500      	movs	r5, #0
 80091e6:	e634      	b.n	8008e52 <_scanf_float+0x82>
 80091e8:	0800dba6 	.word	0x0800dba6
 80091ec:	0800e6cb 	.word	0x0800e6cb

080091f0 <_perror_r>:
 80091f0:	6983      	ldr	r3, [r0, #24]
 80091f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f4:	68c4      	ldr	r4, [r0, #12]
 80091f6:	4605      	mov	r5, r0
 80091f8:	460e      	mov	r6, r1
 80091fa:	b90b      	cbnz	r3, 8009200 <_perror_r+0x10>
 80091fc:	f002 fa2e 	bl	800b65c <__sinit>
 8009200:	4b43      	ldr	r3, [pc, #268]	; (8009310 <_perror_r+0x120>)
 8009202:	429c      	cmp	r4, r3
 8009204:	d132      	bne.n	800926c <_perror_r+0x7c>
 8009206:	686c      	ldr	r4, [r5, #4]
 8009208:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920a:	07d8      	lsls	r0, r3, #31
 800920c:	d405      	bmi.n	800921a <_perror_r+0x2a>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	0599      	lsls	r1, r3, #22
 8009212:	d402      	bmi.n	800921a <_perror_r+0x2a>
 8009214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009216:	f002 fe32 	bl	800be7e <__retarget_lock_acquire_recursive>
 800921a:	4621      	mov	r1, r4
 800921c:	4628      	mov	r0, r5
 800921e:	f002 f94b 	bl	800b4b8 <_fflush_r>
 8009222:	bb6e      	cbnz	r6, 8009280 <_perror_r+0x90>
 8009224:	6829      	ldr	r1, [r5, #0]
 8009226:	ab01      	add	r3, sp, #4
 8009228:	2201      	movs	r2, #1
 800922a:	4628      	mov	r0, r5
 800922c:	f000 f96e 	bl	800950c <_strerror_r>
 8009230:	4607      	mov	r7, r0
 8009232:	2800      	cmp	r0, #0
 8009234:	d14f      	bne.n	80092d6 <_perror_r+0xe6>
 8009236:	4837      	ldr	r0, [pc, #220]	; (8009314 <_perror_r+0x124>)
 8009238:	4f36      	ldr	r7, [pc, #216]	; (8009314 <_perror_r+0x124>)
 800923a:	f7f7 f819 	bl	8000270 <strlen>
 800923e:	4606      	mov	r6, r0
 8009240:	b156      	cbz	r6, 8009258 <_perror_r+0x68>
 8009242:	4620      	mov	r0, r4
 8009244:	f002 f974 	bl	800b530 <fileno>
 8009248:	4633      	mov	r3, r6
 800924a:	4601      	mov	r1, r0
 800924c:	463a      	mov	r2, r7
 800924e:	4628      	mov	r0, r5
 8009250:	f001 fa10 	bl	800a674 <_write_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	da51      	bge.n	80092fc <_perror_r+0x10c>
 8009258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800925e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009262:	07d2      	lsls	r2, r2, #31
 8009264:	81a3      	strh	r3, [r4, #12]
 8009266:	d54c      	bpl.n	8009302 <_perror_r+0x112>
 8009268:	b003      	add	sp, #12
 800926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926c:	4b2a      	ldr	r3, [pc, #168]	; (8009318 <_perror_r+0x128>)
 800926e:	429c      	cmp	r4, r3
 8009270:	d101      	bne.n	8009276 <_perror_r+0x86>
 8009272:	68ac      	ldr	r4, [r5, #8]
 8009274:	e7c8      	b.n	8009208 <_perror_r+0x18>
 8009276:	4b29      	ldr	r3, [pc, #164]	; (800931c <_perror_r+0x12c>)
 8009278:	429c      	cmp	r4, r3
 800927a:	bf08      	it	eq
 800927c:	68ec      	ldreq	r4, [r5, #12]
 800927e:	e7c3      	b.n	8009208 <_perror_r+0x18>
 8009280:	7833      	ldrb	r3, [r6, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d0ce      	beq.n	8009224 <_perror_r+0x34>
 8009286:	4630      	mov	r0, r6
 8009288:	f7f6 fff2 	bl	8000270 <strlen>
 800928c:	4607      	mov	r7, r0
 800928e:	b157      	cbz	r7, 80092a6 <_perror_r+0xb6>
 8009290:	4620      	mov	r0, r4
 8009292:	f002 f94d 	bl	800b530 <fileno>
 8009296:	463b      	mov	r3, r7
 8009298:	4601      	mov	r1, r0
 800929a:	4632      	mov	r2, r6
 800929c:	4628      	mov	r0, r5
 800929e:	f001 f9e9 	bl	800a674 <_write_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	da14      	bge.n	80092d0 <_perror_r+0xe0>
 80092a6:	481e      	ldr	r0, [pc, #120]	; (8009320 <_perror_r+0x130>)
 80092a8:	4f1d      	ldr	r7, [pc, #116]	; (8009320 <_perror_r+0x130>)
 80092aa:	f7f6 ffe1 	bl	8000270 <strlen>
 80092ae:	4606      	mov	r6, r0
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	d0b7      	beq.n	8009224 <_perror_r+0x34>
 80092b4:	4620      	mov	r0, r4
 80092b6:	f002 f93b 	bl	800b530 <fileno>
 80092ba:	4633      	mov	r3, r6
 80092bc:	4601      	mov	r1, r0
 80092be:	463a      	mov	r2, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	f001 f9d7 	bl	800a674 <_write_r>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	dbac      	blt.n	8009224 <_perror_r+0x34>
 80092ca:	1a36      	subs	r6, r6, r0
 80092cc:	4407      	add	r7, r0
 80092ce:	e7ef      	b.n	80092b0 <_perror_r+0xc0>
 80092d0:	1a3f      	subs	r7, r7, r0
 80092d2:	4406      	add	r6, r0
 80092d4:	e7db      	b.n	800928e <_perror_r+0x9e>
 80092d6:	f7f6 ffcb 	bl	8000270 <strlen>
 80092da:	4606      	mov	r6, r0
 80092dc:	2e00      	cmp	r6, #0
 80092de:	d0aa      	beq.n	8009236 <_perror_r+0x46>
 80092e0:	4620      	mov	r0, r4
 80092e2:	f002 f925 	bl	800b530 <fileno>
 80092e6:	4633      	mov	r3, r6
 80092e8:	4601      	mov	r1, r0
 80092ea:	463a      	mov	r2, r7
 80092ec:	4628      	mov	r0, r5
 80092ee:	f001 f9c1 	bl	800a674 <_write_r>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	db9f      	blt.n	8009236 <_perror_r+0x46>
 80092f6:	1a36      	subs	r6, r6, r0
 80092f8:	4407      	add	r7, r0
 80092fa:	e7ef      	b.n	80092dc <_perror_r+0xec>
 80092fc:	1a36      	subs	r6, r6, r0
 80092fe:	4407      	add	r7, r0
 8009300:	e79e      	b.n	8009240 <_perror_r+0x50>
 8009302:	059b      	lsls	r3, r3, #22
 8009304:	d4b0      	bmi.n	8009268 <_perror_r+0x78>
 8009306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009308:	f002 fdba 	bl	800be80 <__retarget_lock_release_recursive>
 800930c:	e7ac      	b.n	8009268 <_perror_r+0x78>
 800930e:	bf00      	nop
 8009310:	0800e44c 	.word	0x0800e44c
 8009314:	0800e6ca 	.word	0x0800e6ca
 8009318:	0800e46c 	.word	0x0800e46c
 800931c:	0800e42c 	.word	0x0800e42c
 8009320:	0800e69a 	.word	0x0800e69a

08009324 <perror>:
 8009324:	4b02      	ldr	r3, [pc, #8]	; (8009330 <perror+0xc>)
 8009326:	4601      	mov	r1, r0
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	f7ff bf61 	b.w	80091f0 <_perror_r>
 800932e:	bf00      	nop
 8009330:	2000003c 	.word	0x2000003c

08009334 <_sbrk_r>:
 8009334:	b538      	push	{r3, r4, r5, lr}
 8009336:	4d06      	ldr	r5, [pc, #24]	; (8009350 <_sbrk_r+0x1c>)
 8009338:	2300      	movs	r3, #0
 800933a:	4604      	mov	r4, r0
 800933c:	4608      	mov	r0, r1
 800933e:	602b      	str	r3, [r5, #0]
 8009340:	f7f8 fda4 	bl	8001e8c <_sbrk>
 8009344:	1c43      	adds	r3, r0, #1
 8009346:	d102      	bne.n	800934e <_sbrk_r+0x1a>
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	b103      	cbz	r3, 800934e <_sbrk_r+0x1a>
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	200007ec 	.word	0x200007ec

08009354 <nanf>:
 8009354:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800935c <nanf+0x8>
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	7fc00000 	.word	0x7fc00000

08009360 <_raise_r>:
 8009360:	291f      	cmp	r1, #31
 8009362:	b538      	push	{r3, r4, r5, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	460d      	mov	r5, r1
 8009368:	d904      	bls.n	8009374 <_raise_r+0x14>
 800936a:	2316      	movs	r3, #22
 800936c:	6003      	str	r3, [r0, #0]
 800936e:	f04f 30ff 	mov.w	r0, #4294967295
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009376:	b112      	cbz	r2, 800937e <_raise_r+0x1e>
 8009378:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800937c:	b94b      	cbnz	r3, 8009392 <_raise_r+0x32>
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f830 	bl	80093e4 <_getpid_r>
 8009384:	462a      	mov	r2, r5
 8009386:	4601      	mov	r1, r0
 8009388:	4620      	mov	r0, r4
 800938a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800938e:	f000 b817 	b.w	80093c0 <_kill_r>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d00a      	beq.n	80093ac <_raise_r+0x4c>
 8009396:	1c59      	adds	r1, r3, #1
 8009398:	d103      	bne.n	80093a2 <_raise_r+0x42>
 800939a:	2316      	movs	r3, #22
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	2001      	movs	r0, #1
 80093a0:	e7e7      	b.n	8009372 <_raise_r+0x12>
 80093a2:	2400      	movs	r4, #0
 80093a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093a8:	4628      	mov	r0, r5
 80093aa:	4798      	blx	r3
 80093ac:	2000      	movs	r0, #0
 80093ae:	e7e0      	b.n	8009372 <_raise_r+0x12>

080093b0 <raise>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <raise+0xc>)
 80093b2:	4601      	mov	r1, r0
 80093b4:	6818      	ldr	r0, [r3, #0]
 80093b6:	f7ff bfd3 	b.w	8009360 <_raise_r>
 80093ba:	bf00      	nop
 80093bc:	2000003c 	.word	0x2000003c

080093c0 <_kill_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d07      	ldr	r5, [pc, #28]	; (80093e0 <_kill_r+0x20>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	4611      	mov	r1, r2
 80093cc:	602b      	str	r3, [r5, #0]
 80093ce:	f7f8 fcd5 	bl	8001d7c <_kill>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d102      	bne.n	80093dc <_kill_r+0x1c>
 80093d6:	682b      	ldr	r3, [r5, #0]
 80093d8:	b103      	cbz	r3, 80093dc <_kill_r+0x1c>
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	bd38      	pop	{r3, r4, r5, pc}
 80093de:	bf00      	nop
 80093e0:	200007ec 	.word	0x200007ec

080093e4 <_getpid_r>:
 80093e4:	f7f8 bcc2 	b.w	8001d6c <_getpid>

080093e8 <siprintf>:
 80093e8:	b40e      	push	{r1, r2, r3}
 80093ea:	b500      	push	{lr}
 80093ec:	b09c      	sub	sp, #112	; 0x70
 80093ee:	ab1d      	add	r3, sp, #116	; 0x74
 80093f0:	9002      	str	r0, [sp, #8]
 80093f2:	9006      	str	r0, [sp, #24]
 80093f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093f8:	4809      	ldr	r0, [pc, #36]	; (8009420 <siprintf+0x38>)
 80093fa:	9107      	str	r1, [sp, #28]
 80093fc:	9104      	str	r1, [sp, #16]
 80093fe:	4909      	ldr	r1, [pc, #36]	; (8009424 <siprintf+0x3c>)
 8009400:	f853 2b04 	ldr.w	r2, [r3], #4
 8009404:	9105      	str	r1, [sp, #20]
 8009406:	6800      	ldr	r0, [r0, #0]
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	a902      	add	r1, sp, #8
 800940c:	f003 fa9c 	bl	800c948 <_svfiprintf_r>
 8009410:	9b02      	ldr	r3, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	701a      	strb	r2, [r3, #0]
 8009416:	b01c      	add	sp, #112	; 0x70
 8009418:	f85d eb04 	ldr.w	lr, [sp], #4
 800941c:	b003      	add	sp, #12
 800941e:	4770      	bx	lr
 8009420:	2000003c 	.word	0x2000003c
 8009424:	ffff0208 	.word	0xffff0208

08009428 <siscanf>:
 8009428:	b40e      	push	{r1, r2, r3}
 800942a:	b510      	push	{r4, lr}
 800942c:	b09f      	sub	sp, #124	; 0x7c
 800942e:	ac21      	add	r4, sp, #132	; 0x84
 8009430:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009434:	f854 2b04 	ldr.w	r2, [r4], #4
 8009438:	9201      	str	r2, [sp, #4]
 800943a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800943e:	9004      	str	r0, [sp, #16]
 8009440:	9008      	str	r0, [sp, #32]
 8009442:	f7f6 ff15 	bl	8000270 <strlen>
 8009446:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <siscanf+0x50>)
 8009448:	9005      	str	r0, [sp, #20]
 800944a:	9009      	str	r0, [sp, #36]	; 0x24
 800944c:	930d      	str	r3, [sp, #52]	; 0x34
 800944e:	480b      	ldr	r0, [pc, #44]	; (800947c <siscanf+0x54>)
 8009450:	9a01      	ldr	r2, [sp, #4]
 8009452:	6800      	ldr	r0, [r0, #0]
 8009454:	9403      	str	r4, [sp, #12]
 8009456:	2300      	movs	r3, #0
 8009458:	9311      	str	r3, [sp, #68]	; 0x44
 800945a:	9316      	str	r3, [sp, #88]	; 0x58
 800945c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009460:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009464:	a904      	add	r1, sp, #16
 8009466:	4623      	mov	r3, r4
 8009468:	f003 fbc8 	bl	800cbfc <__ssvfiscanf_r>
 800946c:	b01f      	add	sp, #124	; 0x7c
 800946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009472:	b003      	add	sp, #12
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	080094a3 	.word	0x080094a3
 800947c:	2000003c 	.word	0x2000003c

08009480 <__sread>:
 8009480:	b510      	push	{r4, lr}
 8009482:	460c      	mov	r4, r1
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	f003 fe82 	bl	800d190 <_read_r>
 800948c:	2800      	cmp	r0, #0
 800948e:	bfab      	itete	ge
 8009490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009492:	89a3      	ldrhlt	r3, [r4, #12]
 8009494:	181b      	addge	r3, r3, r0
 8009496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800949a:	bfac      	ite	ge
 800949c:	6563      	strge	r3, [r4, #84]	; 0x54
 800949e:	81a3      	strhlt	r3, [r4, #12]
 80094a0:	bd10      	pop	{r4, pc}

080094a2 <__seofread>:
 80094a2:	2000      	movs	r0, #0
 80094a4:	4770      	bx	lr

080094a6 <__swrite>:
 80094a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094aa:	461f      	mov	r7, r3
 80094ac:	898b      	ldrh	r3, [r1, #12]
 80094ae:	05db      	lsls	r3, r3, #23
 80094b0:	4605      	mov	r5, r0
 80094b2:	460c      	mov	r4, r1
 80094b4:	4616      	mov	r6, r2
 80094b6:	d505      	bpl.n	80094c4 <__swrite+0x1e>
 80094b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094bc:	2302      	movs	r3, #2
 80094be:	2200      	movs	r2, #0
 80094c0:	f002 fce0 	bl	800be84 <_lseek_r>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094ce:	81a3      	strh	r3, [r4, #12]
 80094d0:	4632      	mov	r2, r6
 80094d2:	463b      	mov	r3, r7
 80094d4:	4628      	mov	r0, r5
 80094d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094da:	f001 b8cb 	b.w	800a674 <_write_r>

080094de <__sseek>:
 80094de:	b510      	push	{r4, lr}
 80094e0:	460c      	mov	r4, r1
 80094e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e6:	f002 fccd 	bl	800be84 <_lseek_r>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	bf15      	itete	ne
 80094f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80094f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094fa:	81a3      	strheq	r3, [r4, #12]
 80094fc:	bf18      	it	ne
 80094fe:	81a3      	strhne	r3, [r4, #12]
 8009500:	bd10      	pop	{r4, pc}

08009502 <__sclose>:
 8009502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009506:	f001 b8c7 	b.w	800a698 <_close_r>
	...

0800950c <_strerror_r>:
 800950c:	b510      	push	{r4, lr}
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	4611      	mov	r1, r2
 8009514:	288e      	cmp	r0, #142	; 0x8e
 8009516:	f200 8130 	bhi.w	800977a <_strerror_r+0x26e>
 800951a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800951e:	0139      	.short	0x0139
 8009520:	0092008f 	.word	0x0092008f
 8009524:	00960094 	.word	0x00960094
 8009528:	009a0098 	.word	0x009a0098
 800952c:	009e009c 	.word	0x009e009c
 8009530:	00a400a2 	.word	0x00a400a2
 8009534:	00aa00a8 	.word	0x00aa00a8
 8009538:	00ae00ac 	.word	0x00ae00ac
 800953c:	00b0012e 	.word	0x00b0012e
 8009540:	00b400b2 	.word	0x00b400b2
 8009544:	00b800b6 	.word	0x00b800b6
 8009548:	00c000be 	.word	0x00c000be
 800954c:	00c800c6 	.word	0x00c800c6
 8009550:	00cc00ca 	.word	0x00cc00ca
 8009554:	00d200ce 	.word	0x00d200ce
 8009558:	00d800d6 	.word	0x00d800d6
 800955c:	00dc00da 	.word	0x00dc00da
 8009560:	00e000de 	.word	0x00e000de
 8009564:	00e400e2 	.word	0x00e400e2
 8009568:	012e012e 	.word	0x012e012e
 800956c:	012e012e 	.word	0x012e012e
 8009570:	012e012e 	.word	0x012e012e
 8009574:	012e012e 	.word	0x012e012e
 8009578:	00ec00e8 	.word	0x00ec00e8
 800957c:	012e012e 	.word	0x012e012e
 8009580:	012e012e 	.word	0x012e012e
 8009584:	012e012e 	.word	0x012e012e
 8009588:	012e012e 	.word	0x012e012e
 800958c:	012e012e 	.word	0x012e012e
 8009590:	012e012e 	.word	0x012e012e
 8009594:	00ee012e 	.word	0x00ee012e
 8009598:	00f00108 	.word	0x00f00108
 800959c:	012e00f2 	.word	0x012e00f2
 80095a0:	012e012e 	.word	0x012e012e
 80095a4:	012e00f4 	.word	0x012e00f4
 80095a8:	012e012e 	.word	0x012e012e
 80095ac:	012e00f6 	.word	0x012e00f6
 80095b0:	00fa012e 	.word	0x00fa012e
 80095b4:	012e012e 	.word	0x012e012e
 80095b8:	012e00fc 	.word	0x012e00fc
 80095bc:	012e012e 	.word	0x012e012e
 80095c0:	012e012e 	.word	0x012e012e
 80095c4:	012e012e 	.word	0x012e012e
 80095c8:	012e012e 	.word	0x012e012e
 80095cc:	00fe012e 	.word	0x00fe012e
 80095d0:	0100012e 	.word	0x0100012e
 80095d4:	01040102 	.word	0x01040102
 80095d8:	012e012e 	.word	0x012e012e
 80095dc:	012e0126 	.word	0x012e0126
 80095e0:	012e012e 	.word	0x012e012e
 80095e4:	012e012e 	.word	0x012e012e
 80095e8:	012e012e 	.word	0x012e012e
 80095ec:	0114012e 	.word	0x0114012e
 80095f0:	010a0106 	.word	0x010a0106
 80095f4:	010e010c 	.word	0x010e010c
 80095f8:	012e0110 	.word	0x012e0110
 80095fc:	01160112 	.word	0x01160112
 8009600:	00ea011a 	.word	0x00ea011a
 8009604:	012c00c2 	.word	0x012c00c2
 8009608:	00d000ba 	.word	0x00d000ba
 800960c:	00a000bc 	.word	0x00a000bc
 8009610:	012a00a6 	.word	0x012a00a6
 8009614:	012e00f8 	.word	0x012e00f8
 8009618:	00c40118 	.word	0x00c40118
 800961c:	011c011e 	.word	0x011c011e
 8009620:	012e012e 	.word	0x012e012e
 8009624:	012e012e 	.word	0x012e012e
 8009628:	00d4012e 	.word	0x00d4012e
 800962c:	012e012e 	.word	0x012e012e
 8009630:	00e6012e 	.word	0x00e6012e
 8009634:	01200128 	.word	0x01200128
 8009638:	01240122 	.word	0x01240122
 800963c:	4b55      	ldr	r3, [pc, #340]	; (8009794 <_strerror_r+0x288>)
 800963e:	4618      	mov	r0, r3
 8009640:	bd10      	pop	{r4, pc}
 8009642:	4b55      	ldr	r3, [pc, #340]	; (8009798 <_strerror_r+0x28c>)
 8009644:	e7fb      	b.n	800963e <_strerror_r+0x132>
 8009646:	4b55      	ldr	r3, [pc, #340]	; (800979c <_strerror_r+0x290>)
 8009648:	e7f9      	b.n	800963e <_strerror_r+0x132>
 800964a:	4b55      	ldr	r3, [pc, #340]	; (80097a0 <_strerror_r+0x294>)
 800964c:	e7f7      	b.n	800963e <_strerror_r+0x132>
 800964e:	4b55      	ldr	r3, [pc, #340]	; (80097a4 <_strerror_r+0x298>)
 8009650:	e7f5      	b.n	800963e <_strerror_r+0x132>
 8009652:	4b55      	ldr	r3, [pc, #340]	; (80097a8 <_strerror_r+0x29c>)
 8009654:	e7f3      	b.n	800963e <_strerror_r+0x132>
 8009656:	4b55      	ldr	r3, [pc, #340]	; (80097ac <_strerror_r+0x2a0>)
 8009658:	e7f1      	b.n	800963e <_strerror_r+0x132>
 800965a:	4b55      	ldr	r3, [pc, #340]	; (80097b0 <_strerror_r+0x2a4>)
 800965c:	e7ef      	b.n	800963e <_strerror_r+0x132>
 800965e:	4b55      	ldr	r3, [pc, #340]	; (80097b4 <_strerror_r+0x2a8>)
 8009660:	e7ed      	b.n	800963e <_strerror_r+0x132>
 8009662:	4b55      	ldr	r3, [pc, #340]	; (80097b8 <_strerror_r+0x2ac>)
 8009664:	e7eb      	b.n	800963e <_strerror_r+0x132>
 8009666:	4b55      	ldr	r3, [pc, #340]	; (80097bc <_strerror_r+0x2b0>)
 8009668:	e7e9      	b.n	800963e <_strerror_r+0x132>
 800966a:	4b55      	ldr	r3, [pc, #340]	; (80097c0 <_strerror_r+0x2b4>)
 800966c:	e7e7      	b.n	800963e <_strerror_r+0x132>
 800966e:	4b55      	ldr	r3, [pc, #340]	; (80097c4 <_strerror_r+0x2b8>)
 8009670:	e7e5      	b.n	800963e <_strerror_r+0x132>
 8009672:	4b55      	ldr	r3, [pc, #340]	; (80097c8 <_strerror_r+0x2bc>)
 8009674:	e7e3      	b.n	800963e <_strerror_r+0x132>
 8009676:	4b55      	ldr	r3, [pc, #340]	; (80097cc <_strerror_r+0x2c0>)
 8009678:	e7e1      	b.n	800963e <_strerror_r+0x132>
 800967a:	4b55      	ldr	r3, [pc, #340]	; (80097d0 <_strerror_r+0x2c4>)
 800967c:	e7df      	b.n	800963e <_strerror_r+0x132>
 800967e:	4b55      	ldr	r3, [pc, #340]	; (80097d4 <_strerror_r+0x2c8>)
 8009680:	e7dd      	b.n	800963e <_strerror_r+0x132>
 8009682:	4b55      	ldr	r3, [pc, #340]	; (80097d8 <_strerror_r+0x2cc>)
 8009684:	e7db      	b.n	800963e <_strerror_r+0x132>
 8009686:	4b55      	ldr	r3, [pc, #340]	; (80097dc <_strerror_r+0x2d0>)
 8009688:	e7d9      	b.n	800963e <_strerror_r+0x132>
 800968a:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <_strerror_r+0x2d4>)
 800968c:	e7d7      	b.n	800963e <_strerror_r+0x132>
 800968e:	4b55      	ldr	r3, [pc, #340]	; (80097e4 <_strerror_r+0x2d8>)
 8009690:	e7d5      	b.n	800963e <_strerror_r+0x132>
 8009692:	4b55      	ldr	r3, [pc, #340]	; (80097e8 <_strerror_r+0x2dc>)
 8009694:	e7d3      	b.n	800963e <_strerror_r+0x132>
 8009696:	4b55      	ldr	r3, [pc, #340]	; (80097ec <_strerror_r+0x2e0>)
 8009698:	e7d1      	b.n	800963e <_strerror_r+0x132>
 800969a:	4b55      	ldr	r3, [pc, #340]	; (80097f0 <_strerror_r+0x2e4>)
 800969c:	e7cf      	b.n	800963e <_strerror_r+0x132>
 800969e:	4b55      	ldr	r3, [pc, #340]	; (80097f4 <_strerror_r+0x2e8>)
 80096a0:	e7cd      	b.n	800963e <_strerror_r+0x132>
 80096a2:	4b55      	ldr	r3, [pc, #340]	; (80097f8 <_strerror_r+0x2ec>)
 80096a4:	e7cb      	b.n	800963e <_strerror_r+0x132>
 80096a6:	4b55      	ldr	r3, [pc, #340]	; (80097fc <_strerror_r+0x2f0>)
 80096a8:	e7c9      	b.n	800963e <_strerror_r+0x132>
 80096aa:	4b55      	ldr	r3, [pc, #340]	; (8009800 <_strerror_r+0x2f4>)
 80096ac:	e7c7      	b.n	800963e <_strerror_r+0x132>
 80096ae:	4b55      	ldr	r3, [pc, #340]	; (8009804 <_strerror_r+0x2f8>)
 80096b0:	e7c5      	b.n	800963e <_strerror_r+0x132>
 80096b2:	4b55      	ldr	r3, [pc, #340]	; (8009808 <_strerror_r+0x2fc>)
 80096b4:	e7c3      	b.n	800963e <_strerror_r+0x132>
 80096b6:	4b55      	ldr	r3, [pc, #340]	; (800980c <_strerror_r+0x300>)
 80096b8:	e7c1      	b.n	800963e <_strerror_r+0x132>
 80096ba:	4b55      	ldr	r3, [pc, #340]	; (8009810 <_strerror_r+0x304>)
 80096bc:	e7bf      	b.n	800963e <_strerror_r+0x132>
 80096be:	4b55      	ldr	r3, [pc, #340]	; (8009814 <_strerror_r+0x308>)
 80096c0:	e7bd      	b.n	800963e <_strerror_r+0x132>
 80096c2:	4b55      	ldr	r3, [pc, #340]	; (8009818 <_strerror_r+0x30c>)
 80096c4:	e7bb      	b.n	800963e <_strerror_r+0x132>
 80096c6:	4b55      	ldr	r3, [pc, #340]	; (800981c <_strerror_r+0x310>)
 80096c8:	e7b9      	b.n	800963e <_strerror_r+0x132>
 80096ca:	4b55      	ldr	r3, [pc, #340]	; (8009820 <_strerror_r+0x314>)
 80096cc:	e7b7      	b.n	800963e <_strerror_r+0x132>
 80096ce:	4b55      	ldr	r3, [pc, #340]	; (8009824 <_strerror_r+0x318>)
 80096d0:	e7b5      	b.n	800963e <_strerror_r+0x132>
 80096d2:	4b55      	ldr	r3, [pc, #340]	; (8009828 <_strerror_r+0x31c>)
 80096d4:	e7b3      	b.n	800963e <_strerror_r+0x132>
 80096d6:	4b55      	ldr	r3, [pc, #340]	; (800982c <_strerror_r+0x320>)
 80096d8:	e7b1      	b.n	800963e <_strerror_r+0x132>
 80096da:	4b55      	ldr	r3, [pc, #340]	; (8009830 <_strerror_r+0x324>)
 80096dc:	e7af      	b.n	800963e <_strerror_r+0x132>
 80096de:	4b55      	ldr	r3, [pc, #340]	; (8009834 <_strerror_r+0x328>)
 80096e0:	e7ad      	b.n	800963e <_strerror_r+0x132>
 80096e2:	4b55      	ldr	r3, [pc, #340]	; (8009838 <_strerror_r+0x32c>)
 80096e4:	e7ab      	b.n	800963e <_strerror_r+0x132>
 80096e6:	4b55      	ldr	r3, [pc, #340]	; (800983c <_strerror_r+0x330>)
 80096e8:	e7a9      	b.n	800963e <_strerror_r+0x132>
 80096ea:	4b55      	ldr	r3, [pc, #340]	; (8009840 <_strerror_r+0x334>)
 80096ec:	e7a7      	b.n	800963e <_strerror_r+0x132>
 80096ee:	4b55      	ldr	r3, [pc, #340]	; (8009844 <_strerror_r+0x338>)
 80096f0:	e7a5      	b.n	800963e <_strerror_r+0x132>
 80096f2:	4b55      	ldr	r3, [pc, #340]	; (8009848 <_strerror_r+0x33c>)
 80096f4:	e7a3      	b.n	800963e <_strerror_r+0x132>
 80096f6:	4b55      	ldr	r3, [pc, #340]	; (800984c <_strerror_r+0x340>)
 80096f8:	e7a1      	b.n	800963e <_strerror_r+0x132>
 80096fa:	4b55      	ldr	r3, [pc, #340]	; (8009850 <_strerror_r+0x344>)
 80096fc:	e79f      	b.n	800963e <_strerror_r+0x132>
 80096fe:	4b55      	ldr	r3, [pc, #340]	; (8009854 <_strerror_r+0x348>)
 8009700:	e79d      	b.n	800963e <_strerror_r+0x132>
 8009702:	4b55      	ldr	r3, [pc, #340]	; (8009858 <_strerror_r+0x34c>)
 8009704:	e79b      	b.n	800963e <_strerror_r+0x132>
 8009706:	4b55      	ldr	r3, [pc, #340]	; (800985c <_strerror_r+0x350>)
 8009708:	e799      	b.n	800963e <_strerror_r+0x132>
 800970a:	4b55      	ldr	r3, [pc, #340]	; (8009860 <_strerror_r+0x354>)
 800970c:	e797      	b.n	800963e <_strerror_r+0x132>
 800970e:	4b55      	ldr	r3, [pc, #340]	; (8009864 <_strerror_r+0x358>)
 8009710:	e795      	b.n	800963e <_strerror_r+0x132>
 8009712:	4b55      	ldr	r3, [pc, #340]	; (8009868 <_strerror_r+0x35c>)
 8009714:	e793      	b.n	800963e <_strerror_r+0x132>
 8009716:	4b55      	ldr	r3, [pc, #340]	; (800986c <_strerror_r+0x360>)
 8009718:	e791      	b.n	800963e <_strerror_r+0x132>
 800971a:	4b55      	ldr	r3, [pc, #340]	; (8009870 <_strerror_r+0x364>)
 800971c:	e78f      	b.n	800963e <_strerror_r+0x132>
 800971e:	4b55      	ldr	r3, [pc, #340]	; (8009874 <_strerror_r+0x368>)
 8009720:	e78d      	b.n	800963e <_strerror_r+0x132>
 8009722:	4b55      	ldr	r3, [pc, #340]	; (8009878 <_strerror_r+0x36c>)
 8009724:	e78b      	b.n	800963e <_strerror_r+0x132>
 8009726:	4b55      	ldr	r3, [pc, #340]	; (800987c <_strerror_r+0x370>)
 8009728:	e789      	b.n	800963e <_strerror_r+0x132>
 800972a:	4b55      	ldr	r3, [pc, #340]	; (8009880 <_strerror_r+0x374>)
 800972c:	e787      	b.n	800963e <_strerror_r+0x132>
 800972e:	4b55      	ldr	r3, [pc, #340]	; (8009884 <_strerror_r+0x378>)
 8009730:	e785      	b.n	800963e <_strerror_r+0x132>
 8009732:	4b55      	ldr	r3, [pc, #340]	; (8009888 <_strerror_r+0x37c>)
 8009734:	e783      	b.n	800963e <_strerror_r+0x132>
 8009736:	4b55      	ldr	r3, [pc, #340]	; (800988c <_strerror_r+0x380>)
 8009738:	e781      	b.n	800963e <_strerror_r+0x132>
 800973a:	4b55      	ldr	r3, [pc, #340]	; (8009890 <_strerror_r+0x384>)
 800973c:	e77f      	b.n	800963e <_strerror_r+0x132>
 800973e:	4b55      	ldr	r3, [pc, #340]	; (8009894 <_strerror_r+0x388>)
 8009740:	e77d      	b.n	800963e <_strerror_r+0x132>
 8009742:	4b55      	ldr	r3, [pc, #340]	; (8009898 <_strerror_r+0x38c>)
 8009744:	e77b      	b.n	800963e <_strerror_r+0x132>
 8009746:	4b55      	ldr	r3, [pc, #340]	; (800989c <_strerror_r+0x390>)
 8009748:	e779      	b.n	800963e <_strerror_r+0x132>
 800974a:	4b55      	ldr	r3, [pc, #340]	; (80098a0 <_strerror_r+0x394>)
 800974c:	e777      	b.n	800963e <_strerror_r+0x132>
 800974e:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <_strerror_r+0x398>)
 8009750:	e775      	b.n	800963e <_strerror_r+0x132>
 8009752:	4b55      	ldr	r3, [pc, #340]	; (80098a8 <_strerror_r+0x39c>)
 8009754:	e773      	b.n	800963e <_strerror_r+0x132>
 8009756:	4b55      	ldr	r3, [pc, #340]	; (80098ac <_strerror_r+0x3a0>)
 8009758:	e771      	b.n	800963e <_strerror_r+0x132>
 800975a:	4b55      	ldr	r3, [pc, #340]	; (80098b0 <_strerror_r+0x3a4>)
 800975c:	e76f      	b.n	800963e <_strerror_r+0x132>
 800975e:	4b55      	ldr	r3, [pc, #340]	; (80098b4 <_strerror_r+0x3a8>)
 8009760:	e76d      	b.n	800963e <_strerror_r+0x132>
 8009762:	4b55      	ldr	r3, [pc, #340]	; (80098b8 <_strerror_r+0x3ac>)
 8009764:	e76b      	b.n	800963e <_strerror_r+0x132>
 8009766:	4b55      	ldr	r3, [pc, #340]	; (80098bc <_strerror_r+0x3b0>)
 8009768:	e769      	b.n	800963e <_strerror_r+0x132>
 800976a:	4b55      	ldr	r3, [pc, #340]	; (80098c0 <_strerror_r+0x3b4>)
 800976c:	e767      	b.n	800963e <_strerror_r+0x132>
 800976e:	4b55      	ldr	r3, [pc, #340]	; (80098c4 <_strerror_r+0x3b8>)
 8009770:	e765      	b.n	800963e <_strerror_r+0x132>
 8009772:	4b55      	ldr	r3, [pc, #340]	; (80098c8 <_strerror_r+0x3bc>)
 8009774:	e763      	b.n	800963e <_strerror_r+0x132>
 8009776:	4b55      	ldr	r3, [pc, #340]	; (80098cc <_strerror_r+0x3c0>)
 8009778:	e761      	b.n	800963e <_strerror_r+0x132>
 800977a:	2b00      	cmp	r3, #0
 800977c:	bf14      	ite	ne
 800977e:	461a      	movne	r2, r3
 8009780:	4622      	moveq	r2, r4
 8009782:	f000 ff55 	bl	800a630 <_user_strerror>
 8009786:	4b52      	ldr	r3, [pc, #328]	; (80098d0 <_strerror_r+0x3c4>)
 8009788:	2800      	cmp	r0, #0
 800978a:	bf18      	it	ne
 800978c:	4603      	movne	r3, r0
 800978e:	e756      	b.n	800963e <_strerror_r+0x132>
 8009790:	4b50      	ldr	r3, [pc, #320]	; (80098d4 <_strerror_r+0x3c8>)
 8009792:	e754      	b.n	800963e <_strerror_r+0x132>
 8009794:	0800dbab 	.word	0x0800dbab
 8009798:	0800dbb5 	.word	0x0800dbb5
 800979c:	0800dbcf 	.word	0x0800dbcf
 80097a0:	0800dbdf 	.word	0x0800dbdf
 80097a4:	0800dbf7 	.word	0x0800dbf7
 80097a8:	0800dc01 	.word	0x0800dc01
 80097ac:	0800dc1b 	.word	0x0800dc1b
 80097b0:	0800dc2d 	.word	0x0800dc2d
 80097b4:	0800dc3f 	.word	0x0800dc3f
 80097b8:	0800dc58 	.word	0x0800dc58
 80097bc:	0800dc68 	.word	0x0800dc68
 80097c0:	0800dc74 	.word	0x0800dc74
 80097c4:	0800dc91 	.word	0x0800dc91
 80097c8:	0800dca3 	.word	0x0800dca3
 80097cc:	0800dcb4 	.word	0x0800dcb4
 80097d0:	0800dcc6 	.word	0x0800dcc6
 80097d4:	0800dcd2 	.word	0x0800dcd2
 80097d8:	0800dcea 	.word	0x0800dcea
 80097dc:	0800dcf6 	.word	0x0800dcf6
 80097e0:	0800dd08 	.word	0x0800dd08
 80097e4:	0800dd17 	.word	0x0800dd17
 80097e8:	0800dd27 	.word	0x0800dd27
 80097ec:	0800dd34 	.word	0x0800dd34
 80097f0:	0800dd53 	.word	0x0800dd53
 80097f4:	0800dd62 	.word	0x0800dd62
 80097f8:	0800dd73 	.word	0x0800dd73
 80097fc:	0800dd97 	.word	0x0800dd97
 8009800:	0800ddb5 	.word	0x0800ddb5
 8009804:	0800ddd3 	.word	0x0800ddd3
 8009808:	0800ddf3 	.word	0x0800ddf3
 800980c:	0800de0a 	.word	0x0800de0a
 8009810:	0800de19 	.word	0x0800de19
 8009814:	0800de28 	.word	0x0800de28
 8009818:	0800de3c 	.word	0x0800de3c
 800981c:	0800de54 	.word	0x0800de54
 8009820:	0800de62 	.word	0x0800de62
 8009824:	0800de6f 	.word	0x0800de6f
 8009828:	0800de85 	.word	0x0800de85
 800982c:	0800de94 	.word	0x0800de94
 8009830:	0800dea0 	.word	0x0800dea0
 8009834:	0800decf 	.word	0x0800decf
 8009838:	0800dee0 	.word	0x0800dee0
 800983c:	0800defb 	.word	0x0800defb
 8009840:	0800df0e 	.word	0x0800df0e
 8009844:	0800df24 	.word	0x0800df24
 8009848:	0800df2d 	.word	0x0800df2d
 800984c:	0800df44 	.word	0x0800df44
 8009850:	0800df4c 	.word	0x0800df4c
 8009854:	0800df59 	.word	0x0800df59
 8009858:	0800df6e 	.word	0x0800df6e
 800985c:	0800df82 	.word	0x0800df82
 8009860:	0800df9a 	.word	0x0800df9a
 8009864:	0800dfa9 	.word	0x0800dfa9
 8009868:	0800dfba 	.word	0x0800dfba
 800986c:	0800dfcd 	.word	0x0800dfcd
 8009870:	0800dfd9 	.word	0x0800dfd9
 8009874:	0800dff2 	.word	0x0800dff2
 8009878:	0800e006 	.word	0x0800e006
 800987c:	0800e021 	.word	0x0800e021
 8009880:	0800e039 	.word	0x0800e039
 8009884:	0800e053 	.word	0x0800e053
 8009888:	0800e05b 	.word	0x0800e05b
 800988c:	0800e08b 	.word	0x0800e08b
 8009890:	0800e0aa 	.word	0x0800e0aa
 8009894:	0800e0c9 	.word	0x0800e0c9
 8009898:	0800e0e0 	.word	0x0800e0e0
 800989c:	0800e0f3 	.word	0x0800e0f3
 80098a0:	0800e10c 	.word	0x0800e10c
 80098a4:	0800e123 	.word	0x0800e123
 80098a8:	0800e139 	.word	0x0800e139
 80098ac:	0800e15a 	.word	0x0800e15a
 80098b0:	0800e172 	.word	0x0800e172
 80098b4:	0800e18e 	.word	0x0800e18e
 80098b8:	0800e1a1 	.word	0x0800e1a1
 80098bc:	0800e1b7 	.word	0x0800e1b7
 80098c0:	0800e1cb 	.word	0x0800e1cb
 80098c4:	0800e1ed 	.word	0x0800e1ed
 80098c8:	0800e213 	.word	0x0800e213
 80098cc:	0800e224 	.word	0x0800e224
 80098d0:	0800e6cb 	.word	0x0800e6cb
 80098d4:	0800e239 	.word	0x0800e239

080098d8 <sulp>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4604      	mov	r4, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	ec45 4b10 	vmov	d0, r4, r5
 80098e2:	4616      	mov	r6, r2
 80098e4:	f002 fe70 	bl	800c5c8 <__ulp>
 80098e8:	ec51 0b10 	vmov	r0, r1, d0
 80098ec:	b17e      	cbz	r6, 800990e <sulp+0x36>
 80098ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dd09      	ble.n	800990e <sulp+0x36>
 80098fa:	051b      	lsls	r3, r3, #20
 80098fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009900:	2400      	movs	r4, #0
 8009902:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009906:	4622      	mov	r2, r4
 8009908:	462b      	mov	r3, r5
 800990a:	f7f6 fe75 	bl	80005f8 <__aeabi_dmul>
 800990e:	bd70      	pop	{r4, r5, r6, pc}

08009910 <_strtod_l>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ed2d 8b02 	vpush	{d8}
 8009918:	b09d      	sub	sp, #116	; 0x74
 800991a:	461f      	mov	r7, r3
 800991c:	2300      	movs	r3, #0
 800991e:	9318      	str	r3, [sp, #96]	; 0x60
 8009920:	4ba2      	ldr	r3, [pc, #648]	; (8009bac <_strtod_l+0x29c>)
 8009922:	9213      	str	r2, [sp, #76]	; 0x4c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	9305      	str	r3, [sp, #20]
 8009928:	4604      	mov	r4, r0
 800992a:	4618      	mov	r0, r3
 800992c:	4688      	mov	r8, r1
 800992e:	f7f6 fc9f 	bl	8000270 <strlen>
 8009932:	f04f 0a00 	mov.w	sl, #0
 8009936:	4605      	mov	r5, r0
 8009938:	f04f 0b00 	mov.w	fp, #0
 800993c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	2a2b      	cmp	r2, #43	; 0x2b
 8009946:	d04e      	beq.n	80099e6 <_strtod_l+0xd6>
 8009948:	d83b      	bhi.n	80099c2 <_strtod_l+0xb2>
 800994a:	2a0d      	cmp	r2, #13
 800994c:	d834      	bhi.n	80099b8 <_strtod_l+0xa8>
 800994e:	2a08      	cmp	r2, #8
 8009950:	d834      	bhi.n	80099bc <_strtod_l+0xac>
 8009952:	2a00      	cmp	r2, #0
 8009954:	d03e      	beq.n	80099d4 <_strtod_l+0xc4>
 8009956:	2300      	movs	r3, #0
 8009958:	930a      	str	r3, [sp, #40]	; 0x28
 800995a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800995c:	7833      	ldrb	r3, [r6, #0]
 800995e:	2b30      	cmp	r3, #48	; 0x30
 8009960:	f040 80b0 	bne.w	8009ac4 <_strtod_l+0x1b4>
 8009964:	7873      	ldrb	r3, [r6, #1]
 8009966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800996a:	2b58      	cmp	r3, #88	; 0x58
 800996c:	d168      	bne.n	8009a40 <_strtod_l+0x130>
 800996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009970:	9301      	str	r3, [sp, #4]
 8009972:	ab18      	add	r3, sp, #96	; 0x60
 8009974:	9702      	str	r7, [sp, #8]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4a8d      	ldr	r2, [pc, #564]	; (8009bb0 <_strtod_l+0x2a0>)
 800997a:	ab19      	add	r3, sp, #100	; 0x64
 800997c:	a917      	add	r1, sp, #92	; 0x5c
 800997e:	4620      	mov	r0, r4
 8009980:	f001 ff70 	bl	800b864 <__gethex>
 8009984:	f010 0707 	ands.w	r7, r0, #7
 8009988:	4605      	mov	r5, r0
 800998a:	d005      	beq.n	8009998 <_strtod_l+0x88>
 800998c:	2f06      	cmp	r7, #6
 800998e:	d12c      	bne.n	80099ea <_strtod_l+0xda>
 8009990:	3601      	adds	r6, #1
 8009992:	2300      	movs	r3, #0
 8009994:	9617      	str	r6, [sp, #92]	; 0x5c
 8009996:	930a      	str	r3, [sp, #40]	; 0x28
 8009998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 8590 	bne.w	800a4c0 <_strtod_l+0xbb0>
 80099a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a2:	b1eb      	cbz	r3, 80099e0 <_strtod_l+0xd0>
 80099a4:	4652      	mov	r2, sl
 80099a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80099aa:	ec43 2b10 	vmov	d0, r2, r3
 80099ae:	b01d      	add	sp, #116	; 0x74
 80099b0:	ecbd 8b02 	vpop	{d8}
 80099b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b8:	2a20      	cmp	r2, #32
 80099ba:	d1cc      	bne.n	8009956 <_strtod_l+0x46>
 80099bc:	3301      	adds	r3, #1
 80099be:	9317      	str	r3, [sp, #92]	; 0x5c
 80099c0:	e7be      	b.n	8009940 <_strtod_l+0x30>
 80099c2:	2a2d      	cmp	r2, #45	; 0x2d
 80099c4:	d1c7      	bne.n	8009956 <_strtod_l+0x46>
 80099c6:	2201      	movs	r2, #1
 80099c8:	920a      	str	r2, [sp, #40]	; 0x28
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1c2      	bne.n	800995a <_strtod_l+0x4a>
 80099d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80099d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 856e 	bne.w	800a4bc <_strtod_l+0xbac>
 80099e0:	4652      	mov	r2, sl
 80099e2:	465b      	mov	r3, fp
 80099e4:	e7e1      	b.n	80099aa <_strtod_l+0x9a>
 80099e6:	2200      	movs	r2, #0
 80099e8:	e7ee      	b.n	80099c8 <_strtod_l+0xb8>
 80099ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80099ec:	b13a      	cbz	r2, 80099fe <_strtod_l+0xee>
 80099ee:	2135      	movs	r1, #53	; 0x35
 80099f0:	a81a      	add	r0, sp, #104	; 0x68
 80099f2:	f002 fef4 	bl	800c7de <__copybits>
 80099f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80099f8:	4620      	mov	r0, r4
 80099fa:	f002 fab3 	bl	800bf64 <_Bfree>
 80099fe:	3f01      	subs	r7, #1
 8009a00:	2f04      	cmp	r7, #4
 8009a02:	d806      	bhi.n	8009a12 <_strtod_l+0x102>
 8009a04:	e8df f007 	tbb	[pc, r7]
 8009a08:	1714030a 	.word	0x1714030a
 8009a0c:	0a          	.byte	0x0a
 8009a0d:	00          	.byte	0x00
 8009a0e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009a12:	0728      	lsls	r0, r5, #28
 8009a14:	d5c0      	bpl.n	8009998 <_strtod_l+0x88>
 8009a16:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009a1a:	e7bd      	b.n	8009998 <_strtod_l+0x88>
 8009a1c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009a20:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009a22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009a26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009a2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009a2e:	e7f0      	b.n	8009a12 <_strtod_l+0x102>
 8009a30:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009bb4 <_strtod_l+0x2a4>
 8009a34:	e7ed      	b.n	8009a12 <_strtod_l+0x102>
 8009a36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009a3a:	f04f 3aff 	mov.w	sl, #4294967295
 8009a3e:	e7e8      	b.n	8009a12 <_strtod_l+0x102>
 8009a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b30      	cmp	r3, #48	; 0x30
 8009a4a:	d0f9      	beq.n	8009a40 <_strtod_l+0x130>
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0a3      	beq.n	8009998 <_strtod_l+0x88>
 8009a50:	2301      	movs	r3, #1
 8009a52:	f04f 0900 	mov.w	r9, #0
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a5a:	9308      	str	r3, [sp, #32]
 8009a5c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a60:	464f      	mov	r7, r9
 8009a62:	220a      	movs	r2, #10
 8009a64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009a66:	7806      	ldrb	r6, [r0, #0]
 8009a68:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a6c:	b2d9      	uxtb	r1, r3
 8009a6e:	2909      	cmp	r1, #9
 8009a70:	d92a      	bls.n	8009ac8 <_strtod_l+0x1b8>
 8009a72:	9905      	ldr	r1, [sp, #20]
 8009a74:	462a      	mov	r2, r5
 8009a76:	f003 fbdf 	bl	800d238 <strncmp>
 8009a7a:	b398      	cbz	r0, 8009ae4 <_strtod_l+0x1d4>
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4632      	mov	r2, r6
 8009a80:	463d      	mov	r5, r7
 8009a82:	9005      	str	r0, [sp, #20]
 8009a84:	4603      	mov	r3, r0
 8009a86:	2a65      	cmp	r2, #101	; 0x65
 8009a88:	d001      	beq.n	8009a8e <_strtod_l+0x17e>
 8009a8a:	2a45      	cmp	r2, #69	; 0x45
 8009a8c:	d118      	bne.n	8009ac0 <_strtod_l+0x1b0>
 8009a8e:	b91d      	cbnz	r5, 8009a98 <_strtod_l+0x188>
 8009a90:	9a04      	ldr	r2, [sp, #16]
 8009a92:	4302      	orrs	r2, r0
 8009a94:	d09e      	beq.n	80099d4 <_strtod_l+0xc4>
 8009a96:	2500      	movs	r5, #0
 8009a98:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009a9c:	f108 0201 	add.w	r2, r8, #1
 8009aa0:	9217      	str	r2, [sp, #92]	; 0x5c
 8009aa2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009aa6:	2a2b      	cmp	r2, #43	; 0x2b
 8009aa8:	d075      	beq.n	8009b96 <_strtod_l+0x286>
 8009aaa:	2a2d      	cmp	r2, #45	; 0x2d
 8009aac:	d07b      	beq.n	8009ba6 <_strtod_l+0x296>
 8009aae:	f04f 0c00 	mov.w	ip, #0
 8009ab2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009ab6:	2909      	cmp	r1, #9
 8009ab8:	f240 8082 	bls.w	8009bc0 <_strtod_l+0x2b0>
 8009abc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ac0:	2600      	movs	r6, #0
 8009ac2:	e09d      	b.n	8009c00 <_strtod_l+0x2f0>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e7c4      	b.n	8009a52 <_strtod_l+0x142>
 8009ac8:	2f08      	cmp	r7, #8
 8009aca:	bfd8      	it	le
 8009acc:	9907      	ldrle	r1, [sp, #28]
 8009ace:	f100 0001 	add.w	r0, r0, #1
 8009ad2:	bfda      	itte	le
 8009ad4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ad8:	9307      	strle	r3, [sp, #28]
 8009ada:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009ade:	3701      	adds	r7, #1
 8009ae0:	9017      	str	r0, [sp, #92]	; 0x5c
 8009ae2:	e7bf      	b.n	8009a64 <_strtod_l+0x154>
 8009ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ae6:	195a      	adds	r2, r3, r5
 8009ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009aea:	5d5a      	ldrb	r2, [r3, r5]
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	d037      	beq.n	8009b60 <_strtod_l+0x250>
 8009af0:	9005      	str	r0, [sp, #20]
 8009af2:	463d      	mov	r5, r7
 8009af4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d912      	bls.n	8009b22 <_strtod_l+0x212>
 8009afc:	2301      	movs	r3, #1
 8009afe:	e7c2      	b.n	8009a86 <_strtod_l+0x176>
 8009b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b06:	785a      	ldrb	r2, [r3, #1]
 8009b08:	3001      	adds	r0, #1
 8009b0a:	2a30      	cmp	r2, #48	; 0x30
 8009b0c:	d0f8      	beq.n	8009b00 <_strtod_l+0x1f0>
 8009b0e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009b12:	2b08      	cmp	r3, #8
 8009b14:	f200 84d9 	bhi.w	800a4ca <_strtod_l+0xbba>
 8009b18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b1a:	9005      	str	r0, [sp, #20]
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	9308      	str	r3, [sp, #32]
 8009b20:	4605      	mov	r5, r0
 8009b22:	3a30      	subs	r2, #48	; 0x30
 8009b24:	f100 0301 	add.w	r3, r0, #1
 8009b28:	d014      	beq.n	8009b54 <_strtod_l+0x244>
 8009b2a:	9905      	ldr	r1, [sp, #20]
 8009b2c:	4419      	add	r1, r3
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	462b      	mov	r3, r5
 8009b32:	eb00 0e05 	add.w	lr, r0, r5
 8009b36:	210a      	movs	r1, #10
 8009b38:	4573      	cmp	r3, lr
 8009b3a:	d113      	bne.n	8009b64 <_strtod_l+0x254>
 8009b3c:	182b      	adds	r3, r5, r0
 8009b3e:	2b08      	cmp	r3, #8
 8009b40:	f105 0501 	add.w	r5, r5, #1
 8009b44:	4405      	add	r5, r0
 8009b46:	dc1c      	bgt.n	8009b82 <_strtod_l+0x272>
 8009b48:	9907      	ldr	r1, [sp, #28]
 8009b4a:	230a      	movs	r3, #10
 8009b4c:	fb03 2301 	mla	r3, r3, r1, r2
 8009b50:	9307      	str	r3, [sp, #28]
 8009b52:	2300      	movs	r3, #0
 8009b54:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b56:	1c51      	adds	r1, r2, #1
 8009b58:	9117      	str	r1, [sp, #92]	; 0x5c
 8009b5a:	7852      	ldrb	r2, [r2, #1]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	e7c9      	b.n	8009af4 <_strtod_l+0x1e4>
 8009b60:	4638      	mov	r0, r7
 8009b62:	e7d2      	b.n	8009b0a <_strtod_l+0x1fa>
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	dc04      	bgt.n	8009b72 <_strtod_l+0x262>
 8009b68:	9e07      	ldr	r6, [sp, #28]
 8009b6a:	434e      	muls	r6, r1
 8009b6c:	9607      	str	r6, [sp, #28]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	e7e2      	b.n	8009b38 <_strtod_l+0x228>
 8009b72:	f103 0c01 	add.w	ip, r3, #1
 8009b76:	f1bc 0f10 	cmp.w	ip, #16
 8009b7a:	bfd8      	it	le
 8009b7c:	fb01 f909 	mulle.w	r9, r1, r9
 8009b80:	e7f5      	b.n	8009b6e <_strtod_l+0x25e>
 8009b82:	2d10      	cmp	r5, #16
 8009b84:	bfdc      	itt	le
 8009b86:	230a      	movle	r3, #10
 8009b88:	fb03 2909 	mlale	r9, r3, r9, r2
 8009b8c:	e7e1      	b.n	8009b52 <_strtod_l+0x242>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9305      	str	r3, [sp, #20]
 8009b92:	2301      	movs	r3, #1
 8009b94:	e77c      	b.n	8009a90 <_strtod_l+0x180>
 8009b96:	f04f 0c00 	mov.w	ip, #0
 8009b9a:	f108 0202 	add.w	r2, r8, #2
 8009b9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ba0:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009ba4:	e785      	b.n	8009ab2 <_strtod_l+0x1a2>
 8009ba6:	f04f 0c01 	mov.w	ip, #1
 8009baa:	e7f6      	b.n	8009b9a <_strtod_l+0x28a>
 8009bac:	0800e4f4 	.word	0x0800e4f4
 8009bb0:	0800e244 	.word	0x0800e244
 8009bb4:	7ff00000 	.word	0x7ff00000
 8009bb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bba:	1c51      	adds	r1, r2, #1
 8009bbc:	9117      	str	r1, [sp, #92]	; 0x5c
 8009bbe:	7852      	ldrb	r2, [r2, #1]
 8009bc0:	2a30      	cmp	r2, #48	; 0x30
 8009bc2:	d0f9      	beq.n	8009bb8 <_strtod_l+0x2a8>
 8009bc4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009bc8:	2908      	cmp	r1, #8
 8009bca:	f63f af79 	bhi.w	8009ac0 <_strtod_l+0x1b0>
 8009bce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009bd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bd4:	9206      	str	r2, [sp, #24]
 8009bd6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009bd8:	1c51      	adds	r1, r2, #1
 8009bda:	9117      	str	r1, [sp, #92]	; 0x5c
 8009bdc:	7852      	ldrb	r2, [r2, #1]
 8009bde:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009be2:	2e09      	cmp	r6, #9
 8009be4:	d937      	bls.n	8009c56 <_strtod_l+0x346>
 8009be6:	9e06      	ldr	r6, [sp, #24]
 8009be8:	1b89      	subs	r1, r1, r6
 8009bea:	2908      	cmp	r1, #8
 8009bec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009bf0:	dc02      	bgt.n	8009bf8 <_strtod_l+0x2e8>
 8009bf2:	4576      	cmp	r6, lr
 8009bf4:	bfa8      	it	ge
 8009bf6:	4676      	movge	r6, lr
 8009bf8:	f1bc 0f00 	cmp.w	ip, #0
 8009bfc:	d000      	beq.n	8009c00 <_strtod_l+0x2f0>
 8009bfe:	4276      	negs	r6, r6
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	d14d      	bne.n	8009ca0 <_strtod_l+0x390>
 8009c04:	9904      	ldr	r1, [sp, #16]
 8009c06:	4301      	orrs	r1, r0
 8009c08:	f47f aec6 	bne.w	8009998 <_strtod_l+0x88>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f47f aee1 	bne.w	80099d4 <_strtod_l+0xc4>
 8009c12:	2a69      	cmp	r2, #105	; 0x69
 8009c14:	d027      	beq.n	8009c66 <_strtod_l+0x356>
 8009c16:	dc24      	bgt.n	8009c62 <_strtod_l+0x352>
 8009c18:	2a49      	cmp	r2, #73	; 0x49
 8009c1a:	d024      	beq.n	8009c66 <_strtod_l+0x356>
 8009c1c:	2a4e      	cmp	r2, #78	; 0x4e
 8009c1e:	f47f aed9 	bne.w	80099d4 <_strtod_l+0xc4>
 8009c22:	499f      	ldr	r1, [pc, #636]	; (8009ea0 <_strtod_l+0x590>)
 8009c24:	a817      	add	r0, sp, #92	; 0x5c
 8009c26:	f002 f875 	bl	800bd14 <__match>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f43f aed2 	beq.w	80099d4 <_strtod_l+0xc4>
 8009c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b28      	cmp	r3, #40	; 0x28
 8009c36:	d12d      	bne.n	8009c94 <_strtod_l+0x384>
 8009c38:	499a      	ldr	r1, [pc, #616]	; (8009ea4 <_strtod_l+0x594>)
 8009c3a:	aa1a      	add	r2, sp, #104	; 0x68
 8009c3c:	a817      	add	r0, sp, #92	; 0x5c
 8009c3e:	f002 f87d 	bl	800bd3c <__hexnan>
 8009c42:	2805      	cmp	r0, #5
 8009c44:	d126      	bne.n	8009c94 <_strtod_l+0x384>
 8009c46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009c4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c54:	e6a0      	b.n	8009998 <_strtod_l+0x88>
 8009c56:	210a      	movs	r1, #10
 8009c58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009c5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c60:	e7b9      	b.n	8009bd6 <_strtod_l+0x2c6>
 8009c62:	2a6e      	cmp	r2, #110	; 0x6e
 8009c64:	e7db      	b.n	8009c1e <_strtod_l+0x30e>
 8009c66:	4990      	ldr	r1, [pc, #576]	; (8009ea8 <_strtod_l+0x598>)
 8009c68:	a817      	add	r0, sp, #92	; 0x5c
 8009c6a:	f002 f853 	bl	800bd14 <__match>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	f43f aeb0 	beq.w	80099d4 <_strtod_l+0xc4>
 8009c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c76:	498d      	ldr	r1, [pc, #564]	; (8009eac <_strtod_l+0x59c>)
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	a817      	add	r0, sp, #92	; 0x5c
 8009c7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c7e:	f002 f849 	bl	800bd14 <__match>
 8009c82:	b910      	cbnz	r0, 8009c8a <_strtod_l+0x37a>
 8009c84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c86:	3301      	adds	r3, #1
 8009c88:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009ebc <_strtod_l+0x5ac>
 8009c8e:	f04f 0a00 	mov.w	sl, #0
 8009c92:	e681      	b.n	8009998 <_strtod_l+0x88>
 8009c94:	4886      	ldr	r0, [pc, #536]	; (8009eb0 <_strtod_l+0x5a0>)
 8009c96:	f003 fa8f 	bl	800d1b8 <nan>
 8009c9a:	ec5b ab10 	vmov	sl, fp, d0
 8009c9e:	e67b      	b.n	8009998 <_strtod_l+0x88>
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	9807      	ldr	r0, [sp, #28]
 8009ca4:	1af3      	subs	r3, r6, r3
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	bf08      	it	eq
 8009caa:	462f      	moveq	r7, r5
 8009cac:	2d10      	cmp	r5, #16
 8009cae:	9306      	str	r3, [sp, #24]
 8009cb0:	46a8      	mov	r8, r5
 8009cb2:	bfa8      	it	ge
 8009cb4:	f04f 0810 	movge.w	r8, #16
 8009cb8:	f7f6 fc24 	bl	8000504 <__aeabi_ui2d>
 8009cbc:	2d09      	cmp	r5, #9
 8009cbe:	4682      	mov	sl, r0
 8009cc0:	468b      	mov	fp, r1
 8009cc2:	dd13      	ble.n	8009cec <_strtod_l+0x3dc>
 8009cc4:	4b7b      	ldr	r3, [pc, #492]	; (8009eb4 <_strtod_l+0x5a4>)
 8009cc6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009cca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	4682      	mov	sl, r0
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	468b      	mov	fp, r1
 8009cd8:	f7f6 fc14 	bl	8000504 <__aeabi_ui2d>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	f7f6 fad2 	bl	800028c <__adddf3>
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	2d0f      	cmp	r5, #15
 8009cee:	dc38      	bgt.n	8009d62 <_strtod_l+0x452>
 8009cf0:	9b06      	ldr	r3, [sp, #24]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f43f ae50 	beq.w	8009998 <_strtod_l+0x88>
 8009cf8:	dd24      	ble.n	8009d44 <_strtod_l+0x434>
 8009cfa:	2b16      	cmp	r3, #22
 8009cfc:	dc0b      	bgt.n	8009d16 <_strtod_l+0x406>
 8009cfe:	496d      	ldr	r1, [pc, #436]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d08:	4652      	mov	r2, sl
 8009d0a:	465b      	mov	r3, fp
 8009d0c:	f7f6 fc74 	bl	80005f8 <__aeabi_dmul>
 8009d10:	4682      	mov	sl, r0
 8009d12:	468b      	mov	fp, r1
 8009d14:	e640      	b.n	8009998 <_strtod_l+0x88>
 8009d16:	9a06      	ldr	r2, [sp, #24]
 8009d18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	db20      	blt.n	8009d62 <_strtod_l+0x452>
 8009d20:	4c64      	ldr	r4, [pc, #400]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d22:	f1c5 050f 	rsb	r5, r5, #15
 8009d26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009d2a:	4652      	mov	r2, sl
 8009d2c:	465b      	mov	r3, fp
 8009d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d32:	f7f6 fc61 	bl	80005f8 <__aeabi_dmul>
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	1b5d      	subs	r5, r3, r5
 8009d3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009d3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d42:	e7e3      	b.n	8009d0c <_strtod_l+0x3fc>
 8009d44:	9b06      	ldr	r3, [sp, #24]
 8009d46:	3316      	adds	r3, #22
 8009d48:	db0b      	blt.n	8009d62 <_strtod_l+0x452>
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	1b9e      	subs	r6, r3, r6
 8009d4e:	4b59      	ldr	r3, [pc, #356]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009d54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d58:	4650      	mov	r0, sl
 8009d5a:	4659      	mov	r1, fp
 8009d5c:	f7f6 fd76 	bl	800084c <__aeabi_ddiv>
 8009d60:	e7d6      	b.n	8009d10 <_strtod_l+0x400>
 8009d62:	9b06      	ldr	r3, [sp, #24]
 8009d64:	eba5 0808 	sub.w	r8, r5, r8
 8009d68:	4498      	add	r8, r3
 8009d6a:	f1b8 0f00 	cmp.w	r8, #0
 8009d6e:	dd74      	ble.n	8009e5a <_strtod_l+0x54a>
 8009d70:	f018 030f 	ands.w	r3, r8, #15
 8009d74:	d00a      	beq.n	8009d8c <_strtod_l+0x47c>
 8009d76:	494f      	ldr	r1, [pc, #316]	; (8009eb4 <_strtod_l+0x5a4>)
 8009d78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	465b      	mov	r3, fp
 8009d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d84:	f7f6 fc38 	bl	80005f8 <__aeabi_dmul>
 8009d88:	4682      	mov	sl, r0
 8009d8a:	468b      	mov	fp, r1
 8009d8c:	f038 080f 	bics.w	r8, r8, #15
 8009d90:	d04f      	beq.n	8009e32 <_strtod_l+0x522>
 8009d92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009d96:	dd22      	ble.n	8009dde <_strtod_l+0x4ce>
 8009d98:	2500      	movs	r5, #0
 8009d9a:	462e      	mov	r6, r5
 8009d9c:	9507      	str	r5, [sp, #28]
 8009d9e:	9505      	str	r5, [sp, #20]
 8009da0:	2322      	movs	r3, #34	; 0x22
 8009da2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009ebc <_strtod_l+0x5ac>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	f04f 0a00 	mov.w	sl, #0
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f43f adf2 	beq.w	8009998 <_strtod_l+0x88>
 8009db4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 f8d4 	bl	800bf64 <_Bfree>
 8009dbc:	9905      	ldr	r1, [sp, #20]
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f002 f8d0 	bl	800bf64 <_Bfree>
 8009dc4:	4631      	mov	r1, r6
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f002 f8cc 	bl	800bf64 <_Bfree>
 8009dcc:	9907      	ldr	r1, [sp, #28]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f002 f8c8 	bl	800bf64 <_Bfree>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f002 f8c4 	bl	800bf64 <_Bfree>
 8009ddc:	e5dc      	b.n	8009998 <_strtod_l+0x88>
 8009dde:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <_strtod_l+0x5a8>)
 8009de0:	9304      	str	r3, [sp, #16]
 8009de2:	2300      	movs	r3, #0
 8009de4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	4699      	mov	r9, r3
 8009dee:	f1b8 0f01 	cmp.w	r8, #1
 8009df2:	dc21      	bgt.n	8009e38 <_strtod_l+0x528>
 8009df4:	b10b      	cbz	r3, 8009dfa <_strtod_l+0x4ea>
 8009df6:	4682      	mov	sl, r0
 8009df8:	468b      	mov	fp, r1
 8009dfa:	4b2f      	ldr	r3, [pc, #188]	; (8009eb8 <_strtod_l+0x5a8>)
 8009dfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009e00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009e04:	4652      	mov	r2, sl
 8009e06:	465b      	mov	r3, fp
 8009e08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	4b2a      	ldr	r3, [pc, #168]	; (8009ebc <_strtod_l+0x5ac>)
 8009e12:	460a      	mov	r2, r1
 8009e14:	400b      	ands	r3, r1
 8009e16:	492a      	ldr	r1, [pc, #168]	; (8009ec0 <_strtod_l+0x5b0>)
 8009e18:	428b      	cmp	r3, r1
 8009e1a:	4682      	mov	sl, r0
 8009e1c:	d8bc      	bhi.n	8009d98 <_strtod_l+0x488>
 8009e1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009e22:	428b      	cmp	r3, r1
 8009e24:	bf86      	itte	hi
 8009e26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009ec4 <_strtod_l+0x5b4>
 8009e2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009e2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009e32:	2300      	movs	r3, #0
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	e084      	b.n	8009f42 <_strtod_l+0x632>
 8009e38:	f018 0f01 	tst.w	r8, #1
 8009e3c:	d005      	beq.n	8009e4a <_strtod_l+0x53a>
 8009e3e:	9b04      	ldr	r3, [sp, #16]
 8009e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e44:	f7f6 fbd8 	bl	80005f8 <__aeabi_dmul>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	9a04      	ldr	r2, [sp, #16]
 8009e4c:	3208      	adds	r2, #8
 8009e4e:	f109 0901 	add.w	r9, r9, #1
 8009e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e56:	9204      	str	r2, [sp, #16]
 8009e58:	e7c9      	b.n	8009dee <_strtod_l+0x4de>
 8009e5a:	d0ea      	beq.n	8009e32 <_strtod_l+0x522>
 8009e5c:	f1c8 0800 	rsb	r8, r8, #0
 8009e60:	f018 020f 	ands.w	r2, r8, #15
 8009e64:	d00a      	beq.n	8009e7c <_strtod_l+0x56c>
 8009e66:	4b13      	ldr	r3, [pc, #76]	; (8009eb4 <_strtod_l+0x5a4>)
 8009e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	4659      	mov	r1, fp
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fcea 	bl	800084c <__aeabi_ddiv>
 8009e78:	4682      	mov	sl, r0
 8009e7a:	468b      	mov	fp, r1
 8009e7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009e80:	d0d7      	beq.n	8009e32 <_strtod_l+0x522>
 8009e82:	f1b8 0f1f 	cmp.w	r8, #31
 8009e86:	dd1f      	ble.n	8009ec8 <_strtod_l+0x5b8>
 8009e88:	2500      	movs	r5, #0
 8009e8a:	462e      	mov	r6, r5
 8009e8c:	9507      	str	r5, [sp, #28]
 8009e8e:	9505      	str	r5, [sp, #20]
 8009e90:	2322      	movs	r3, #34	; 0x22
 8009e92:	f04f 0a00 	mov.w	sl, #0
 8009e96:	f04f 0b00 	mov.w	fp, #0
 8009e9a:	6023      	str	r3, [r4, #0]
 8009e9c:	e786      	b.n	8009dac <_strtod_l+0x49c>
 8009e9e:	bf00      	nop
 8009ea0:	0800db81 	.word	0x0800db81
 8009ea4:	0800e258 	.word	0x0800e258
 8009ea8:	0800db79 	.word	0x0800db79
 8009eac:	0800e39c 	.word	0x0800e39c
 8009eb0:	0800e6cb 	.word	0x0800e6cb
 8009eb4:	0800e590 	.word	0x0800e590
 8009eb8:	0800e568 	.word	0x0800e568
 8009ebc:	7ff00000 	.word	0x7ff00000
 8009ec0:	7ca00000 	.word	0x7ca00000
 8009ec4:	7fefffff 	.word	0x7fefffff
 8009ec8:	f018 0310 	ands.w	r3, r8, #16
 8009ecc:	bf18      	it	ne
 8009ece:	236a      	movne	r3, #106	; 0x6a
 8009ed0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a280 <_strtod_l+0x970>
 8009ed4:	9304      	str	r3, [sp, #16]
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	4659      	mov	r1, fp
 8009eda:	2300      	movs	r3, #0
 8009edc:	f018 0f01 	tst.w	r8, #1
 8009ee0:	d004      	beq.n	8009eec <_strtod_l+0x5dc>
 8009ee2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ee6:	f7f6 fb87 	bl	80005f8 <__aeabi_dmul>
 8009eea:	2301      	movs	r3, #1
 8009eec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ef0:	f109 0908 	add.w	r9, r9, #8
 8009ef4:	d1f2      	bne.n	8009edc <_strtod_l+0x5cc>
 8009ef6:	b10b      	cbz	r3, 8009efc <_strtod_l+0x5ec>
 8009ef8:	4682      	mov	sl, r0
 8009efa:	468b      	mov	fp, r1
 8009efc:	9b04      	ldr	r3, [sp, #16]
 8009efe:	b1c3      	cbz	r3, 8009f32 <_strtod_l+0x622>
 8009f00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	4659      	mov	r1, fp
 8009f0c:	dd11      	ble.n	8009f32 <_strtod_l+0x622>
 8009f0e:	2b1f      	cmp	r3, #31
 8009f10:	f340 8124 	ble.w	800a15c <_strtod_l+0x84c>
 8009f14:	2b34      	cmp	r3, #52	; 0x34
 8009f16:	bfde      	ittt	le
 8009f18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009f1c:	f04f 33ff 	movle.w	r3, #4294967295
 8009f20:	fa03 f202 	lslle.w	r2, r3, r2
 8009f24:	f04f 0a00 	mov.w	sl, #0
 8009f28:	bfcc      	ite	gt
 8009f2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009f2e:	ea02 0b01 	andle.w	fp, r2, r1
 8009f32:	2200      	movs	r2, #0
 8009f34:	2300      	movs	r3, #0
 8009f36:	4650      	mov	r0, sl
 8009f38:	4659      	mov	r1, fp
 8009f3a:	f7f6 fdc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d1a2      	bne.n	8009e88 <_strtod_l+0x578>
 8009f42:	9b07      	ldr	r3, [sp, #28]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	9908      	ldr	r1, [sp, #32]
 8009f48:	462b      	mov	r3, r5
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f002 f871 	bl	800c034 <__s2b>
 8009f52:	9007      	str	r0, [sp, #28]
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f af1f 	beq.w	8009d98 <_strtod_l+0x488>
 8009f5a:	9b05      	ldr	r3, [sp, #20]
 8009f5c:	1b9e      	subs	r6, r3, r6
 8009f5e:	9b06      	ldr	r3, [sp, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfb4      	ite	lt
 8009f64:	4633      	movlt	r3, r6
 8009f66:	2300      	movge	r3, #0
 8009f68:	930c      	str	r3, [sp, #48]	; 0x30
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	2500      	movs	r5, #0
 8009f6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f72:	9312      	str	r3, [sp, #72]	; 0x48
 8009f74:	462e      	mov	r6, r5
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	4620      	mov	r0, r4
 8009f7a:	6859      	ldr	r1, [r3, #4]
 8009f7c:	f001 ffb2 	bl	800bee4 <_Balloc>
 8009f80:	9005      	str	r0, [sp, #20]
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f43f af0c 	beq.w	8009da0 <_strtod_l+0x490>
 8009f88:	9b07      	ldr	r3, [sp, #28]
 8009f8a:	691a      	ldr	r2, [r3, #16]
 8009f8c:	3202      	adds	r2, #2
 8009f8e:	f103 010c 	add.w	r1, r3, #12
 8009f92:	0092      	lsls	r2, r2, #2
 8009f94:	300c      	adds	r0, #12
 8009f96:	f7fe f9a1 	bl	80082dc <memcpy>
 8009f9a:	ec4b ab10 	vmov	d0, sl, fp
 8009f9e:	aa1a      	add	r2, sp, #104	; 0x68
 8009fa0:	a919      	add	r1, sp, #100	; 0x64
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f002 fb8c 	bl	800c6c0 <__d2b>
 8009fa8:	ec4b ab18 	vmov	d8, sl, fp
 8009fac:	9018      	str	r0, [sp, #96]	; 0x60
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	f43f aef6 	beq.w	8009da0 <_strtod_l+0x490>
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f002 f8d6 	bl	800c168 <__i2b>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f43f aeee 	beq.w	8009da0 <_strtod_l+0x490>
 8009fc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009fc6:	9904      	ldr	r1, [sp, #16]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	bfab      	itete	ge
 8009fcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009fce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009fd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009fd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009fd6:	bfac      	ite	ge
 8009fd8:	eb03 0902 	addge.w	r9, r3, r2
 8009fdc:	1ad7      	sublt	r7, r2, r3
 8009fde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009fe0:	eba3 0801 	sub.w	r8, r3, r1
 8009fe4:	4490      	add	r8, r2
 8009fe6:	4ba1      	ldr	r3, [pc, #644]	; (800a26c <_strtod_l+0x95c>)
 8009fe8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fec:	4598      	cmp	r8, r3
 8009fee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ff2:	f280 80c7 	bge.w	800a184 <_strtod_l+0x874>
 8009ff6:	eba3 0308 	sub.w	r3, r3, r8
 8009ffa:	2b1f      	cmp	r3, #31
 8009ffc:	eba2 0203 	sub.w	r2, r2, r3
 800a000:	f04f 0101 	mov.w	r1, #1
 800a004:	f300 80b1 	bgt.w	800a16a <_strtod_l+0x85a>
 800a008:	fa01 f303 	lsl.w	r3, r1, r3
 800a00c:	930d      	str	r3, [sp, #52]	; 0x34
 800a00e:	2300      	movs	r3, #0
 800a010:	9308      	str	r3, [sp, #32]
 800a012:	eb09 0802 	add.w	r8, r9, r2
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	45c1      	cmp	r9, r8
 800a01a:	4417      	add	r7, r2
 800a01c:	441f      	add	r7, r3
 800a01e:	464b      	mov	r3, r9
 800a020:	bfa8      	it	ge
 800a022:	4643      	movge	r3, r8
 800a024:	42bb      	cmp	r3, r7
 800a026:	bfa8      	it	ge
 800a028:	463b      	movge	r3, r7
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	bfc2      	ittt	gt
 800a02e:	eba8 0803 	subgt.w	r8, r8, r3
 800a032:	1aff      	subgt	r7, r7, r3
 800a034:	eba9 0903 	subgt.w	r9, r9, r3
 800a038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	dd17      	ble.n	800a06e <_strtod_l+0x75e>
 800a03e:	4631      	mov	r1, r6
 800a040:	461a      	mov	r2, r3
 800a042:	4620      	mov	r0, r4
 800a044:	f002 f950 	bl	800c2e8 <__pow5mult>
 800a048:	4606      	mov	r6, r0
 800a04a:	2800      	cmp	r0, #0
 800a04c:	f43f aea8 	beq.w	8009da0 <_strtod_l+0x490>
 800a050:	4601      	mov	r1, r0
 800a052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a054:	4620      	mov	r0, r4
 800a056:	f002 f89d 	bl	800c194 <__multiply>
 800a05a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a05c:	2800      	cmp	r0, #0
 800a05e:	f43f ae9f 	beq.w	8009da0 <_strtod_l+0x490>
 800a062:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a064:	4620      	mov	r0, r4
 800a066:	f001 ff7d 	bl	800bf64 <_Bfree>
 800a06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06c:	9318      	str	r3, [sp, #96]	; 0x60
 800a06e:	f1b8 0f00 	cmp.w	r8, #0
 800a072:	f300 808c 	bgt.w	800a18e <_strtod_l+0x87e>
 800a076:	9b06      	ldr	r3, [sp, #24]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dd08      	ble.n	800a08e <_strtod_l+0x77e>
 800a07c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a07e:	9905      	ldr	r1, [sp, #20]
 800a080:	4620      	mov	r0, r4
 800a082:	f002 f931 	bl	800c2e8 <__pow5mult>
 800a086:	9005      	str	r0, [sp, #20]
 800a088:	2800      	cmp	r0, #0
 800a08a:	f43f ae89 	beq.w	8009da0 <_strtod_l+0x490>
 800a08e:	2f00      	cmp	r7, #0
 800a090:	dd08      	ble.n	800a0a4 <_strtod_l+0x794>
 800a092:	9905      	ldr	r1, [sp, #20]
 800a094:	463a      	mov	r2, r7
 800a096:	4620      	mov	r0, r4
 800a098:	f002 f980 	bl	800c39c <__lshift>
 800a09c:	9005      	str	r0, [sp, #20]
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f43f ae7e 	beq.w	8009da0 <_strtod_l+0x490>
 800a0a4:	f1b9 0f00 	cmp.w	r9, #0
 800a0a8:	dd08      	ble.n	800a0bc <_strtod_l+0x7ac>
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	464a      	mov	r2, r9
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f002 f974 	bl	800c39c <__lshift>
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	f43f ae72 	beq.w	8009da0 <_strtod_l+0x490>
 800a0bc:	9a05      	ldr	r2, [sp, #20]
 800a0be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f002 f9f7 	bl	800c4b4 <__mdiff>
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f43f ae69 	beq.w	8009da0 <_strtod_l+0x490>
 800a0ce:	68c3      	ldr	r3, [r0, #12]
 800a0d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60c3      	str	r3, [r0, #12]
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	f002 f9d0 	bl	800c47c <__mcmp>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	da60      	bge.n	800a1a2 <_strtod_l+0x892>
 800a0e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e2:	ea53 030a 	orrs.w	r3, r3, sl
 800a0e6:	f040 8082 	bne.w	800a1ee <_strtod_l+0x8de>
 800a0ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d17d      	bne.n	800a1ee <_strtod_l+0x8de>
 800a0f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0f6:	0d1b      	lsrs	r3, r3, #20
 800a0f8:	051b      	lsls	r3, r3, #20
 800a0fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0fe:	d976      	bls.n	800a1ee <_strtod_l+0x8de>
 800a100:	696b      	ldr	r3, [r5, #20]
 800a102:	b913      	cbnz	r3, 800a10a <_strtod_l+0x7fa>
 800a104:	692b      	ldr	r3, [r5, #16]
 800a106:	2b01      	cmp	r3, #1
 800a108:	dd71      	ble.n	800a1ee <_strtod_l+0x8de>
 800a10a:	4629      	mov	r1, r5
 800a10c:	2201      	movs	r2, #1
 800a10e:	4620      	mov	r0, r4
 800a110:	f002 f944 	bl	800c39c <__lshift>
 800a114:	4631      	mov	r1, r6
 800a116:	4605      	mov	r5, r0
 800a118:	f002 f9b0 	bl	800c47c <__mcmp>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	dd66      	ble.n	800a1ee <_strtod_l+0x8de>
 800a120:	9904      	ldr	r1, [sp, #16]
 800a122:	4a53      	ldr	r2, [pc, #332]	; (800a270 <_strtod_l+0x960>)
 800a124:	465b      	mov	r3, fp
 800a126:	2900      	cmp	r1, #0
 800a128:	f000 8081 	beq.w	800a22e <_strtod_l+0x91e>
 800a12c:	ea02 010b 	and.w	r1, r2, fp
 800a130:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a134:	dc7b      	bgt.n	800a22e <_strtod_l+0x91e>
 800a136:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a13a:	f77f aea9 	ble.w	8009e90 <_strtod_l+0x580>
 800a13e:	4b4d      	ldr	r3, [pc, #308]	; (800a274 <_strtod_l+0x964>)
 800a140:	4650      	mov	r0, sl
 800a142:	4659      	mov	r1, fp
 800a144:	2200      	movs	r2, #0
 800a146:	f7f6 fa57 	bl	80005f8 <__aeabi_dmul>
 800a14a:	460b      	mov	r3, r1
 800a14c:	4303      	orrs	r3, r0
 800a14e:	bf08      	it	eq
 800a150:	2322      	moveq	r3, #34	; 0x22
 800a152:	4682      	mov	sl, r0
 800a154:	468b      	mov	fp, r1
 800a156:	bf08      	it	eq
 800a158:	6023      	streq	r3, [r4, #0]
 800a15a:	e62b      	b.n	8009db4 <_strtod_l+0x4a4>
 800a15c:	f04f 32ff 	mov.w	r2, #4294967295
 800a160:	fa02 f303 	lsl.w	r3, r2, r3
 800a164:	ea03 0a0a 	and.w	sl, r3, sl
 800a168:	e6e3      	b.n	8009f32 <_strtod_l+0x622>
 800a16a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a16e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a172:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a176:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a17a:	fa01 f308 	lsl.w	r3, r1, r8
 800a17e:	9308      	str	r3, [sp, #32]
 800a180:	910d      	str	r1, [sp, #52]	; 0x34
 800a182:	e746      	b.n	800a012 <_strtod_l+0x702>
 800a184:	2300      	movs	r3, #0
 800a186:	9308      	str	r3, [sp, #32]
 800a188:	2301      	movs	r3, #1
 800a18a:	930d      	str	r3, [sp, #52]	; 0x34
 800a18c:	e741      	b.n	800a012 <_strtod_l+0x702>
 800a18e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a190:	4642      	mov	r2, r8
 800a192:	4620      	mov	r0, r4
 800a194:	f002 f902 	bl	800c39c <__lshift>
 800a198:	9018      	str	r0, [sp, #96]	; 0x60
 800a19a:	2800      	cmp	r0, #0
 800a19c:	f47f af6b 	bne.w	800a076 <_strtod_l+0x766>
 800a1a0:	e5fe      	b.n	8009da0 <_strtod_l+0x490>
 800a1a2:	465f      	mov	r7, fp
 800a1a4:	d16e      	bne.n	800a284 <_strtod_l+0x974>
 800a1a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ac:	b342      	cbz	r2, 800a200 <_strtod_l+0x8f0>
 800a1ae:	4a32      	ldr	r2, [pc, #200]	; (800a278 <_strtod_l+0x968>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d128      	bne.n	800a206 <_strtod_l+0x8f6>
 800a1b4:	9b04      	ldr	r3, [sp, #16]
 800a1b6:	4651      	mov	r1, sl
 800a1b8:	b1eb      	cbz	r3, 800a1f6 <_strtod_l+0x8e6>
 800a1ba:	4b2d      	ldr	r3, [pc, #180]	; (800a270 <_strtod_l+0x960>)
 800a1bc:	403b      	ands	r3, r7
 800a1be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	d819      	bhi.n	800a1fc <_strtod_l+0x8ec>
 800a1c8:	0d1b      	lsrs	r3, r3, #20
 800a1ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	d117      	bne.n	800a206 <_strtod_l+0x8f6>
 800a1d6:	4b29      	ldr	r3, [pc, #164]	; (800a27c <_strtod_l+0x96c>)
 800a1d8:	429f      	cmp	r7, r3
 800a1da:	d102      	bne.n	800a1e2 <_strtod_l+0x8d2>
 800a1dc:	3101      	adds	r1, #1
 800a1de:	f43f addf 	beq.w	8009da0 <_strtod_l+0x490>
 800a1e2:	4b23      	ldr	r3, [pc, #140]	; (800a270 <_strtod_l+0x960>)
 800a1e4:	403b      	ands	r3, r7
 800a1e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a1ea:	f04f 0a00 	mov.w	sl, #0
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d1a4      	bne.n	800a13e <_strtod_l+0x82e>
 800a1f4:	e5de      	b.n	8009db4 <_strtod_l+0x4a4>
 800a1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fa:	e7ea      	b.n	800a1d2 <_strtod_l+0x8c2>
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	e7e8      	b.n	800a1d2 <_strtod_l+0x8c2>
 800a200:	ea53 030a 	orrs.w	r3, r3, sl
 800a204:	d08c      	beq.n	800a120 <_strtod_l+0x810>
 800a206:	9b08      	ldr	r3, [sp, #32]
 800a208:	b1db      	cbz	r3, 800a242 <_strtod_l+0x932>
 800a20a:	423b      	tst	r3, r7
 800a20c:	d0ef      	beq.n	800a1ee <_strtod_l+0x8de>
 800a20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	4650      	mov	r0, sl
 800a214:	4659      	mov	r1, fp
 800a216:	b1c3      	cbz	r3, 800a24a <_strtod_l+0x93a>
 800a218:	f7ff fb5e 	bl	80098d8 <sulp>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	ec51 0b18 	vmov	r0, r1, d8
 800a224:	f7f6 f832 	bl	800028c <__adddf3>
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	e7df      	b.n	800a1ee <_strtod_l+0x8de>
 800a22e:	4013      	ands	r3, r2
 800a230:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a234:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a238:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a23c:	f04f 3aff 	mov.w	sl, #4294967295
 800a240:	e7d5      	b.n	800a1ee <_strtod_l+0x8de>
 800a242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a244:	ea13 0f0a 	tst.w	r3, sl
 800a248:	e7e0      	b.n	800a20c <_strtod_l+0x8fc>
 800a24a:	f7ff fb45 	bl	80098d8 <sulp>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	ec51 0b18 	vmov	r0, r1, d8
 800a256:	f7f6 f817 	bl	8000288 <__aeabi_dsub>
 800a25a:	2200      	movs	r2, #0
 800a25c:	2300      	movs	r3, #0
 800a25e:	4682      	mov	sl, r0
 800a260:	468b      	mov	fp, r1
 800a262:	f7f6 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 800a266:	2800      	cmp	r0, #0
 800a268:	d0c1      	beq.n	800a1ee <_strtod_l+0x8de>
 800a26a:	e611      	b.n	8009e90 <_strtod_l+0x580>
 800a26c:	fffffc02 	.word	0xfffffc02
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	39500000 	.word	0x39500000
 800a278:	000fffff 	.word	0x000fffff
 800a27c:	7fefffff 	.word	0x7fefffff
 800a280:	0800e270 	.word	0x0800e270
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	f002 fa76 	bl	800c778 <__ratio>
 800a28c:	ec59 8b10 	vmov	r8, r9, d0
 800a290:	ee10 0a10 	vmov	r0, s0
 800a294:	2200      	movs	r2, #0
 800a296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f6 fc28 	bl	8000af0 <__aeabi_dcmple>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d07a      	beq.n	800a39a <_strtod_l+0xa8a>
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d04a      	beq.n	800a340 <_strtod_l+0xa30>
 800a2aa:	4b95      	ldr	r3, [pc, #596]	; (800a500 <_strtod_l+0xbf0>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a500 <_strtod_l+0xbf0>
 800a2b6:	f04f 0800 	mov.w	r8, #0
 800a2ba:	4b92      	ldr	r3, [pc, #584]	; (800a504 <_strtod_l+0xbf4>)
 800a2bc:	403b      	ands	r3, r7
 800a2be:	930d      	str	r3, [sp, #52]	; 0x34
 800a2c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2c2:	4b91      	ldr	r3, [pc, #580]	; (800a508 <_strtod_l+0xbf8>)
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	f040 80b0 	bne.w	800a42a <_strtod_l+0xb1a>
 800a2ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a2d2:	ec4b ab10 	vmov	d0, sl, fp
 800a2d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2da:	f002 f975 	bl	800c5c8 <__ulp>
 800a2de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2e2:	ec53 2b10 	vmov	r2, r3, d0
 800a2e6:	f7f6 f987 	bl	80005f8 <__aeabi_dmul>
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	465b      	mov	r3, fp
 800a2ee:	f7f5 ffcd 	bl	800028c <__adddf3>
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4983      	ldr	r1, [pc, #524]	; (800a504 <_strtod_l+0xbf4>)
 800a2f6:	4a85      	ldr	r2, [pc, #532]	; (800a50c <_strtod_l+0xbfc>)
 800a2f8:	4019      	ands	r1, r3
 800a2fa:	4291      	cmp	r1, r2
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	d960      	bls.n	800a3c2 <_strtod_l+0xab2>
 800a300:	ee18 3a90 	vmov	r3, s17
 800a304:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a308:	4293      	cmp	r3, r2
 800a30a:	d104      	bne.n	800a316 <_strtod_l+0xa06>
 800a30c:	ee18 3a10 	vmov	r3, s16
 800a310:	3301      	adds	r3, #1
 800a312:	f43f ad45 	beq.w	8009da0 <_strtod_l+0x490>
 800a316:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a518 <_strtod_l+0xc08>
 800a31a:	f04f 3aff 	mov.w	sl, #4294967295
 800a31e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a320:	4620      	mov	r0, r4
 800a322:	f001 fe1f 	bl	800bf64 <_Bfree>
 800a326:	9905      	ldr	r1, [sp, #20]
 800a328:	4620      	mov	r0, r4
 800a32a:	f001 fe1b 	bl	800bf64 <_Bfree>
 800a32e:	4631      	mov	r1, r6
 800a330:	4620      	mov	r0, r4
 800a332:	f001 fe17 	bl	800bf64 <_Bfree>
 800a336:	4629      	mov	r1, r5
 800a338:	4620      	mov	r0, r4
 800a33a:	f001 fe13 	bl	800bf64 <_Bfree>
 800a33e:	e61a      	b.n	8009f76 <_strtod_l+0x666>
 800a340:	f1ba 0f00 	cmp.w	sl, #0
 800a344:	d11b      	bne.n	800a37e <_strtod_l+0xa6e>
 800a346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a34a:	b9f3      	cbnz	r3, 800a38a <_strtod_l+0xa7a>
 800a34c:	4b6c      	ldr	r3, [pc, #432]	; (800a500 <_strtod_l+0xbf0>)
 800a34e:	2200      	movs	r2, #0
 800a350:	4640      	mov	r0, r8
 800a352:	4649      	mov	r1, r9
 800a354:	f7f6 fbc2 	bl	8000adc <__aeabi_dcmplt>
 800a358:	b9d0      	cbnz	r0, 800a390 <_strtod_l+0xa80>
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	4b6c      	ldr	r3, [pc, #432]	; (800a510 <_strtod_l+0xc00>)
 800a360:	2200      	movs	r2, #0
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	4680      	mov	r8, r0
 800a368:	4689      	mov	r9, r1
 800a36a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a36e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a372:	9315      	str	r3, [sp, #84]	; 0x54
 800a374:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a378:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a37c:	e79d      	b.n	800a2ba <_strtod_l+0x9aa>
 800a37e:	f1ba 0f01 	cmp.w	sl, #1
 800a382:	d102      	bne.n	800a38a <_strtod_l+0xa7a>
 800a384:	2f00      	cmp	r7, #0
 800a386:	f43f ad83 	beq.w	8009e90 <_strtod_l+0x580>
 800a38a:	4b62      	ldr	r3, [pc, #392]	; (800a514 <_strtod_l+0xc04>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	e78e      	b.n	800a2ae <_strtod_l+0x99e>
 800a390:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a510 <_strtod_l+0xc00>
 800a394:	f04f 0800 	mov.w	r8, #0
 800a398:	e7e7      	b.n	800a36a <_strtod_l+0xa5a>
 800a39a:	4b5d      	ldr	r3, [pc, #372]	; (800a510 <_strtod_l+0xc00>)
 800a39c:	4640      	mov	r0, r8
 800a39e:	4649      	mov	r1, r9
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f7f6 f929 	bl	80005f8 <__aeabi_dmul>
 800a3a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	4689      	mov	r9, r1
 800a3ac:	b933      	cbnz	r3, 800a3bc <_strtod_l+0xaac>
 800a3ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b2:	900e      	str	r0, [sp, #56]	; 0x38
 800a3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a3ba:	e7dd      	b.n	800a378 <_strtod_l+0xa68>
 800a3bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a3c0:	e7f9      	b.n	800a3b6 <_strtod_l+0xaa6>
 800a3c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a3c6:	9b04      	ldr	r3, [sp, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1a8      	bne.n	800a31e <_strtod_l+0xa0e>
 800a3cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a3d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3d2:	0d1b      	lsrs	r3, r3, #20
 800a3d4:	051b      	lsls	r3, r3, #20
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d1a1      	bne.n	800a31e <_strtod_l+0xa0e>
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f6 fc6b 	bl	8000cb8 <__aeabi_d2lz>
 800a3e2:	f7f6 f8db 	bl	800059c <__aeabi_l2d>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3f8:	ea43 030a 	orr.w	r3, r3, sl
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	4680      	mov	r8, r0
 800a400:	4689      	mov	r9, r1
 800a402:	d055      	beq.n	800a4b0 <_strtod_l+0xba0>
 800a404:	a336      	add	r3, pc, #216	; (adr r3, 800a4e0 <_strtod_l+0xbd0>)
 800a406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40a:	f7f6 fb67 	bl	8000adc <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f47f acd0 	bne.w	8009db4 <_strtod_l+0x4a4>
 800a414:	a334      	add	r3, pc, #208	; (adr r3, 800a4e8 <_strtod_l+0xbd8>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	4640      	mov	r0, r8
 800a41c:	4649      	mov	r1, r9
 800a41e:	f7f6 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 800a422:	2800      	cmp	r0, #0
 800a424:	f43f af7b 	beq.w	800a31e <_strtod_l+0xa0e>
 800a428:	e4c4      	b.n	8009db4 <_strtod_l+0x4a4>
 800a42a:	9b04      	ldr	r3, [sp, #16]
 800a42c:	b333      	cbz	r3, 800a47c <_strtod_l+0xb6c>
 800a42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a430:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a434:	d822      	bhi.n	800a47c <_strtod_l+0xb6c>
 800a436:	a32e      	add	r3, pc, #184	; (adr r3, 800a4f0 <_strtod_l+0xbe0>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4640      	mov	r0, r8
 800a43e:	4649      	mov	r1, r9
 800a440:	f7f6 fb56 	bl	8000af0 <__aeabi_dcmple>
 800a444:	b1a0      	cbz	r0, 800a470 <_strtod_l+0xb60>
 800a446:	4649      	mov	r1, r9
 800a448:	4640      	mov	r0, r8
 800a44a:	f7f6 fbad 	bl	8000ba8 <__aeabi_d2uiz>
 800a44e:	2801      	cmp	r0, #1
 800a450:	bf38      	it	cc
 800a452:	2001      	movcc	r0, #1
 800a454:	f7f6 f856 	bl	8000504 <__aeabi_ui2d>
 800a458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45a:	4680      	mov	r8, r0
 800a45c:	4689      	mov	r9, r1
 800a45e:	bb23      	cbnz	r3, 800a4aa <_strtod_l+0xb9a>
 800a460:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a464:	9010      	str	r0, [sp, #64]	; 0x40
 800a466:	9311      	str	r3, [sp, #68]	; 0x44
 800a468:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a46c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a472:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a474:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a478:	1a9b      	subs	r3, r3, r2
 800a47a:	9309      	str	r3, [sp, #36]	; 0x24
 800a47c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a480:	eeb0 0a48 	vmov.f32	s0, s16
 800a484:	eef0 0a68 	vmov.f32	s1, s17
 800a488:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a48c:	f002 f89c 	bl	800c5c8 <__ulp>
 800a490:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a494:	ec53 2b10 	vmov	r2, r3, d0
 800a498:	f7f6 f8ae 	bl	80005f8 <__aeabi_dmul>
 800a49c:	ec53 2b18 	vmov	r2, r3, d8
 800a4a0:	f7f5 fef4 	bl	800028c <__adddf3>
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	468b      	mov	fp, r1
 800a4a8:	e78d      	b.n	800a3c6 <_strtod_l+0xab6>
 800a4aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a4ae:	e7db      	b.n	800a468 <_strtod_l+0xb58>
 800a4b0:	a311      	add	r3, pc, #68	; (adr r3, 800a4f8 <_strtod_l+0xbe8>)
 800a4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b6:	f7f6 fb11 	bl	8000adc <__aeabi_dcmplt>
 800a4ba:	e7b2      	b.n	800a422 <_strtod_l+0xb12>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4c4:	6013      	str	r3, [r2, #0]
 800a4c6:	f7ff ba6b 	b.w	80099a0 <_strtod_l+0x90>
 800a4ca:	2a65      	cmp	r2, #101	; 0x65
 800a4cc:	f43f ab5f 	beq.w	8009b8e <_strtod_l+0x27e>
 800a4d0:	2a45      	cmp	r2, #69	; 0x45
 800a4d2:	f43f ab5c 	beq.w	8009b8e <_strtod_l+0x27e>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	f7ff bb94 	b.w	8009c04 <_strtod_l+0x2f4>
 800a4dc:	f3af 8000 	nop.w
 800a4e0:	94a03595 	.word	0x94a03595
 800a4e4:	3fdfffff 	.word	0x3fdfffff
 800a4e8:	35afe535 	.word	0x35afe535
 800a4ec:	3fe00000 	.word	0x3fe00000
 800a4f0:	ffc00000 	.word	0xffc00000
 800a4f4:	41dfffff 	.word	0x41dfffff
 800a4f8:	94a03595 	.word	0x94a03595
 800a4fc:	3fcfffff 	.word	0x3fcfffff
 800a500:	3ff00000 	.word	0x3ff00000
 800a504:	7ff00000 	.word	0x7ff00000
 800a508:	7fe00000 	.word	0x7fe00000
 800a50c:	7c9fffff 	.word	0x7c9fffff
 800a510:	3fe00000 	.word	0x3fe00000
 800a514:	bff00000 	.word	0xbff00000
 800a518:	7fefffff 	.word	0x7fefffff

0800a51c <_strtod_r>:
 800a51c:	4b01      	ldr	r3, [pc, #4]	; (800a524 <_strtod_r+0x8>)
 800a51e:	f7ff b9f7 	b.w	8009910 <_strtod_l>
 800a522:	bf00      	nop
 800a524:	200000a4 	.word	0x200000a4

0800a528 <_strtol_l.constprop.0>:
 800a528:	2b01      	cmp	r3, #1
 800a52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52e:	d001      	beq.n	800a534 <_strtol_l.constprop.0+0xc>
 800a530:	2b24      	cmp	r3, #36	; 0x24
 800a532:	d906      	bls.n	800a542 <_strtol_l.constprop.0+0x1a>
 800a534:	f7fd fe98 	bl	8008268 <__errno>
 800a538:	2316      	movs	r3, #22
 800a53a:	6003      	str	r3, [r0, #0]
 800a53c:	2000      	movs	r0, #0
 800a53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a628 <_strtol_l.constprop.0+0x100>
 800a546:	460d      	mov	r5, r1
 800a548:	462e      	mov	r6, r5
 800a54a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a54e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a552:	f017 0708 	ands.w	r7, r7, #8
 800a556:	d1f7      	bne.n	800a548 <_strtol_l.constprop.0+0x20>
 800a558:	2c2d      	cmp	r4, #45	; 0x2d
 800a55a:	d132      	bne.n	800a5c2 <_strtol_l.constprop.0+0x9a>
 800a55c:	782c      	ldrb	r4, [r5, #0]
 800a55e:	2701      	movs	r7, #1
 800a560:	1cb5      	adds	r5, r6, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d05b      	beq.n	800a61e <_strtol_l.constprop.0+0xf6>
 800a566:	2b10      	cmp	r3, #16
 800a568:	d109      	bne.n	800a57e <_strtol_l.constprop.0+0x56>
 800a56a:	2c30      	cmp	r4, #48	; 0x30
 800a56c:	d107      	bne.n	800a57e <_strtol_l.constprop.0+0x56>
 800a56e:	782c      	ldrb	r4, [r5, #0]
 800a570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a574:	2c58      	cmp	r4, #88	; 0x58
 800a576:	d14d      	bne.n	800a614 <_strtol_l.constprop.0+0xec>
 800a578:	786c      	ldrb	r4, [r5, #1]
 800a57a:	2310      	movs	r3, #16
 800a57c:	3502      	adds	r5, #2
 800a57e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a582:	f108 38ff 	add.w	r8, r8, #4294967295
 800a586:	f04f 0c00 	mov.w	ip, #0
 800a58a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a58e:	4666      	mov	r6, ip
 800a590:	fb03 8a19 	mls	sl, r3, r9, r8
 800a594:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a598:	f1be 0f09 	cmp.w	lr, #9
 800a59c:	d816      	bhi.n	800a5cc <_strtol_l.constprop.0+0xa4>
 800a59e:	4674      	mov	r4, lr
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	dd24      	ble.n	800a5ee <_strtol_l.constprop.0+0xc6>
 800a5a4:	f1bc 0f00 	cmp.w	ip, #0
 800a5a8:	db1e      	blt.n	800a5e8 <_strtol_l.constprop.0+0xc0>
 800a5aa:	45b1      	cmp	r9, r6
 800a5ac:	d31c      	bcc.n	800a5e8 <_strtol_l.constprop.0+0xc0>
 800a5ae:	d101      	bne.n	800a5b4 <_strtol_l.constprop.0+0x8c>
 800a5b0:	45a2      	cmp	sl, r4
 800a5b2:	db19      	blt.n	800a5e8 <_strtol_l.constprop.0+0xc0>
 800a5b4:	fb06 4603 	mla	r6, r6, r3, r4
 800a5b8:	f04f 0c01 	mov.w	ip, #1
 800a5bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5c0:	e7e8      	b.n	800a594 <_strtol_l.constprop.0+0x6c>
 800a5c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a5c4:	bf04      	itt	eq
 800a5c6:	782c      	ldrbeq	r4, [r5, #0]
 800a5c8:	1cb5      	addeq	r5, r6, #2
 800a5ca:	e7ca      	b.n	800a562 <_strtol_l.constprop.0+0x3a>
 800a5cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a5d0:	f1be 0f19 	cmp.w	lr, #25
 800a5d4:	d801      	bhi.n	800a5da <_strtol_l.constprop.0+0xb2>
 800a5d6:	3c37      	subs	r4, #55	; 0x37
 800a5d8:	e7e2      	b.n	800a5a0 <_strtol_l.constprop.0+0x78>
 800a5da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a5de:	f1be 0f19 	cmp.w	lr, #25
 800a5e2:	d804      	bhi.n	800a5ee <_strtol_l.constprop.0+0xc6>
 800a5e4:	3c57      	subs	r4, #87	; 0x57
 800a5e6:	e7db      	b.n	800a5a0 <_strtol_l.constprop.0+0x78>
 800a5e8:	f04f 3cff 	mov.w	ip, #4294967295
 800a5ec:	e7e6      	b.n	800a5bc <_strtol_l.constprop.0+0x94>
 800a5ee:	f1bc 0f00 	cmp.w	ip, #0
 800a5f2:	da05      	bge.n	800a600 <_strtol_l.constprop.0+0xd8>
 800a5f4:	2322      	movs	r3, #34	; 0x22
 800a5f6:	6003      	str	r3, [r0, #0]
 800a5f8:	4646      	mov	r6, r8
 800a5fa:	b942      	cbnz	r2, 800a60e <_strtol_l.constprop.0+0xe6>
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	e79e      	b.n	800a53e <_strtol_l.constprop.0+0x16>
 800a600:	b107      	cbz	r7, 800a604 <_strtol_l.constprop.0+0xdc>
 800a602:	4276      	negs	r6, r6
 800a604:	2a00      	cmp	r2, #0
 800a606:	d0f9      	beq.n	800a5fc <_strtol_l.constprop.0+0xd4>
 800a608:	f1bc 0f00 	cmp.w	ip, #0
 800a60c:	d000      	beq.n	800a610 <_strtol_l.constprop.0+0xe8>
 800a60e:	1e69      	subs	r1, r5, #1
 800a610:	6011      	str	r1, [r2, #0]
 800a612:	e7f3      	b.n	800a5fc <_strtol_l.constprop.0+0xd4>
 800a614:	2430      	movs	r4, #48	; 0x30
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1b1      	bne.n	800a57e <_strtol_l.constprop.0+0x56>
 800a61a:	2308      	movs	r3, #8
 800a61c:	e7af      	b.n	800a57e <_strtol_l.constprop.0+0x56>
 800a61e:	2c30      	cmp	r4, #48	; 0x30
 800a620:	d0a5      	beq.n	800a56e <_strtol_l.constprop.0+0x46>
 800a622:	230a      	movs	r3, #10
 800a624:	e7ab      	b.n	800a57e <_strtol_l.constprop.0+0x56>
 800a626:	bf00      	nop
 800a628:	0800e299 	.word	0x0800e299

0800a62c <_strtol_r>:
 800a62c:	f7ff bf7c 	b.w	800a528 <_strtol_l.constprop.0>

0800a630 <_user_strerror>:
 800a630:	2000      	movs	r0, #0
 800a632:	4770      	bx	lr

0800a634 <_vsiprintf_r>:
 800a634:	b500      	push	{lr}
 800a636:	b09b      	sub	sp, #108	; 0x6c
 800a638:	9100      	str	r1, [sp, #0]
 800a63a:	9104      	str	r1, [sp, #16]
 800a63c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a640:	9105      	str	r1, [sp, #20]
 800a642:	9102      	str	r1, [sp, #8]
 800a644:	4905      	ldr	r1, [pc, #20]	; (800a65c <_vsiprintf_r+0x28>)
 800a646:	9103      	str	r1, [sp, #12]
 800a648:	4669      	mov	r1, sp
 800a64a:	f002 f97d 	bl	800c948 <_svfiprintf_r>
 800a64e:	9b00      	ldr	r3, [sp, #0]
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
 800a654:	b01b      	add	sp, #108	; 0x6c
 800a656:	f85d fb04 	ldr.w	pc, [sp], #4
 800a65a:	bf00      	nop
 800a65c:	ffff0208 	.word	0xffff0208

0800a660 <vsiprintf>:
 800a660:	4613      	mov	r3, r2
 800a662:	460a      	mov	r2, r1
 800a664:	4601      	mov	r1, r0
 800a666:	4802      	ldr	r0, [pc, #8]	; (800a670 <vsiprintf+0x10>)
 800a668:	6800      	ldr	r0, [r0, #0]
 800a66a:	f7ff bfe3 	b.w	800a634 <_vsiprintf_r>
 800a66e:	bf00      	nop
 800a670:	2000003c 	.word	0x2000003c

0800a674 <_write_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_write_r+0x20>)
 800a678:	4604      	mov	r4, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	4611      	mov	r1, r2
 800a67e:	2200      	movs	r2, #0
 800a680:	602a      	str	r2, [r5, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f7f7 fbb1 	bl	8001dea <_write>
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d102      	bne.n	800a692 <_write_r+0x1e>
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	b103      	cbz	r3, 800a692 <_write_r+0x1e>
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	bd38      	pop	{r3, r4, r5, pc}
 800a694:	200007ec 	.word	0x200007ec

0800a698 <_close_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_close_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 fbbd 	bl	8001e22 <_close>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_close_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_close_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	200007ec 	.word	0x200007ec

0800a6b8 <quorem>:
 800a6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	6903      	ldr	r3, [r0, #16]
 800a6be:	690c      	ldr	r4, [r1, #16]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	4607      	mov	r7, r0
 800a6c4:	f2c0 8081 	blt.w	800a7ca <quorem+0x112>
 800a6c8:	3c01      	subs	r4, #1
 800a6ca:	f101 0814 	add.w	r8, r1, #20
 800a6ce:	f100 0514 	add.w	r5, r0, #20
 800a6d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6f0:	d331      	bcc.n	800a756 <quorem+0x9e>
 800a6f2:	f04f 0e00 	mov.w	lr, #0
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	46ac      	mov	ip, r5
 800a6fa:	46f2      	mov	sl, lr
 800a6fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a700:	b293      	uxth	r3, r2
 800a702:	fb06 e303 	mla	r3, r6, r3, lr
 800a706:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ebaa 0303 	sub.w	r3, sl, r3
 800a710:	f8dc a000 	ldr.w	sl, [ip]
 800a714:	0c12      	lsrs	r2, r2, #16
 800a716:	fa13 f38a 	uxtah	r3, r3, sl
 800a71a:	fb06 e202 	mla	r2, r6, r2, lr
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	9b00      	ldr	r3, [sp, #0]
 800a722:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a726:	b292      	uxth	r2, r2
 800a728:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a72c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a730:	f8bd 3000 	ldrh.w	r3, [sp]
 800a734:	4581      	cmp	r9, r0
 800a736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a73a:	f84c 3b04 	str.w	r3, [ip], #4
 800a73e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a742:	d2db      	bcs.n	800a6fc <quorem+0x44>
 800a744:	f855 300b 	ldr.w	r3, [r5, fp]
 800a748:	b92b      	cbnz	r3, 800a756 <quorem+0x9e>
 800a74a:	9b01      	ldr	r3, [sp, #4]
 800a74c:	3b04      	subs	r3, #4
 800a74e:	429d      	cmp	r5, r3
 800a750:	461a      	mov	r2, r3
 800a752:	d32e      	bcc.n	800a7b2 <quorem+0xfa>
 800a754:	613c      	str	r4, [r7, #16]
 800a756:	4638      	mov	r0, r7
 800a758:	f001 fe90 	bl	800c47c <__mcmp>
 800a75c:	2800      	cmp	r0, #0
 800a75e:	db24      	blt.n	800a7aa <quorem+0xf2>
 800a760:	3601      	adds	r6, #1
 800a762:	4628      	mov	r0, r5
 800a764:	f04f 0c00 	mov.w	ip, #0
 800a768:	f858 2b04 	ldr.w	r2, [r8], #4
 800a76c:	f8d0 e000 	ldr.w	lr, [r0]
 800a770:	b293      	uxth	r3, r2
 800a772:	ebac 0303 	sub.w	r3, ip, r3
 800a776:	0c12      	lsrs	r2, r2, #16
 800a778:	fa13 f38e 	uxtah	r3, r3, lr
 800a77c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a780:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a784:	b29b      	uxth	r3, r3
 800a786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a78a:	45c1      	cmp	r9, r8
 800a78c:	f840 3b04 	str.w	r3, [r0], #4
 800a790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a794:	d2e8      	bcs.n	800a768 <quorem+0xb0>
 800a796:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a79a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a79e:	b922      	cbnz	r2, 800a7aa <quorem+0xf2>
 800a7a0:	3b04      	subs	r3, #4
 800a7a2:	429d      	cmp	r5, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	d30a      	bcc.n	800a7be <quorem+0x106>
 800a7a8:	613c      	str	r4, [r7, #16]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	b003      	add	sp, #12
 800a7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b2:	6812      	ldr	r2, [r2, #0]
 800a7b4:	3b04      	subs	r3, #4
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	d1cc      	bne.n	800a754 <quorem+0x9c>
 800a7ba:	3c01      	subs	r4, #1
 800a7bc:	e7c7      	b.n	800a74e <quorem+0x96>
 800a7be:	6812      	ldr	r2, [r2, #0]
 800a7c0:	3b04      	subs	r3, #4
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	d1f0      	bne.n	800a7a8 <quorem+0xf0>
 800a7c6:	3c01      	subs	r4, #1
 800a7c8:	e7eb      	b.n	800a7a2 <quorem+0xea>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e7ee      	b.n	800a7ac <quorem+0xf4>
	...

0800a7d0 <_dtoa_r>:
 800a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	ed2d 8b04 	vpush	{d8-d9}
 800a7d8:	ec57 6b10 	vmov	r6, r7, d0
 800a7dc:	b093      	sub	sp, #76	; 0x4c
 800a7de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7e4:	9106      	str	r1, [sp, #24]
 800a7e6:	ee10 aa10 	vmov	sl, s0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a7f0:	46bb      	mov	fp, r7
 800a7f2:	b975      	cbnz	r5, 800a812 <_dtoa_r+0x42>
 800a7f4:	2010      	movs	r0, #16
 800a7f6:	f7fd fd61 	bl	80082bc <malloc>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a7fe:	b920      	cbnz	r0, 800a80a <_dtoa_r+0x3a>
 800a800:	4ba7      	ldr	r3, [pc, #668]	; (800aaa0 <_dtoa_r+0x2d0>)
 800a802:	21ea      	movs	r1, #234	; 0xea
 800a804:	48a7      	ldr	r0, [pc, #668]	; (800aaa4 <_dtoa_r+0x2d4>)
 800a806:	f002 fde7 	bl	800d3d8 <__assert_func>
 800a80a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a80e:	6005      	str	r5, [r0, #0]
 800a810:	60c5      	str	r5, [r0, #12]
 800a812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a814:	6819      	ldr	r1, [r3, #0]
 800a816:	b151      	cbz	r1, 800a82e <_dtoa_r+0x5e>
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	604a      	str	r2, [r1, #4]
 800a81c:	2301      	movs	r3, #1
 800a81e:	4093      	lsls	r3, r2
 800a820:	608b      	str	r3, [r1, #8]
 800a822:	4620      	mov	r0, r4
 800a824:	f001 fb9e 	bl	800bf64 <_Bfree>
 800a828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	1e3b      	subs	r3, r7, #0
 800a830:	bfaa      	itet	ge
 800a832:	2300      	movge	r3, #0
 800a834:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a838:	f8c8 3000 	strge.w	r3, [r8]
 800a83c:	4b9a      	ldr	r3, [pc, #616]	; (800aaa8 <_dtoa_r+0x2d8>)
 800a83e:	bfbc      	itt	lt
 800a840:	2201      	movlt	r2, #1
 800a842:	f8c8 2000 	strlt.w	r2, [r8]
 800a846:	ea33 030b 	bics.w	r3, r3, fp
 800a84a:	d11b      	bne.n	800a884 <_dtoa_r+0xb4>
 800a84c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a852:	6013      	str	r3, [r2, #0]
 800a854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a858:	4333      	orrs	r3, r6
 800a85a:	f000 8592 	beq.w	800b382 <_dtoa_r+0xbb2>
 800a85e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a860:	b963      	cbnz	r3, 800a87c <_dtoa_r+0xac>
 800a862:	4b92      	ldr	r3, [pc, #584]	; (800aaac <_dtoa_r+0x2dc>)
 800a864:	e022      	b.n	800a8ac <_dtoa_r+0xdc>
 800a866:	4b92      	ldr	r3, [pc, #584]	; (800aab0 <_dtoa_r+0x2e0>)
 800a868:	9301      	str	r3, [sp, #4]
 800a86a:	3308      	adds	r3, #8
 800a86c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	9801      	ldr	r0, [sp, #4]
 800a872:	b013      	add	sp, #76	; 0x4c
 800a874:	ecbd 8b04 	vpop	{d8-d9}
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	4b8b      	ldr	r3, [pc, #556]	; (800aaac <_dtoa_r+0x2dc>)
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	3303      	adds	r3, #3
 800a882:	e7f3      	b.n	800a86c <_dtoa_r+0x9c>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	4650      	mov	r0, sl
 800a88a:	4659      	mov	r1, fp
 800a88c:	f7f6 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a890:	ec4b ab19 	vmov	d9, sl, fp
 800a894:	4680      	mov	r8, r0
 800a896:	b158      	cbz	r0, 800a8b0 <_dtoa_r+0xe0>
 800a898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a89a:	2301      	movs	r3, #1
 800a89c:	6013      	str	r3, [r2, #0]
 800a89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 856b 	beq.w	800b37c <_dtoa_r+0xbac>
 800a8a6:	4883      	ldr	r0, [pc, #524]	; (800aab4 <_dtoa_r+0x2e4>)
 800a8a8:	6018      	str	r0, [r3, #0]
 800a8aa:	1e43      	subs	r3, r0, #1
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	e7df      	b.n	800a870 <_dtoa_r+0xa0>
 800a8b0:	ec4b ab10 	vmov	d0, sl, fp
 800a8b4:	aa10      	add	r2, sp, #64	; 0x40
 800a8b6:	a911      	add	r1, sp, #68	; 0x44
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	f001 ff01 	bl	800c6c0 <__d2b>
 800a8be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a8c2:	ee08 0a10 	vmov	s16, r0
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	f000 8084 	beq.w	800a9d4 <_dtoa_r+0x204>
 800a8cc:	ee19 3a90 	vmov	r3, s19
 800a8d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a8d8:	4656      	mov	r6, sl
 800a8da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a8de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a8e6:	4b74      	ldr	r3, [pc, #464]	; (800aab8 <_dtoa_r+0x2e8>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fccb 	bl	8000288 <__aeabi_dsub>
 800a8f2:	a365      	add	r3, pc, #404	; (adr r3, 800aa88 <_dtoa_r+0x2b8>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f5 fe7e 	bl	80005f8 <__aeabi_dmul>
 800a8fc:	a364      	add	r3, pc, #400	; (adr r3, 800aa90 <_dtoa_r+0x2c0>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	f7f5 fcc3 	bl	800028c <__adddf3>
 800a906:	4606      	mov	r6, r0
 800a908:	4628      	mov	r0, r5
 800a90a:	460f      	mov	r7, r1
 800a90c:	f7f5 fe0a 	bl	8000524 <__aeabi_i2d>
 800a910:	a361      	add	r3, pc, #388	; (adr r3, 800aa98 <_dtoa_r+0x2c8>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	f7f5 fe6f 	bl	80005f8 <__aeabi_dmul>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4630      	mov	r0, r6
 800a920:	4639      	mov	r1, r7
 800a922:	f7f5 fcb3 	bl	800028c <__adddf3>
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	f7f6 f915 	bl	8000b58 <__aeabi_d2iz>
 800a92e:	2200      	movs	r2, #0
 800a930:	9000      	str	r0, [sp, #0]
 800a932:	2300      	movs	r3, #0
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f6 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800a93c:	b150      	cbz	r0, 800a954 <_dtoa_r+0x184>
 800a93e:	9800      	ldr	r0, [sp, #0]
 800a940:	f7f5 fdf0 	bl	8000524 <__aeabi_i2d>
 800a944:	4632      	mov	r2, r6
 800a946:	463b      	mov	r3, r7
 800a948:	f7f6 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800a94c:	b910      	cbnz	r0, 800a954 <_dtoa_r+0x184>
 800a94e:	9b00      	ldr	r3, [sp, #0]
 800a950:	3b01      	subs	r3, #1
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b16      	cmp	r3, #22
 800a958:	d85a      	bhi.n	800aa10 <_dtoa_r+0x240>
 800a95a:	9a00      	ldr	r2, [sp, #0]
 800a95c:	4b57      	ldr	r3, [pc, #348]	; (800aabc <_dtoa_r+0x2ec>)
 800a95e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	ec51 0b19 	vmov	r0, r1, d9
 800a96a:	f7f6 f8b7 	bl	8000adc <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d050      	beq.n	800aa14 <_dtoa_r+0x244>
 800a972:	9b00      	ldr	r3, [sp, #0]
 800a974:	3b01      	subs	r3, #1
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	2300      	movs	r3, #0
 800a97a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a97c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a97e:	1b5d      	subs	r5, r3, r5
 800a980:	1e6b      	subs	r3, r5, #1
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	bf45      	ittet	mi
 800a986:	f1c5 0301 	rsbmi	r3, r5, #1
 800a98a:	9304      	strmi	r3, [sp, #16]
 800a98c:	2300      	movpl	r3, #0
 800a98e:	2300      	movmi	r3, #0
 800a990:	bf4c      	ite	mi
 800a992:	9305      	strmi	r3, [sp, #20]
 800a994:	9304      	strpl	r3, [sp, #16]
 800a996:	9b00      	ldr	r3, [sp, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	db3d      	blt.n	800aa18 <_dtoa_r+0x248>
 800a99c:	9b05      	ldr	r3, [sp, #20]
 800a99e:	9a00      	ldr	r2, [sp, #0]
 800a9a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a9a2:	4413      	add	r3, r2
 800a9a4:	9305      	str	r3, [sp, #20]
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9307      	str	r3, [sp, #28]
 800a9aa:	9b06      	ldr	r3, [sp, #24]
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	f200 8089 	bhi.w	800aac4 <_dtoa_r+0x2f4>
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	bfc4      	itt	gt
 800a9b6:	3b04      	subgt	r3, #4
 800a9b8:	9306      	strgt	r3, [sp, #24]
 800a9ba:	9b06      	ldr	r3, [sp, #24]
 800a9bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a9c0:	bfcc      	ite	gt
 800a9c2:	2500      	movgt	r5, #0
 800a9c4:	2501      	movle	r5, #1
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	f200 8087 	bhi.w	800aada <_dtoa_r+0x30a>
 800a9cc:	e8df f003 	tbb	[pc, r3]
 800a9d0:	59383a2d 	.word	0x59383a2d
 800a9d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9d8:	441d      	add	r5, r3
 800a9da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9de:	2b20      	cmp	r3, #32
 800a9e0:	bfc1      	itttt	gt
 800a9e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a9ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a9ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a9f2:	bfda      	itte	le
 800a9f4:	f1c3 0320 	rsble	r3, r3, #32
 800a9f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a9fc:	4318      	orrgt	r0, r3
 800a9fe:	f7f5 fd81 	bl	8000504 <__aeabi_ui2d>
 800aa02:	2301      	movs	r3, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa0a:	3d01      	subs	r5, #1
 800aa0c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa0e:	e76a      	b.n	800a8e6 <_dtoa_r+0x116>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e7b2      	b.n	800a97a <_dtoa_r+0x1aa>
 800aa14:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa16:	e7b1      	b.n	800a97c <_dtoa_r+0x1ac>
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	9a00      	ldr	r2, [sp, #0]
 800aa1c:	1a9b      	subs	r3, r3, r2
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	4253      	negs	r3, r2
 800aa22:	9307      	str	r3, [sp, #28]
 800aa24:	2300      	movs	r3, #0
 800aa26:	930a      	str	r3, [sp, #40]	; 0x28
 800aa28:	e7bf      	b.n	800a9aa <_dtoa_r+0x1da>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	9308      	str	r3, [sp, #32]
 800aa2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dc55      	bgt.n	800aae0 <_dtoa_r+0x310>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa3e:	e00c      	b.n	800aa5a <_dtoa_r+0x28a>
 800aa40:	2301      	movs	r3, #1
 800aa42:	e7f3      	b.n	800aa2c <_dtoa_r+0x25c>
 800aa44:	2300      	movs	r3, #0
 800aa46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa48:	9308      	str	r3, [sp, #32]
 800aa4a:	9b00      	ldr	r3, [sp, #0]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	9302      	str	r3, [sp, #8]
 800aa50:	3301      	adds	r3, #1
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	bfb8      	it	lt
 800aa58:	2301      	movlt	r3, #1
 800aa5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	6042      	str	r2, [r0, #4]
 800aa60:	2204      	movs	r2, #4
 800aa62:	f102 0614 	add.w	r6, r2, #20
 800aa66:	429e      	cmp	r6, r3
 800aa68:	6841      	ldr	r1, [r0, #4]
 800aa6a:	d93d      	bls.n	800aae8 <_dtoa_r+0x318>
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f001 fa39 	bl	800bee4 <_Balloc>
 800aa72:	9001      	str	r0, [sp, #4]
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d13b      	bne.n	800aaf0 <_dtoa_r+0x320>
 800aa78:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <_dtoa_r+0x2f0>)
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa80:	e6c0      	b.n	800a804 <_dtoa_r+0x34>
 800aa82:	2301      	movs	r3, #1
 800aa84:	e7df      	b.n	800aa46 <_dtoa_r+0x276>
 800aa86:	bf00      	nop
 800aa88:	636f4361 	.word	0x636f4361
 800aa8c:	3fd287a7 	.word	0x3fd287a7
 800aa90:	8b60c8b3 	.word	0x8b60c8b3
 800aa94:	3fc68a28 	.word	0x3fc68a28
 800aa98:	509f79fb 	.word	0x509f79fb
 800aa9c:	3fd34413 	.word	0x3fd34413
 800aaa0:	0800e3a6 	.word	0x0800e3a6
 800aaa4:	0800e3bd 	.word	0x0800e3bd
 800aaa8:	7ff00000 	.word	0x7ff00000
 800aaac:	0800e3a2 	.word	0x0800e3a2
 800aab0:	0800e399 	.word	0x0800e399
 800aab4:	0800e67a 	.word	0x0800e67a
 800aab8:	3ff80000 	.word	0x3ff80000
 800aabc:	0800e590 	.word	0x0800e590
 800aac0:	0800e418 	.word	0x0800e418
 800aac4:	2501      	movs	r5, #1
 800aac6:	2300      	movs	r3, #0
 800aac8:	9306      	str	r3, [sp, #24]
 800aaca:	9508      	str	r5, [sp, #32]
 800aacc:	f04f 33ff 	mov.w	r3, #4294967295
 800aad0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aad4:	2200      	movs	r2, #0
 800aad6:	2312      	movs	r3, #18
 800aad8:	e7b0      	b.n	800aa3c <_dtoa_r+0x26c>
 800aada:	2301      	movs	r3, #1
 800aadc:	9308      	str	r3, [sp, #32]
 800aade:	e7f5      	b.n	800aacc <_dtoa_r+0x2fc>
 800aae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aae6:	e7b8      	b.n	800aa5a <_dtoa_r+0x28a>
 800aae8:	3101      	adds	r1, #1
 800aaea:	6041      	str	r1, [r0, #4]
 800aaec:	0052      	lsls	r2, r2, #1
 800aaee:	e7b8      	b.n	800aa62 <_dtoa_r+0x292>
 800aaf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaf2:	9a01      	ldr	r2, [sp, #4]
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	2b0e      	cmp	r3, #14
 800aafa:	f200 809d 	bhi.w	800ac38 <_dtoa_r+0x468>
 800aafe:	2d00      	cmp	r5, #0
 800ab00:	f000 809a 	beq.w	800ac38 <_dtoa_r+0x468>
 800ab04:	9b00      	ldr	r3, [sp, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	dd32      	ble.n	800ab70 <_dtoa_r+0x3a0>
 800ab0a:	4ab7      	ldr	r2, [pc, #732]	; (800ade8 <_dtoa_r+0x618>)
 800ab0c:	f003 030f 	and.w	r3, r3, #15
 800ab10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab18:	9b00      	ldr	r3, [sp, #0]
 800ab1a:	05d8      	lsls	r0, r3, #23
 800ab1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ab20:	d516      	bpl.n	800ab50 <_dtoa_r+0x380>
 800ab22:	4bb2      	ldr	r3, [pc, #712]	; (800adec <_dtoa_r+0x61c>)
 800ab24:	ec51 0b19 	vmov	r0, r1, d9
 800ab28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab2c:	f7f5 fe8e 	bl	800084c <__aeabi_ddiv>
 800ab30:	f007 070f 	and.w	r7, r7, #15
 800ab34:	4682      	mov	sl, r0
 800ab36:	468b      	mov	fp, r1
 800ab38:	2503      	movs	r5, #3
 800ab3a:	4eac      	ldr	r6, [pc, #688]	; (800adec <_dtoa_r+0x61c>)
 800ab3c:	b957      	cbnz	r7, 800ab54 <_dtoa_r+0x384>
 800ab3e:	4642      	mov	r2, r8
 800ab40:	464b      	mov	r3, r9
 800ab42:	4650      	mov	r0, sl
 800ab44:	4659      	mov	r1, fp
 800ab46:	f7f5 fe81 	bl	800084c <__aeabi_ddiv>
 800ab4a:	4682      	mov	sl, r0
 800ab4c:	468b      	mov	fp, r1
 800ab4e:	e028      	b.n	800aba2 <_dtoa_r+0x3d2>
 800ab50:	2502      	movs	r5, #2
 800ab52:	e7f2      	b.n	800ab3a <_dtoa_r+0x36a>
 800ab54:	07f9      	lsls	r1, r7, #31
 800ab56:	d508      	bpl.n	800ab6a <_dtoa_r+0x39a>
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	3501      	adds	r5, #1
 800ab66:	4680      	mov	r8, r0
 800ab68:	4689      	mov	r9, r1
 800ab6a:	107f      	asrs	r7, r7, #1
 800ab6c:	3608      	adds	r6, #8
 800ab6e:	e7e5      	b.n	800ab3c <_dtoa_r+0x36c>
 800ab70:	f000 809b 	beq.w	800acaa <_dtoa_r+0x4da>
 800ab74:	9b00      	ldr	r3, [sp, #0]
 800ab76:	4f9d      	ldr	r7, [pc, #628]	; (800adec <_dtoa_r+0x61c>)
 800ab78:	425e      	negs	r6, r3
 800ab7a:	4b9b      	ldr	r3, [pc, #620]	; (800ade8 <_dtoa_r+0x618>)
 800ab7c:	f006 020f 	and.w	r2, r6, #15
 800ab80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	ec51 0b19 	vmov	r0, r1, d9
 800ab8c:	f7f5 fd34 	bl	80005f8 <__aeabi_dmul>
 800ab90:	1136      	asrs	r6, r6, #4
 800ab92:	4682      	mov	sl, r0
 800ab94:	468b      	mov	fp, r1
 800ab96:	2300      	movs	r3, #0
 800ab98:	2502      	movs	r5, #2
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	d17a      	bne.n	800ac94 <_dtoa_r+0x4c4>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1d3      	bne.n	800ab4a <_dtoa_r+0x37a>
 800aba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 8082 	beq.w	800acae <_dtoa_r+0x4de>
 800abaa:	4b91      	ldr	r3, [pc, #580]	; (800adf0 <_dtoa_r+0x620>)
 800abac:	2200      	movs	r2, #0
 800abae:	4650      	mov	r0, sl
 800abb0:	4659      	mov	r1, fp
 800abb2:	f7f5 ff93 	bl	8000adc <__aeabi_dcmplt>
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d079      	beq.n	800acae <_dtoa_r+0x4de>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d076      	beq.n	800acae <_dtoa_r+0x4de>
 800abc0:	9b02      	ldr	r3, [sp, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dd36      	ble.n	800ac34 <_dtoa_r+0x464>
 800abc6:	9b00      	ldr	r3, [sp, #0]
 800abc8:	4650      	mov	r0, sl
 800abca:	4659      	mov	r1, fp
 800abcc:	1e5f      	subs	r7, r3, #1
 800abce:	2200      	movs	r2, #0
 800abd0:	4b88      	ldr	r3, [pc, #544]	; (800adf4 <_dtoa_r+0x624>)
 800abd2:	f7f5 fd11 	bl	80005f8 <__aeabi_dmul>
 800abd6:	9e02      	ldr	r6, [sp, #8]
 800abd8:	4682      	mov	sl, r0
 800abda:	468b      	mov	fp, r1
 800abdc:	3501      	adds	r5, #1
 800abde:	4628      	mov	r0, r5
 800abe0:	f7f5 fca0 	bl	8000524 <__aeabi_i2d>
 800abe4:	4652      	mov	r2, sl
 800abe6:	465b      	mov	r3, fp
 800abe8:	f7f5 fd06 	bl	80005f8 <__aeabi_dmul>
 800abec:	4b82      	ldr	r3, [pc, #520]	; (800adf8 <_dtoa_r+0x628>)
 800abee:	2200      	movs	r2, #0
 800abf0:	f7f5 fb4c 	bl	800028c <__adddf3>
 800abf4:	46d0      	mov	r8, sl
 800abf6:	46d9      	mov	r9, fp
 800abf8:	4682      	mov	sl, r0
 800abfa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d158      	bne.n	800acb4 <_dtoa_r+0x4e4>
 800ac02:	4b7e      	ldr	r3, [pc, #504]	; (800adfc <_dtoa_r+0x62c>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	4640      	mov	r0, r8
 800ac08:	4649      	mov	r1, r9
 800ac0a:	f7f5 fb3d 	bl	8000288 <__aeabi_dsub>
 800ac0e:	4652      	mov	r2, sl
 800ac10:	465b      	mov	r3, fp
 800ac12:	4680      	mov	r8, r0
 800ac14:	4689      	mov	r9, r1
 800ac16:	f7f5 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f040 8295 	bne.w	800b14a <_dtoa_r+0x97a>
 800ac20:	4652      	mov	r2, sl
 800ac22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac26:	4640      	mov	r0, r8
 800ac28:	4649      	mov	r1, r9
 800ac2a:	f7f5 ff57 	bl	8000adc <__aeabi_dcmplt>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	f040 8289 	bne.w	800b146 <_dtoa_r+0x976>
 800ac34:	ec5b ab19 	vmov	sl, fp, d9
 800ac38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f2c0 8148 	blt.w	800aed0 <_dtoa_r+0x700>
 800ac40:	9a00      	ldr	r2, [sp, #0]
 800ac42:	2a0e      	cmp	r2, #14
 800ac44:	f300 8144 	bgt.w	800aed0 <_dtoa_r+0x700>
 800ac48:	4b67      	ldr	r3, [pc, #412]	; (800ade8 <_dtoa_r+0x618>)
 800ac4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f280 80d5 	bge.w	800ae04 <_dtoa_r+0x634>
 800ac5a:	9b03      	ldr	r3, [sp, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f300 80d1 	bgt.w	800ae04 <_dtoa_r+0x634>
 800ac62:	f040 826f 	bne.w	800b144 <_dtoa_r+0x974>
 800ac66:	4b65      	ldr	r3, [pc, #404]	; (800adfc <_dtoa_r+0x62c>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fcc3 	bl	80005f8 <__aeabi_dmul>
 800ac72:	4652      	mov	r2, sl
 800ac74:	465b      	mov	r3, fp
 800ac76:	f7f5 ff45 	bl	8000b04 <__aeabi_dcmpge>
 800ac7a:	9e03      	ldr	r6, [sp, #12]
 800ac7c:	4637      	mov	r7, r6
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f040 8245 	bne.w	800b10e <_dtoa_r+0x93e>
 800ac84:	9d01      	ldr	r5, [sp, #4]
 800ac86:	2331      	movs	r3, #49	; 0x31
 800ac88:	f805 3b01 	strb.w	r3, [r5], #1
 800ac8c:	9b00      	ldr	r3, [sp, #0]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	e240      	b.n	800b116 <_dtoa_r+0x946>
 800ac94:	07f2      	lsls	r2, r6, #31
 800ac96:	d505      	bpl.n	800aca4 <_dtoa_r+0x4d4>
 800ac98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac9c:	f7f5 fcac 	bl	80005f8 <__aeabi_dmul>
 800aca0:	3501      	adds	r5, #1
 800aca2:	2301      	movs	r3, #1
 800aca4:	1076      	asrs	r6, r6, #1
 800aca6:	3708      	adds	r7, #8
 800aca8:	e777      	b.n	800ab9a <_dtoa_r+0x3ca>
 800acaa:	2502      	movs	r5, #2
 800acac:	e779      	b.n	800aba2 <_dtoa_r+0x3d2>
 800acae:	9f00      	ldr	r7, [sp, #0]
 800acb0:	9e03      	ldr	r6, [sp, #12]
 800acb2:	e794      	b.n	800abde <_dtoa_r+0x40e>
 800acb4:	9901      	ldr	r1, [sp, #4]
 800acb6:	4b4c      	ldr	r3, [pc, #304]	; (800ade8 <_dtoa_r+0x618>)
 800acb8:	4431      	add	r1, r6
 800acba:	910d      	str	r1, [sp, #52]	; 0x34
 800acbc:	9908      	ldr	r1, [sp, #32]
 800acbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800acc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acc6:	2900      	cmp	r1, #0
 800acc8:	d043      	beq.n	800ad52 <_dtoa_r+0x582>
 800acca:	494d      	ldr	r1, [pc, #308]	; (800ae00 <_dtoa_r+0x630>)
 800accc:	2000      	movs	r0, #0
 800acce:	f7f5 fdbd 	bl	800084c <__aeabi_ddiv>
 800acd2:	4652      	mov	r2, sl
 800acd4:	465b      	mov	r3, fp
 800acd6:	f7f5 fad7 	bl	8000288 <__aeabi_dsub>
 800acda:	9d01      	ldr	r5, [sp, #4]
 800acdc:	4682      	mov	sl, r0
 800acde:	468b      	mov	fp, r1
 800ace0:	4649      	mov	r1, r9
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7f5 ff38 	bl	8000b58 <__aeabi_d2iz>
 800ace8:	4606      	mov	r6, r0
 800acea:	f7f5 fc1b 	bl	8000524 <__aeabi_i2d>
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4640      	mov	r0, r8
 800acf4:	4649      	mov	r1, r9
 800acf6:	f7f5 fac7 	bl	8000288 <__aeabi_dsub>
 800acfa:	3630      	adds	r6, #48	; 0x30
 800acfc:	f805 6b01 	strb.w	r6, [r5], #1
 800ad00:	4652      	mov	r2, sl
 800ad02:	465b      	mov	r3, fp
 800ad04:	4680      	mov	r8, r0
 800ad06:	4689      	mov	r9, r1
 800ad08:	f7f5 fee8 	bl	8000adc <__aeabi_dcmplt>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d163      	bne.n	800add8 <_dtoa_r+0x608>
 800ad10:	4642      	mov	r2, r8
 800ad12:	464b      	mov	r3, r9
 800ad14:	4936      	ldr	r1, [pc, #216]	; (800adf0 <_dtoa_r+0x620>)
 800ad16:	2000      	movs	r0, #0
 800ad18:	f7f5 fab6 	bl	8000288 <__aeabi_dsub>
 800ad1c:	4652      	mov	r2, sl
 800ad1e:	465b      	mov	r3, fp
 800ad20:	f7f5 fedc 	bl	8000adc <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	f040 80b5 	bne.w	800ae94 <_dtoa_r+0x6c4>
 800ad2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad2c:	429d      	cmp	r5, r3
 800ad2e:	d081      	beq.n	800ac34 <_dtoa_r+0x464>
 800ad30:	4b30      	ldr	r3, [pc, #192]	; (800adf4 <_dtoa_r+0x624>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	4650      	mov	r0, sl
 800ad36:	4659      	mov	r1, fp
 800ad38:	f7f5 fc5e 	bl	80005f8 <__aeabi_dmul>
 800ad3c:	4b2d      	ldr	r3, [pc, #180]	; (800adf4 <_dtoa_r+0x624>)
 800ad3e:	4682      	mov	sl, r0
 800ad40:	468b      	mov	fp, r1
 800ad42:	4640      	mov	r0, r8
 800ad44:	4649      	mov	r1, r9
 800ad46:	2200      	movs	r2, #0
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4680      	mov	r8, r0
 800ad4e:	4689      	mov	r9, r1
 800ad50:	e7c6      	b.n	800ace0 <_dtoa_r+0x510>
 800ad52:	4650      	mov	r0, sl
 800ad54:	4659      	mov	r1, fp
 800ad56:	f7f5 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ad5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad5c:	9d01      	ldr	r5, [sp, #4]
 800ad5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad60:	4682      	mov	sl, r0
 800ad62:	468b      	mov	fp, r1
 800ad64:	4649      	mov	r1, r9
 800ad66:	4640      	mov	r0, r8
 800ad68:	f7f5 fef6 	bl	8000b58 <__aeabi_d2iz>
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	f7f5 fbd9 	bl	8000524 <__aeabi_i2d>
 800ad72:	3630      	adds	r6, #48	; 0x30
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	f7f5 fa84 	bl	8000288 <__aeabi_dsub>
 800ad80:	f805 6b01 	strb.w	r6, [r5], #1
 800ad84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad86:	429d      	cmp	r5, r3
 800ad88:	4680      	mov	r8, r0
 800ad8a:	4689      	mov	r9, r1
 800ad8c:	f04f 0200 	mov.w	r2, #0
 800ad90:	d124      	bne.n	800addc <_dtoa_r+0x60c>
 800ad92:	4b1b      	ldr	r3, [pc, #108]	; (800ae00 <_dtoa_r+0x630>)
 800ad94:	4650      	mov	r0, sl
 800ad96:	4659      	mov	r1, fp
 800ad98:	f7f5 fa78 	bl	800028c <__adddf3>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4640      	mov	r0, r8
 800ada2:	4649      	mov	r1, r9
 800ada4:	f7f5 feb8 	bl	8000b18 <__aeabi_dcmpgt>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d173      	bne.n	800ae94 <_dtoa_r+0x6c4>
 800adac:	4652      	mov	r2, sl
 800adae:	465b      	mov	r3, fp
 800adb0:	4913      	ldr	r1, [pc, #76]	; (800ae00 <_dtoa_r+0x630>)
 800adb2:	2000      	movs	r0, #0
 800adb4:	f7f5 fa68 	bl	8000288 <__aeabi_dsub>
 800adb8:	4602      	mov	r2, r0
 800adba:	460b      	mov	r3, r1
 800adbc:	4640      	mov	r0, r8
 800adbe:	4649      	mov	r1, r9
 800adc0:	f7f5 fe8c 	bl	8000adc <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f43f af35 	beq.w	800ac34 <_dtoa_r+0x464>
 800adca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adcc:	1e6b      	subs	r3, r5, #1
 800adce:	930f      	str	r3, [sp, #60]	; 0x3c
 800add0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800add4:	2b30      	cmp	r3, #48	; 0x30
 800add6:	d0f8      	beq.n	800adca <_dtoa_r+0x5fa>
 800add8:	9700      	str	r7, [sp, #0]
 800adda:	e049      	b.n	800ae70 <_dtoa_r+0x6a0>
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <_dtoa_r+0x624>)
 800adde:	f7f5 fc0b 	bl	80005f8 <__aeabi_dmul>
 800ade2:	4680      	mov	r8, r0
 800ade4:	4689      	mov	r9, r1
 800ade6:	e7bd      	b.n	800ad64 <_dtoa_r+0x594>
 800ade8:	0800e590 	.word	0x0800e590
 800adec:	0800e568 	.word	0x0800e568
 800adf0:	3ff00000 	.word	0x3ff00000
 800adf4:	40240000 	.word	0x40240000
 800adf8:	401c0000 	.word	0x401c0000
 800adfc:	40140000 	.word	0x40140000
 800ae00:	3fe00000 	.word	0x3fe00000
 800ae04:	9d01      	ldr	r5, [sp, #4]
 800ae06:	4656      	mov	r6, sl
 800ae08:	465f      	mov	r7, fp
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	4630      	mov	r0, r6
 800ae10:	4639      	mov	r1, r7
 800ae12:	f7f5 fd1b 	bl	800084c <__aeabi_ddiv>
 800ae16:	f7f5 fe9f 	bl	8000b58 <__aeabi_d2iz>
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	f7f5 fb82 	bl	8000524 <__aeabi_i2d>
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ae34:	f7f5 fa28 	bl	8000288 <__aeabi_dsub>
 800ae38:	f805 6b01 	strb.w	r6, [r5], #1
 800ae3c:	9e01      	ldr	r6, [sp, #4]
 800ae3e:	9f03      	ldr	r7, [sp, #12]
 800ae40:	1bae      	subs	r6, r5, r6
 800ae42:	42b7      	cmp	r7, r6
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	d135      	bne.n	800aeb6 <_dtoa_r+0x6e6>
 800ae4a:	f7f5 fa1f 	bl	800028c <__adddf3>
 800ae4e:	4642      	mov	r2, r8
 800ae50:	464b      	mov	r3, r9
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	f7f5 fe5f 	bl	8000b18 <__aeabi_dcmpgt>
 800ae5a:	b9d0      	cbnz	r0, 800ae92 <_dtoa_r+0x6c2>
 800ae5c:	4642      	mov	r2, r8
 800ae5e:	464b      	mov	r3, r9
 800ae60:	4630      	mov	r0, r6
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae68:	b110      	cbz	r0, 800ae70 <_dtoa_r+0x6a0>
 800ae6a:	f01a 0f01 	tst.w	sl, #1
 800ae6e:	d110      	bne.n	800ae92 <_dtoa_r+0x6c2>
 800ae70:	4620      	mov	r0, r4
 800ae72:	ee18 1a10 	vmov	r1, s16
 800ae76:	f001 f875 	bl	800bf64 <_Bfree>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	9800      	ldr	r0, [sp, #0]
 800ae7e:	702b      	strb	r3, [r5, #0]
 800ae80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae82:	3001      	adds	r0, #1
 800ae84:	6018      	str	r0, [r3, #0]
 800ae86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f43f acf1 	beq.w	800a870 <_dtoa_r+0xa0>
 800ae8e:	601d      	str	r5, [r3, #0]
 800ae90:	e4ee      	b.n	800a870 <_dtoa_r+0xa0>
 800ae92:	9f00      	ldr	r7, [sp, #0]
 800ae94:	462b      	mov	r3, r5
 800ae96:	461d      	mov	r5, r3
 800ae98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae9c:	2a39      	cmp	r2, #57	; 0x39
 800ae9e:	d106      	bne.n	800aeae <_dtoa_r+0x6de>
 800aea0:	9a01      	ldr	r2, [sp, #4]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d1f7      	bne.n	800ae96 <_dtoa_r+0x6c6>
 800aea6:	9901      	ldr	r1, [sp, #4]
 800aea8:	2230      	movs	r2, #48	; 0x30
 800aeaa:	3701      	adds	r7, #1
 800aeac:	700a      	strb	r2, [r1, #0]
 800aeae:	781a      	ldrb	r2, [r3, #0]
 800aeb0:	3201      	adds	r2, #1
 800aeb2:	701a      	strb	r2, [r3, #0]
 800aeb4:	e790      	b.n	800add8 <_dtoa_r+0x608>
 800aeb6:	4ba6      	ldr	r3, [pc, #664]	; (800b150 <_dtoa_r+0x980>)
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7f5 fb9d 	bl	80005f8 <__aeabi_dmul>
 800aebe:	2200      	movs	r2, #0
 800aec0:	2300      	movs	r3, #0
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	f7f5 fdff 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d09d      	beq.n	800ae0a <_dtoa_r+0x63a>
 800aece:	e7cf      	b.n	800ae70 <_dtoa_r+0x6a0>
 800aed0:	9a08      	ldr	r2, [sp, #32]
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	f000 80d7 	beq.w	800b086 <_dtoa_r+0x8b6>
 800aed8:	9a06      	ldr	r2, [sp, #24]
 800aeda:	2a01      	cmp	r2, #1
 800aedc:	f300 80ba 	bgt.w	800b054 <_dtoa_r+0x884>
 800aee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aee2:	2a00      	cmp	r2, #0
 800aee4:	f000 80b2 	beq.w	800b04c <_dtoa_r+0x87c>
 800aee8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aeec:	9e07      	ldr	r6, [sp, #28]
 800aeee:	9d04      	ldr	r5, [sp, #16]
 800aef0:	9a04      	ldr	r2, [sp, #16]
 800aef2:	441a      	add	r2, r3
 800aef4:	9204      	str	r2, [sp, #16]
 800aef6:	9a05      	ldr	r2, [sp, #20]
 800aef8:	2101      	movs	r1, #1
 800aefa:	441a      	add	r2, r3
 800aefc:	4620      	mov	r0, r4
 800aefe:	9205      	str	r2, [sp, #20]
 800af00:	f001 f932 	bl	800c168 <__i2b>
 800af04:	4607      	mov	r7, r0
 800af06:	2d00      	cmp	r5, #0
 800af08:	dd0c      	ble.n	800af24 <_dtoa_r+0x754>
 800af0a:	9b05      	ldr	r3, [sp, #20]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dd09      	ble.n	800af24 <_dtoa_r+0x754>
 800af10:	42ab      	cmp	r3, r5
 800af12:	9a04      	ldr	r2, [sp, #16]
 800af14:	bfa8      	it	ge
 800af16:	462b      	movge	r3, r5
 800af18:	1ad2      	subs	r2, r2, r3
 800af1a:	9204      	str	r2, [sp, #16]
 800af1c:	9a05      	ldr	r2, [sp, #20]
 800af1e:	1aed      	subs	r5, r5, r3
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	9b07      	ldr	r3, [sp, #28]
 800af26:	b31b      	cbz	r3, 800af70 <_dtoa_r+0x7a0>
 800af28:	9b08      	ldr	r3, [sp, #32]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 80af 	beq.w	800b08e <_dtoa_r+0x8be>
 800af30:	2e00      	cmp	r6, #0
 800af32:	dd13      	ble.n	800af5c <_dtoa_r+0x78c>
 800af34:	4639      	mov	r1, r7
 800af36:	4632      	mov	r2, r6
 800af38:	4620      	mov	r0, r4
 800af3a:	f001 f9d5 	bl	800c2e8 <__pow5mult>
 800af3e:	ee18 2a10 	vmov	r2, s16
 800af42:	4601      	mov	r1, r0
 800af44:	4607      	mov	r7, r0
 800af46:	4620      	mov	r0, r4
 800af48:	f001 f924 	bl	800c194 <__multiply>
 800af4c:	ee18 1a10 	vmov	r1, s16
 800af50:	4680      	mov	r8, r0
 800af52:	4620      	mov	r0, r4
 800af54:	f001 f806 	bl	800bf64 <_Bfree>
 800af58:	ee08 8a10 	vmov	s16, r8
 800af5c:	9b07      	ldr	r3, [sp, #28]
 800af5e:	1b9a      	subs	r2, r3, r6
 800af60:	d006      	beq.n	800af70 <_dtoa_r+0x7a0>
 800af62:	ee18 1a10 	vmov	r1, s16
 800af66:	4620      	mov	r0, r4
 800af68:	f001 f9be 	bl	800c2e8 <__pow5mult>
 800af6c:	ee08 0a10 	vmov	s16, r0
 800af70:	2101      	movs	r1, #1
 800af72:	4620      	mov	r0, r4
 800af74:	f001 f8f8 	bl	800c168 <__i2b>
 800af78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	4606      	mov	r6, r0
 800af7e:	f340 8088 	ble.w	800b092 <_dtoa_r+0x8c2>
 800af82:	461a      	mov	r2, r3
 800af84:	4601      	mov	r1, r0
 800af86:	4620      	mov	r0, r4
 800af88:	f001 f9ae 	bl	800c2e8 <__pow5mult>
 800af8c:	9b06      	ldr	r3, [sp, #24]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	4606      	mov	r6, r0
 800af92:	f340 8081 	ble.w	800b098 <_dtoa_r+0x8c8>
 800af96:	f04f 0800 	mov.w	r8, #0
 800af9a:	6933      	ldr	r3, [r6, #16]
 800af9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800afa0:	6918      	ldr	r0, [r3, #16]
 800afa2:	f001 f891 	bl	800c0c8 <__hi0bits>
 800afa6:	f1c0 0020 	rsb	r0, r0, #32
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	4418      	add	r0, r3
 800afae:	f010 001f 	ands.w	r0, r0, #31
 800afb2:	f000 8092 	beq.w	800b0da <_dtoa_r+0x90a>
 800afb6:	f1c0 0320 	rsb	r3, r0, #32
 800afba:	2b04      	cmp	r3, #4
 800afbc:	f340 808a 	ble.w	800b0d4 <_dtoa_r+0x904>
 800afc0:	f1c0 001c 	rsb	r0, r0, #28
 800afc4:	9b04      	ldr	r3, [sp, #16]
 800afc6:	4403      	add	r3, r0
 800afc8:	9304      	str	r3, [sp, #16]
 800afca:	9b05      	ldr	r3, [sp, #20]
 800afcc:	4403      	add	r3, r0
 800afce:	4405      	add	r5, r0
 800afd0:	9305      	str	r3, [sp, #20]
 800afd2:	9b04      	ldr	r3, [sp, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dd07      	ble.n	800afe8 <_dtoa_r+0x818>
 800afd8:	ee18 1a10 	vmov	r1, s16
 800afdc:	461a      	mov	r2, r3
 800afde:	4620      	mov	r0, r4
 800afe0:	f001 f9dc 	bl	800c39c <__lshift>
 800afe4:	ee08 0a10 	vmov	s16, r0
 800afe8:	9b05      	ldr	r3, [sp, #20]
 800afea:	2b00      	cmp	r3, #0
 800afec:	dd05      	ble.n	800affa <_dtoa_r+0x82a>
 800afee:	4631      	mov	r1, r6
 800aff0:	461a      	mov	r2, r3
 800aff2:	4620      	mov	r0, r4
 800aff4:	f001 f9d2 	bl	800c39c <__lshift>
 800aff8:	4606      	mov	r6, r0
 800affa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affc:	2b00      	cmp	r3, #0
 800affe:	d06e      	beq.n	800b0de <_dtoa_r+0x90e>
 800b000:	ee18 0a10 	vmov	r0, s16
 800b004:	4631      	mov	r1, r6
 800b006:	f001 fa39 	bl	800c47c <__mcmp>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	da67      	bge.n	800b0de <_dtoa_r+0x90e>
 800b00e:	9b00      	ldr	r3, [sp, #0]
 800b010:	3b01      	subs	r3, #1
 800b012:	ee18 1a10 	vmov	r1, s16
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	220a      	movs	r2, #10
 800b01a:	2300      	movs	r3, #0
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 ffc3 	bl	800bfa8 <__multadd>
 800b022:	9b08      	ldr	r3, [sp, #32]
 800b024:	ee08 0a10 	vmov	s16, r0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 81b1 	beq.w	800b390 <_dtoa_r+0xbc0>
 800b02e:	2300      	movs	r3, #0
 800b030:	4639      	mov	r1, r7
 800b032:	220a      	movs	r2, #10
 800b034:	4620      	mov	r0, r4
 800b036:	f000 ffb7 	bl	800bfa8 <__multadd>
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	4607      	mov	r7, r0
 800b040:	f300 808e 	bgt.w	800b160 <_dtoa_r+0x990>
 800b044:	9b06      	ldr	r3, [sp, #24]
 800b046:	2b02      	cmp	r3, #2
 800b048:	dc51      	bgt.n	800b0ee <_dtoa_r+0x91e>
 800b04a:	e089      	b.n	800b160 <_dtoa_r+0x990>
 800b04c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b04e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b052:	e74b      	b.n	800aeec <_dtoa_r+0x71c>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	1e5e      	subs	r6, r3, #1
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	42b3      	cmp	r3, r6
 800b05c:	bfbf      	itttt	lt
 800b05e:	9b07      	ldrlt	r3, [sp, #28]
 800b060:	9607      	strlt	r6, [sp, #28]
 800b062:	1af2      	sublt	r2, r6, r3
 800b064:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b066:	bfb6      	itet	lt
 800b068:	189b      	addlt	r3, r3, r2
 800b06a:	1b9e      	subge	r6, r3, r6
 800b06c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	bfb8      	it	lt
 800b072:	2600      	movlt	r6, #0
 800b074:	2b00      	cmp	r3, #0
 800b076:	bfb7      	itett	lt
 800b078:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b07c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b080:	1a9d      	sublt	r5, r3, r2
 800b082:	2300      	movlt	r3, #0
 800b084:	e734      	b.n	800aef0 <_dtoa_r+0x720>
 800b086:	9e07      	ldr	r6, [sp, #28]
 800b088:	9d04      	ldr	r5, [sp, #16]
 800b08a:	9f08      	ldr	r7, [sp, #32]
 800b08c:	e73b      	b.n	800af06 <_dtoa_r+0x736>
 800b08e:	9a07      	ldr	r2, [sp, #28]
 800b090:	e767      	b.n	800af62 <_dtoa_r+0x792>
 800b092:	9b06      	ldr	r3, [sp, #24]
 800b094:	2b01      	cmp	r3, #1
 800b096:	dc18      	bgt.n	800b0ca <_dtoa_r+0x8fa>
 800b098:	f1ba 0f00 	cmp.w	sl, #0
 800b09c:	d115      	bne.n	800b0ca <_dtoa_r+0x8fa>
 800b09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0a2:	b993      	cbnz	r3, 800b0ca <_dtoa_r+0x8fa>
 800b0a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0a8:	0d1b      	lsrs	r3, r3, #20
 800b0aa:	051b      	lsls	r3, r3, #20
 800b0ac:	b183      	cbz	r3, 800b0d0 <_dtoa_r+0x900>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	f04f 0801 	mov.w	r8, #1
 800b0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f47f af6a 	bne.w	800af9a <_dtoa_r+0x7ca>
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e76f      	b.n	800afaa <_dtoa_r+0x7da>
 800b0ca:	f04f 0800 	mov.w	r8, #0
 800b0ce:	e7f6      	b.n	800b0be <_dtoa_r+0x8ee>
 800b0d0:	4698      	mov	r8, r3
 800b0d2:	e7f4      	b.n	800b0be <_dtoa_r+0x8ee>
 800b0d4:	f43f af7d 	beq.w	800afd2 <_dtoa_r+0x802>
 800b0d8:	4618      	mov	r0, r3
 800b0da:	301c      	adds	r0, #28
 800b0dc:	e772      	b.n	800afc4 <_dtoa_r+0x7f4>
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	dc37      	bgt.n	800b154 <_dtoa_r+0x984>
 800b0e4:	9b06      	ldr	r3, [sp, #24]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	dd34      	ble.n	800b154 <_dtoa_r+0x984>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	9302      	str	r3, [sp, #8]
 800b0ee:	9b02      	ldr	r3, [sp, #8]
 800b0f0:	b96b      	cbnz	r3, 800b10e <_dtoa_r+0x93e>
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	2205      	movs	r2, #5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f000 ff56 	bl	800bfa8 <__multadd>
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	4606      	mov	r6, r0
 800b100:	ee18 0a10 	vmov	r0, s16
 800b104:	f001 f9ba 	bl	800c47c <__mcmp>
 800b108:	2800      	cmp	r0, #0
 800b10a:	f73f adbb 	bgt.w	800ac84 <_dtoa_r+0x4b4>
 800b10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b110:	9d01      	ldr	r5, [sp, #4]
 800b112:	43db      	mvns	r3, r3
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	f04f 0800 	mov.w	r8, #0
 800b11a:	4631      	mov	r1, r6
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 ff21 	bl	800bf64 <_Bfree>
 800b122:	2f00      	cmp	r7, #0
 800b124:	f43f aea4 	beq.w	800ae70 <_dtoa_r+0x6a0>
 800b128:	f1b8 0f00 	cmp.w	r8, #0
 800b12c:	d005      	beq.n	800b13a <_dtoa_r+0x96a>
 800b12e:	45b8      	cmp	r8, r7
 800b130:	d003      	beq.n	800b13a <_dtoa_r+0x96a>
 800b132:	4641      	mov	r1, r8
 800b134:	4620      	mov	r0, r4
 800b136:	f000 ff15 	bl	800bf64 <_Bfree>
 800b13a:	4639      	mov	r1, r7
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 ff11 	bl	800bf64 <_Bfree>
 800b142:	e695      	b.n	800ae70 <_dtoa_r+0x6a0>
 800b144:	2600      	movs	r6, #0
 800b146:	4637      	mov	r7, r6
 800b148:	e7e1      	b.n	800b10e <_dtoa_r+0x93e>
 800b14a:	9700      	str	r7, [sp, #0]
 800b14c:	4637      	mov	r7, r6
 800b14e:	e599      	b.n	800ac84 <_dtoa_r+0x4b4>
 800b150:	40240000 	.word	0x40240000
 800b154:	9b08      	ldr	r3, [sp, #32]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 80ca 	beq.w	800b2f0 <_dtoa_r+0xb20>
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	9302      	str	r3, [sp, #8]
 800b160:	2d00      	cmp	r5, #0
 800b162:	dd05      	ble.n	800b170 <_dtoa_r+0x9a0>
 800b164:	4639      	mov	r1, r7
 800b166:	462a      	mov	r2, r5
 800b168:	4620      	mov	r0, r4
 800b16a:	f001 f917 	bl	800c39c <__lshift>
 800b16e:	4607      	mov	r7, r0
 800b170:	f1b8 0f00 	cmp.w	r8, #0
 800b174:	d05b      	beq.n	800b22e <_dtoa_r+0xa5e>
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 feb3 	bl	800bee4 <_Balloc>
 800b17e:	4605      	mov	r5, r0
 800b180:	b928      	cbnz	r0, 800b18e <_dtoa_r+0x9be>
 800b182:	4b87      	ldr	r3, [pc, #540]	; (800b3a0 <_dtoa_r+0xbd0>)
 800b184:	4602      	mov	r2, r0
 800b186:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b18a:	f7ff bb3b 	b.w	800a804 <_dtoa_r+0x34>
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	3202      	adds	r2, #2
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	f107 010c 	add.w	r1, r7, #12
 800b198:	300c      	adds	r0, #12
 800b19a:	f7fd f89f 	bl	80082dc <memcpy>
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	f001 f8fa 	bl	800c39c <__lshift>
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	f103 0901 	add.w	r9, r3, #1
 800b1ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	9305      	str	r3, [sp, #20]
 800b1b6:	f00a 0301 	and.w	r3, sl, #1
 800b1ba:	46b8      	mov	r8, r7
 800b1bc:	9304      	str	r3, [sp, #16]
 800b1be:	4607      	mov	r7, r0
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	ee18 0a10 	vmov	r0, s16
 800b1c6:	f7ff fa77 	bl	800a6b8 <quorem>
 800b1ca:	4641      	mov	r1, r8
 800b1cc:	9002      	str	r0, [sp, #8]
 800b1ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1d2:	ee18 0a10 	vmov	r0, s16
 800b1d6:	f001 f951 	bl	800c47c <__mcmp>
 800b1da:	463a      	mov	r2, r7
 800b1dc:	9003      	str	r0, [sp, #12]
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f001 f967 	bl	800c4b4 <__mdiff>
 800b1e6:	68c2      	ldr	r2, [r0, #12]
 800b1e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	bb02      	cbnz	r2, 800b232 <_dtoa_r+0xa62>
 800b1f0:	4601      	mov	r1, r0
 800b1f2:	ee18 0a10 	vmov	r0, s16
 800b1f6:	f001 f941 	bl	800c47c <__mcmp>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	4620      	mov	r0, r4
 800b200:	9207      	str	r2, [sp, #28]
 800b202:	f000 feaf 	bl	800bf64 <_Bfree>
 800b206:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b20a:	ea43 0102 	orr.w	r1, r3, r2
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	430b      	orrs	r3, r1
 800b212:	464d      	mov	r5, r9
 800b214:	d10f      	bne.n	800b236 <_dtoa_r+0xa66>
 800b216:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b21a:	d02a      	beq.n	800b272 <_dtoa_r+0xaa2>
 800b21c:	9b03      	ldr	r3, [sp, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd02      	ble.n	800b228 <_dtoa_r+0xa58>
 800b222:	9b02      	ldr	r3, [sp, #8]
 800b224:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b228:	f88b a000 	strb.w	sl, [fp]
 800b22c:	e775      	b.n	800b11a <_dtoa_r+0x94a>
 800b22e:	4638      	mov	r0, r7
 800b230:	e7ba      	b.n	800b1a8 <_dtoa_r+0x9d8>
 800b232:	2201      	movs	r2, #1
 800b234:	e7e2      	b.n	800b1fc <_dtoa_r+0xa2c>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	db04      	blt.n	800b246 <_dtoa_r+0xa76>
 800b23c:	9906      	ldr	r1, [sp, #24]
 800b23e:	430b      	orrs	r3, r1
 800b240:	9904      	ldr	r1, [sp, #16]
 800b242:	430b      	orrs	r3, r1
 800b244:	d122      	bne.n	800b28c <_dtoa_r+0xabc>
 800b246:	2a00      	cmp	r2, #0
 800b248:	ddee      	ble.n	800b228 <_dtoa_r+0xa58>
 800b24a:	ee18 1a10 	vmov	r1, s16
 800b24e:	2201      	movs	r2, #1
 800b250:	4620      	mov	r0, r4
 800b252:	f001 f8a3 	bl	800c39c <__lshift>
 800b256:	4631      	mov	r1, r6
 800b258:	ee08 0a10 	vmov	s16, r0
 800b25c:	f001 f90e 	bl	800c47c <__mcmp>
 800b260:	2800      	cmp	r0, #0
 800b262:	dc03      	bgt.n	800b26c <_dtoa_r+0xa9c>
 800b264:	d1e0      	bne.n	800b228 <_dtoa_r+0xa58>
 800b266:	f01a 0f01 	tst.w	sl, #1
 800b26a:	d0dd      	beq.n	800b228 <_dtoa_r+0xa58>
 800b26c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b270:	d1d7      	bne.n	800b222 <_dtoa_r+0xa52>
 800b272:	2339      	movs	r3, #57	; 0x39
 800b274:	f88b 3000 	strb.w	r3, [fp]
 800b278:	462b      	mov	r3, r5
 800b27a:	461d      	mov	r5, r3
 800b27c:	3b01      	subs	r3, #1
 800b27e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b282:	2a39      	cmp	r2, #57	; 0x39
 800b284:	d071      	beq.n	800b36a <_dtoa_r+0xb9a>
 800b286:	3201      	adds	r2, #1
 800b288:	701a      	strb	r2, [r3, #0]
 800b28a:	e746      	b.n	800b11a <_dtoa_r+0x94a>
 800b28c:	2a00      	cmp	r2, #0
 800b28e:	dd07      	ble.n	800b2a0 <_dtoa_r+0xad0>
 800b290:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b294:	d0ed      	beq.n	800b272 <_dtoa_r+0xaa2>
 800b296:	f10a 0301 	add.w	r3, sl, #1
 800b29a:	f88b 3000 	strb.w	r3, [fp]
 800b29e:	e73c      	b.n	800b11a <_dtoa_r+0x94a>
 800b2a0:	9b05      	ldr	r3, [sp, #20]
 800b2a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b2a6:	4599      	cmp	r9, r3
 800b2a8:	d047      	beq.n	800b33a <_dtoa_r+0xb6a>
 800b2aa:	ee18 1a10 	vmov	r1, s16
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	220a      	movs	r2, #10
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 fe78 	bl	800bfa8 <__multadd>
 800b2b8:	45b8      	cmp	r8, r7
 800b2ba:	ee08 0a10 	vmov	s16, r0
 800b2be:	f04f 0300 	mov.w	r3, #0
 800b2c2:	f04f 020a 	mov.w	r2, #10
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	4620      	mov	r0, r4
 800b2ca:	d106      	bne.n	800b2da <_dtoa_r+0xb0a>
 800b2cc:	f000 fe6c 	bl	800bfa8 <__multadd>
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	f109 0901 	add.w	r9, r9, #1
 800b2d8:	e772      	b.n	800b1c0 <_dtoa_r+0x9f0>
 800b2da:	f000 fe65 	bl	800bfa8 <__multadd>
 800b2de:	4639      	mov	r1, r7
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f000 fe5e 	bl	800bfa8 <__multadd>
 800b2ec:	4607      	mov	r7, r0
 800b2ee:	e7f1      	b.n	800b2d4 <_dtoa_r+0xb04>
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	9302      	str	r3, [sp, #8]
 800b2f4:	9d01      	ldr	r5, [sp, #4]
 800b2f6:	ee18 0a10 	vmov	r0, s16
 800b2fa:	4631      	mov	r1, r6
 800b2fc:	f7ff f9dc 	bl	800a6b8 <quorem>
 800b300:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b304:	9b01      	ldr	r3, [sp, #4]
 800b306:	f805 ab01 	strb.w	sl, [r5], #1
 800b30a:	1aea      	subs	r2, r5, r3
 800b30c:	9b02      	ldr	r3, [sp, #8]
 800b30e:	4293      	cmp	r3, r2
 800b310:	dd09      	ble.n	800b326 <_dtoa_r+0xb56>
 800b312:	ee18 1a10 	vmov	r1, s16
 800b316:	2300      	movs	r3, #0
 800b318:	220a      	movs	r2, #10
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fe44 	bl	800bfa8 <__multadd>
 800b320:	ee08 0a10 	vmov	s16, r0
 800b324:	e7e7      	b.n	800b2f6 <_dtoa_r+0xb26>
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bfc8      	it	gt
 800b32c:	461d      	movgt	r5, r3
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	bfd8      	it	le
 800b332:	2501      	movle	r5, #1
 800b334:	441d      	add	r5, r3
 800b336:	f04f 0800 	mov.w	r8, #0
 800b33a:	ee18 1a10 	vmov	r1, s16
 800b33e:	2201      	movs	r2, #1
 800b340:	4620      	mov	r0, r4
 800b342:	f001 f82b 	bl	800c39c <__lshift>
 800b346:	4631      	mov	r1, r6
 800b348:	ee08 0a10 	vmov	s16, r0
 800b34c:	f001 f896 	bl	800c47c <__mcmp>
 800b350:	2800      	cmp	r0, #0
 800b352:	dc91      	bgt.n	800b278 <_dtoa_r+0xaa8>
 800b354:	d102      	bne.n	800b35c <_dtoa_r+0xb8c>
 800b356:	f01a 0f01 	tst.w	sl, #1
 800b35a:	d18d      	bne.n	800b278 <_dtoa_r+0xaa8>
 800b35c:	462b      	mov	r3, r5
 800b35e:	461d      	mov	r5, r3
 800b360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b364:	2a30      	cmp	r2, #48	; 0x30
 800b366:	d0fa      	beq.n	800b35e <_dtoa_r+0xb8e>
 800b368:	e6d7      	b.n	800b11a <_dtoa_r+0x94a>
 800b36a:	9a01      	ldr	r2, [sp, #4]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d184      	bne.n	800b27a <_dtoa_r+0xaaa>
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	3301      	adds	r3, #1
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	2331      	movs	r3, #49	; 0x31
 800b378:	7013      	strb	r3, [r2, #0]
 800b37a:	e6ce      	b.n	800b11a <_dtoa_r+0x94a>
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <_dtoa_r+0xbd4>)
 800b37e:	f7ff ba95 	b.w	800a8ac <_dtoa_r+0xdc>
 800b382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b384:	2b00      	cmp	r3, #0
 800b386:	f47f aa6e 	bne.w	800a866 <_dtoa_r+0x96>
 800b38a:	4b07      	ldr	r3, [pc, #28]	; (800b3a8 <_dtoa_r+0xbd8>)
 800b38c:	f7ff ba8e 	b.w	800a8ac <_dtoa_r+0xdc>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	2b00      	cmp	r3, #0
 800b394:	dcae      	bgt.n	800b2f4 <_dtoa_r+0xb24>
 800b396:	9b06      	ldr	r3, [sp, #24]
 800b398:	2b02      	cmp	r3, #2
 800b39a:	f73f aea8 	bgt.w	800b0ee <_dtoa_r+0x91e>
 800b39e:	e7a9      	b.n	800b2f4 <_dtoa_r+0xb24>
 800b3a0:	0800e418 	.word	0x0800e418
 800b3a4:	0800e679 	.word	0x0800e679
 800b3a8:	0800e399 	.word	0x0800e399

0800b3ac <__sflush_r>:
 800b3ac:	898a      	ldrh	r2, [r1, #12]
 800b3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	4605      	mov	r5, r0
 800b3b4:	0710      	lsls	r0, r2, #28
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	d458      	bmi.n	800b46c <__sflush_r+0xc0>
 800b3ba:	684b      	ldr	r3, [r1, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dc05      	bgt.n	800b3cc <__sflush_r+0x20>
 800b3c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dc02      	bgt.n	800b3cc <__sflush_r+0x20>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	d0f9      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3d8:	682f      	ldr	r7, [r5, #0]
 800b3da:	602b      	str	r3, [r5, #0]
 800b3dc:	d032      	beq.n	800b444 <__sflush_r+0x98>
 800b3de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	075a      	lsls	r2, r3, #29
 800b3e4:	d505      	bpl.n	800b3f2 <__sflush_r+0x46>
 800b3e6:	6863      	ldr	r3, [r4, #4]
 800b3e8:	1ac0      	subs	r0, r0, r3
 800b3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3ec:	b10b      	cbz	r3, 800b3f2 <__sflush_r+0x46>
 800b3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3f0:	1ac0      	subs	r0, r0, r3
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3f8:	6a21      	ldr	r1, [r4, #32]
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b0      	blx	r6
 800b3fe:	1c43      	adds	r3, r0, #1
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	d106      	bne.n	800b412 <__sflush_r+0x66>
 800b404:	6829      	ldr	r1, [r5, #0]
 800b406:	291d      	cmp	r1, #29
 800b408:	d82c      	bhi.n	800b464 <__sflush_r+0xb8>
 800b40a:	4a2a      	ldr	r2, [pc, #168]	; (800b4b4 <__sflush_r+0x108>)
 800b40c:	40ca      	lsrs	r2, r1
 800b40e:	07d6      	lsls	r6, r2, #31
 800b410:	d528      	bpl.n	800b464 <__sflush_r+0xb8>
 800b412:	2200      	movs	r2, #0
 800b414:	6062      	str	r2, [r4, #4]
 800b416:	04d9      	lsls	r1, r3, #19
 800b418:	6922      	ldr	r2, [r4, #16]
 800b41a:	6022      	str	r2, [r4, #0]
 800b41c:	d504      	bpl.n	800b428 <__sflush_r+0x7c>
 800b41e:	1c42      	adds	r2, r0, #1
 800b420:	d101      	bne.n	800b426 <__sflush_r+0x7a>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b903      	cbnz	r3, 800b428 <__sflush_r+0x7c>
 800b426:	6560      	str	r0, [r4, #84]	; 0x54
 800b428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b42a:	602f      	str	r7, [r5, #0]
 800b42c:	2900      	cmp	r1, #0
 800b42e:	d0ca      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b434:	4299      	cmp	r1, r3
 800b436:	d002      	beq.n	800b43e <__sflush_r+0x92>
 800b438:	4628      	mov	r0, r5
 800b43a:	f7fc ff7f 	bl	800833c <_free_r>
 800b43e:	2000      	movs	r0, #0
 800b440:	6360      	str	r0, [r4, #52]	; 0x34
 800b442:	e7c1      	b.n	800b3c8 <__sflush_r+0x1c>
 800b444:	6a21      	ldr	r1, [r4, #32]
 800b446:	2301      	movs	r3, #1
 800b448:	4628      	mov	r0, r5
 800b44a:	47b0      	blx	r6
 800b44c:	1c41      	adds	r1, r0, #1
 800b44e:	d1c7      	bne.n	800b3e0 <__sflush_r+0x34>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0c4      	beq.n	800b3e0 <__sflush_r+0x34>
 800b456:	2b1d      	cmp	r3, #29
 800b458:	d001      	beq.n	800b45e <__sflush_r+0xb2>
 800b45a:	2b16      	cmp	r3, #22
 800b45c:	d101      	bne.n	800b462 <__sflush_r+0xb6>
 800b45e:	602f      	str	r7, [r5, #0]
 800b460:	e7b1      	b.n	800b3c6 <__sflush_r+0x1a>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b468:	81a3      	strh	r3, [r4, #12]
 800b46a:	e7ad      	b.n	800b3c8 <__sflush_r+0x1c>
 800b46c:	690f      	ldr	r7, [r1, #16]
 800b46e:	2f00      	cmp	r7, #0
 800b470:	d0a9      	beq.n	800b3c6 <__sflush_r+0x1a>
 800b472:	0793      	lsls	r3, r2, #30
 800b474:	680e      	ldr	r6, [r1, #0]
 800b476:	bf08      	it	eq
 800b478:	694b      	ldreq	r3, [r1, #20]
 800b47a:	600f      	str	r7, [r1, #0]
 800b47c:	bf18      	it	ne
 800b47e:	2300      	movne	r3, #0
 800b480:	eba6 0807 	sub.w	r8, r6, r7
 800b484:	608b      	str	r3, [r1, #8]
 800b486:	f1b8 0f00 	cmp.w	r8, #0
 800b48a:	dd9c      	ble.n	800b3c6 <__sflush_r+0x1a>
 800b48c:	6a21      	ldr	r1, [r4, #32]
 800b48e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b490:	4643      	mov	r3, r8
 800b492:	463a      	mov	r2, r7
 800b494:	4628      	mov	r0, r5
 800b496:	47b0      	blx	r6
 800b498:	2800      	cmp	r0, #0
 800b49a:	dc06      	bgt.n	800b4aa <__sflush_r+0xfe>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e78e      	b.n	800b3c8 <__sflush_r+0x1c>
 800b4aa:	4407      	add	r7, r0
 800b4ac:	eba8 0800 	sub.w	r8, r8, r0
 800b4b0:	e7e9      	b.n	800b486 <__sflush_r+0xda>
 800b4b2:	bf00      	nop
 800b4b4:	20400001 	.word	0x20400001

0800b4b8 <_fflush_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	690b      	ldr	r3, [r1, #16]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	b913      	cbnz	r3, 800b4c8 <_fflush_r+0x10>
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	b118      	cbz	r0, 800b4d2 <_fflush_r+0x1a>
 800b4ca:	6983      	ldr	r3, [r0, #24]
 800b4cc:	b90b      	cbnz	r3, 800b4d2 <_fflush_r+0x1a>
 800b4ce:	f000 f8c5 	bl	800b65c <__sinit>
 800b4d2:	4b14      	ldr	r3, [pc, #80]	; (800b524 <_fflush_r+0x6c>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d11b      	bne.n	800b510 <_fflush_r+0x58>
 800b4d8:	686c      	ldr	r4, [r5, #4]
 800b4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0ef      	beq.n	800b4c2 <_fflush_r+0xa>
 800b4e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4e4:	07d0      	lsls	r0, r2, #31
 800b4e6:	d404      	bmi.n	800b4f2 <_fflush_r+0x3a>
 800b4e8:	0599      	lsls	r1, r3, #22
 800b4ea:	d402      	bmi.n	800b4f2 <_fflush_r+0x3a>
 800b4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4ee:	f000 fcc6 	bl	800be7e <__retarget_lock_acquire_recursive>
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f7ff ff59 	bl	800b3ac <__sflush_r>
 800b4fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4fc:	07da      	lsls	r2, r3, #31
 800b4fe:	4605      	mov	r5, r0
 800b500:	d4e0      	bmi.n	800b4c4 <_fflush_r+0xc>
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	059b      	lsls	r3, r3, #22
 800b506:	d4dd      	bmi.n	800b4c4 <_fflush_r+0xc>
 800b508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50a:	f000 fcb9 	bl	800be80 <__retarget_lock_release_recursive>
 800b50e:	e7d9      	b.n	800b4c4 <_fflush_r+0xc>
 800b510:	4b05      	ldr	r3, [pc, #20]	; (800b528 <_fflush_r+0x70>)
 800b512:	429c      	cmp	r4, r3
 800b514:	d101      	bne.n	800b51a <_fflush_r+0x62>
 800b516:	68ac      	ldr	r4, [r5, #8]
 800b518:	e7df      	b.n	800b4da <_fflush_r+0x22>
 800b51a:	4b04      	ldr	r3, [pc, #16]	; (800b52c <_fflush_r+0x74>)
 800b51c:	429c      	cmp	r4, r3
 800b51e:	bf08      	it	eq
 800b520:	68ec      	ldreq	r4, [r5, #12]
 800b522:	e7da      	b.n	800b4da <_fflush_r+0x22>
 800b524:	0800e44c 	.word	0x0800e44c
 800b528:	0800e46c 	.word	0x0800e46c
 800b52c:	0800e42c 	.word	0x0800e42c

0800b530 <fileno>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	4e1a      	ldr	r6, [pc, #104]	; (800b59c <fileno+0x6c>)
 800b534:	6835      	ldr	r5, [r6, #0]
 800b536:	4604      	mov	r4, r0
 800b538:	b125      	cbz	r5, 800b544 <fileno+0x14>
 800b53a:	69ab      	ldr	r3, [r5, #24]
 800b53c:	b913      	cbnz	r3, 800b544 <fileno+0x14>
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 f88c 	bl	800b65c <__sinit>
 800b544:	4b16      	ldr	r3, [pc, #88]	; (800b5a0 <fileno+0x70>)
 800b546:	429c      	cmp	r4, r3
 800b548:	d118      	bne.n	800b57c <fileno+0x4c>
 800b54a:	686c      	ldr	r4, [r5, #4]
 800b54c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b54e:	07d8      	lsls	r0, r3, #31
 800b550:	d405      	bmi.n	800b55e <fileno+0x2e>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	0599      	lsls	r1, r3, #22
 800b556:	d402      	bmi.n	800b55e <fileno+0x2e>
 800b558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55a:	f000 fc90 	bl	800be7e <__retarget_lock_acquire_recursive>
 800b55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b562:	b1ab      	cbz	r3, 800b590 <fileno+0x60>
 800b564:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800b568:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b56a:	07d2      	lsls	r2, r2, #31
 800b56c:	d404      	bmi.n	800b578 <fileno+0x48>
 800b56e:	059b      	lsls	r3, r3, #22
 800b570:	d402      	bmi.n	800b578 <fileno+0x48>
 800b572:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b574:	f000 fc84 	bl	800be80 <__retarget_lock_release_recursive>
 800b578:	4628      	mov	r0, r5
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <fileno+0x74>)
 800b57e:	429c      	cmp	r4, r3
 800b580:	d101      	bne.n	800b586 <fileno+0x56>
 800b582:	68ac      	ldr	r4, [r5, #8]
 800b584:	e7e2      	b.n	800b54c <fileno+0x1c>
 800b586:	4b08      	ldr	r3, [pc, #32]	; (800b5a8 <fileno+0x78>)
 800b588:	429c      	cmp	r4, r3
 800b58a:	bf08      	it	eq
 800b58c:	68ec      	ldreq	r4, [r5, #12]
 800b58e:	e7dd      	b.n	800b54c <fileno+0x1c>
 800b590:	6832      	ldr	r2, [r6, #0]
 800b592:	2109      	movs	r1, #9
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	f04f 35ff 	mov.w	r5, #4294967295
 800b59a:	e7e5      	b.n	800b568 <fileno+0x38>
 800b59c:	2000003c 	.word	0x2000003c
 800b5a0:	0800e44c 	.word	0x0800e44c
 800b5a4:	0800e46c 	.word	0x0800e46c
 800b5a8:	0800e42c 	.word	0x0800e42c

0800b5ac <std>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ba:	6083      	str	r3, [r0, #8]
 800b5bc:	8181      	strh	r1, [r0, #12]
 800b5be:	6643      	str	r3, [r0, #100]	; 0x64
 800b5c0:	81c2      	strh	r2, [r0, #14]
 800b5c2:	6183      	str	r3, [r0, #24]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	305c      	adds	r0, #92	; 0x5c
 800b5ca:	f7fc feaf 	bl	800832c <memset>
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <std+0x38>)
 800b5d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5d2:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <std+0x3c>)
 800b5d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <std+0x40>)
 800b5d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5da:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <std+0x44>)
 800b5dc:	6224      	str	r4, [r4, #32]
 800b5de:	6323      	str	r3, [r4, #48]	; 0x30
 800b5e0:	bd10      	pop	{r4, pc}
 800b5e2:	bf00      	nop
 800b5e4:	08009481 	.word	0x08009481
 800b5e8:	080094a7 	.word	0x080094a7
 800b5ec:	080094df 	.word	0x080094df
 800b5f0:	08009503 	.word	0x08009503

0800b5f4 <_cleanup_r>:
 800b5f4:	4901      	ldr	r1, [pc, #4]	; (800b5fc <_cleanup_r+0x8>)
 800b5f6:	f000 b8af 	b.w	800b758 <_fwalk_reent>
 800b5fa:	bf00      	nop
 800b5fc:	0800b4b9 	.word	0x0800b4b9

0800b600 <__sfmoreglue>:
 800b600:	b570      	push	{r4, r5, r6, lr}
 800b602:	2268      	movs	r2, #104	; 0x68
 800b604:	1e4d      	subs	r5, r1, #1
 800b606:	4355      	muls	r5, r2
 800b608:	460e      	mov	r6, r1
 800b60a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b60e:	f7fc ff01 	bl	8008414 <_malloc_r>
 800b612:	4604      	mov	r4, r0
 800b614:	b140      	cbz	r0, 800b628 <__sfmoreglue+0x28>
 800b616:	2100      	movs	r1, #0
 800b618:	e9c0 1600 	strd	r1, r6, [r0]
 800b61c:	300c      	adds	r0, #12
 800b61e:	60a0      	str	r0, [r4, #8]
 800b620:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b624:	f7fc fe82 	bl	800832c <memset>
 800b628:	4620      	mov	r0, r4
 800b62a:	bd70      	pop	{r4, r5, r6, pc}

0800b62c <__sfp_lock_acquire>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__sfp_lock_acquire+0x8>)
 800b62e:	f000 bc26 	b.w	800be7e <__retarget_lock_acquire_recursive>
 800b632:	bf00      	nop
 800b634:	200007e9 	.word	0x200007e9

0800b638 <__sfp_lock_release>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__sfp_lock_release+0x8>)
 800b63a:	f000 bc21 	b.w	800be80 <__retarget_lock_release_recursive>
 800b63e:	bf00      	nop
 800b640:	200007e9 	.word	0x200007e9

0800b644 <__sinit_lock_acquire>:
 800b644:	4801      	ldr	r0, [pc, #4]	; (800b64c <__sinit_lock_acquire+0x8>)
 800b646:	f000 bc1a 	b.w	800be7e <__retarget_lock_acquire_recursive>
 800b64a:	bf00      	nop
 800b64c:	200007ea 	.word	0x200007ea

0800b650 <__sinit_lock_release>:
 800b650:	4801      	ldr	r0, [pc, #4]	; (800b658 <__sinit_lock_release+0x8>)
 800b652:	f000 bc15 	b.w	800be80 <__retarget_lock_release_recursive>
 800b656:	bf00      	nop
 800b658:	200007ea 	.word	0x200007ea

0800b65c <__sinit>:
 800b65c:	b510      	push	{r4, lr}
 800b65e:	4604      	mov	r4, r0
 800b660:	f7ff fff0 	bl	800b644 <__sinit_lock_acquire>
 800b664:	69a3      	ldr	r3, [r4, #24]
 800b666:	b11b      	cbz	r3, 800b670 <__sinit+0x14>
 800b668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b66c:	f7ff bff0 	b.w	800b650 <__sinit_lock_release>
 800b670:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b674:	6523      	str	r3, [r4, #80]	; 0x50
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <__sinit+0x68>)
 800b678:	4a13      	ldr	r2, [pc, #76]	; (800b6c8 <__sinit+0x6c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b67e:	42a3      	cmp	r3, r4
 800b680:	bf04      	itt	eq
 800b682:	2301      	moveq	r3, #1
 800b684:	61a3      	streq	r3, [r4, #24]
 800b686:	4620      	mov	r0, r4
 800b688:	f000 f820 	bl	800b6cc <__sfp>
 800b68c:	6060      	str	r0, [r4, #4]
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 f81c 	bl	800b6cc <__sfp>
 800b694:	60a0      	str	r0, [r4, #8]
 800b696:	4620      	mov	r0, r4
 800b698:	f000 f818 	bl	800b6cc <__sfp>
 800b69c:	2200      	movs	r2, #0
 800b69e:	60e0      	str	r0, [r4, #12]
 800b6a0:	2104      	movs	r1, #4
 800b6a2:	6860      	ldr	r0, [r4, #4]
 800b6a4:	f7ff ff82 	bl	800b5ac <std>
 800b6a8:	68a0      	ldr	r0, [r4, #8]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	2109      	movs	r1, #9
 800b6ae:	f7ff ff7d 	bl	800b5ac <std>
 800b6b2:	68e0      	ldr	r0, [r4, #12]
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	2112      	movs	r1, #18
 800b6b8:	f7ff ff78 	bl	800b5ac <std>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	61a3      	str	r3, [r4, #24]
 800b6c0:	e7d2      	b.n	800b668 <__sinit+0xc>
 800b6c2:	bf00      	nop
 800b6c4:	0800db70 	.word	0x0800db70
 800b6c8:	0800b5f5 	.word	0x0800b5f5

0800b6cc <__sfp>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f7ff ffac 	bl	800b62c <__sfp_lock_acquire>
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <__sfp+0x84>)
 800b6d6:	681e      	ldr	r6, [r3, #0]
 800b6d8:	69b3      	ldr	r3, [r6, #24]
 800b6da:	b913      	cbnz	r3, 800b6e2 <__sfp+0x16>
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff ffbd 	bl	800b65c <__sinit>
 800b6e2:	3648      	adds	r6, #72	; 0x48
 800b6e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	d503      	bpl.n	800b6f4 <__sfp+0x28>
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	b30b      	cbz	r3, 800b734 <__sfp+0x68>
 800b6f0:	6836      	ldr	r6, [r6, #0]
 800b6f2:	e7f7      	b.n	800b6e4 <__sfp+0x18>
 800b6f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6f8:	b9d5      	cbnz	r5, 800b730 <__sfp+0x64>
 800b6fa:	4b16      	ldr	r3, [pc, #88]	; (800b754 <__sfp+0x88>)
 800b6fc:	60e3      	str	r3, [r4, #12]
 800b6fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b702:	6665      	str	r5, [r4, #100]	; 0x64
 800b704:	f000 fbba 	bl	800be7c <__retarget_lock_init_recursive>
 800b708:	f7ff ff96 	bl	800b638 <__sfp_lock_release>
 800b70c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b710:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b714:	6025      	str	r5, [r4, #0]
 800b716:	61a5      	str	r5, [r4, #24]
 800b718:	2208      	movs	r2, #8
 800b71a:	4629      	mov	r1, r5
 800b71c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b720:	f7fc fe04 	bl	800832c <memset>
 800b724:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b728:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b72c:	4620      	mov	r0, r4
 800b72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b730:	3468      	adds	r4, #104	; 0x68
 800b732:	e7d9      	b.n	800b6e8 <__sfp+0x1c>
 800b734:	2104      	movs	r1, #4
 800b736:	4638      	mov	r0, r7
 800b738:	f7ff ff62 	bl	800b600 <__sfmoreglue>
 800b73c:	4604      	mov	r4, r0
 800b73e:	6030      	str	r0, [r6, #0]
 800b740:	2800      	cmp	r0, #0
 800b742:	d1d5      	bne.n	800b6f0 <__sfp+0x24>
 800b744:	f7ff ff78 	bl	800b638 <__sfp_lock_release>
 800b748:	230c      	movs	r3, #12
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	e7ee      	b.n	800b72c <__sfp+0x60>
 800b74e:	bf00      	nop
 800b750:	0800db70 	.word	0x0800db70
 800b754:	ffff0001 	.word	0xffff0001

0800b758 <_fwalk_reent>:
 800b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b75c:	4606      	mov	r6, r0
 800b75e:	4688      	mov	r8, r1
 800b760:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b764:	2700      	movs	r7, #0
 800b766:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b76a:	f1b9 0901 	subs.w	r9, r9, #1
 800b76e:	d505      	bpl.n	800b77c <_fwalk_reent+0x24>
 800b770:	6824      	ldr	r4, [r4, #0]
 800b772:	2c00      	cmp	r4, #0
 800b774:	d1f7      	bne.n	800b766 <_fwalk_reent+0xe>
 800b776:	4638      	mov	r0, r7
 800b778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77c:	89ab      	ldrh	r3, [r5, #12]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d907      	bls.n	800b792 <_fwalk_reent+0x3a>
 800b782:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b786:	3301      	adds	r3, #1
 800b788:	d003      	beq.n	800b792 <_fwalk_reent+0x3a>
 800b78a:	4629      	mov	r1, r5
 800b78c:	4630      	mov	r0, r6
 800b78e:	47c0      	blx	r8
 800b790:	4307      	orrs	r7, r0
 800b792:	3568      	adds	r5, #104	; 0x68
 800b794:	e7e9      	b.n	800b76a <_fwalk_reent+0x12>

0800b796 <rshift>:
 800b796:	6903      	ldr	r3, [r0, #16]
 800b798:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b7a4:	f100 0414 	add.w	r4, r0, #20
 800b7a8:	dd45      	ble.n	800b836 <rshift+0xa0>
 800b7aa:	f011 011f 	ands.w	r1, r1, #31
 800b7ae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b7b2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b7b6:	d10c      	bne.n	800b7d2 <rshift+0x3c>
 800b7b8:	f100 0710 	add.w	r7, r0, #16
 800b7bc:	4629      	mov	r1, r5
 800b7be:	42b1      	cmp	r1, r6
 800b7c0:	d334      	bcc.n	800b82c <rshift+0x96>
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	1eea      	subs	r2, r5, #3
 800b7c8:	4296      	cmp	r6, r2
 800b7ca:	bf38      	it	cc
 800b7cc:	2300      	movcc	r3, #0
 800b7ce:	4423      	add	r3, r4
 800b7d0:	e015      	b.n	800b7fe <rshift+0x68>
 800b7d2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b7d6:	f1c1 0820 	rsb	r8, r1, #32
 800b7da:	40cf      	lsrs	r7, r1
 800b7dc:	f105 0e04 	add.w	lr, r5, #4
 800b7e0:	46a1      	mov	r9, r4
 800b7e2:	4576      	cmp	r6, lr
 800b7e4:	46f4      	mov	ip, lr
 800b7e6:	d815      	bhi.n	800b814 <rshift+0x7e>
 800b7e8:	1a9a      	subs	r2, r3, r2
 800b7ea:	0092      	lsls	r2, r2, #2
 800b7ec:	3a04      	subs	r2, #4
 800b7ee:	3501      	adds	r5, #1
 800b7f0:	42ae      	cmp	r6, r5
 800b7f2:	bf38      	it	cc
 800b7f4:	2200      	movcc	r2, #0
 800b7f6:	18a3      	adds	r3, r4, r2
 800b7f8:	50a7      	str	r7, [r4, r2]
 800b7fa:	b107      	cbz	r7, 800b7fe <rshift+0x68>
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	1b1a      	subs	r2, r3, r4
 800b800:	42a3      	cmp	r3, r4
 800b802:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b806:	bf08      	it	eq
 800b808:	2300      	moveq	r3, #0
 800b80a:	6102      	str	r2, [r0, #16]
 800b80c:	bf08      	it	eq
 800b80e:	6143      	streq	r3, [r0, #20]
 800b810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b814:	f8dc c000 	ldr.w	ip, [ip]
 800b818:	fa0c fc08 	lsl.w	ip, ip, r8
 800b81c:	ea4c 0707 	orr.w	r7, ip, r7
 800b820:	f849 7b04 	str.w	r7, [r9], #4
 800b824:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b828:	40cf      	lsrs	r7, r1
 800b82a:	e7da      	b.n	800b7e2 <rshift+0x4c>
 800b82c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b830:	f847 cf04 	str.w	ip, [r7, #4]!
 800b834:	e7c3      	b.n	800b7be <rshift+0x28>
 800b836:	4623      	mov	r3, r4
 800b838:	e7e1      	b.n	800b7fe <rshift+0x68>

0800b83a <__hexdig_fun>:
 800b83a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d802      	bhi.n	800b848 <__hexdig_fun+0xe>
 800b842:	3820      	subs	r0, #32
 800b844:	b2c0      	uxtb	r0, r0
 800b846:	4770      	bx	lr
 800b848:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b84c:	2b05      	cmp	r3, #5
 800b84e:	d801      	bhi.n	800b854 <__hexdig_fun+0x1a>
 800b850:	3847      	subs	r0, #71	; 0x47
 800b852:	e7f7      	b.n	800b844 <__hexdig_fun+0xa>
 800b854:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b858:	2b05      	cmp	r3, #5
 800b85a:	d801      	bhi.n	800b860 <__hexdig_fun+0x26>
 800b85c:	3827      	subs	r0, #39	; 0x27
 800b85e:	e7f1      	b.n	800b844 <__hexdig_fun+0xa>
 800b860:	2000      	movs	r0, #0
 800b862:	4770      	bx	lr

0800b864 <__gethex>:
 800b864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	ed2d 8b02 	vpush	{d8}
 800b86c:	b089      	sub	sp, #36	; 0x24
 800b86e:	ee08 0a10 	vmov	s16, r0
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	4bb4      	ldr	r3, [pc, #720]	; (800bb48 <__gethex+0x2e4>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	4618      	mov	r0, r3
 800b87c:	468b      	mov	fp, r1
 800b87e:	4690      	mov	r8, r2
 800b880:	f7f4 fcf6 	bl	8000270 <strlen>
 800b884:	9b01      	ldr	r3, [sp, #4]
 800b886:	f8db 2000 	ldr.w	r2, [fp]
 800b88a:	4403      	add	r3, r0
 800b88c:	4682      	mov	sl, r0
 800b88e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b892:	9305      	str	r3, [sp, #20]
 800b894:	1c93      	adds	r3, r2, #2
 800b896:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b89a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b89e:	32fe      	adds	r2, #254	; 0xfe
 800b8a0:	18d1      	adds	r1, r2, r3
 800b8a2:	461f      	mov	r7, r3
 800b8a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8a8:	9100      	str	r1, [sp, #0]
 800b8aa:	2830      	cmp	r0, #48	; 0x30
 800b8ac:	d0f8      	beq.n	800b8a0 <__gethex+0x3c>
 800b8ae:	f7ff ffc4 	bl	800b83a <__hexdig_fun>
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d13a      	bne.n	800b92e <__gethex+0xca>
 800b8b8:	9901      	ldr	r1, [sp, #4]
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	4638      	mov	r0, r7
 800b8be:	f001 fcbb 	bl	800d238 <strncmp>
 800b8c2:	4605      	mov	r5, r0
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d168      	bne.n	800b99a <__gethex+0x136>
 800b8c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b8cc:	eb07 060a 	add.w	r6, r7, sl
 800b8d0:	f7ff ffb3 	bl	800b83a <__hexdig_fun>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d062      	beq.n	800b99e <__gethex+0x13a>
 800b8d8:	4633      	mov	r3, r6
 800b8da:	7818      	ldrb	r0, [r3, #0]
 800b8dc:	2830      	cmp	r0, #48	; 0x30
 800b8de:	461f      	mov	r7, r3
 800b8e0:	f103 0301 	add.w	r3, r3, #1
 800b8e4:	d0f9      	beq.n	800b8da <__gethex+0x76>
 800b8e6:	f7ff ffa8 	bl	800b83a <__hexdig_fun>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	fab0 f480 	clz	r4, r0
 800b8f0:	0964      	lsrs	r4, r4, #5
 800b8f2:	4635      	mov	r5, r6
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	4616      	mov	r6, r2
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	7830      	ldrb	r0, [r6, #0]
 800b8fe:	f7ff ff9c 	bl	800b83a <__hexdig_fun>
 800b902:	2800      	cmp	r0, #0
 800b904:	d1f8      	bne.n	800b8f8 <__gethex+0x94>
 800b906:	9901      	ldr	r1, [sp, #4]
 800b908:	4652      	mov	r2, sl
 800b90a:	4630      	mov	r0, r6
 800b90c:	f001 fc94 	bl	800d238 <strncmp>
 800b910:	b980      	cbnz	r0, 800b934 <__gethex+0xd0>
 800b912:	b94d      	cbnz	r5, 800b928 <__gethex+0xc4>
 800b914:	eb06 050a 	add.w	r5, r6, sl
 800b918:	462a      	mov	r2, r5
 800b91a:	4616      	mov	r6, r2
 800b91c:	3201      	adds	r2, #1
 800b91e:	7830      	ldrb	r0, [r6, #0]
 800b920:	f7ff ff8b 	bl	800b83a <__hexdig_fun>
 800b924:	2800      	cmp	r0, #0
 800b926:	d1f8      	bne.n	800b91a <__gethex+0xb6>
 800b928:	1bad      	subs	r5, r5, r6
 800b92a:	00ad      	lsls	r5, r5, #2
 800b92c:	e004      	b.n	800b938 <__gethex+0xd4>
 800b92e:	2400      	movs	r4, #0
 800b930:	4625      	mov	r5, r4
 800b932:	e7e0      	b.n	800b8f6 <__gethex+0x92>
 800b934:	2d00      	cmp	r5, #0
 800b936:	d1f7      	bne.n	800b928 <__gethex+0xc4>
 800b938:	7833      	ldrb	r3, [r6, #0]
 800b93a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b93e:	2b50      	cmp	r3, #80	; 0x50
 800b940:	d13b      	bne.n	800b9ba <__gethex+0x156>
 800b942:	7873      	ldrb	r3, [r6, #1]
 800b944:	2b2b      	cmp	r3, #43	; 0x2b
 800b946:	d02c      	beq.n	800b9a2 <__gethex+0x13e>
 800b948:	2b2d      	cmp	r3, #45	; 0x2d
 800b94a:	d02e      	beq.n	800b9aa <__gethex+0x146>
 800b94c:	1c71      	adds	r1, r6, #1
 800b94e:	f04f 0900 	mov.w	r9, #0
 800b952:	7808      	ldrb	r0, [r1, #0]
 800b954:	f7ff ff71 	bl	800b83a <__hexdig_fun>
 800b958:	1e43      	subs	r3, r0, #1
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b18      	cmp	r3, #24
 800b95e:	d82c      	bhi.n	800b9ba <__gethex+0x156>
 800b960:	f1a0 0210 	sub.w	r2, r0, #16
 800b964:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b968:	f7ff ff67 	bl	800b83a <__hexdig_fun>
 800b96c:	1e43      	subs	r3, r0, #1
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b18      	cmp	r3, #24
 800b972:	d91d      	bls.n	800b9b0 <__gethex+0x14c>
 800b974:	f1b9 0f00 	cmp.w	r9, #0
 800b978:	d000      	beq.n	800b97c <__gethex+0x118>
 800b97a:	4252      	negs	r2, r2
 800b97c:	4415      	add	r5, r2
 800b97e:	f8cb 1000 	str.w	r1, [fp]
 800b982:	b1e4      	cbz	r4, 800b9be <__gethex+0x15a>
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	bf14      	ite	ne
 800b98a:	2700      	movne	r7, #0
 800b98c:	2706      	moveq	r7, #6
 800b98e:	4638      	mov	r0, r7
 800b990:	b009      	add	sp, #36	; 0x24
 800b992:	ecbd 8b02 	vpop	{d8}
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	463e      	mov	r6, r7
 800b99c:	4625      	mov	r5, r4
 800b99e:	2401      	movs	r4, #1
 800b9a0:	e7ca      	b.n	800b938 <__gethex+0xd4>
 800b9a2:	f04f 0900 	mov.w	r9, #0
 800b9a6:	1cb1      	adds	r1, r6, #2
 800b9a8:	e7d3      	b.n	800b952 <__gethex+0xee>
 800b9aa:	f04f 0901 	mov.w	r9, #1
 800b9ae:	e7fa      	b.n	800b9a6 <__gethex+0x142>
 800b9b0:	230a      	movs	r3, #10
 800b9b2:	fb03 0202 	mla	r2, r3, r2, r0
 800b9b6:	3a10      	subs	r2, #16
 800b9b8:	e7d4      	b.n	800b964 <__gethex+0x100>
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	e7df      	b.n	800b97e <__gethex+0x11a>
 800b9be:	1bf3      	subs	r3, r6, r7
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	2b07      	cmp	r3, #7
 800b9c6:	dc0b      	bgt.n	800b9e0 <__gethex+0x17c>
 800b9c8:	ee18 0a10 	vmov	r0, s16
 800b9cc:	f000 fa8a 	bl	800bee4 <_Balloc>
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	b940      	cbnz	r0, 800b9e6 <__gethex+0x182>
 800b9d4:	4b5d      	ldr	r3, [pc, #372]	; (800bb4c <__gethex+0x2e8>)
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	21de      	movs	r1, #222	; 0xde
 800b9da:	485d      	ldr	r0, [pc, #372]	; (800bb50 <__gethex+0x2ec>)
 800b9dc:	f001 fcfc 	bl	800d3d8 <__assert_func>
 800b9e0:	3101      	adds	r1, #1
 800b9e2:	105b      	asrs	r3, r3, #1
 800b9e4:	e7ee      	b.n	800b9c4 <__gethex+0x160>
 800b9e6:	f100 0914 	add.w	r9, r0, #20
 800b9ea:	f04f 0b00 	mov.w	fp, #0
 800b9ee:	f1ca 0301 	rsb	r3, sl, #1
 800b9f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800b9f6:	f8cd b000 	str.w	fp, [sp]
 800b9fa:	9306      	str	r3, [sp, #24]
 800b9fc:	42b7      	cmp	r7, r6
 800b9fe:	d340      	bcc.n	800ba82 <__gethex+0x21e>
 800ba00:	9802      	ldr	r0, [sp, #8]
 800ba02:	9b00      	ldr	r3, [sp, #0]
 800ba04:	f840 3b04 	str.w	r3, [r0], #4
 800ba08:	eba0 0009 	sub.w	r0, r0, r9
 800ba0c:	1080      	asrs	r0, r0, #2
 800ba0e:	0146      	lsls	r6, r0, #5
 800ba10:	6120      	str	r0, [r4, #16]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 fb58 	bl	800c0c8 <__hi0bits>
 800ba18:	1a30      	subs	r0, r6, r0
 800ba1a:	f8d8 6000 	ldr.w	r6, [r8]
 800ba1e:	42b0      	cmp	r0, r6
 800ba20:	dd63      	ble.n	800baea <__gethex+0x286>
 800ba22:	1b87      	subs	r7, r0, r6
 800ba24:	4639      	mov	r1, r7
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 fefc 	bl	800c824 <__any_on>
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	b1a8      	cbz	r0, 800ba5c <__gethex+0x1f8>
 800ba30:	1e7b      	subs	r3, r7, #1
 800ba32:	1159      	asrs	r1, r3, #5
 800ba34:	f003 021f 	and.w	r2, r3, #31
 800ba38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ba3c:	f04f 0a01 	mov.w	sl, #1
 800ba40:	fa0a f202 	lsl.w	r2, sl, r2
 800ba44:	420a      	tst	r2, r1
 800ba46:	d009      	beq.n	800ba5c <__gethex+0x1f8>
 800ba48:	4553      	cmp	r3, sl
 800ba4a:	dd05      	ble.n	800ba58 <__gethex+0x1f4>
 800ba4c:	1eb9      	subs	r1, r7, #2
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 fee8 	bl	800c824 <__any_on>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d145      	bne.n	800bae4 <__gethex+0x280>
 800ba58:	f04f 0a02 	mov.w	sl, #2
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f7ff fe99 	bl	800b796 <rshift>
 800ba64:	443d      	add	r5, r7
 800ba66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ba6a:	42ab      	cmp	r3, r5
 800ba6c:	da4c      	bge.n	800bb08 <__gethex+0x2a4>
 800ba6e:	ee18 0a10 	vmov	r0, s16
 800ba72:	4621      	mov	r1, r4
 800ba74:	f000 fa76 	bl	800bf64 <_Bfree>
 800ba78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	27a3      	movs	r7, #163	; 0xa3
 800ba80:	e785      	b.n	800b98e <__gethex+0x12a>
 800ba82:	1e73      	subs	r3, r6, #1
 800ba84:	9a05      	ldr	r2, [sp, #20]
 800ba86:	9303      	str	r3, [sp, #12]
 800ba88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d019      	beq.n	800bac4 <__gethex+0x260>
 800ba90:	f1bb 0f20 	cmp.w	fp, #32
 800ba94:	d107      	bne.n	800baa6 <__gethex+0x242>
 800ba96:	9b02      	ldr	r3, [sp, #8]
 800ba98:	9a00      	ldr	r2, [sp, #0]
 800ba9a:	f843 2b04 	str.w	r2, [r3], #4
 800ba9e:	9302      	str	r3, [sp, #8]
 800baa0:	2300      	movs	r3, #0
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	469b      	mov	fp, r3
 800baa6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800baaa:	f7ff fec6 	bl	800b83a <__hexdig_fun>
 800baae:	9b00      	ldr	r3, [sp, #0]
 800bab0:	f000 000f 	and.w	r0, r0, #15
 800bab4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bab8:	4303      	orrs	r3, r0
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	f10b 0b04 	add.w	fp, fp, #4
 800bac0:	9b03      	ldr	r3, [sp, #12]
 800bac2:	e00d      	b.n	800bae0 <__gethex+0x27c>
 800bac4:	9b03      	ldr	r3, [sp, #12]
 800bac6:	9a06      	ldr	r2, [sp, #24]
 800bac8:	4413      	add	r3, r2
 800baca:	42bb      	cmp	r3, r7
 800bacc:	d3e0      	bcc.n	800ba90 <__gethex+0x22c>
 800bace:	4618      	mov	r0, r3
 800bad0:	9901      	ldr	r1, [sp, #4]
 800bad2:	9307      	str	r3, [sp, #28]
 800bad4:	4652      	mov	r2, sl
 800bad6:	f001 fbaf 	bl	800d238 <strncmp>
 800bada:	9b07      	ldr	r3, [sp, #28]
 800badc:	2800      	cmp	r0, #0
 800bade:	d1d7      	bne.n	800ba90 <__gethex+0x22c>
 800bae0:	461e      	mov	r6, r3
 800bae2:	e78b      	b.n	800b9fc <__gethex+0x198>
 800bae4:	f04f 0a03 	mov.w	sl, #3
 800bae8:	e7b8      	b.n	800ba5c <__gethex+0x1f8>
 800baea:	da0a      	bge.n	800bb02 <__gethex+0x29e>
 800baec:	1a37      	subs	r7, r6, r0
 800baee:	4621      	mov	r1, r4
 800baf0:	ee18 0a10 	vmov	r0, s16
 800baf4:	463a      	mov	r2, r7
 800baf6:	f000 fc51 	bl	800c39c <__lshift>
 800bafa:	1bed      	subs	r5, r5, r7
 800bafc:	4604      	mov	r4, r0
 800bafe:	f100 0914 	add.w	r9, r0, #20
 800bb02:	f04f 0a00 	mov.w	sl, #0
 800bb06:	e7ae      	b.n	800ba66 <__gethex+0x202>
 800bb08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bb0c:	42a8      	cmp	r0, r5
 800bb0e:	dd72      	ble.n	800bbf6 <__gethex+0x392>
 800bb10:	1b45      	subs	r5, r0, r5
 800bb12:	42ae      	cmp	r6, r5
 800bb14:	dc36      	bgt.n	800bb84 <__gethex+0x320>
 800bb16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d02a      	beq.n	800bb74 <__gethex+0x310>
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	d02c      	beq.n	800bb7c <__gethex+0x318>
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d11c      	bne.n	800bb60 <__gethex+0x2fc>
 800bb26:	42ae      	cmp	r6, r5
 800bb28:	d11a      	bne.n	800bb60 <__gethex+0x2fc>
 800bb2a:	2e01      	cmp	r6, #1
 800bb2c:	d112      	bne.n	800bb54 <__gethex+0x2f0>
 800bb2e:	9a04      	ldr	r2, [sp, #16]
 800bb30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	2301      	movs	r3, #1
 800bb38:	6123      	str	r3, [r4, #16]
 800bb3a:	f8c9 3000 	str.w	r3, [r9]
 800bb3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb40:	2762      	movs	r7, #98	; 0x62
 800bb42:	601c      	str	r4, [r3, #0]
 800bb44:	e723      	b.n	800b98e <__gethex+0x12a>
 800bb46:	bf00      	nop
 800bb48:	0800e4f4 	.word	0x0800e4f4
 800bb4c:	0800e418 	.word	0x0800e418
 800bb50:	0800e48c 	.word	0x0800e48c
 800bb54:	1e71      	subs	r1, r6, #1
 800bb56:	4620      	mov	r0, r4
 800bb58:	f000 fe64 	bl	800c824 <__any_on>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d1e6      	bne.n	800bb2e <__gethex+0x2ca>
 800bb60:	ee18 0a10 	vmov	r0, s16
 800bb64:	4621      	mov	r1, r4
 800bb66:	f000 f9fd 	bl	800bf64 <_Bfree>
 800bb6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	2750      	movs	r7, #80	; 0x50
 800bb72:	e70c      	b.n	800b98e <__gethex+0x12a>
 800bb74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1f2      	bne.n	800bb60 <__gethex+0x2fc>
 800bb7a:	e7d8      	b.n	800bb2e <__gethex+0x2ca>
 800bb7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1d5      	bne.n	800bb2e <__gethex+0x2ca>
 800bb82:	e7ed      	b.n	800bb60 <__gethex+0x2fc>
 800bb84:	1e6f      	subs	r7, r5, #1
 800bb86:	f1ba 0f00 	cmp.w	sl, #0
 800bb8a:	d131      	bne.n	800bbf0 <__gethex+0x38c>
 800bb8c:	b127      	cbz	r7, 800bb98 <__gethex+0x334>
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4620      	mov	r0, r4
 800bb92:	f000 fe47 	bl	800c824 <__any_on>
 800bb96:	4682      	mov	sl, r0
 800bb98:	117b      	asrs	r3, r7, #5
 800bb9a:	2101      	movs	r1, #1
 800bb9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bba0:	f007 071f 	and.w	r7, r7, #31
 800bba4:	fa01 f707 	lsl.w	r7, r1, r7
 800bba8:	421f      	tst	r7, r3
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4620      	mov	r0, r4
 800bbae:	bf18      	it	ne
 800bbb0:	f04a 0a02 	orrne.w	sl, sl, #2
 800bbb4:	1b76      	subs	r6, r6, r5
 800bbb6:	f7ff fdee 	bl	800b796 <rshift>
 800bbba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbbe:	2702      	movs	r7, #2
 800bbc0:	f1ba 0f00 	cmp.w	sl, #0
 800bbc4:	d048      	beq.n	800bc58 <__gethex+0x3f4>
 800bbc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d015      	beq.n	800bbfa <__gethex+0x396>
 800bbce:	2b03      	cmp	r3, #3
 800bbd0:	d017      	beq.n	800bc02 <__gethex+0x39e>
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d109      	bne.n	800bbea <__gethex+0x386>
 800bbd6:	f01a 0f02 	tst.w	sl, #2
 800bbda:	d006      	beq.n	800bbea <__gethex+0x386>
 800bbdc:	f8d9 0000 	ldr.w	r0, [r9]
 800bbe0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bbe4:	f01a 0f01 	tst.w	sl, #1
 800bbe8:	d10e      	bne.n	800bc08 <__gethex+0x3a4>
 800bbea:	f047 0710 	orr.w	r7, r7, #16
 800bbee:	e033      	b.n	800bc58 <__gethex+0x3f4>
 800bbf0:	f04f 0a01 	mov.w	sl, #1
 800bbf4:	e7d0      	b.n	800bb98 <__gethex+0x334>
 800bbf6:	2701      	movs	r7, #1
 800bbf8:	e7e2      	b.n	800bbc0 <__gethex+0x35c>
 800bbfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbfc:	f1c3 0301 	rsb	r3, r3, #1
 800bc00:	9315      	str	r3, [sp, #84]	; 0x54
 800bc02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0f0      	beq.n	800bbea <__gethex+0x386>
 800bc08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc0c:	f104 0314 	add.w	r3, r4, #20
 800bc10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bc14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bc18:	f04f 0c00 	mov.w	ip, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bc26:	d01c      	beq.n	800bc62 <__gethex+0x3fe>
 800bc28:	3201      	adds	r2, #1
 800bc2a:	6002      	str	r2, [r0, #0]
 800bc2c:	2f02      	cmp	r7, #2
 800bc2e:	f104 0314 	add.w	r3, r4, #20
 800bc32:	d13f      	bne.n	800bcb4 <__gethex+0x450>
 800bc34:	f8d8 2000 	ldr.w	r2, [r8]
 800bc38:	3a01      	subs	r2, #1
 800bc3a:	42b2      	cmp	r2, r6
 800bc3c:	d10a      	bne.n	800bc54 <__gethex+0x3f0>
 800bc3e:	1171      	asrs	r1, r6, #5
 800bc40:	2201      	movs	r2, #1
 800bc42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bc46:	f006 061f 	and.w	r6, r6, #31
 800bc4a:	fa02 f606 	lsl.w	r6, r2, r6
 800bc4e:	421e      	tst	r6, r3
 800bc50:	bf18      	it	ne
 800bc52:	4617      	movne	r7, r2
 800bc54:	f047 0720 	orr.w	r7, r7, #32
 800bc58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc5a:	601c      	str	r4, [r3, #0]
 800bc5c:	9b04      	ldr	r3, [sp, #16]
 800bc5e:	601d      	str	r5, [r3, #0]
 800bc60:	e695      	b.n	800b98e <__gethex+0x12a>
 800bc62:	4299      	cmp	r1, r3
 800bc64:	f843 cc04 	str.w	ip, [r3, #-4]
 800bc68:	d8d8      	bhi.n	800bc1c <__gethex+0x3b8>
 800bc6a:	68a3      	ldr	r3, [r4, #8]
 800bc6c:	459b      	cmp	fp, r3
 800bc6e:	db19      	blt.n	800bca4 <__gethex+0x440>
 800bc70:	6861      	ldr	r1, [r4, #4]
 800bc72:	ee18 0a10 	vmov	r0, s16
 800bc76:	3101      	adds	r1, #1
 800bc78:	f000 f934 	bl	800bee4 <_Balloc>
 800bc7c:	4681      	mov	r9, r0
 800bc7e:	b918      	cbnz	r0, 800bc88 <__gethex+0x424>
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <__gethex+0x488>)
 800bc82:	4602      	mov	r2, r0
 800bc84:	2184      	movs	r1, #132	; 0x84
 800bc86:	e6a8      	b.n	800b9da <__gethex+0x176>
 800bc88:	6922      	ldr	r2, [r4, #16]
 800bc8a:	3202      	adds	r2, #2
 800bc8c:	f104 010c 	add.w	r1, r4, #12
 800bc90:	0092      	lsls	r2, r2, #2
 800bc92:	300c      	adds	r0, #12
 800bc94:	f7fc fb22 	bl	80082dc <memcpy>
 800bc98:	4621      	mov	r1, r4
 800bc9a:	ee18 0a10 	vmov	r0, s16
 800bc9e:	f000 f961 	bl	800bf64 <_Bfree>
 800bca2:	464c      	mov	r4, r9
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bcac:	6122      	str	r2, [r4, #16]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	615a      	str	r2, [r3, #20]
 800bcb2:	e7bb      	b.n	800bc2c <__gethex+0x3c8>
 800bcb4:	6922      	ldr	r2, [r4, #16]
 800bcb6:	455a      	cmp	r2, fp
 800bcb8:	dd0b      	ble.n	800bcd2 <__gethex+0x46e>
 800bcba:	2101      	movs	r1, #1
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f7ff fd6a 	bl	800b796 <rshift>
 800bcc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bcc6:	3501      	adds	r5, #1
 800bcc8:	42ab      	cmp	r3, r5
 800bcca:	f6ff aed0 	blt.w	800ba6e <__gethex+0x20a>
 800bcce:	2701      	movs	r7, #1
 800bcd0:	e7c0      	b.n	800bc54 <__gethex+0x3f0>
 800bcd2:	f016 061f 	ands.w	r6, r6, #31
 800bcd6:	d0fa      	beq.n	800bcce <__gethex+0x46a>
 800bcd8:	4453      	add	r3, sl
 800bcda:	f1c6 0620 	rsb	r6, r6, #32
 800bcde:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bce2:	f000 f9f1 	bl	800c0c8 <__hi0bits>
 800bce6:	42b0      	cmp	r0, r6
 800bce8:	dbe7      	blt.n	800bcba <__gethex+0x456>
 800bcea:	e7f0      	b.n	800bcce <__gethex+0x46a>
 800bcec:	0800e418 	.word	0x0800e418

0800bcf0 <L_shift>:
 800bcf0:	f1c2 0208 	rsb	r2, r2, #8
 800bcf4:	0092      	lsls	r2, r2, #2
 800bcf6:	b570      	push	{r4, r5, r6, lr}
 800bcf8:	f1c2 0620 	rsb	r6, r2, #32
 800bcfc:	6843      	ldr	r3, [r0, #4]
 800bcfe:	6804      	ldr	r4, [r0, #0]
 800bd00:	fa03 f506 	lsl.w	r5, r3, r6
 800bd04:	432c      	orrs	r4, r5
 800bd06:	40d3      	lsrs	r3, r2
 800bd08:	6004      	str	r4, [r0, #0]
 800bd0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd0e:	4288      	cmp	r0, r1
 800bd10:	d3f4      	bcc.n	800bcfc <L_shift+0xc>
 800bd12:	bd70      	pop	{r4, r5, r6, pc}

0800bd14 <__match>:
 800bd14:	b530      	push	{r4, r5, lr}
 800bd16:	6803      	ldr	r3, [r0, #0]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd1e:	b914      	cbnz	r4, 800bd26 <__match+0x12>
 800bd20:	6003      	str	r3, [r0, #0]
 800bd22:	2001      	movs	r0, #1
 800bd24:	bd30      	pop	{r4, r5, pc}
 800bd26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bd2e:	2d19      	cmp	r5, #25
 800bd30:	bf98      	it	ls
 800bd32:	3220      	addls	r2, #32
 800bd34:	42a2      	cmp	r2, r4
 800bd36:	d0f0      	beq.n	800bd1a <__match+0x6>
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e7f3      	b.n	800bd24 <__match+0x10>

0800bd3c <__hexnan>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	680b      	ldr	r3, [r1, #0]
 800bd42:	115e      	asrs	r6, r3, #5
 800bd44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bd48:	f013 031f 	ands.w	r3, r3, #31
 800bd4c:	b087      	sub	sp, #28
 800bd4e:	bf18      	it	ne
 800bd50:	3604      	addne	r6, #4
 800bd52:	2500      	movs	r5, #0
 800bd54:	1f37      	subs	r7, r6, #4
 800bd56:	4690      	mov	r8, r2
 800bd58:	6802      	ldr	r2, [r0, #0]
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	f846 5c04 	str.w	r5, [r6, #-4]
 800bd62:	46b9      	mov	r9, r7
 800bd64:	463c      	mov	r4, r7
 800bd66:	9502      	str	r5, [sp, #8]
 800bd68:	46ab      	mov	fp, r5
 800bd6a:	7851      	ldrb	r1, [r2, #1]
 800bd6c:	1c53      	adds	r3, r2, #1
 800bd6e:	9303      	str	r3, [sp, #12]
 800bd70:	b341      	cbz	r1, 800bdc4 <__hexnan+0x88>
 800bd72:	4608      	mov	r0, r1
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	9104      	str	r1, [sp, #16]
 800bd78:	f7ff fd5f 	bl	800b83a <__hexdig_fun>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d14f      	bne.n	800be20 <__hexnan+0xe4>
 800bd80:	9904      	ldr	r1, [sp, #16]
 800bd82:	9a05      	ldr	r2, [sp, #20]
 800bd84:	2920      	cmp	r1, #32
 800bd86:	d818      	bhi.n	800bdba <__hexnan+0x7e>
 800bd88:	9b02      	ldr	r3, [sp, #8]
 800bd8a:	459b      	cmp	fp, r3
 800bd8c:	dd13      	ble.n	800bdb6 <__hexnan+0x7a>
 800bd8e:	454c      	cmp	r4, r9
 800bd90:	d206      	bcs.n	800bda0 <__hexnan+0x64>
 800bd92:	2d07      	cmp	r5, #7
 800bd94:	dc04      	bgt.n	800bda0 <__hexnan+0x64>
 800bd96:	462a      	mov	r2, r5
 800bd98:	4649      	mov	r1, r9
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7ff ffa8 	bl	800bcf0 <L_shift>
 800bda0:	4544      	cmp	r4, r8
 800bda2:	d950      	bls.n	800be46 <__hexnan+0x10a>
 800bda4:	2300      	movs	r3, #0
 800bda6:	f1a4 0904 	sub.w	r9, r4, #4
 800bdaa:	f844 3c04 	str.w	r3, [r4, #-4]
 800bdae:	f8cd b008 	str.w	fp, [sp, #8]
 800bdb2:	464c      	mov	r4, r9
 800bdb4:	461d      	mov	r5, r3
 800bdb6:	9a03      	ldr	r2, [sp, #12]
 800bdb8:	e7d7      	b.n	800bd6a <__hexnan+0x2e>
 800bdba:	2929      	cmp	r1, #41	; 0x29
 800bdbc:	d156      	bne.n	800be6c <__hexnan+0x130>
 800bdbe:	3202      	adds	r2, #2
 800bdc0:	f8ca 2000 	str.w	r2, [sl]
 800bdc4:	f1bb 0f00 	cmp.w	fp, #0
 800bdc8:	d050      	beq.n	800be6c <__hexnan+0x130>
 800bdca:	454c      	cmp	r4, r9
 800bdcc:	d206      	bcs.n	800bddc <__hexnan+0xa0>
 800bdce:	2d07      	cmp	r5, #7
 800bdd0:	dc04      	bgt.n	800bddc <__hexnan+0xa0>
 800bdd2:	462a      	mov	r2, r5
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7ff ff8a 	bl	800bcf0 <L_shift>
 800bddc:	4544      	cmp	r4, r8
 800bdde:	d934      	bls.n	800be4a <__hexnan+0x10e>
 800bde0:	f1a8 0204 	sub.w	r2, r8, #4
 800bde4:	4623      	mov	r3, r4
 800bde6:	f853 1b04 	ldr.w	r1, [r3], #4
 800bdea:	f842 1f04 	str.w	r1, [r2, #4]!
 800bdee:	429f      	cmp	r7, r3
 800bdf0:	d2f9      	bcs.n	800bde6 <__hexnan+0xaa>
 800bdf2:	1b3b      	subs	r3, r7, r4
 800bdf4:	f023 0303 	bic.w	r3, r3, #3
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	3401      	adds	r4, #1
 800bdfc:	3e03      	subs	r6, #3
 800bdfe:	42b4      	cmp	r4, r6
 800be00:	bf88      	it	hi
 800be02:	2304      	movhi	r3, #4
 800be04:	4443      	add	r3, r8
 800be06:	2200      	movs	r2, #0
 800be08:	f843 2b04 	str.w	r2, [r3], #4
 800be0c:	429f      	cmp	r7, r3
 800be0e:	d2fb      	bcs.n	800be08 <__hexnan+0xcc>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	b91b      	cbnz	r3, 800be1c <__hexnan+0xe0>
 800be14:	4547      	cmp	r7, r8
 800be16:	d127      	bne.n	800be68 <__hexnan+0x12c>
 800be18:	2301      	movs	r3, #1
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	2005      	movs	r0, #5
 800be1e:	e026      	b.n	800be6e <__hexnan+0x132>
 800be20:	3501      	adds	r5, #1
 800be22:	2d08      	cmp	r5, #8
 800be24:	f10b 0b01 	add.w	fp, fp, #1
 800be28:	dd06      	ble.n	800be38 <__hexnan+0xfc>
 800be2a:	4544      	cmp	r4, r8
 800be2c:	d9c3      	bls.n	800bdb6 <__hexnan+0x7a>
 800be2e:	2300      	movs	r3, #0
 800be30:	f844 3c04 	str.w	r3, [r4, #-4]
 800be34:	2501      	movs	r5, #1
 800be36:	3c04      	subs	r4, #4
 800be38:	6822      	ldr	r2, [r4, #0]
 800be3a:	f000 000f 	and.w	r0, r0, #15
 800be3e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	e7b7      	b.n	800bdb6 <__hexnan+0x7a>
 800be46:	2508      	movs	r5, #8
 800be48:	e7b5      	b.n	800bdb6 <__hexnan+0x7a>
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0df      	beq.n	800be10 <__hexnan+0xd4>
 800be50:	f04f 32ff 	mov.w	r2, #4294967295
 800be54:	f1c3 0320 	rsb	r3, r3, #32
 800be58:	fa22 f303 	lsr.w	r3, r2, r3
 800be5c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800be60:	401a      	ands	r2, r3
 800be62:	f846 2c04 	str.w	r2, [r6, #-4]
 800be66:	e7d3      	b.n	800be10 <__hexnan+0xd4>
 800be68:	3f04      	subs	r7, #4
 800be6a:	e7d1      	b.n	800be10 <__hexnan+0xd4>
 800be6c:	2004      	movs	r0, #4
 800be6e:	b007      	add	sp, #28
 800be70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be74 <_localeconv_r>:
 800be74:	4800      	ldr	r0, [pc, #0]	; (800be78 <_localeconv_r+0x4>)
 800be76:	4770      	bx	lr
 800be78:	20000194 	.word	0x20000194

0800be7c <__retarget_lock_init_recursive>:
 800be7c:	4770      	bx	lr

0800be7e <__retarget_lock_acquire_recursive>:
 800be7e:	4770      	bx	lr

0800be80 <__retarget_lock_release_recursive>:
 800be80:	4770      	bx	lr
	...

0800be84 <_lseek_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d07      	ldr	r5, [pc, #28]	; (800bea4 <_lseek_r+0x20>)
 800be88:	4604      	mov	r4, r0
 800be8a:	4608      	mov	r0, r1
 800be8c:	4611      	mov	r1, r2
 800be8e:	2200      	movs	r2, #0
 800be90:	602a      	str	r2, [r5, #0]
 800be92:	461a      	mov	r2, r3
 800be94:	f7f5 ffec 	bl	8001e70 <_lseek>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d102      	bne.n	800bea2 <_lseek_r+0x1e>
 800be9c:	682b      	ldr	r3, [r5, #0]
 800be9e:	b103      	cbz	r3, 800bea2 <_lseek_r+0x1e>
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	bd38      	pop	{r3, r4, r5, pc}
 800bea4:	200007ec 	.word	0x200007ec

0800bea8 <__ascii_mbtowc>:
 800bea8:	b082      	sub	sp, #8
 800beaa:	b901      	cbnz	r1, 800beae <__ascii_mbtowc+0x6>
 800beac:	a901      	add	r1, sp, #4
 800beae:	b142      	cbz	r2, 800bec2 <__ascii_mbtowc+0x1a>
 800beb0:	b14b      	cbz	r3, 800bec6 <__ascii_mbtowc+0x1e>
 800beb2:	7813      	ldrb	r3, [r2, #0]
 800beb4:	600b      	str	r3, [r1, #0]
 800beb6:	7812      	ldrb	r2, [r2, #0]
 800beb8:	1e10      	subs	r0, r2, #0
 800beba:	bf18      	it	ne
 800bebc:	2001      	movne	r0, #1
 800bebe:	b002      	add	sp, #8
 800bec0:	4770      	bx	lr
 800bec2:	4610      	mov	r0, r2
 800bec4:	e7fb      	b.n	800bebe <__ascii_mbtowc+0x16>
 800bec6:	f06f 0001 	mvn.w	r0, #1
 800beca:	e7f8      	b.n	800bebe <__ascii_mbtowc+0x16>

0800becc <__malloc_lock>:
 800becc:	4801      	ldr	r0, [pc, #4]	; (800bed4 <__malloc_lock+0x8>)
 800bece:	f7ff bfd6 	b.w	800be7e <__retarget_lock_acquire_recursive>
 800bed2:	bf00      	nop
 800bed4:	200007e8 	.word	0x200007e8

0800bed8 <__malloc_unlock>:
 800bed8:	4801      	ldr	r0, [pc, #4]	; (800bee0 <__malloc_unlock+0x8>)
 800beda:	f7ff bfd1 	b.w	800be80 <__retarget_lock_release_recursive>
 800bede:	bf00      	nop
 800bee0:	200007e8 	.word	0x200007e8

0800bee4 <_Balloc>:
 800bee4:	b570      	push	{r4, r5, r6, lr}
 800bee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bee8:	4604      	mov	r4, r0
 800beea:	460d      	mov	r5, r1
 800beec:	b976      	cbnz	r6, 800bf0c <_Balloc+0x28>
 800beee:	2010      	movs	r0, #16
 800bef0:	f7fc f9e4 	bl	80082bc <malloc>
 800bef4:	4602      	mov	r2, r0
 800bef6:	6260      	str	r0, [r4, #36]	; 0x24
 800bef8:	b920      	cbnz	r0, 800bf04 <_Balloc+0x20>
 800befa:	4b18      	ldr	r3, [pc, #96]	; (800bf5c <_Balloc+0x78>)
 800befc:	4818      	ldr	r0, [pc, #96]	; (800bf60 <_Balloc+0x7c>)
 800befe:	2166      	movs	r1, #102	; 0x66
 800bf00:	f001 fa6a 	bl	800d3d8 <__assert_func>
 800bf04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf08:	6006      	str	r6, [r0, #0]
 800bf0a:	60c6      	str	r6, [r0, #12]
 800bf0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf0e:	68f3      	ldr	r3, [r6, #12]
 800bf10:	b183      	cbz	r3, 800bf34 <_Balloc+0x50>
 800bf12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf1a:	b9b8      	cbnz	r0, 800bf4c <_Balloc+0x68>
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	fa01 f605 	lsl.w	r6, r1, r5
 800bf22:	1d72      	adds	r2, r6, #5
 800bf24:	0092      	lsls	r2, r2, #2
 800bf26:	4620      	mov	r0, r4
 800bf28:	f000 fc9d 	bl	800c866 <_calloc_r>
 800bf2c:	b160      	cbz	r0, 800bf48 <_Balloc+0x64>
 800bf2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf32:	e00e      	b.n	800bf52 <_Balloc+0x6e>
 800bf34:	2221      	movs	r2, #33	; 0x21
 800bf36:	2104      	movs	r1, #4
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f000 fc94 	bl	800c866 <_calloc_r>
 800bf3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf40:	60f0      	str	r0, [r6, #12]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e4      	bne.n	800bf12 <_Balloc+0x2e>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	6802      	ldr	r2, [r0, #0]
 800bf4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf52:	2300      	movs	r3, #0
 800bf54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf58:	e7f7      	b.n	800bf4a <_Balloc+0x66>
 800bf5a:	bf00      	nop
 800bf5c:	0800e3a6 	.word	0x0800e3a6
 800bf60:	0800e508 	.word	0x0800e508

0800bf64 <_Bfree>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	b976      	cbnz	r6, 800bf8c <_Bfree+0x28>
 800bf6e:	2010      	movs	r0, #16
 800bf70:	f7fc f9a4 	bl	80082bc <malloc>
 800bf74:	4602      	mov	r2, r0
 800bf76:	6268      	str	r0, [r5, #36]	; 0x24
 800bf78:	b920      	cbnz	r0, 800bf84 <_Bfree+0x20>
 800bf7a:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <_Bfree+0x3c>)
 800bf7c:	4809      	ldr	r0, [pc, #36]	; (800bfa4 <_Bfree+0x40>)
 800bf7e:	218a      	movs	r1, #138	; 0x8a
 800bf80:	f001 fa2a 	bl	800d3d8 <__assert_func>
 800bf84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf88:	6006      	str	r6, [r0, #0]
 800bf8a:	60c6      	str	r6, [r0, #12]
 800bf8c:	b13c      	cbz	r4, 800bf9e <_Bfree+0x3a>
 800bf8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf90:	6862      	ldr	r2, [r4, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf98:	6021      	str	r1, [r4, #0]
 800bf9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	0800e3a6 	.word	0x0800e3a6
 800bfa4:	0800e508 	.word	0x0800e508

0800bfa8 <__multadd>:
 800bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfac:	690d      	ldr	r5, [r1, #16]
 800bfae:	4607      	mov	r7, r0
 800bfb0:	460c      	mov	r4, r1
 800bfb2:	461e      	mov	r6, r3
 800bfb4:	f101 0c14 	add.w	ip, r1, #20
 800bfb8:	2000      	movs	r0, #0
 800bfba:	f8dc 3000 	ldr.w	r3, [ip]
 800bfbe:	b299      	uxth	r1, r3
 800bfc0:	fb02 6101 	mla	r1, r2, r1, r6
 800bfc4:	0c1e      	lsrs	r6, r3, #16
 800bfc6:	0c0b      	lsrs	r3, r1, #16
 800bfc8:	fb02 3306 	mla	r3, r2, r6, r3
 800bfcc:	b289      	uxth	r1, r1
 800bfce:	3001      	adds	r0, #1
 800bfd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfd4:	4285      	cmp	r5, r0
 800bfd6:	f84c 1b04 	str.w	r1, [ip], #4
 800bfda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfde:	dcec      	bgt.n	800bfba <__multadd+0x12>
 800bfe0:	b30e      	cbz	r6, 800c026 <__multadd+0x7e>
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	42ab      	cmp	r3, r5
 800bfe6:	dc19      	bgt.n	800c01c <__multadd+0x74>
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	4638      	mov	r0, r7
 800bfec:	3101      	adds	r1, #1
 800bfee:	f7ff ff79 	bl	800bee4 <_Balloc>
 800bff2:	4680      	mov	r8, r0
 800bff4:	b928      	cbnz	r0, 800c002 <__multadd+0x5a>
 800bff6:	4602      	mov	r2, r0
 800bff8:	4b0c      	ldr	r3, [pc, #48]	; (800c02c <__multadd+0x84>)
 800bffa:	480d      	ldr	r0, [pc, #52]	; (800c030 <__multadd+0x88>)
 800bffc:	21b5      	movs	r1, #181	; 0xb5
 800bffe:	f001 f9eb 	bl	800d3d8 <__assert_func>
 800c002:	6922      	ldr	r2, [r4, #16]
 800c004:	3202      	adds	r2, #2
 800c006:	f104 010c 	add.w	r1, r4, #12
 800c00a:	0092      	lsls	r2, r2, #2
 800c00c:	300c      	adds	r0, #12
 800c00e:	f7fc f965 	bl	80082dc <memcpy>
 800c012:	4621      	mov	r1, r4
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff ffa5 	bl	800bf64 <_Bfree>
 800c01a:	4644      	mov	r4, r8
 800c01c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c020:	3501      	adds	r5, #1
 800c022:	615e      	str	r6, [r3, #20]
 800c024:	6125      	str	r5, [r4, #16]
 800c026:	4620      	mov	r0, r4
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	0800e418 	.word	0x0800e418
 800c030:	0800e508 	.word	0x0800e508

0800c034 <__s2b>:
 800c034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c038:	460c      	mov	r4, r1
 800c03a:	4615      	mov	r5, r2
 800c03c:	461f      	mov	r7, r3
 800c03e:	2209      	movs	r2, #9
 800c040:	3308      	adds	r3, #8
 800c042:	4606      	mov	r6, r0
 800c044:	fb93 f3f2 	sdiv	r3, r3, r2
 800c048:	2100      	movs	r1, #0
 800c04a:	2201      	movs	r2, #1
 800c04c:	429a      	cmp	r2, r3
 800c04e:	db09      	blt.n	800c064 <__s2b+0x30>
 800c050:	4630      	mov	r0, r6
 800c052:	f7ff ff47 	bl	800bee4 <_Balloc>
 800c056:	b940      	cbnz	r0, 800c06a <__s2b+0x36>
 800c058:	4602      	mov	r2, r0
 800c05a:	4b19      	ldr	r3, [pc, #100]	; (800c0c0 <__s2b+0x8c>)
 800c05c:	4819      	ldr	r0, [pc, #100]	; (800c0c4 <__s2b+0x90>)
 800c05e:	21ce      	movs	r1, #206	; 0xce
 800c060:	f001 f9ba 	bl	800d3d8 <__assert_func>
 800c064:	0052      	lsls	r2, r2, #1
 800c066:	3101      	adds	r1, #1
 800c068:	e7f0      	b.n	800c04c <__s2b+0x18>
 800c06a:	9b08      	ldr	r3, [sp, #32]
 800c06c:	6143      	str	r3, [r0, #20]
 800c06e:	2d09      	cmp	r5, #9
 800c070:	f04f 0301 	mov.w	r3, #1
 800c074:	6103      	str	r3, [r0, #16]
 800c076:	dd16      	ble.n	800c0a6 <__s2b+0x72>
 800c078:	f104 0909 	add.w	r9, r4, #9
 800c07c:	46c8      	mov	r8, r9
 800c07e:	442c      	add	r4, r5
 800c080:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c084:	4601      	mov	r1, r0
 800c086:	3b30      	subs	r3, #48	; 0x30
 800c088:	220a      	movs	r2, #10
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7ff ff8c 	bl	800bfa8 <__multadd>
 800c090:	45a0      	cmp	r8, r4
 800c092:	d1f5      	bne.n	800c080 <__s2b+0x4c>
 800c094:	f1a5 0408 	sub.w	r4, r5, #8
 800c098:	444c      	add	r4, r9
 800c09a:	1b2d      	subs	r5, r5, r4
 800c09c:	1963      	adds	r3, r4, r5
 800c09e:	42bb      	cmp	r3, r7
 800c0a0:	db04      	blt.n	800c0ac <__s2b+0x78>
 800c0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a6:	340a      	adds	r4, #10
 800c0a8:	2509      	movs	r5, #9
 800c0aa:	e7f6      	b.n	800c09a <__s2b+0x66>
 800c0ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	3b30      	subs	r3, #48	; 0x30
 800c0b4:	220a      	movs	r2, #10
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	f7ff ff76 	bl	800bfa8 <__multadd>
 800c0bc:	e7ee      	b.n	800c09c <__s2b+0x68>
 800c0be:	bf00      	nop
 800c0c0:	0800e418 	.word	0x0800e418
 800c0c4:	0800e508 	.word	0x0800e508

0800c0c8 <__hi0bits>:
 800c0c8:	0c03      	lsrs	r3, r0, #16
 800c0ca:	041b      	lsls	r3, r3, #16
 800c0cc:	b9d3      	cbnz	r3, 800c104 <__hi0bits+0x3c>
 800c0ce:	0400      	lsls	r0, r0, #16
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0d6:	bf04      	itt	eq
 800c0d8:	0200      	lsleq	r0, r0, #8
 800c0da:	3308      	addeq	r3, #8
 800c0dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e0:	bf04      	itt	eq
 800c0e2:	0100      	lsleq	r0, r0, #4
 800c0e4:	3304      	addeq	r3, #4
 800c0e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0ea:	bf04      	itt	eq
 800c0ec:	0080      	lsleq	r0, r0, #2
 800c0ee:	3302      	addeq	r3, #2
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	db05      	blt.n	800c100 <__hi0bits+0x38>
 800c0f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0f8:	f103 0301 	add.w	r3, r3, #1
 800c0fc:	bf08      	it	eq
 800c0fe:	2320      	moveq	r3, #32
 800c100:	4618      	mov	r0, r3
 800c102:	4770      	bx	lr
 800c104:	2300      	movs	r3, #0
 800c106:	e7e4      	b.n	800c0d2 <__hi0bits+0xa>

0800c108 <__lo0bits>:
 800c108:	6803      	ldr	r3, [r0, #0]
 800c10a:	f013 0207 	ands.w	r2, r3, #7
 800c10e:	4601      	mov	r1, r0
 800c110:	d00b      	beq.n	800c12a <__lo0bits+0x22>
 800c112:	07da      	lsls	r2, r3, #31
 800c114:	d423      	bmi.n	800c15e <__lo0bits+0x56>
 800c116:	0798      	lsls	r0, r3, #30
 800c118:	bf49      	itett	mi
 800c11a:	085b      	lsrmi	r3, r3, #1
 800c11c:	089b      	lsrpl	r3, r3, #2
 800c11e:	2001      	movmi	r0, #1
 800c120:	600b      	strmi	r3, [r1, #0]
 800c122:	bf5c      	itt	pl
 800c124:	600b      	strpl	r3, [r1, #0]
 800c126:	2002      	movpl	r0, #2
 800c128:	4770      	bx	lr
 800c12a:	b298      	uxth	r0, r3
 800c12c:	b9a8      	cbnz	r0, 800c15a <__lo0bits+0x52>
 800c12e:	0c1b      	lsrs	r3, r3, #16
 800c130:	2010      	movs	r0, #16
 800c132:	b2da      	uxtb	r2, r3
 800c134:	b90a      	cbnz	r2, 800c13a <__lo0bits+0x32>
 800c136:	3008      	adds	r0, #8
 800c138:	0a1b      	lsrs	r3, r3, #8
 800c13a:	071a      	lsls	r2, r3, #28
 800c13c:	bf04      	itt	eq
 800c13e:	091b      	lsreq	r3, r3, #4
 800c140:	3004      	addeq	r0, #4
 800c142:	079a      	lsls	r2, r3, #30
 800c144:	bf04      	itt	eq
 800c146:	089b      	lsreq	r3, r3, #2
 800c148:	3002      	addeq	r0, #2
 800c14a:	07da      	lsls	r2, r3, #31
 800c14c:	d403      	bmi.n	800c156 <__lo0bits+0x4e>
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	f100 0001 	add.w	r0, r0, #1
 800c154:	d005      	beq.n	800c162 <__lo0bits+0x5a>
 800c156:	600b      	str	r3, [r1, #0]
 800c158:	4770      	bx	lr
 800c15a:	4610      	mov	r0, r2
 800c15c:	e7e9      	b.n	800c132 <__lo0bits+0x2a>
 800c15e:	2000      	movs	r0, #0
 800c160:	4770      	bx	lr
 800c162:	2020      	movs	r0, #32
 800c164:	4770      	bx	lr
	...

0800c168 <__i2b>:
 800c168:	b510      	push	{r4, lr}
 800c16a:	460c      	mov	r4, r1
 800c16c:	2101      	movs	r1, #1
 800c16e:	f7ff feb9 	bl	800bee4 <_Balloc>
 800c172:	4602      	mov	r2, r0
 800c174:	b928      	cbnz	r0, 800c182 <__i2b+0x1a>
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <__i2b+0x24>)
 800c178:	4805      	ldr	r0, [pc, #20]	; (800c190 <__i2b+0x28>)
 800c17a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c17e:	f001 f92b 	bl	800d3d8 <__assert_func>
 800c182:	2301      	movs	r3, #1
 800c184:	6144      	str	r4, [r0, #20]
 800c186:	6103      	str	r3, [r0, #16]
 800c188:	bd10      	pop	{r4, pc}
 800c18a:	bf00      	nop
 800c18c:	0800e418 	.word	0x0800e418
 800c190:	0800e508 	.word	0x0800e508

0800c194 <__multiply>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	4691      	mov	r9, r2
 800c19a:	690a      	ldr	r2, [r1, #16]
 800c19c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	bfb8      	it	lt
 800c1a4:	460b      	movlt	r3, r1
 800c1a6:	460c      	mov	r4, r1
 800c1a8:	bfbc      	itt	lt
 800c1aa:	464c      	movlt	r4, r9
 800c1ac:	4699      	movlt	r9, r3
 800c1ae:	6927      	ldr	r7, [r4, #16]
 800c1b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1b4:	68a3      	ldr	r3, [r4, #8]
 800c1b6:	6861      	ldr	r1, [r4, #4]
 800c1b8:	eb07 060a 	add.w	r6, r7, sl
 800c1bc:	42b3      	cmp	r3, r6
 800c1be:	b085      	sub	sp, #20
 800c1c0:	bfb8      	it	lt
 800c1c2:	3101      	addlt	r1, #1
 800c1c4:	f7ff fe8e 	bl	800bee4 <_Balloc>
 800c1c8:	b930      	cbnz	r0, 800c1d8 <__multiply+0x44>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	4b44      	ldr	r3, [pc, #272]	; (800c2e0 <__multiply+0x14c>)
 800c1ce:	4845      	ldr	r0, [pc, #276]	; (800c2e4 <__multiply+0x150>)
 800c1d0:	f240 115d 	movw	r1, #349	; 0x15d
 800c1d4:	f001 f900 	bl	800d3d8 <__assert_func>
 800c1d8:	f100 0514 	add.w	r5, r0, #20
 800c1dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e0:	462b      	mov	r3, r5
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4543      	cmp	r3, r8
 800c1e6:	d321      	bcc.n	800c22c <__multiply+0x98>
 800c1e8:	f104 0314 	add.w	r3, r4, #20
 800c1ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1f0:	f109 0314 	add.w	r3, r9, #20
 800c1f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1f8:	9202      	str	r2, [sp, #8]
 800c1fa:	1b3a      	subs	r2, r7, r4
 800c1fc:	3a15      	subs	r2, #21
 800c1fe:	f022 0203 	bic.w	r2, r2, #3
 800c202:	3204      	adds	r2, #4
 800c204:	f104 0115 	add.w	r1, r4, #21
 800c208:	428f      	cmp	r7, r1
 800c20a:	bf38      	it	cc
 800c20c:	2204      	movcc	r2, #4
 800c20e:	9201      	str	r2, [sp, #4]
 800c210:	9a02      	ldr	r2, [sp, #8]
 800c212:	9303      	str	r3, [sp, #12]
 800c214:	429a      	cmp	r2, r3
 800c216:	d80c      	bhi.n	800c232 <__multiply+0x9e>
 800c218:	2e00      	cmp	r6, #0
 800c21a:	dd03      	ble.n	800c224 <__multiply+0x90>
 800c21c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c220:	2b00      	cmp	r3, #0
 800c222:	d05a      	beq.n	800c2da <__multiply+0x146>
 800c224:	6106      	str	r6, [r0, #16]
 800c226:	b005      	add	sp, #20
 800c228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22c:	f843 2b04 	str.w	r2, [r3], #4
 800c230:	e7d8      	b.n	800c1e4 <__multiply+0x50>
 800c232:	f8b3 a000 	ldrh.w	sl, [r3]
 800c236:	f1ba 0f00 	cmp.w	sl, #0
 800c23a:	d024      	beq.n	800c286 <__multiply+0xf2>
 800c23c:	f104 0e14 	add.w	lr, r4, #20
 800c240:	46a9      	mov	r9, r5
 800c242:	f04f 0c00 	mov.w	ip, #0
 800c246:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c24a:	f8d9 1000 	ldr.w	r1, [r9]
 800c24e:	fa1f fb82 	uxth.w	fp, r2
 800c252:	b289      	uxth	r1, r1
 800c254:	fb0a 110b 	mla	r1, sl, fp, r1
 800c258:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c25c:	f8d9 2000 	ldr.w	r2, [r9]
 800c260:	4461      	add	r1, ip
 800c262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c266:	fb0a c20b 	mla	r2, sl, fp, ip
 800c26a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c26e:	b289      	uxth	r1, r1
 800c270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c274:	4577      	cmp	r7, lr
 800c276:	f849 1b04 	str.w	r1, [r9], #4
 800c27a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c27e:	d8e2      	bhi.n	800c246 <__multiply+0xb2>
 800c280:	9a01      	ldr	r2, [sp, #4]
 800c282:	f845 c002 	str.w	ip, [r5, r2]
 800c286:	9a03      	ldr	r2, [sp, #12]
 800c288:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c28c:	3304      	adds	r3, #4
 800c28e:	f1b9 0f00 	cmp.w	r9, #0
 800c292:	d020      	beq.n	800c2d6 <__multiply+0x142>
 800c294:	6829      	ldr	r1, [r5, #0]
 800c296:	f104 0c14 	add.w	ip, r4, #20
 800c29a:	46ae      	mov	lr, r5
 800c29c:	f04f 0a00 	mov.w	sl, #0
 800c2a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c2a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c2ac:	4492      	add	sl, r2
 800c2ae:	b289      	uxth	r1, r1
 800c2b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c2b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2bc:	f8be 1000 	ldrh.w	r1, [lr]
 800c2c0:	0c12      	lsrs	r2, r2, #16
 800c2c2:	fb09 1102 	mla	r1, r9, r2, r1
 800c2c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2ca:	4567      	cmp	r7, ip
 800c2cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2d0:	d8e6      	bhi.n	800c2a0 <__multiply+0x10c>
 800c2d2:	9a01      	ldr	r2, [sp, #4]
 800c2d4:	50a9      	str	r1, [r5, r2]
 800c2d6:	3504      	adds	r5, #4
 800c2d8:	e79a      	b.n	800c210 <__multiply+0x7c>
 800c2da:	3e01      	subs	r6, #1
 800c2dc:	e79c      	b.n	800c218 <__multiply+0x84>
 800c2de:	bf00      	nop
 800c2e0:	0800e418 	.word	0x0800e418
 800c2e4:	0800e508 	.word	0x0800e508

0800c2e8 <__pow5mult>:
 800c2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2ec:	4615      	mov	r5, r2
 800c2ee:	f012 0203 	ands.w	r2, r2, #3
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	d007      	beq.n	800c308 <__pow5mult+0x20>
 800c2f8:	4c25      	ldr	r4, [pc, #148]	; (800c390 <__pow5mult+0xa8>)
 800c2fa:	3a01      	subs	r2, #1
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c302:	f7ff fe51 	bl	800bfa8 <__multadd>
 800c306:	4607      	mov	r7, r0
 800c308:	10ad      	asrs	r5, r5, #2
 800c30a:	d03d      	beq.n	800c388 <__pow5mult+0xa0>
 800c30c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c30e:	b97c      	cbnz	r4, 800c330 <__pow5mult+0x48>
 800c310:	2010      	movs	r0, #16
 800c312:	f7fb ffd3 	bl	80082bc <malloc>
 800c316:	4602      	mov	r2, r0
 800c318:	6270      	str	r0, [r6, #36]	; 0x24
 800c31a:	b928      	cbnz	r0, 800c328 <__pow5mult+0x40>
 800c31c:	4b1d      	ldr	r3, [pc, #116]	; (800c394 <__pow5mult+0xac>)
 800c31e:	481e      	ldr	r0, [pc, #120]	; (800c398 <__pow5mult+0xb0>)
 800c320:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c324:	f001 f858 	bl	800d3d8 <__assert_func>
 800c328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c32c:	6004      	str	r4, [r0, #0]
 800c32e:	60c4      	str	r4, [r0, #12]
 800c330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c338:	b94c      	cbnz	r4, 800c34e <__pow5mult+0x66>
 800c33a:	f240 2171 	movw	r1, #625	; 0x271
 800c33e:	4630      	mov	r0, r6
 800c340:	f7ff ff12 	bl	800c168 <__i2b>
 800c344:	2300      	movs	r3, #0
 800c346:	f8c8 0008 	str.w	r0, [r8, #8]
 800c34a:	4604      	mov	r4, r0
 800c34c:	6003      	str	r3, [r0, #0]
 800c34e:	f04f 0900 	mov.w	r9, #0
 800c352:	07eb      	lsls	r3, r5, #31
 800c354:	d50a      	bpl.n	800c36c <__pow5mult+0x84>
 800c356:	4639      	mov	r1, r7
 800c358:	4622      	mov	r2, r4
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ff1a 	bl	800c194 <__multiply>
 800c360:	4639      	mov	r1, r7
 800c362:	4680      	mov	r8, r0
 800c364:	4630      	mov	r0, r6
 800c366:	f7ff fdfd 	bl	800bf64 <_Bfree>
 800c36a:	4647      	mov	r7, r8
 800c36c:	106d      	asrs	r5, r5, #1
 800c36e:	d00b      	beq.n	800c388 <__pow5mult+0xa0>
 800c370:	6820      	ldr	r0, [r4, #0]
 800c372:	b938      	cbnz	r0, 800c384 <__pow5mult+0x9c>
 800c374:	4622      	mov	r2, r4
 800c376:	4621      	mov	r1, r4
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff ff0b 	bl	800c194 <__multiply>
 800c37e:	6020      	str	r0, [r4, #0]
 800c380:	f8c0 9000 	str.w	r9, [r0]
 800c384:	4604      	mov	r4, r0
 800c386:	e7e4      	b.n	800c352 <__pow5mult+0x6a>
 800c388:	4638      	mov	r0, r7
 800c38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c38e:	bf00      	nop
 800c390:	0800e658 	.word	0x0800e658
 800c394:	0800e3a6 	.word	0x0800e3a6
 800c398:	0800e508 	.word	0x0800e508

0800c39c <__lshift>:
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	460c      	mov	r4, r1
 800c3a2:	6849      	ldr	r1, [r1, #4]
 800c3a4:	6923      	ldr	r3, [r4, #16]
 800c3a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3aa:	68a3      	ldr	r3, [r4, #8]
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	4691      	mov	r9, r2
 800c3b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3b4:	f108 0601 	add.w	r6, r8, #1
 800c3b8:	42b3      	cmp	r3, r6
 800c3ba:	db0b      	blt.n	800c3d4 <__lshift+0x38>
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f7ff fd91 	bl	800bee4 <_Balloc>
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	b948      	cbnz	r0, 800c3da <__lshift+0x3e>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	4b2a      	ldr	r3, [pc, #168]	; (800c474 <__lshift+0xd8>)
 800c3ca:	482b      	ldr	r0, [pc, #172]	; (800c478 <__lshift+0xdc>)
 800c3cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3d0:	f001 f802 	bl	800d3d8 <__assert_func>
 800c3d4:	3101      	adds	r1, #1
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	e7ee      	b.n	800c3b8 <__lshift+0x1c>
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f100 0114 	add.w	r1, r0, #20
 800c3e0:	f100 0210 	add.w	r2, r0, #16
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	4553      	cmp	r3, sl
 800c3e8:	db37      	blt.n	800c45a <__lshift+0xbe>
 800c3ea:	6920      	ldr	r0, [r4, #16]
 800c3ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f0:	f104 0314 	add.w	r3, r4, #20
 800c3f4:	f019 091f 	ands.w	r9, r9, #31
 800c3f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c400:	d02f      	beq.n	800c462 <__lshift+0xc6>
 800c402:	f1c9 0e20 	rsb	lr, r9, #32
 800c406:	468a      	mov	sl, r1
 800c408:	f04f 0c00 	mov.w	ip, #0
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	fa02 f209 	lsl.w	r2, r2, r9
 800c412:	ea42 020c 	orr.w	r2, r2, ip
 800c416:	f84a 2b04 	str.w	r2, [sl], #4
 800c41a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c41e:	4298      	cmp	r0, r3
 800c420:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c424:	d8f2      	bhi.n	800c40c <__lshift+0x70>
 800c426:	1b03      	subs	r3, r0, r4
 800c428:	3b15      	subs	r3, #21
 800c42a:	f023 0303 	bic.w	r3, r3, #3
 800c42e:	3304      	adds	r3, #4
 800c430:	f104 0215 	add.w	r2, r4, #21
 800c434:	4290      	cmp	r0, r2
 800c436:	bf38      	it	cc
 800c438:	2304      	movcc	r3, #4
 800c43a:	f841 c003 	str.w	ip, [r1, r3]
 800c43e:	f1bc 0f00 	cmp.w	ip, #0
 800c442:	d001      	beq.n	800c448 <__lshift+0xac>
 800c444:	f108 0602 	add.w	r6, r8, #2
 800c448:	3e01      	subs	r6, #1
 800c44a:	4638      	mov	r0, r7
 800c44c:	612e      	str	r6, [r5, #16]
 800c44e:	4621      	mov	r1, r4
 800c450:	f7ff fd88 	bl	800bf64 <_Bfree>
 800c454:	4628      	mov	r0, r5
 800c456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c45e:	3301      	adds	r3, #1
 800c460:	e7c1      	b.n	800c3e6 <__lshift+0x4a>
 800c462:	3904      	subs	r1, #4
 800c464:	f853 2b04 	ldr.w	r2, [r3], #4
 800c468:	f841 2f04 	str.w	r2, [r1, #4]!
 800c46c:	4298      	cmp	r0, r3
 800c46e:	d8f9      	bhi.n	800c464 <__lshift+0xc8>
 800c470:	e7ea      	b.n	800c448 <__lshift+0xac>
 800c472:	bf00      	nop
 800c474:	0800e418 	.word	0x0800e418
 800c478:	0800e508 	.word	0x0800e508

0800c47c <__mcmp>:
 800c47c:	b530      	push	{r4, r5, lr}
 800c47e:	6902      	ldr	r2, [r0, #16]
 800c480:	690c      	ldr	r4, [r1, #16]
 800c482:	1b12      	subs	r2, r2, r4
 800c484:	d10e      	bne.n	800c4a4 <__mcmp+0x28>
 800c486:	f100 0314 	add.w	r3, r0, #20
 800c48a:	3114      	adds	r1, #20
 800c48c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c49c:	42a5      	cmp	r5, r4
 800c49e:	d003      	beq.n	800c4a8 <__mcmp+0x2c>
 800c4a0:	d305      	bcc.n	800c4ae <__mcmp+0x32>
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	bd30      	pop	{r4, r5, pc}
 800c4a8:	4283      	cmp	r3, r0
 800c4aa:	d3f3      	bcc.n	800c494 <__mcmp+0x18>
 800c4ac:	e7fa      	b.n	800c4a4 <__mcmp+0x28>
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	e7f7      	b.n	800c4a4 <__mcmp+0x28>

0800c4b4 <__mdiff>:
 800c4b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	4611      	mov	r1, r2
 800c4be:	4620      	mov	r0, r4
 800c4c0:	4690      	mov	r8, r2
 800c4c2:	f7ff ffdb 	bl	800c47c <__mcmp>
 800c4c6:	1e05      	subs	r5, r0, #0
 800c4c8:	d110      	bne.n	800c4ec <__mdiff+0x38>
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff fd09 	bl	800bee4 <_Balloc>
 800c4d2:	b930      	cbnz	r0, 800c4e2 <__mdiff+0x2e>
 800c4d4:	4b3a      	ldr	r3, [pc, #232]	; (800c5c0 <__mdiff+0x10c>)
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	f240 2132 	movw	r1, #562	; 0x232
 800c4dc:	4839      	ldr	r0, [pc, #228]	; (800c5c4 <__mdiff+0x110>)
 800c4de:	f000 ff7b 	bl	800d3d8 <__assert_func>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ec:	bfa4      	itt	ge
 800c4ee:	4643      	movge	r3, r8
 800c4f0:	46a0      	movge	r8, r4
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4f8:	bfa6      	itte	ge
 800c4fa:	461c      	movge	r4, r3
 800c4fc:	2500      	movge	r5, #0
 800c4fe:	2501      	movlt	r5, #1
 800c500:	f7ff fcf0 	bl	800bee4 <_Balloc>
 800c504:	b920      	cbnz	r0, 800c510 <__mdiff+0x5c>
 800c506:	4b2e      	ldr	r3, [pc, #184]	; (800c5c0 <__mdiff+0x10c>)
 800c508:	4602      	mov	r2, r0
 800c50a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c50e:	e7e5      	b.n	800c4dc <__mdiff+0x28>
 800c510:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c514:	6926      	ldr	r6, [r4, #16]
 800c516:	60c5      	str	r5, [r0, #12]
 800c518:	f104 0914 	add.w	r9, r4, #20
 800c51c:	f108 0514 	add.w	r5, r8, #20
 800c520:	f100 0e14 	add.w	lr, r0, #20
 800c524:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c52c:	f108 0210 	add.w	r2, r8, #16
 800c530:	46f2      	mov	sl, lr
 800c532:	2100      	movs	r1, #0
 800c534:	f859 3b04 	ldr.w	r3, [r9], #4
 800c538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c53c:	fa1f f883 	uxth.w	r8, r3
 800c540:	fa11 f18b 	uxtah	r1, r1, fp
 800c544:	0c1b      	lsrs	r3, r3, #16
 800c546:	eba1 0808 	sub.w	r8, r1, r8
 800c54a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c54e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c552:	fa1f f888 	uxth.w	r8, r8
 800c556:	1419      	asrs	r1, r3, #16
 800c558:	454e      	cmp	r6, r9
 800c55a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c55e:	f84a 3b04 	str.w	r3, [sl], #4
 800c562:	d8e7      	bhi.n	800c534 <__mdiff+0x80>
 800c564:	1b33      	subs	r3, r6, r4
 800c566:	3b15      	subs	r3, #21
 800c568:	f023 0303 	bic.w	r3, r3, #3
 800c56c:	3304      	adds	r3, #4
 800c56e:	3415      	adds	r4, #21
 800c570:	42a6      	cmp	r6, r4
 800c572:	bf38      	it	cc
 800c574:	2304      	movcc	r3, #4
 800c576:	441d      	add	r5, r3
 800c578:	4473      	add	r3, lr
 800c57a:	469e      	mov	lr, r3
 800c57c:	462e      	mov	r6, r5
 800c57e:	4566      	cmp	r6, ip
 800c580:	d30e      	bcc.n	800c5a0 <__mdiff+0xec>
 800c582:	f10c 0203 	add.w	r2, ip, #3
 800c586:	1b52      	subs	r2, r2, r5
 800c588:	f022 0203 	bic.w	r2, r2, #3
 800c58c:	3d03      	subs	r5, #3
 800c58e:	45ac      	cmp	ip, r5
 800c590:	bf38      	it	cc
 800c592:	2200      	movcc	r2, #0
 800c594:	441a      	add	r2, r3
 800c596:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c59a:	b17b      	cbz	r3, 800c5bc <__mdiff+0x108>
 800c59c:	6107      	str	r7, [r0, #16]
 800c59e:	e7a3      	b.n	800c4e8 <__mdiff+0x34>
 800c5a0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5a4:	fa11 f288 	uxtah	r2, r1, r8
 800c5a8:	1414      	asrs	r4, r2, #16
 800c5aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5b4:	f84e 2b04 	str.w	r2, [lr], #4
 800c5b8:	1421      	asrs	r1, r4, #16
 800c5ba:	e7e0      	b.n	800c57e <__mdiff+0xca>
 800c5bc:	3f01      	subs	r7, #1
 800c5be:	e7ea      	b.n	800c596 <__mdiff+0xe2>
 800c5c0:	0800e418 	.word	0x0800e418
 800c5c4:	0800e508 	.word	0x0800e508

0800c5c8 <__ulp>:
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	ed8d 0b00 	vstr	d0, [sp]
 800c5ce:	9b01      	ldr	r3, [sp, #4]
 800c5d0:	4912      	ldr	r1, [pc, #72]	; (800c61c <__ulp+0x54>)
 800c5d2:	4019      	ands	r1, r3
 800c5d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c5d8:	2900      	cmp	r1, #0
 800c5da:	dd05      	ble.n	800c5e8 <__ulp+0x20>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	ec43 2b10 	vmov	d0, r2, r3
 800c5e4:	b002      	add	sp, #8
 800c5e6:	4770      	bx	lr
 800c5e8:	4249      	negs	r1, r1
 800c5ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c5ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	f04f 0300 	mov.w	r3, #0
 800c5fa:	da04      	bge.n	800c606 <__ulp+0x3e>
 800c5fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c600:	fa41 f300 	asr.w	r3, r1, r0
 800c604:	e7ec      	b.n	800c5e0 <__ulp+0x18>
 800c606:	f1a0 0114 	sub.w	r1, r0, #20
 800c60a:	291e      	cmp	r1, #30
 800c60c:	bfda      	itte	le
 800c60e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c612:	fa20 f101 	lsrle.w	r1, r0, r1
 800c616:	2101      	movgt	r1, #1
 800c618:	460a      	mov	r2, r1
 800c61a:	e7e1      	b.n	800c5e0 <__ulp+0x18>
 800c61c:	7ff00000 	.word	0x7ff00000

0800c620 <__b2d>:
 800c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c622:	6905      	ldr	r5, [r0, #16]
 800c624:	f100 0714 	add.w	r7, r0, #20
 800c628:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c62c:	1f2e      	subs	r6, r5, #4
 800c62e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c632:	4620      	mov	r0, r4
 800c634:	f7ff fd48 	bl	800c0c8 <__hi0bits>
 800c638:	f1c0 0320 	rsb	r3, r0, #32
 800c63c:	280a      	cmp	r0, #10
 800c63e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c6bc <__b2d+0x9c>
 800c642:	600b      	str	r3, [r1, #0]
 800c644:	dc14      	bgt.n	800c670 <__b2d+0x50>
 800c646:	f1c0 0e0b 	rsb	lr, r0, #11
 800c64a:	fa24 f10e 	lsr.w	r1, r4, lr
 800c64e:	42b7      	cmp	r7, r6
 800c650:	ea41 030c 	orr.w	r3, r1, ip
 800c654:	bf34      	ite	cc
 800c656:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c65a:	2100      	movcs	r1, #0
 800c65c:	3015      	adds	r0, #21
 800c65e:	fa04 f000 	lsl.w	r0, r4, r0
 800c662:	fa21 f10e 	lsr.w	r1, r1, lr
 800c666:	ea40 0201 	orr.w	r2, r0, r1
 800c66a:	ec43 2b10 	vmov	d0, r2, r3
 800c66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c670:	42b7      	cmp	r7, r6
 800c672:	bf3a      	itte	cc
 800c674:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c678:	f1a5 0608 	subcc.w	r6, r5, #8
 800c67c:	2100      	movcs	r1, #0
 800c67e:	380b      	subs	r0, #11
 800c680:	d017      	beq.n	800c6b2 <__b2d+0x92>
 800c682:	f1c0 0c20 	rsb	ip, r0, #32
 800c686:	fa04 f500 	lsl.w	r5, r4, r0
 800c68a:	42be      	cmp	r6, r7
 800c68c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c690:	ea45 0504 	orr.w	r5, r5, r4
 800c694:	bf8c      	ite	hi
 800c696:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c69a:	2400      	movls	r4, #0
 800c69c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c6a0:	fa01 f000 	lsl.w	r0, r1, r0
 800c6a4:	fa24 f40c 	lsr.w	r4, r4, ip
 800c6a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c6ac:	ea40 0204 	orr.w	r2, r0, r4
 800c6b0:	e7db      	b.n	800c66a <__b2d+0x4a>
 800c6b2:	ea44 030c 	orr.w	r3, r4, ip
 800c6b6:	460a      	mov	r2, r1
 800c6b8:	e7d7      	b.n	800c66a <__b2d+0x4a>
 800c6ba:	bf00      	nop
 800c6bc:	3ff00000 	.word	0x3ff00000

0800c6c0 <__d2b>:
 800c6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	ec57 6b10 	vmov	r6, r7, d0
 800c6cc:	4690      	mov	r8, r2
 800c6ce:	f7ff fc09 	bl	800bee4 <_Balloc>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	b930      	cbnz	r0, 800c6e4 <__d2b+0x24>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	4b25      	ldr	r3, [pc, #148]	; (800c770 <__d2b+0xb0>)
 800c6da:	4826      	ldr	r0, [pc, #152]	; (800c774 <__d2b+0xb4>)
 800c6dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c6e0:	f000 fe7a 	bl	800d3d8 <__assert_func>
 800c6e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6ec:	bb35      	cbnz	r5, 800c73c <__d2b+0x7c>
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	d028      	beq.n	800c746 <__d2b+0x86>
 800c6f4:	4668      	mov	r0, sp
 800c6f6:	9600      	str	r6, [sp, #0]
 800c6f8:	f7ff fd06 	bl	800c108 <__lo0bits>
 800c6fc:	9900      	ldr	r1, [sp, #0]
 800c6fe:	b300      	cbz	r0, 800c742 <__d2b+0x82>
 800c700:	9a01      	ldr	r2, [sp, #4]
 800c702:	f1c0 0320 	rsb	r3, r0, #32
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	430b      	orrs	r3, r1
 800c70c:	40c2      	lsrs	r2, r0
 800c70e:	6163      	str	r3, [r4, #20]
 800c710:	9201      	str	r2, [sp, #4]
 800c712:	9b01      	ldr	r3, [sp, #4]
 800c714:	61a3      	str	r3, [r4, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	bf14      	ite	ne
 800c71a:	2202      	movne	r2, #2
 800c71c:	2201      	moveq	r2, #1
 800c71e:	6122      	str	r2, [r4, #16]
 800c720:	b1d5      	cbz	r5, 800c758 <__d2b+0x98>
 800c722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c726:	4405      	add	r5, r0
 800c728:	f8c9 5000 	str.w	r5, [r9]
 800c72c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c730:	f8c8 0000 	str.w	r0, [r8]
 800c734:	4620      	mov	r0, r4
 800c736:	b003      	add	sp, #12
 800c738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c740:	e7d5      	b.n	800c6ee <__d2b+0x2e>
 800c742:	6161      	str	r1, [r4, #20]
 800c744:	e7e5      	b.n	800c712 <__d2b+0x52>
 800c746:	a801      	add	r0, sp, #4
 800c748:	f7ff fcde 	bl	800c108 <__lo0bits>
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	6163      	str	r3, [r4, #20]
 800c750:	2201      	movs	r2, #1
 800c752:	6122      	str	r2, [r4, #16]
 800c754:	3020      	adds	r0, #32
 800c756:	e7e3      	b.n	800c720 <__d2b+0x60>
 800c758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c75c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c760:	f8c9 0000 	str.w	r0, [r9]
 800c764:	6918      	ldr	r0, [r3, #16]
 800c766:	f7ff fcaf 	bl	800c0c8 <__hi0bits>
 800c76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c76e:	e7df      	b.n	800c730 <__d2b+0x70>
 800c770:	0800e418 	.word	0x0800e418
 800c774:	0800e508 	.word	0x0800e508

0800c778 <__ratio>:
 800c778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4688      	mov	r8, r1
 800c77e:	4669      	mov	r1, sp
 800c780:	4681      	mov	r9, r0
 800c782:	f7ff ff4d 	bl	800c620 <__b2d>
 800c786:	a901      	add	r1, sp, #4
 800c788:	4640      	mov	r0, r8
 800c78a:	ec55 4b10 	vmov	r4, r5, d0
 800c78e:	f7ff ff47 	bl	800c620 <__b2d>
 800c792:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c796:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c79a:	eba3 0c02 	sub.w	ip, r3, r2
 800c79e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c7a2:	1a9b      	subs	r3, r3, r2
 800c7a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c7a8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfd6      	itet	le
 800c7b0:	460a      	movle	r2, r1
 800c7b2:	462a      	movgt	r2, r5
 800c7b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c7b8:	468b      	mov	fp, r1
 800c7ba:	462f      	mov	r7, r5
 800c7bc:	bfd4      	ite	le
 800c7be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c7c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	ee10 2a10 	vmov	r2, s0
 800c7cc:	465b      	mov	r3, fp
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	f7f4 f83c 	bl	800084c <__aeabi_ddiv>
 800c7d4:	ec41 0b10 	vmov	d0, r0, r1
 800c7d8:	b003      	add	sp, #12
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7de <__copybits>:
 800c7de:	3901      	subs	r1, #1
 800c7e0:	b570      	push	{r4, r5, r6, lr}
 800c7e2:	1149      	asrs	r1, r1, #5
 800c7e4:	6914      	ldr	r4, [r2, #16]
 800c7e6:	3101      	adds	r1, #1
 800c7e8:	f102 0314 	add.w	r3, r2, #20
 800c7ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7f4:	1f05      	subs	r5, r0, #4
 800c7f6:	42a3      	cmp	r3, r4
 800c7f8:	d30c      	bcc.n	800c814 <__copybits+0x36>
 800c7fa:	1aa3      	subs	r3, r4, r2
 800c7fc:	3b11      	subs	r3, #17
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	3211      	adds	r2, #17
 800c804:	42a2      	cmp	r2, r4
 800c806:	bf88      	it	hi
 800c808:	2300      	movhi	r3, #0
 800c80a:	4418      	add	r0, r3
 800c80c:	2300      	movs	r3, #0
 800c80e:	4288      	cmp	r0, r1
 800c810:	d305      	bcc.n	800c81e <__copybits+0x40>
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	f853 6b04 	ldr.w	r6, [r3], #4
 800c818:	f845 6f04 	str.w	r6, [r5, #4]!
 800c81c:	e7eb      	b.n	800c7f6 <__copybits+0x18>
 800c81e:	f840 3b04 	str.w	r3, [r0], #4
 800c822:	e7f4      	b.n	800c80e <__copybits+0x30>

0800c824 <__any_on>:
 800c824:	f100 0214 	add.w	r2, r0, #20
 800c828:	6900      	ldr	r0, [r0, #16]
 800c82a:	114b      	asrs	r3, r1, #5
 800c82c:	4298      	cmp	r0, r3
 800c82e:	b510      	push	{r4, lr}
 800c830:	db11      	blt.n	800c856 <__any_on+0x32>
 800c832:	dd0a      	ble.n	800c84a <__any_on+0x26>
 800c834:	f011 011f 	ands.w	r1, r1, #31
 800c838:	d007      	beq.n	800c84a <__any_on+0x26>
 800c83a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c83e:	fa24 f001 	lsr.w	r0, r4, r1
 800c842:	fa00 f101 	lsl.w	r1, r0, r1
 800c846:	428c      	cmp	r4, r1
 800c848:	d10b      	bne.n	800c862 <__any_on+0x3e>
 800c84a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c84e:	4293      	cmp	r3, r2
 800c850:	d803      	bhi.n	800c85a <__any_on+0x36>
 800c852:	2000      	movs	r0, #0
 800c854:	bd10      	pop	{r4, pc}
 800c856:	4603      	mov	r3, r0
 800c858:	e7f7      	b.n	800c84a <__any_on+0x26>
 800c85a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c85e:	2900      	cmp	r1, #0
 800c860:	d0f5      	beq.n	800c84e <__any_on+0x2a>
 800c862:	2001      	movs	r0, #1
 800c864:	e7f6      	b.n	800c854 <__any_on+0x30>

0800c866 <_calloc_r>:
 800c866:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c868:	fba1 2402 	umull	r2, r4, r1, r2
 800c86c:	b94c      	cbnz	r4, 800c882 <_calloc_r+0x1c>
 800c86e:	4611      	mov	r1, r2
 800c870:	9201      	str	r2, [sp, #4]
 800c872:	f7fb fdcf 	bl	8008414 <_malloc_r>
 800c876:	9a01      	ldr	r2, [sp, #4]
 800c878:	4605      	mov	r5, r0
 800c87a:	b930      	cbnz	r0, 800c88a <_calloc_r+0x24>
 800c87c:	4628      	mov	r0, r5
 800c87e:	b003      	add	sp, #12
 800c880:	bd30      	pop	{r4, r5, pc}
 800c882:	220c      	movs	r2, #12
 800c884:	6002      	str	r2, [r0, #0]
 800c886:	2500      	movs	r5, #0
 800c888:	e7f8      	b.n	800c87c <_calloc_r+0x16>
 800c88a:	4621      	mov	r1, r4
 800c88c:	f7fb fd4e 	bl	800832c <memset>
 800c890:	e7f4      	b.n	800c87c <_calloc_r+0x16>

0800c892 <__ssputs_r>:
 800c892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c896:	688e      	ldr	r6, [r1, #8]
 800c898:	429e      	cmp	r6, r3
 800c89a:	4682      	mov	sl, r0
 800c89c:	460c      	mov	r4, r1
 800c89e:	4690      	mov	r8, r2
 800c8a0:	461f      	mov	r7, r3
 800c8a2:	d838      	bhi.n	800c916 <__ssputs_r+0x84>
 800c8a4:	898a      	ldrh	r2, [r1, #12]
 800c8a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8aa:	d032      	beq.n	800c912 <__ssputs_r+0x80>
 800c8ac:	6825      	ldr	r5, [r4, #0]
 800c8ae:	6909      	ldr	r1, [r1, #16]
 800c8b0:	eba5 0901 	sub.w	r9, r5, r1
 800c8b4:	6965      	ldr	r5, [r4, #20]
 800c8b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8be:	3301      	adds	r3, #1
 800c8c0:	444b      	add	r3, r9
 800c8c2:	106d      	asrs	r5, r5, #1
 800c8c4:	429d      	cmp	r5, r3
 800c8c6:	bf38      	it	cc
 800c8c8:	461d      	movcc	r5, r3
 800c8ca:	0553      	lsls	r3, r2, #21
 800c8cc:	d531      	bpl.n	800c932 <__ssputs_r+0xa0>
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	f7fb fda0 	bl	8008414 <_malloc_r>
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	b950      	cbnz	r0, 800c8ee <__ssputs_r+0x5c>
 800c8d8:	230c      	movs	r3, #12
 800c8da:	f8ca 3000 	str.w	r3, [sl]
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ee:	6921      	ldr	r1, [r4, #16]
 800c8f0:	464a      	mov	r2, r9
 800c8f2:	f7fb fcf3 	bl	80082dc <memcpy>
 800c8f6:	89a3      	ldrh	r3, [r4, #12]
 800c8f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	6126      	str	r6, [r4, #16]
 800c904:	6165      	str	r5, [r4, #20]
 800c906:	444e      	add	r6, r9
 800c908:	eba5 0509 	sub.w	r5, r5, r9
 800c90c:	6026      	str	r6, [r4, #0]
 800c90e:	60a5      	str	r5, [r4, #8]
 800c910:	463e      	mov	r6, r7
 800c912:	42be      	cmp	r6, r7
 800c914:	d900      	bls.n	800c918 <__ssputs_r+0x86>
 800c916:	463e      	mov	r6, r7
 800c918:	6820      	ldr	r0, [r4, #0]
 800c91a:	4632      	mov	r2, r6
 800c91c:	4641      	mov	r1, r8
 800c91e:	f7fb fceb 	bl	80082f8 <memmove>
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	1b9b      	subs	r3, r3, r6
 800c926:	60a3      	str	r3, [r4, #8]
 800c928:	6823      	ldr	r3, [r4, #0]
 800c92a:	4433      	add	r3, r6
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	2000      	movs	r0, #0
 800c930:	e7db      	b.n	800c8ea <__ssputs_r+0x58>
 800c932:	462a      	mov	r2, r5
 800c934:	f000 fd80 	bl	800d438 <_realloc_r>
 800c938:	4606      	mov	r6, r0
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d1e1      	bne.n	800c902 <__ssputs_r+0x70>
 800c93e:	6921      	ldr	r1, [r4, #16]
 800c940:	4650      	mov	r0, sl
 800c942:	f7fb fcfb 	bl	800833c <_free_r>
 800c946:	e7c7      	b.n	800c8d8 <__ssputs_r+0x46>

0800c948 <_svfiprintf_r>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	4698      	mov	r8, r3
 800c94e:	898b      	ldrh	r3, [r1, #12]
 800c950:	061b      	lsls	r3, r3, #24
 800c952:	b09d      	sub	sp, #116	; 0x74
 800c954:	4607      	mov	r7, r0
 800c956:	460d      	mov	r5, r1
 800c958:	4614      	mov	r4, r2
 800c95a:	d50e      	bpl.n	800c97a <_svfiprintf_r+0x32>
 800c95c:	690b      	ldr	r3, [r1, #16]
 800c95e:	b963      	cbnz	r3, 800c97a <_svfiprintf_r+0x32>
 800c960:	2140      	movs	r1, #64	; 0x40
 800c962:	f7fb fd57 	bl	8008414 <_malloc_r>
 800c966:	6028      	str	r0, [r5, #0]
 800c968:	6128      	str	r0, [r5, #16]
 800c96a:	b920      	cbnz	r0, 800c976 <_svfiprintf_r+0x2e>
 800c96c:	230c      	movs	r3, #12
 800c96e:	603b      	str	r3, [r7, #0]
 800c970:	f04f 30ff 	mov.w	r0, #4294967295
 800c974:	e0d1      	b.n	800cb1a <_svfiprintf_r+0x1d2>
 800c976:	2340      	movs	r3, #64	; 0x40
 800c978:	616b      	str	r3, [r5, #20]
 800c97a:	2300      	movs	r3, #0
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
 800c97e:	2320      	movs	r3, #32
 800c980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c984:	f8cd 800c 	str.w	r8, [sp, #12]
 800c988:	2330      	movs	r3, #48	; 0x30
 800c98a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb34 <_svfiprintf_r+0x1ec>
 800c98e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c992:	f04f 0901 	mov.w	r9, #1
 800c996:	4623      	mov	r3, r4
 800c998:	469a      	mov	sl, r3
 800c99a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99e:	b10a      	cbz	r2, 800c9a4 <_svfiprintf_r+0x5c>
 800c9a0:	2a25      	cmp	r2, #37	; 0x25
 800c9a2:	d1f9      	bne.n	800c998 <_svfiprintf_r+0x50>
 800c9a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9a8:	d00b      	beq.n	800c9c2 <_svfiprintf_r+0x7a>
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	4622      	mov	r2, r4
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	4638      	mov	r0, r7
 800c9b2:	f7ff ff6e 	bl	800c892 <__ssputs_r>
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f000 80aa 	beq.w	800cb10 <_svfiprintf_r+0x1c8>
 800c9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9be:	445a      	add	r2, fp
 800c9c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f000 80a2 	beq.w	800cb10 <_svfiprintf_r+0x1c8>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9d6:	f10a 0a01 	add.w	sl, sl, #1
 800c9da:	9304      	str	r3, [sp, #16]
 800c9dc:	9307      	str	r3, [sp, #28]
 800c9de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9e4:	4654      	mov	r4, sl
 800c9e6:	2205      	movs	r2, #5
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	4851      	ldr	r0, [pc, #324]	; (800cb34 <_svfiprintf_r+0x1ec>)
 800c9ee:	f7f3 fbef 	bl	80001d0 <memchr>
 800c9f2:	9a04      	ldr	r2, [sp, #16]
 800c9f4:	b9d8      	cbnz	r0, 800ca2e <_svfiprintf_r+0xe6>
 800c9f6:	06d0      	lsls	r0, r2, #27
 800c9f8:	bf44      	itt	mi
 800c9fa:	2320      	movmi	r3, #32
 800c9fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca00:	0711      	lsls	r1, r2, #28
 800ca02:	bf44      	itt	mi
 800ca04:	232b      	movmi	r3, #43	; 0x2b
 800ca06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca0e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca10:	d015      	beq.n	800ca3e <_svfiprintf_r+0xf6>
 800ca12:	9a07      	ldr	r2, [sp, #28]
 800ca14:	4654      	mov	r4, sl
 800ca16:	2000      	movs	r0, #0
 800ca18:	f04f 0c0a 	mov.w	ip, #10
 800ca1c:	4621      	mov	r1, r4
 800ca1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca22:	3b30      	subs	r3, #48	; 0x30
 800ca24:	2b09      	cmp	r3, #9
 800ca26:	d94e      	bls.n	800cac6 <_svfiprintf_r+0x17e>
 800ca28:	b1b0      	cbz	r0, 800ca58 <_svfiprintf_r+0x110>
 800ca2a:	9207      	str	r2, [sp, #28]
 800ca2c:	e014      	b.n	800ca58 <_svfiprintf_r+0x110>
 800ca2e:	eba0 0308 	sub.w	r3, r0, r8
 800ca32:	fa09 f303 	lsl.w	r3, r9, r3
 800ca36:	4313      	orrs	r3, r2
 800ca38:	9304      	str	r3, [sp, #16]
 800ca3a:	46a2      	mov	sl, r4
 800ca3c:	e7d2      	b.n	800c9e4 <_svfiprintf_r+0x9c>
 800ca3e:	9b03      	ldr	r3, [sp, #12]
 800ca40:	1d19      	adds	r1, r3, #4
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	9103      	str	r1, [sp, #12]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	bfbb      	ittet	lt
 800ca4a:	425b      	neglt	r3, r3
 800ca4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca50:	9307      	strge	r3, [sp, #28]
 800ca52:	9307      	strlt	r3, [sp, #28]
 800ca54:	bfb8      	it	lt
 800ca56:	9204      	strlt	r2, [sp, #16]
 800ca58:	7823      	ldrb	r3, [r4, #0]
 800ca5a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca5c:	d10c      	bne.n	800ca78 <_svfiprintf_r+0x130>
 800ca5e:	7863      	ldrb	r3, [r4, #1]
 800ca60:	2b2a      	cmp	r3, #42	; 0x2a
 800ca62:	d135      	bne.n	800cad0 <_svfiprintf_r+0x188>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	1d1a      	adds	r2, r3, #4
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	9203      	str	r2, [sp, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	bfb8      	it	lt
 800ca70:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca74:	3402      	adds	r4, #2
 800ca76:	9305      	str	r3, [sp, #20]
 800ca78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb44 <_svfiprintf_r+0x1fc>
 800ca7c:	7821      	ldrb	r1, [r4, #0]
 800ca7e:	2203      	movs	r2, #3
 800ca80:	4650      	mov	r0, sl
 800ca82:	f7f3 fba5 	bl	80001d0 <memchr>
 800ca86:	b140      	cbz	r0, 800ca9a <_svfiprintf_r+0x152>
 800ca88:	2340      	movs	r3, #64	; 0x40
 800ca8a:	eba0 000a 	sub.w	r0, r0, sl
 800ca8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ca92:	9b04      	ldr	r3, [sp, #16]
 800ca94:	4303      	orrs	r3, r0
 800ca96:	3401      	adds	r4, #1
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca9e:	4826      	ldr	r0, [pc, #152]	; (800cb38 <_svfiprintf_r+0x1f0>)
 800caa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800caa4:	2206      	movs	r2, #6
 800caa6:	f7f3 fb93 	bl	80001d0 <memchr>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d038      	beq.n	800cb20 <_svfiprintf_r+0x1d8>
 800caae:	4b23      	ldr	r3, [pc, #140]	; (800cb3c <_svfiprintf_r+0x1f4>)
 800cab0:	bb1b      	cbnz	r3, 800cafa <_svfiprintf_r+0x1b2>
 800cab2:	9b03      	ldr	r3, [sp, #12]
 800cab4:	3307      	adds	r3, #7
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	3308      	adds	r3, #8
 800cabc:	9303      	str	r3, [sp, #12]
 800cabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac0:	4433      	add	r3, r6
 800cac2:	9309      	str	r3, [sp, #36]	; 0x24
 800cac4:	e767      	b.n	800c996 <_svfiprintf_r+0x4e>
 800cac6:	fb0c 3202 	mla	r2, ip, r2, r3
 800caca:	460c      	mov	r4, r1
 800cacc:	2001      	movs	r0, #1
 800cace:	e7a5      	b.n	800ca1c <_svfiprintf_r+0xd4>
 800cad0:	2300      	movs	r3, #0
 800cad2:	3401      	adds	r4, #1
 800cad4:	9305      	str	r3, [sp, #20]
 800cad6:	4619      	mov	r1, r3
 800cad8:	f04f 0c0a 	mov.w	ip, #10
 800cadc:	4620      	mov	r0, r4
 800cade:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae2:	3a30      	subs	r2, #48	; 0x30
 800cae4:	2a09      	cmp	r2, #9
 800cae6:	d903      	bls.n	800caf0 <_svfiprintf_r+0x1a8>
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d0c5      	beq.n	800ca78 <_svfiprintf_r+0x130>
 800caec:	9105      	str	r1, [sp, #20]
 800caee:	e7c3      	b.n	800ca78 <_svfiprintf_r+0x130>
 800caf0:	fb0c 2101 	mla	r1, ip, r1, r2
 800caf4:	4604      	mov	r4, r0
 800caf6:	2301      	movs	r3, #1
 800caf8:	e7f0      	b.n	800cadc <_svfiprintf_r+0x194>
 800cafa:	ab03      	add	r3, sp, #12
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	462a      	mov	r2, r5
 800cb00:	4b0f      	ldr	r3, [pc, #60]	; (800cb40 <_svfiprintf_r+0x1f8>)
 800cb02:	a904      	add	r1, sp, #16
 800cb04:	4638      	mov	r0, r7
 800cb06:	f7fb fd99 	bl	800863c <_printf_float>
 800cb0a:	1c42      	adds	r2, r0, #1
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	d1d6      	bne.n	800cabe <_svfiprintf_r+0x176>
 800cb10:	89ab      	ldrh	r3, [r5, #12]
 800cb12:	065b      	lsls	r3, r3, #25
 800cb14:	f53f af2c 	bmi.w	800c970 <_svfiprintf_r+0x28>
 800cb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb1a:	b01d      	add	sp, #116	; 0x74
 800cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb20:	ab03      	add	r3, sp, #12
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	462a      	mov	r2, r5
 800cb26:	4b06      	ldr	r3, [pc, #24]	; (800cb40 <_svfiprintf_r+0x1f8>)
 800cb28:	a904      	add	r1, sp, #16
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	f7fc f82a 	bl	8008b84 <_printf_i>
 800cb30:	e7eb      	b.n	800cb0a <_svfiprintf_r+0x1c2>
 800cb32:	bf00      	nop
 800cb34:	0800e664 	.word	0x0800e664
 800cb38:	0800e66e 	.word	0x0800e66e
 800cb3c:	0800863d 	.word	0x0800863d
 800cb40:	0800c893 	.word	0x0800c893
 800cb44:	0800e66a 	.word	0x0800e66a

0800cb48 <_sungetc_r>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	1c4b      	adds	r3, r1, #1
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	d103      	bne.n	800cb58 <_sungetc_r+0x10>
 800cb50:	f04f 35ff 	mov.w	r5, #4294967295
 800cb54:	4628      	mov	r0, r5
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	8993      	ldrh	r3, [r2, #12]
 800cb5a:	f023 0320 	bic.w	r3, r3, #32
 800cb5e:	8193      	strh	r3, [r2, #12]
 800cb60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb62:	6852      	ldr	r2, [r2, #4]
 800cb64:	b2cd      	uxtb	r5, r1
 800cb66:	b18b      	cbz	r3, 800cb8c <_sungetc_r+0x44>
 800cb68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	dd08      	ble.n	800cb80 <_sungetc_r+0x38>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	1e5a      	subs	r2, r3, #1
 800cb72:	6022      	str	r2, [r4, #0]
 800cb74:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cb78:	6863      	ldr	r3, [r4, #4]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	6063      	str	r3, [r4, #4]
 800cb7e:	e7e9      	b.n	800cb54 <_sungetc_r+0xc>
 800cb80:	4621      	mov	r1, r4
 800cb82:	f000 fbe1 	bl	800d348 <__submore>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d0f1      	beq.n	800cb6e <_sungetc_r+0x26>
 800cb8a:	e7e1      	b.n	800cb50 <_sungetc_r+0x8>
 800cb8c:	6921      	ldr	r1, [r4, #16]
 800cb8e:	6823      	ldr	r3, [r4, #0]
 800cb90:	b151      	cbz	r1, 800cba8 <_sungetc_r+0x60>
 800cb92:	4299      	cmp	r1, r3
 800cb94:	d208      	bcs.n	800cba8 <_sungetc_r+0x60>
 800cb96:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cb9a:	42a9      	cmp	r1, r5
 800cb9c:	d104      	bne.n	800cba8 <_sungetc_r+0x60>
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	3201      	adds	r2, #1
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	6062      	str	r2, [r4, #4]
 800cba6:	e7d5      	b.n	800cb54 <_sungetc_r+0xc>
 800cba8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800cbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbb0:	6363      	str	r3, [r4, #52]	; 0x34
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbb6:	4623      	mov	r3, r4
 800cbb8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	e7dc      	b.n	800cb7c <_sungetc_r+0x34>

0800cbc2 <__ssrefill_r>:
 800cbc2:	b510      	push	{r4, lr}
 800cbc4:	460c      	mov	r4, r1
 800cbc6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cbc8:	b169      	cbz	r1, 800cbe6 <__ssrefill_r+0x24>
 800cbca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbce:	4299      	cmp	r1, r3
 800cbd0:	d001      	beq.n	800cbd6 <__ssrefill_r+0x14>
 800cbd2:	f7fb fbb3 	bl	800833c <_free_r>
 800cbd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	2000      	movs	r0, #0
 800cbdc:	6360      	str	r0, [r4, #52]	; 0x34
 800cbde:	b113      	cbz	r3, 800cbe6 <__ssrefill_r+0x24>
 800cbe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cbe2:	6023      	str	r3, [r4, #0]
 800cbe4:	bd10      	pop	{r4, pc}
 800cbe6:	6923      	ldr	r3, [r4, #16]
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	6063      	str	r3, [r4, #4]
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f043 0320 	orr.w	r3, r3, #32
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	e7f3      	b.n	800cbe4 <__ssrefill_r+0x22>

0800cbfc <__ssvfiscanf_r>:
 800cbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc00:	460c      	mov	r4, r1
 800cc02:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800cc06:	2100      	movs	r1, #0
 800cc08:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800cc0c:	49a6      	ldr	r1, [pc, #664]	; (800cea8 <__ssvfiscanf_r+0x2ac>)
 800cc0e:	91a0      	str	r1, [sp, #640]	; 0x280
 800cc10:	f10d 0804 	add.w	r8, sp, #4
 800cc14:	49a5      	ldr	r1, [pc, #660]	; (800ceac <__ssvfiscanf_r+0x2b0>)
 800cc16:	4fa6      	ldr	r7, [pc, #664]	; (800ceb0 <__ssvfiscanf_r+0x2b4>)
 800cc18:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800ceb4 <__ssvfiscanf_r+0x2b8>
 800cc1c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800cc20:	4606      	mov	r6, r0
 800cc22:	91a1      	str	r1, [sp, #644]	; 0x284
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	7813      	ldrb	r3, [r2, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 815a 	beq.w	800cee2 <__ssvfiscanf_r+0x2e6>
 800cc2e:	5dd9      	ldrb	r1, [r3, r7]
 800cc30:	f011 0108 	ands.w	r1, r1, #8
 800cc34:	f102 0501 	add.w	r5, r2, #1
 800cc38:	d019      	beq.n	800cc6e <__ssvfiscanf_r+0x72>
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	dd0f      	ble.n	800cc60 <__ssvfiscanf_r+0x64>
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	781a      	ldrb	r2, [r3, #0]
 800cc44:	5cba      	ldrb	r2, [r7, r2]
 800cc46:	0712      	lsls	r2, r2, #28
 800cc48:	d401      	bmi.n	800cc4e <__ssvfiscanf_r+0x52>
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	e7eb      	b.n	800cc26 <__ssvfiscanf_r+0x2a>
 800cc4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800cc50:	3201      	adds	r2, #1
 800cc52:	9245      	str	r2, [sp, #276]	; 0x114
 800cc54:	6862      	ldr	r2, [r4, #4]
 800cc56:	3301      	adds	r3, #1
 800cc58:	3a01      	subs	r2, #1
 800cc5a:	6062      	str	r2, [r4, #4]
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	e7ec      	b.n	800cc3a <__ssvfiscanf_r+0x3e>
 800cc60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cc62:	4621      	mov	r1, r4
 800cc64:	4630      	mov	r0, r6
 800cc66:	4798      	blx	r3
 800cc68:	2800      	cmp	r0, #0
 800cc6a:	d0e9      	beq.n	800cc40 <__ssvfiscanf_r+0x44>
 800cc6c:	e7ed      	b.n	800cc4a <__ssvfiscanf_r+0x4e>
 800cc6e:	2b25      	cmp	r3, #37	; 0x25
 800cc70:	d012      	beq.n	800cc98 <__ssvfiscanf_r+0x9c>
 800cc72:	469a      	mov	sl, r3
 800cc74:	6863      	ldr	r3, [r4, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f340 8091 	ble.w	800cd9e <__ssvfiscanf_r+0x1a2>
 800cc7c:	6822      	ldr	r2, [r4, #0]
 800cc7e:	7813      	ldrb	r3, [r2, #0]
 800cc80:	4553      	cmp	r3, sl
 800cc82:	f040 812e 	bne.w	800cee2 <__ssvfiscanf_r+0x2e6>
 800cc86:	6863      	ldr	r3, [r4, #4]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	6063      	str	r3, [r4, #4]
 800cc8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800cc8e:	3201      	adds	r2, #1
 800cc90:	3301      	adds	r3, #1
 800cc92:	6022      	str	r2, [r4, #0]
 800cc94:	9345      	str	r3, [sp, #276]	; 0x114
 800cc96:	e7d8      	b.n	800cc4a <__ssvfiscanf_r+0x4e>
 800cc98:	9141      	str	r1, [sp, #260]	; 0x104
 800cc9a:	9143      	str	r1, [sp, #268]	; 0x10c
 800cc9c:	7853      	ldrb	r3, [r2, #1]
 800cc9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cca0:	bf02      	ittt	eq
 800cca2:	2310      	moveq	r3, #16
 800cca4:	1c95      	addeq	r5, r2, #2
 800cca6:	9341      	streq	r3, [sp, #260]	; 0x104
 800cca8:	220a      	movs	r2, #10
 800ccaa:	46aa      	mov	sl, r5
 800ccac:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ccb0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ccb4:	2b09      	cmp	r3, #9
 800ccb6:	d91d      	bls.n	800ccf4 <__ssvfiscanf_r+0xf8>
 800ccb8:	487e      	ldr	r0, [pc, #504]	; (800ceb4 <__ssvfiscanf_r+0x2b8>)
 800ccba:	2203      	movs	r2, #3
 800ccbc:	f7f3 fa88 	bl	80001d0 <memchr>
 800ccc0:	b140      	cbz	r0, 800ccd4 <__ssvfiscanf_r+0xd8>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	eba0 0009 	sub.w	r0, r0, r9
 800ccc8:	fa03 f000 	lsl.w	r0, r3, r0
 800cccc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ccce:	4318      	orrs	r0, r3
 800ccd0:	9041      	str	r0, [sp, #260]	; 0x104
 800ccd2:	4655      	mov	r5, sl
 800ccd4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ccd8:	2b78      	cmp	r3, #120	; 0x78
 800ccda:	d806      	bhi.n	800ccea <__ssvfiscanf_r+0xee>
 800ccdc:	2b57      	cmp	r3, #87	; 0x57
 800ccde:	d810      	bhi.n	800cd02 <__ssvfiscanf_r+0x106>
 800cce0:	2b25      	cmp	r3, #37	; 0x25
 800cce2:	d0c6      	beq.n	800cc72 <__ssvfiscanf_r+0x76>
 800cce4:	d856      	bhi.n	800cd94 <__ssvfiscanf_r+0x198>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d064      	beq.n	800cdb4 <__ssvfiscanf_r+0x1b8>
 800ccea:	2303      	movs	r3, #3
 800ccec:	9347      	str	r3, [sp, #284]	; 0x11c
 800ccee:	230a      	movs	r3, #10
 800ccf0:	9342      	str	r3, [sp, #264]	; 0x108
 800ccf2:	e071      	b.n	800cdd8 <__ssvfiscanf_r+0x1dc>
 800ccf4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ccf6:	fb02 1103 	mla	r1, r2, r3, r1
 800ccfa:	3930      	subs	r1, #48	; 0x30
 800ccfc:	9143      	str	r1, [sp, #268]	; 0x10c
 800ccfe:	4655      	mov	r5, sl
 800cd00:	e7d3      	b.n	800ccaa <__ssvfiscanf_r+0xae>
 800cd02:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800cd06:	2a20      	cmp	r2, #32
 800cd08:	d8ef      	bhi.n	800ccea <__ssvfiscanf_r+0xee>
 800cd0a:	a101      	add	r1, pc, #4	; (adr r1, 800cd10 <__ssvfiscanf_r+0x114>)
 800cd0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd10:	0800cdc3 	.word	0x0800cdc3
 800cd14:	0800cceb 	.word	0x0800cceb
 800cd18:	0800cceb 	.word	0x0800cceb
 800cd1c:	0800ce21 	.word	0x0800ce21
 800cd20:	0800cceb 	.word	0x0800cceb
 800cd24:	0800cceb 	.word	0x0800cceb
 800cd28:	0800cceb 	.word	0x0800cceb
 800cd2c:	0800cceb 	.word	0x0800cceb
 800cd30:	0800cceb 	.word	0x0800cceb
 800cd34:	0800cceb 	.word	0x0800cceb
 800cd38:	0800cceb 	.word	0x0800cceb
 800cd3c:	0800ce37 	.word	0x0800ce37
 800cd40:	0800ce0d 	.word	0x0800ce0d
 800cd44:	0800cd9b 	.word	0x0800cd9b
 800cd48:	0800cd9b 	.word	0x0800cd9b
 800cd4c:	0800cd9b 	.word	0x0800cd9b
 800cd50:	0800cceb 	.word	0x0800cceb
 800cd54:	0800ce11 	.word	0x0800ce11
 800cd58:	0800cceb 	.word	0x0800cceb
 800cd5c:	0800cceb 	.word	0x0800cceb
 800cd60:	0800cceb 	.word	0x0800cceb
 800cd64:	0800cceb 	.word	0x0800cceb
 800cd68:	0800ce47 	.word	0x0800ce47
 800cd6c:	0800ce19 	.word	0x0800ce19
 800cd70:	0800cdbb 	.word	0x0800cdbb
 800cd74:	0800cceb 	.word	0x0800cceb
 800cd78:	0800cceb 	.word	0x0800cceb
 800cd7c:	0800ce43 	.word	0x0800ce43
 800cd80:	0800cceb 	.word	0x0800cceb
 800cd84:	0800ce0d 	.word	0x0800ce0d
 800cd88:	0800cceb 	.word	0x0800cceb
 800cd8c:	0800cceb 	.word	0x0800cceb
 800cd90:	0800cdc3 	.word	0x0800cdc3
 800cd94:	3b45      	subs	r3, #69	; 0x45
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	d8a7      	bhi.n	800ccea <__ssvfiscanf_r+0xee>
 800cd9a:	2305      	movs	r3, #5
 800cd9c:	e01b      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800cd9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800cda0:	4621      	mov	r1, r4
 800cda2:	4630      	mov	r0, r6
 800cda4:	4798      	blx	r3
 800cda6:	2800      	cmp	r0, #0
 800cda8:	f43f af68 	beq.w	800cc7c <__ssvfiscanf_r+0x80>
 800cdac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f040 808d 	bne.w	800cece <__ssvfiscanf_r+0x2d2>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e08f      	b.n	800ceda <__ssvfiscanf_r+0x2de>
 800cdba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdbc:	f042 0220 	orr.w	r2, r2, #32
 800cdc0:	9241      	str	r2, [sp, #260]	; 0x104
 800cdc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cdc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cdc8:	9241      	str	r2, [sp, #260]	; 0x104
 800cdca:	2210      	movs	r2, #16
 800cdcc:	2b6f      	cmp	r3, #111	; 0x6f
 800cdce:	9242      	str	r2, [sp, #264]	; 0x108
 800cdd0:	bf34      	ite	cc
 800cdd2:	2303      	movcc	r3, #3
 800cdd4:	2304      	movcs	r3, #4
 800cdd6:	9347      	str	r3, [sp, #284]	; 0x11c
 800cdd8:	6863      	ldr	r3, [r4, #4]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	dd42      	ble.n	800ce64 <__ssvfiscanf_r+0x268>
 800cdde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800cde0:	0659      	lsls	r1, r3, #25
 800cde2:	d404      	bmi.n	800cdee <__ssvfiscanf_r+0x1f2>
 800cde4:	6823      	ldr	r3, [r4, #0]
 800cde6:	781a      	ldrb	r2, [r3, #0]
 800cde8:	5cba      	ldrb	r2, [r7, r2]
 800cdea:	0712      	lsls	r2, r2, #28
 800cdec:	d441      	bmi.n	800ce72 <__ssvfiscanf_r+0x276>
 800cdee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	dc50      	bgt.n	800ce96 <__ssvfiscanf_r+0x29a>
 800cdf4:	466b      	mov	r3, sp
 800cdf6:	4622      	mov	r2, r4
 800cdf8:	a941      	add	r1, sp, #260	; 0x104
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f000 f876 	bl	800ceec <_scanf_chars>
 800ce00:	2801      	cmp	r0, #1
 800ce02:	d06e      	beq.n	800cee2 <__ssvfiscanf_r+0x2e6>
 800ce04:	2802      	cmp	r0, #2
 800ce06:	f47f af20 	bne.w	800cc4a <__ssvfiscanf_r+0x4e>
 800ce0a:	e7cf      	b.n	800cdac <__ssvfiscanf_r+0x1b0>
 800ce0c:	220a      	movs	r2, #10
 800ce0e:	e7dd      	b.n	800cdcc <__ssvfiscanf_r+0x1d0>
 800ce10:	2300      	movs	r3, #0
 800ce12:	9342      	str	r3, [sp, #264]	; 0x108
 800ce14:	2303      	movs	r3, #3
 800ce16:	e7de      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800ce18:	2308      	movs	r3, #8
 800ce1a:	9342      	str	r3, [sp, #264]	; 0x108
 800ce1c:	2304      	movs	r3, #4
 800ce1e:	e7da      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800ce20:	4629      	mov	r1, r5
 800ce22:	4640      	mov	r0, r8
 800ce24:	f000 f9d0 	bl	800d1c8 <__sccl>
 800ce28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce2e:	9341      	str	r3, [sp, #260]	; 0x104
 800ce30:	4605      	mov	r5, r0
 800ce32:	2301      	movs	r3, #1
 800ce34:	e7cf      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800ce36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ce38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce3c:	9341      	str	r3, [sp, #260]	; 0x104
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e7c9      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800ce42:	2302      	movs	r3, #2
 800ce44:	e7c7      	b.n	800cdd6 <__ssvfiscanf_r+0x1da>
 800ce46:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ce48:	06c3      	lsls	r3, r0, #27
 800ce4a:	f53f aefe 	bmi.w	800cc4a <__ssvfiscanf_r+0x4e>
 800ce4e:	9b00      	ldr	r3, [sp, #0]
 800ce50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce52:	1d19      	adds	r1, r3, #4
 800ce54:	9100      	str	r1, [sp, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f010 0f01 	tst.w	r0, #1
 800ce5c:	bf14      	ite	ne
 800ce5e:	801a      	strhne	r2, [r3, #0]
 800ce60:	601a      	streq	r2, [r3, #0]
 800ce62:	e6f2      	b.n	800cc4a <__ssvfiscanf_r+0x4e>
 800ce64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce66:	4621      	mov	r1, r4
 800ce68:	4630      	mov	r0, r6
 800ce6a:	4798      	blx	r3
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d0b6      	beq.n	800cdde <__ssvfiscanf_r+0x1e2>
 800ce70:	e79c      	b.n	800cdac <__ssvfiscanf_r+0x1b0>
 800ce72:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ce74:	3201      	adds	r2, #1
 800ce76:	9245      	str	r2, [sp, #276]	; 0x114
 800ce78:	6862      	ldr	r2, [r4, #4]
 800ce7a:	3a01      	subs	r2, #1
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	6062      	str	r2, [r4, #4]
 800ce80:	dd02      	ble.n	800ce88 <__ssvfiscanf_r+0x28c>
 800ce82:	3301      	adds	r3, #1
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	e7ad      	b.n	800cde4 <__ssvfiscanf_r+0x1e8>
 800ce88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ce8a:	4621      	mov	r1, r4
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4798      	blx	r3
 800ce90:	2800      	cmp	r0, #0
 800ce92:	d0a7      	beq.n	800cde4 <__ssvfiscanf_r+0x1e8>
 800ce94:	e78a      	b.n	800cdac <__ssvfiscanf_r+0x1b0>
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	dc0e      	bgt.n	800ceb8 <__ssvfiscanf_r+0x2bc>
 800ce9a:	466b      	mov	r3, sp
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	a941      	add	r1, sp, #260	; 0x104
 800cea0:	4630      	mov	r0, r6
 800cea2:	f000 f87d 	bl	800cfa0 <_scanf_i>
 800cea6:	e7ab      	b.n	800ce00 <__ssvfiscanf_r+0x204>
 800cea8:	0800cb49 	.word	0x0800cb49
 800ceac:	0800cbc3 	.word	0x0800cbc3
 800ceb0:	0800e299 	.word	0x0800e299
 800ceb4:	0800e66a 	.word	0x0800e66a
 800ceb8:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <__ssvfiscanf_r+0x2ec>)
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	f43f aec5 	beq.w	800cc4a <__ssvfiscanf_r+0x4e>
 800cec0:	466b      	mov	r3, sp
 800cec2:	4622      	mov	r2, r4
 800cec4:	a941      	add	r1, sp, #260	; 0x104
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7fb ff82 	bl	8008dd0 <_scanf_float>
 800cecc:	e798      	b.n	800ce00 <__ssvfiscanf_r+0x204>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ced4:	bf18      	it	ne
 800ced6:	f04f 30ff 	movne.w	r0, #4294967295
 800ceda:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800cede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800cee4:	e7f9      	b.n	800ceda <__ssvfiscanf_r+0x2de>
 800cee6:	bf00      	nop
 800cee8:	08008dd1 	.word	0x08008dd1

0800ceec <_scanf_chars>:
 800ceec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cef0:	4615      	mov	r5, r2
 800cef2:	688a      	ldr	r2, [r1, #8]
 800cef4:	4680      	mov	r8, r0
 800cef6:	460c      	mov	r4, r1
 800cef8:	b932      	cbnz	r2, 800cf08 <_scanf_chars+0x1c>
 800cefa:	698a      	ldr	r2, [r1, #24]
 800cefc:	2a00      	cmp	r2, #0
 800cefe:	bf0c      	ite	eq
 800cf00:	2201      	moveq	r2, #1
 800cf02:	f04f 32ff 	movne.w	r2, #4294967295
 800cf06:	608a      	str	r2, [r1, #8]
 800cf08:	6822      	ldr	r2, [r4, #0]
 800cf0a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cf9c <_scanf_chars+0xb0>
 800cf0e:	06d1      	lsls	r1, r2, #27
 800cf10:	bf5f      	itttt	pl
 800cf12:	681a      	ldrpl	r2, [r3, #0]
 800cf14:	1d11      	addpl	r1, r2, #4
 800cf16:	6019      	strpl	r1, [r3, #0]
 800cf18:	6816      	ldrpl	r6, [r2, #0]
 800cf1a:	2700      	movs	r7, #0
 800cf1c:	69a0      	ldr	r0, [r4, #24]
 800cf1e:	b188      	cbz	r0, 800cf44 <_scanf_chars+0x58>
 800cf20:	2801      	cmp	r0, #1
 800cf22:	d107      	bne.n	800cf34 <_scanf_chars+0x48>
 800cf24:	682a      	ldr	r2, [r5, #0]
 800cf26:	7811      	ldrb	r1, [r2, #0]
 800cf28:	6962      	ldr	r2, [r4, #20]
 800cf2a:	5c52      	ldrb	r2, [r2, r1]
 800cf2c:	b952      	cbnz	r2, 800cf44 <_scanf_chars+0x58>
 800cf2e:	2f00      	cmp	r7, #0
 800cf30:	d031      	beq.n	800cf96 <_scanf_chars+0xaa>
 800cf32:	e022      	b.n	800cf7a <_scanf_chars+0x8e>
 800cf34:	2802      	cmp	r0, #2
 800cf36:	d120      	bne.n	800cf7a <_scanf_chars+0x8e>
 800cf38:	682b      	ldr	r3, [r5, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cf40:	071b      	lsls	r3, r3, #28
 800cf42:	d41a      	bmi.n	800cf7a <_scanf_chars+0x8e>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	06da      	lsls	r2, r3, #27
 800cf48:	bf5e      	ittt	pl
 800cf4a:	682b      	ldrpl	r3, [r5, #0]
 800cf4c:	781b      	ldrbpl	r3, [r3, #0]
 800cf4e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cf52:	682a      	ldr	r2, [r5, #0]
 800cf54:	686b      	ldr	r3, [r5, #4]
 800cf56:	3201      	adds	r2, #1
 800cf58:	602a      	str	r2, [r5, #0]
 800cf5a:	68a2      	ldr	r2, [r4, #8]
 800cf5c:	3b01      	subs	r3, #1
 800cf5e:	3a01      	subs	r2, #1
 800cf60:	606b      	str	r3, [r5, #4]
 800cf62:	3701      	adds	r7, #1
 800cf64:	60a2      	str	r2, [r4, #8]
 800cf66:	b142      	cbz	r2, 800cf7a <_scanf_chars+0x8e>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dcd7      	bgt.n	800cf1c <_scanf_chars+0x30>
 800cf6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cf70:	4629      	mov	r1, r5
 800cf72:	4640      	mov	r0, r8
 800cf74:	4798      	blx	r3
 800cf76:	2800      	cmp	r0, #0
 800cf78:	d0d0      	beq.n	800cf1c <_scanf_chars+0x30>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f013 0310 	ands.w	r3, r3, #16
 800cf80:	d105      	bne.n	800cf8e <_scanf_chars+0xa2>
 800cf82:	68e2      	ldr	r2, [r4, #12]
 800cf84:	3201      	adds	r2, #1
 800cf86:	60e2      	str	r2, [r4, #12]
 800cf88:	69a2      	ldr	r2, [r4, #24]
 800cf8a:	b102      	cbz	r2, 800cf8e <_scanf_chars+0xa2>
 800cf8c:	7033      	strb	r3, [r6, #0]
 800cf8e:	6923      	ldr	r3, [r4, #16]
 800cf90:	443b      	add	r3, r7
 800cf92:	6123      	str	r3, [r4, #16]
 800cf94:	2000      	movs	r0, #0
 800cf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0800e299 	.word	0x0800e299

0800cfa0 <_scanf_i>:
 800cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	4698      	mov	r8, r3
 800cfa6:	4b76      	ldr	r3, [pc, #472]	; (800d180 <_scanf_i+0x1e0>)
 800cfa8:	460c      	mov	r4, r1
 800cfaa:	4682      	mov	sl, r0
 800cfac:	4616      	mov	r6, r2
 800cfae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfb2:	b087      	sub	sp, #28
 800cfb4:	ab03      	add	r3, sp, #12
 800cfb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cfba:	4b72      	ldr	r3, [pc, #456]	; (800d184 <_scanf_i+0x1e4>)
 800cfbc:	69a1      	ldr	r1, [r4, #24]
 800cfbe:	4a72      	ldr	r2, [pc, #456]	; (800d188 <_scanf_i+0x1e8>)
 800cfc0:	2903      	cmp	r1, #3
 800cfc2:	bf18      	it	ne
 800cfc4:	461a      	movne	r2, r3
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	9201      	str	r2, [sp, #4]
 800cfca:	1e5a      	subs	r2, r3, #1
 800cfcc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cfd0:	bf88      	it	hi
 800cfd2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cfd6:	4627      	mov	r7, r4
 800cfd8:	bf82      	ittt	hi
 800cfda:	eb03 0905 	addhi.w	r9, r3, r5
 800cfde:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cfe2:	60a3      	strhi	r3, [r4, #8]
 800cfe4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cfe8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cfec:	bf98      	it	ls
 800cfee:	f04f 0900 	movls.w	r9, #0
 800cff2:	6023      	str	r3, [r4, #0]
 800cff4:	463d      	mov	r5, r7
 800cff6:	f04f 0b00 	mov.w	fp, #0
 800cffa:	6831      	ldr	r1, [r6, #0]
 800cffc:	ab03      	add	r3, sp, #12
 800cffe:	7809      	ldrb	r1, [r1, #0]
 800d000:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d004:	2202      	movs	r2, #2
 800d006:	f7f3 f8e3 	bl	80001d0 <memchr>
 800d00a:	b328      	cbz	r0, 800d058 <_scanf_i+0xb8>
 800d00c:	f1bb 0f01 	cmp.w	fp, #1
 800d010:	d159      	bne.n	800d0c6 <_scanf_i+0x126>
 800d012:	6862      	ldr	r2, [r4, #4]
 800d014:	b92a      	cbnz	r2, 800d022 <_scanf_i+0x82>
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	2308      	movs	r3, #8
 800d01a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d01e:	6063      	str	r3, [r4, #4]
 800d020:	6022      	str	r2, [r4, #0]
 800d022:	6822      	ldr	r2, [r4, #0]
 800d024:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d028:	6022      	str	r2, [r4, #0]
 800d02a:	68a2      	ldr	r2, [r4, #8]
 800d02c:	1e51      	subs	r1, r2, #1
 800d02e:	60a1      	str	r1, [r4, #8]
 800d030:	b192      	cbz	r2, 800d058 <_scanf_i+0xb8>
 800d032:	6832      	ldr	r2, [r6, #0]
 800d034:	1c51      	adds	r1, r2, #1
 800d036:	6031      	str	r1, [r6, #0]
 800d038:	7812      	ldrb	r2, [r2, #0]
 800d03a:	f805 2b01 	strb.w	r2, [r5], #1
 800d03e:	6872      	ldr	r2, [r6, #4]
 800d040:	3a01      	subs	r2, #1
 800d042:	2a00      	cmp	r2, #0
 800d044:	6072      	str	r2, [r6, #4]
 800d046:	dc07      	bgt.n	800d058 <_scanf_i+0xb8>
 800d048:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d04c:	4631      	mov	r1, r6
 800d04e:	4650      	mov	r0, sl
 800d050:	4790      	blx	r2
 800d052:	2800      	cmp	r0, #0
 800d054:	f040 8085 	bne.w	800d162 <_scanf_i+0x1c2>
 800d058:	f10b 0b01 	add.w	fp, fp, #1
 800d05c:	f1bb 0f03 	cmp.w	fp, #3
 800d060:	d1cb      	bne.n	800cffa <_scanf_i+0x5a>
 800d062:	6863      	ldr	r3, [r4, #4]
 800d064:	b90b      	cbnz	r3, 800d06a <_scanf_i+0xca>
 800d066:	230a      	movs	r3, #10
 800d068:	6063      	str	r3, [r4, #4]
 800d06a:	6863      	ldr	r3, [r4, #4]
 800d06c:	4947      	ldr	r1, [pc, #284]	; (800d18c <_scanf_i+0x1ec>)
 800d06e:	6960      	ldr	r0, [r4, #20]
 800d070:	1ac9      	subs	r1, r1, r3
 800d072:	f000 f8a9 	bl	800d1c8 <__sccl>
 800d076:	f04f 0b00 	mov.w	fp, #0
 800d07a:	68a3      	ldr	r3, [r4, #8]
 800d07c:	6822      	ldr	r2, [r4, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d03d      	beq.n	800d0fe <_scanf_i+0x15e>
 800d082:	6831      	ldr	r1, [r6, #0]
 800d084:	6960      	ldr	r0, [r4, #20]
 800d086:	f891 c000 	ldrb.w	ip, [r1]
 800d08a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d08e:	2800      	cmp	r0, #0
 800d090:	d035      	beq.n	800d0fe <_scanf_i+0x15e>
 800d092:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d096:	d124      	bne.n	800d0e2 <_scanf_i+0x142>
 800d098:	0510      	lsls	r0, r2, #20
 800d09a:	d522      	bpl.n	800d0e2 <_scanf_i+0x142>
 800d09c:	f10b 0b01 	add.w	fp, fp, #1
 800d0a0:	f1b9 0f00 	cmp.w	r9, #0
 800d0a4:	d003      	beq.n	800d0ae <_scanf_i+0x10e>
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800d0ac:	60a3      	str	r3, [r4, #8]
 800d0ae:	6873      	ldr	r3, [r6, #4]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	6073      	str	r3, [r6, #4]
 800d0b6:	dd1b      	ble.n	800d0f0 <_scanf_i+0x150>
 800d0b8:	6833      	ldr	r3, [r6, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	6033      	str	r3, [r6, #0]
 800d0be:	68a3      	ldr	r3, [r4, #8]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	60a3      	str	r3, [r4, #8]
 800d0c4:	e7d9      	b.n	800d07a <_scanf_i+0xda>
 800d0c6:	f1bb 0f02 	cmp.w	fp, #2
 800d0ca:	d1ae      	bne.n	800d02a <_scanf_i+0x8a>
 800d0cc:	6822      	ldr	r2, [r4, #0]
 800d0ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d0d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d0d6:	d1bf      	bne.n	800d058 <_scanf_i+0xb8>
 800d0d8:	2310      	movs	r3, #16
 800d0da:	6063      	str	r3, [r4, #4]
 800d0dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0e0:	e7a2      	b.n	800d028 <_scanf_i+0x88>
 800d0e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d0e6:	6022      	str	r2, [r4, #0]
 800d0e8:	780b      	ldrb	r3, [r1, #0]
 800d0ea:	f805 3b01 	strb.w	r3, [r5], #1
 800d0ee:	e7de      	b.n	800d0ae <_scanf_i+0x10e>
 800d0f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4650      	mov	r0, sl
 800d0f8:	4798      	blx	r3
 800d0fa:	2800      	cmp	r0, #0
 800d0fc:	d0df      	beq.n	800d0be <_scanf_i+0x11e>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	05db      	lsls	r3, r3, #23
 800d102:	d50d      	bpl.n	800d120 <_scanf_i+0x180>
 800d104:	42bd      	cmp	r5, r7
 800d106:	d909      	bls.n	800d11c <_scanf_i+0x17c>
 800d108:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d10c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d110:	4632      	mov	r2, r6
 800d112:	4650      	mov	r0, sl
 800d114:	4798      	blx	r3
 800d116:	f105 39ff 	add.w	r9, r5, #4294967295
 800d11a:	464d      	mov	r5, r9
 800d11c:	42bd      	cmp	r5, r7
 800d11e:	d02d      	beq.n	800d17c <_scanf_i+0x1dc>
 800d120:	6822      	ldr	r2, [r4, #0]
 800d122:	f012 0210 	ands.w	r2, r2, #16
 800d126:	d113      	bne.n	800d150 <_scanf_i+0x1b0>
 800d128:	702a      	strb	r2, [r5, #0]
 800d12a:	6863      	ldr	r3, [r4, #4]
 800d12c:	9e01      	ldr	r6, [sp, #4]
 800d12e:	4639      	mov	r1, r7
 800d130:	4650      	mov	r0, sl
 800d132:	47b0      	blx	r6
 800d134:	6821      	ldr	r1, [r4, #0]
 800d136:	f8d8 3000 	ldr.w	r3, [r8]
 800d13a:	f011 0f20 	tst.w	r1, #32
 800d13e:	d013      	beq.n	800d168 <_scanf_i+0x1c8>
 800d140:	1d1a      	adds	r2, r3, #4
 800d142:	f8c8 2000 	str.w	r2, [r8]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6018      	str	r0, [r3, #0]
 800d14a:	68e3      	ldr	r3, [r4, #12]
 800d14c:	3301      	adds	r3, #1
 800d14e:	60e3      	str	r3, [r4, #12]
 800d150:	1bed      	subs	r5, r5, r7
 800d152:	44ab      	add	fp, r5
 800d154:	6925      	ldr	r5, [r4, #16]
 800d156:	445d      	add	r5, fp
 800d158:	6125      	str	r5, [r4, #16]
 800d15a:	2000      	movs	r0, #0
 800d15c:	b007      	add	sp, #28
 800d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d162:	f04f 0b00 	mov.w	fp, #0
 800d166:	e7ca      	b.n	800d0fe <_scanf_i+0x15e>
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	f8c8 2000 	str.w	r2, [r8]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f011 0f01 	tst.w	r1, #1
 800d174:	bf14      	ite	ne
 800d176:	8018      	strhne	r0, [r3, #0]
 800d178:	6018      	streq	r0, [r3, #0]
 800d17a:	e7e6      	b.n	800d14a <_scanf_i+0x1aa>
 800d17c:	2001      	movs	r0, #1
 800d17e:	e7ed      	b.n	800d15c <_scanf_i+0x1bc>
 800d180:	0800dae4 	.word	0x0800dae4
 800d184:	0800d345 	.word	0x0800d345
 800d188:	0800a62d 	.word	0x0800a62d
 800d18c:	0800e68e 	.word	0x0800e68e

0800d190 <_read_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	4d07      	ldr	r5, [pc, #28]	; (800d1b0 <_read_r+0x20>)
 800d194:	4604      	mov	r4, r0
 800d196:	4608      	mov	r0, r1
 800d198:	4611      	mov	r1, r2
 800d19a:	2200      	movs	r2, #0
 800d19c:	602a      	str	r2, [r5, #0]
 800d19e:	461a      	mov	r2, r3
 800d1a0:	f7f4 fe06 	bl	8001db0 <_read>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d102      	bne.n	800d1ae <_read_r+0x1e>
 800d1a8:	682b      	ldr	r3, [r5, #0]
 800d1aa:	b103      	cbz	r3, 800d1ae <_read_r+0x1e>
 800d1ac:	6023      	str	r3, [r4, #0]
 800d1ae:	bd38      	pop	{r3, r4, r5, pc}
 800d1b0:	200007ec 	.word	0x200007ec
 800d1b4:	00000000 	.word	0x00000000

0800d1b8 <nan>:
 800d1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d1c0 <nan+0x8>
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	00000000 	.word	0x00000000
 800d1c4:	7ff80000 	.word	0x7ff80000

0800d1c8 <__sccl>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	780b      	ldrb	r3, [r1, #0]
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	2b5e      	cmp	r3, #94	; 0x5e
 800d1d0:	bf0b      	itete	eq
 800d1d2:	784b      	ldrbeq	r3, [r1, #1]
 800d1d4:	1c48      	addne	r0, r1, #1
 800d1d6:	1c88      	addeq	r0, r1, #2
 800d1d8:	2200      	movne	r2, #0
 800d1da:	bf08      	it	eq
 800d1dc:	2201      	moveq	r2, #1
 800d1de:	1e61      	subs	r1, r4, #1
 800d1e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800d1e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800d1e8:	42a9      	cmp	r1, r5
 800d1ea:	d1fb      	bne.n	800d1e4 <__sccl+0x1c>
 800d1ec:	b90b      	cbnz	r3, 800d1f2 <__sccl+0x2a>
 800d1ee:	3801      	subs	r0, #1
 800d1f0:	bd70      	pop	{r4, r5, r6, pc}
 800d1f2:	f082 0201 	eor.w	r2, r2, #1
 800d1f6:	54e2      	strb	r2, [r4, r3]
 800d1f8:	4605      	mov	r5, r0
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800d200:	292d      	cmp	r1, #45	; 0x2d
 800d202:	d006      	beq.n	800d212 <__sccl+0x4a>
 800d204:	295d      	cmp	r1, #93	; 0x5d
 800d206:	d0f3      	beq.n	800d1f0 <__sccl+0x28>
 800d208:	b909      	cbnz	r1, 800d20e <__sccl+0x46>
 800d20a:	4628      	mov	r0, r5
 800d20c:	e7f0      	b.n	800d1f0 <__sccl+0x28>
 800d20e:	460b      	mov	r3, r1
 800d210:	e7f1      	b.n	800d1f6 <__sccl+0x2e>
 800d212:	786e      	ldrb	r6, [r5, #1]
 800d214:	2e5d      	cmp	r6, #93	; 0x5d
 800d216:	d0fa      	beq.n	800d20e <__sccl+0x46>
 800d218:	42b3      	cmp	r3, r6
 800d21a:	dcf8      	bgt.n	800d20e <__sccl+0x46>
 800d21c:	3502      	adds	r5, #2
 800d21e:	4619      	mov	r1, r3
 800d220:	3101      	adds	r1, #1
 800d222:	428e      	cmp	r6, r1
 800d224:	5462      	strb	r2, [r4, r1]
 800d226:	dcfb      	bgt.n	800d220 <__sccl+0x58>
 800d228:	1af1      	subs	r1, r6, r3
 800d22a:	3901      	subs	r1, #1
 800d22c:	1c58      	adds	r0, r3, #1
 800d22e:	42b3      	cmp	r3, r6
 800d230:	bfa8      	it	ge
 800d232:	2100      	movge	r1, #0
 800d234:	1843      	adds	r3, r0, r1
 800d236:	e7e0      	b.n	800d1fa <__sccl+0x32>

0800d238 <strncmp>:
 800d238:	b510      	push	{r4, lr}
 800d23a:	b17a      	cbz	r2, 800d25c <strncmp+0x24>
 800d23c:	4603      	mov	r3, r0
 800d23e:	3901      	subs	r1, #1
 800d240:	1884      	adds	r4, r0, r2
 800d242:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d246:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d24a:	4290      	cmp	r0, r2
 800d24c:	d101      	bne.n	800d252 <strncmp+0x1a>
 800d24e:	42a3      	cmp	r3, r4
 800d250:	d101      	bne.n	800d256 <strncmp+0x1e>
 800d252:	1a80      	subs	r0, r0, r2
 800d254:	bd10      	pop	{r4, pc}
 800d256:	2800      	cmp	r0, #0
 800d258:	d1f3      	bne.n	800d242 <strncmp+0xa>
 800d25a:	e7fa      	b.n	800d252 <strncmp+0x1a>
 800d25c:	4610      	mov	r0, r2
 800d25e:	e7f9      	b.n	800d254 <strncmp+0x1c>

0800d260 <_strtoul_l.constprop.0>:
 800d260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d264:	4f36      	ldr	r7, [pc, #216]	; (800d340 <_strtoul_l.constprop.0+0xe0>)
 800d266:	4686      	mov	lr, r0
 800d268:	460d      	mov	r5, r1
 800d26a:	4628      	mov	r0, r5
 800d26c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d270:	5de6      	ldrb	r6, [r4, r7]
 800d272:	f016 0608 	ands.w	r6, r6, #8
 800d276:	d1f8      	bne.n	800d26a <_strtoul_l.constprop.0+0xa>
 800d278:	2c2d      	cmp	r4, #45	; 0x2d
 800d27a:	d12f      	bne.n	800d2dc <_strtoul_l.constprop.0+0x7c>
 800d27c:	782c      	ldrb	r4, [r5, #0]
 800d27e:	2601      	movs	r6, #1
 800d280:	1c85      	adds	r5, r0, #2
 800d282:	2b00      	cmp	r3, #0
 800d284:	d057      	beq.n	800d336 <_strtoul_l.constprop.0+0xd6>
 800d286:	2b10      	cmp	r3, #16
 800d288:	d109      	bne.n	800d29e <_strtoul_l.constprop.0+0x3e>
 800d28a:	2c30      	cmp	r4, #48	; 0x30
 800d28c:	d107      	bne.n	800d29e <_strtoul_l.constprop.0+0x3e>
 800d28e:	7828      	ldrb	r0, [r5, #0]
 800d290:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d294:	2858      	cmp	r0, #88	; 0x58
 800d296:	d149      	bne.n	800d32c <_strtoul_l.constprop.0+0xcc>
 800d298:	786c      	ldrb	r4, [r5, #1]
 800d29a:	2310      	movs	r3, #16
 800d29c:	3502      	adds	r5, #2
 800d29e:	f04f 38ff 	mov.w	r8, #4294967295
 800d2a2:	2700      	movs	r7, #0
 800d2a4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d2a8:	fb03 f908 	mul.w	r9, r3, r8
 800d2ac:	ea6f 0909 	mvn.w	r9, r9
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d2b6:	f1bc 0f09 	cmp.w	ip, #9
 800d2ba:	d814      	bhi.n	800d2e6 <_strtoul_l.constprop.0+0x86>
 800d2bc:	4664      	mov	r4, ip
 800d2be:	42a3      	cmp	r3, r4
 800d2c0:	dd22      	ble.n	800d308 <_strtoul_l.constprop.0+0xa8>
 800d2c2:	2f00      	cmp	r7, #0
 800d2c4:	db1d      	blt.n	800d302 <_strtoul_l.constprop.0+0xa2>
 800d2c6:	4580      	cmp	r8, r0
 800d2c8:	d31b      	bcc.n	800d302 <_strtoul_l.constprop.0+0xa2>
 800d2ca:	d101      	bne.n	800d2d0 <_strtoul_l.constprop.0+0x70>
 800d2cc:	45a1      	cmp	r9, r4
 800d2ce:	db18      	blt.n	800d302 <_strtoul_l.constprop.0+0xa2>
 800d2d0:	fb00 4003 	mla	r0, r0, r3, r4
 800d2d4:	2701      	movs	r7, #1
 800d2d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2da:	e7ea      	b.n	800d2b2 <_strtoul_l.constprop.0+0x52>
 800d2dc:	2c2b      	cmp	r4, #43	; 0x2b
 800d2de:	bf04      	itt	eq
 800d2e0:	782c      	ldrbeq	r4, [r5, #0]
 800d2e2:	1c85      	addeq	r5, r0, #2
 800d2e4:	e7cd      	b.n	800d282 <_strtoul_l.constprop.0+0x22>
 800d2e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d2ea:	f1bc 0f19 	cmp.w	ip, #25
 800d2ee:	d801      	bhi.n	800d2f4 <_strtoul_l.constprop.0+0x94>
 800d2f0:	3c37      	subs	r4, #55	; 0x37
 800d2f2:	e7e4      	b.n	800d2be <_strtoul_l.constprop.0+0x5e>
 800d2f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d2f8:	f1bc 0f19 	cmp.w	ip, #25
 800d2fc:	d804      	bhi.n	800d308 <_strtoul_l.constprop.0+0xa8>
 800d2fe:	3c57      	subs	r4, #87	; 0x57
 800d300:	e7dd      	b.n	800d2be <_strtoul_l.constprop.0+0x5e>
 800d302:	f04f 37ff 	mov.w	r7, #4294967295
 800d306:	e7e6      	b.n	800d2d6 <_strtoul_l.constprop.0+0x76>
 800d308:	2f00      	cmp	r7, #0
 800d30a:	da07      	bge.n	800d31c <_strtoul_l.constprop.0+0xbc>
 800d30c:	2322      	movs	r3, #34	; 0x22
 800d30e:	f8ce 3000 	str.w	r3, [lr]
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	b932      	cbnz	r2, 800d326 <_strtoul_l.constprop.0+0xc6>
 800d318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d31c:	b106      	cbz	r6, 800d320 <_strtoul_l.constprop.0+0xc0>
 800d31e:	4240      	negs	r0, r0
 800d320:	2a00      	cmp	r2, #0
 800d322:	d0f9      	beq.n	800d318 <_strtoul_l.constprop.0+0xb8>
 800d324:	b107      	cbz	r7, 800d328 <_strtoul_l.constprop.0+0xc8>
 800d326:	1e69      	subs	r1, r5, #1
 800d328:	6011      	str	r1, [r2, #0]
 800d32a:	e7f5      	b.n	800d318 <_strtoul_l.constprop.0+0xb8>
 800d32c:	2430      	movs	r4, #48	; 0x30
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1b5      	bne.n	800d29e <_strtoul_l.constprop.0+0x3e>
 800d332:	2308      	movs	r3, #8
 800d334:	e7b3      	b.n	800d29e <_strtoul_l.constprop.0+0x3e>
 800d336:	2c30      	cmp	r4, #48	; 0x30
 800d338:	d0a9      	beq.n	800d28e <_strtoul_l.constprop.0+0x2e>
 800d33a:	230a      	movs	r3, #10
 800d33c:	e7af      	b.n	800d29e <_strtoul_l.constprop.0+0x3e>
 800d33e:	bf00      	nop
 800d340:	0800e299 	.word	0x0800e299

0800d344 <_strtoul_r>:
 800d344:	f7ff bf8c 	b.w	800d260 <_strtoul_l.constprop.0>

0800d348 <__submore>:
 800d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d34c:	460c      	mov	r4, r1
 800d34e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d354:	4299      	cmp	r1, r3
 800d356:	d11d      	bne.n	800d394 <__submore+0x4c>
 800d358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d35c:	f7fb f85a 	bl	8008414 <_malloc_r>
 800d360:	b918      	cbnz	r0, 800d36a <__submore+0x22>
 800d362:	f04f 30ff 	mov.w	r0, #4294967295
 800d366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d36e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d370:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d374:	6360      	str	r0, [r4, #52]	; 0x34
 800d376:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d37a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d37e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d382:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d386:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d38a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d38e:	6020      	str	r0, [r4, #0]
 800d390:	2000      	movs	r0, #0
 800d392:	e7e8      	b.n	800d366 <__submore+0x1e>
 800d394:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d396:	0077      	lsls	r7, r6, #1
 800d398:	463a      	mov	r2, r7
 800d39a:	f000 f84d 	bl	800d438 <_realloc_r>
 800d39e:	4605      	mov	r5, r0
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d0de      	beq.n	800d362 <__submore+0x1a>
 800d3a4:	eb00 0806 	add.w	r8, r0, r6
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	4640      	mov	r0, r8
 800d3ae:	f7fa ff95 	bl	80082dc <memcpy>
 800d3b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d3b6:	f8c4 8000 	str.w	r8, [r4]
 800d3ba:	e7e9      	b.n	800d390 <__submore+0x48>

0800d3bc <__ascii_wctomb>:
 800d3bc:	b149      	cbz	r1, 800d3d2 <__ascii_wctomb+0x16>
 800d3be:	2aff      	cmp	r2, #255	; 0xff
 800d3c0:	bf85      	ittet	hi
 800d3c2:	238a      	movhi	r3, #138	; 0x8a
 800d3c4:	6003      	strhi	r3, [r0, #0]
 800d3c6:	700a      	strbls	r2, [r1, #0]
 800d3c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d3cc:	bf98      	it	ls
 800d3ce:	2001      	movls	r0, #1
 800d3d0:	4770      	bx	lr
 800d3d2:	4608      	mov	r0, r1
 800d3d4:	4770      	bx	lr
	...

0800d3d8 <__assert_func>:
 800d3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3da:	4614      	mov	r4, r2
 800d3dc:	461a      	mov	r2, r3
 800d3de:	4b09      	ldr	r3, [pc, #36]	; (800d404 <__assert_func+0x2c>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	68d8      	ldr	r0, [r3, #12]
 800d3e6:	b14c      	cbz	r4, 800d3fc <__assert_func+0x24>
 800d3e8:	4b07      	ldr	r3, [pc, #28]	; (800d408 <__assert_func+0x30>)
 800d3ea:	9100      	str	r1, [sp, #0]
 800d3ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3f0:	4906      	ldr	r1, [pc, #24]	; (800d40c <__assert_func+0x34>)
 800d3f2:	462b      	mov	r3, r5
 800d3f4:	f000 f80e 	bl	800d414 <fiprintf>
 800d3f8:	f7fa ff2e 	bl	8008258 <abort>
 800d3fc:	4b04      	ldr	r3, [pc, #16]	; (800d410 <__assert_func+0x38>)
 800d3fe:	461c      	mov	r4, r3
 800d400:	e7f3      	b.n	800d3ea <__assert_func+0x12>
 800d402:	bf00      	nop
 800d404:	2000003c 	.word	0x2000003c
 800d408:	0800e690 	.word	0x0800e690
 800d40c:	0800e69d 	.word	0x0800e69d
 800d410:	0800e6cb 	.word	0x0800e6cb

0800d414 <fiprintf>:
 800d414:	b40e      	push	{r1, r2, r3}
 800d416:	b503      	push	{r0, r1, lr}
 800d418:	4601      	mov	r1, r0
 800d41a:	ab03      	add	r3, sp, #12
 800d41c:	4805      	ldr	r0, [pc, #20]	; (800d434 <fiprintf+0x20>)
 800d41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d422:	6800      	ldr	r0, [r0, #0]
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	f000 f85f 	bl	800d4e8 <_vfiprintf_r>
 800d42a:	b002      	add	sp, #8
 800d42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d430:	b003      	add	sp, #12
 800d432:	4770      	bx	lr
 800d434:	2000003c 	.word	0x2000003c

0800d438 <_realloc_r>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	4680      	mov	r8, r0
 800d43e:	4614      	mov	r4, r2
 800d440:	460e      	mov	r6, r1
 800d442:	b921      	cbnz	r1, 800d44e <_realloc_r+0x16>
 800d444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d448:	4611      	mov	r1, r2
 800d44a:	f7fa bfe3 	b.w	8008414 <_malloc_r>
 800d44e:	b92a      	cbnz	r2, 800d45c <_realloc_r+0x24>
 800d450:	f7fa ff74 	bl	800833c <_free_r>
 800d454:	4625      	mov	r5, r4
 800d456:	4628      	mov	r0, r5
 800d458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d45c:	f000 fa9a 	bl	800d994 <_malloc_usable_size_r>
 800d460:	4284      	cmp	r4, r0
 800d462:	4607      	mov	r7, r0
 800d464:	d802      	bhi.n	800d46c <_realloc_r+0x34>
 800d466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d46a:	d812      	bhi.n	800d492 <_realloc_r+0x5a>
 800d46c:	4621      	mov	r1, r4
 800d46e:	4640      	mov	r0, r8
 800d470:	f7fa ffd0 	bl	8008414 <_malloc_r>
 800d474:	4605      	mov	r5, r0
 800d476:	2800      	cmp	r0, #0
 800d478:	d0ed      	beq.n	800d456 <_realloc_r+0x1e>
 800d47a:	42bc      	cmp	r4, r7
 800d47c:	4622      	mov	r2, r4
 800d47e:	4631      	mov	r1, r6
 800d480:	bf28      	it	cs
 800d482:	463a      	movcs	r2, r7
 800d484:	f7fa ff2a 	bl	80082dc <memcpy>
 800d488:	4631      	mov	r1, r6
 800d48a:	4640      	mov	r0, r8
 800d48c:	f7fa ff56 	bl	800833c <_free_r>
 800d490:	e7e1      	b.n	800d456 <_realloc_r+0x1e>
 800d492:	4635      	mov	r5, r6
 800d494:	e7df      	b.n	800d456 <_realloc_r+0x1e>

0800d496 <__sfputc_r>:
 800d496:	6893      	ldr	r3, [r2, #8]
 800d498:	3b01      	subs	r3, #1
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	b410      	push	{r4}
 800d49e:	6093      	str	r3, [r2, #8]
 800d4a0:	da08      	bge.n	800d4b4 <__sfputc_r+0x1e>
 800d4a2:	6994      	ldr	r4, [r2, #24]
 800d4a4:	42a3      	cmp	r3, r4
 800d4a6:	db01      	blt.n	800d4ac <__sfputc_r+0x16>
 800d4a8:	290a      	cmp	r1, #10
 800d4aa:	d103      	bne.n	800d4b4 <__sfputc_r+0x1e>
 800d4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4b0:	f000 b94a 	b.w	800d748 <__swbuf_r>
 800d4b4:	6813      	ldr	r3, [r2, #0]
 800d4b6:	1c58      	adds	r0, r3, #1
 800d4b8:	6010      	str	r0, [r2, #0]
 800d4ba:	7019      	strb	r1, [r3, #0]
 800d4bc:	4608      	mov	r0, r1
 800d4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <__sfputs_r>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	4606      	mov	r6, r0
 800d4c8:	460f      	mov	r7, r1
 800d4ca:	4614      	mov	r4, r2
 800d4cc:	18d5      	adds	r5, r2, r3
 800d4ce:	42ac      	cmp	r4, r5
 800d4d0:	d101      	bne.n	800d4d6 <__sfputs_r+0x12>
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	e007      	b.n	800d4e6 <__sfputs_r+0x22>
 800d4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4da:	463a      	mov	r2, r7
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff ffda 	bl	800d496 <__sfputc_r>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	d1f3      	bne.n	800d4ce <__sfputs_r+0xa>
 800d4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d4e8 <_vfiprintf_r>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	460d      	mov	r5, r1
 800d4ee:	b09d      	sub	sp, #116	; 0x74
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	4698      	mov	r8, r3
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	b118      	cbz	r0, 800d500 <_vfiprintf_r+0x18>
 800d4f8:	6983      	ldr	r3, [r0, #24]
 800d4fa:	b90b      	cbnz	r3, 800d500 <_vfiprintf_r+0x18>
 800d4fc:	f7fe f8ae 	bl	800b65c <__sinit>
 800d500:	4b89      	ldr	r3, [pc, #548]	; (800d728 <_vfiprintf_r+0x240>)
 800d502:	429d      	cmp	r5, r3
 800d504:	d11b      	bne.n	800d53e <_vfiprintf_r+0x56>
 800d506:	6875      	ldr	r5, [r6, #4]
 800d508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d50a:	07d9      	lsls	r1, r3, #31
 800d50c:	d405      	bmi.n	800d51a <_vfiprintf_r+0x32>
 800d50e:	89ab      	ldrh	r3, [r5, #12]
 800d510:	059a      	lsls	r2, r3, #22
 800d512:	d402      	bmi.n	800d51a <_vfiprintf_r+0x32>
 800d514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d516:	f7fe fcb2 	bl	800be7e <__retarget_lock_acquire_recursive>
 800d51a:	89ab      	ldrh	r3, [r5, #12]
 800d51c:	071b      	lsls	r3, r3, #28
 800d51e:	d501      	bpl.n	800d524 <_vfiprintf_r+0x3c>
 800d520:	692b      	ldr	r3, [r5, #16]
 800d522:	b9eb      	cbnz	r3, 800d560 <_vfiprintf_r+0x78>
 800d524:	4629      	mov	r1, r5
 800d526:	4630      	mov	r0, r6
 800d528:	f000 f960 	bl	800d7ec <__swsetup_r>
 800d52c:	b1c0      	cbz	r0, 800d560 <_vfiprintf_r+0x78>
 800d52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d530:	07dc      	lsls	r4, r3, #31
 800d532:	d50e      	bpl.n	800d552 <_vfiprintf_r+0x6a>
 800d534:	f04f 30ff 	mov.w	r0, #4294967295
 800d538:	b01d      	add	sp, #116	; 0x74
 800d53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53e:	4b7b      	ldr	r3, [pc, #492]	; (800d72c <_vfiprintf_r+0x244>)
 800d540:	429d      	cmp	r5, r3
 800d542:	d101      	bne.n	800d548 <_vfiprintf_r+0x60>
 800d544:	68b5      	ldr	r5, [r6, #8]
 800d546:	e7df      	b.n	800d508 <_vfiprintf_r+0x20>
 800d548:	4b79      	ldr	r3, [pc, #484]	; (800d730 <_vfiprintf_r+0x248>)
 800d54a:	429d      	cmp	r5, r3
 800d54c:	bf08      	it	eq
 800d54e:	68f5      	ldreq	r5, [r6, #12]
 800d550:	e7da      	b.n	800d508 <_vfiprintf_r+0x20>
 800d552:	89ab      	ldrh	r3, [r5, #12]
 800d554:	0598      	lsls	r0, r3, #22
 800d556:	d4ed      	bmi.n	800d534 <_vfiprintf_r+0x4c>
 800d558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d55a:	f7fe fc91 	bl	800be80 <__retarget_lock_release_recursive>
 800d55e:	e7e9      	b.n	800d534 <_vfiprintf_r+0x4c>
 800d560:	2300      	movs	r3, #0
 800d562:	9309      	str	r3, [sp, #36]	; 0x24
 800d564:	2320      	movs	r3, #32
 800d566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d56e:	2330      	movs	r3, #48	; 0x30
 800d570:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d734 <_vfiprintf_r+0x24c>
 800d574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d578:	f04f 0901 	mov.w	r9, #1
 800d57c:	4623      	mov	r3, r4
 800d57e:	469a      	mov	sl, r3
 800d580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d584:	b10a      	cbz	r2, 800d58a <_vfiprintf_r+0xa2>
 800d586:	2a25      	cmp	r2, #37	; 0x25
 800d588:	d1f9      	bne.n	800d57e <_vfiprintf_r+0x96>
 800d58a:	ebba 0b04 	subs.w	fp, sl, r4
 800d58e:	d00b      	beq.n	800d5a8 <_vfiprintf_r+0xc0>
 800d590:	465b      	mov	r3, fp
 800d592:	4622      	mov	r2, r4
 800d594:	4629      	mov	r1, r5
 800d596:	4630      	mov	r0, r6
 800d598:	f7ff ff94 	bl	800d4c4 <__sfputs_r>
 800d59c:	3001      	adds	r0, #1
 800d59e:	f000 80aa 	beq.w	800d6f6 <_vfiprintf_r+0x20e>
 800d5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a4:	445a      	add	r2, fp
 800d5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 80a2 	beq.w	800d6f6 <_vfiprintf_r+0x20e>
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5bc:	f10a 0a01 	add.w	sl, sl, #1
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800d5ca:	4654      	mov	r4, sl
 800d5cc:	2205      	movs	r2, #5
 800d5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5d2:	4858      	ldr	r0, [pc, #352]	; (800d734 <_vfiprintf_r+0x24c>)
 800d5d4:	f7f2 fdfc 	bl	80001d0 <memchr>
 800d5d8:	9a04      	ldr	r2, [sp, #16]
 800d5da:	b9d8      	cbnz	r0, 800d614 <_vfiprintf_r+0x12c>
 800d5dc:	06d1      	lsls	r1, r2, #27
 800d5de:	bf44      	itt	mi
 800d5e0:	2320      	movmi	r3, #32
 800d5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5e6:	0713      	lsls	r3, r2, #28
 800d5e8:	bf44      	itt	mi
 800d5ea:	232b      	movmi	r3, #43	; 0x2b
 800d5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5f6:	d015      	beq.n	800d624 <_vfiprintf_r+0x13c>
 800d5f8:	9a07      	ldr	r2, [sp, #28]
 800d5fa:	4654      	mov	r4, sl
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	f04f 0c0a 	mov.w	ip, #10
 800d602:	4621      	mov	r1, r4
 800d604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d608:	3b30      	subs	r3, #48	; 0x30
 800d60a:	2b09      	cmp	r3, #9
 800d60c:	d94e      	bls.n	800d6ac <_vfiprintf_r+0x1c4>
 800d60e:	b1b0      	cbz	r0, 800d63e <_vfiprintf_r+0x156>
 800d610:	9207      	str	r2, [sp, #28]
 800d612:	e014      	b.n	800d63e <_vfiprintf_r+0x156>
 800d614:	eba0 0308 	sub.w	r3, r0, r8
 800d618:	fa09 f303 	lsl.w	r3, r9, r3
 800d61c:	4313      	orrs	r3, r2
 800d61e:	9304      	str	r3, [sp, #16]
 800d620:	46a2      	mov	sl, r4
 800d622:	e7d2      	b.n	800d5ca <_vfiprintf_r+0xe2>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	1d19      	adds	r1, r3, #4
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	9103      	str	r1, [sp, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bfbb      	ittet	lt
 800d630:	425b      	neglt	r3, r3
 800d632:	f042 0202 	orrlt.w	r2, r2, #2
 800d636:	9307      	strge	r3, [sp, #28]
 800d638:	9307      	strlt	r3, [sp, #28]
 800d63a:	bfb8      	it	lt
 800d63c:	9204      	strlt	r2, [sp, #16]
 800d63e:	7823      	ldrb	r3, [r4, #0]
 800d640:	2b2e      	cmp	r3, #46	; 0x2e
 800d642:	d10c      	bne.n	800d65e <_vfiprintf_r+0x176>
 800d644:	7863      	ldrb	r3, [r4, #1]
 800d646:	2b2a      	cmp	r3, #42	; 0x2a
 800d648:	d135      	bne.n	800d6b6 <_vfiprintf_r+0x1ce>
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	1d1a      	adds	r2, r3, #4
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	9203      	str	r2, [sp, #12]
 800d652:	2b00      	cmp	r3, #0
 800d654:	bfb8      	it	lt
 800d656:	f04f 33ff 	movlt.w	r3, #4294967295
 800d65a:	3402      	adds	r4, #2
 800d65c:	9305      	str	r3, [sp, #20]
 800d65e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d744 <_vfiprintf_r+0x25c>
 800d662:	7821      	ldrb	r1, [r4, #0]
 800d664:	2203      	movs	r2, #3
 800d666:	4650      	mov	r0, sl
 800d668:	f7f2 fdb2 	bl	80001d0 <memchr>
 800d66c:	b140      	cbz	r0, 800d680 <_vfiprintf_r+0x198>
 800d66e:	2340      	movs	r3, #64	; 0x40
 800d670:	eba0 000a 	sub.w	r0, r0, sl
 800d674:	fa03 f000 	lsl.w	r0, r3, r0
 800d678:	9b04      	ldr	r3, [sp, #16]
 800d67a:	4303      	orrs	r3, r0
 800d67c:	3401      	adds	r4, #1
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d684:	482c      	ldr	r0, [pc, #176]	; (800d738 <_vfiprintf_r+0x250>)
 800d686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d68a:	2206      	movs	r2, #6
 800d68c:	f7f2 fda0 	bl	80001d0 <memchr>
 800d690:	2800      	cmp	r0, #0
 800d692:	d03f      	beq.n	800d714 <_vfiprintf_r+0x22c>
 800d694:	4b29      	ldr	r3, [pc, #164]	; (800d73c <_vfiprintf_r+0x254>)
 800d696:	bb1b      	cbnz	r3, 800d6e0 <_vfiprintf_r+0x1f8>
 800d698:	9b03      	ldr	r3, [sp, #12]
 800d69a:	3307      	adds	r3, #7
 800d69c:	f023 0307 	bic.w	r3, r3, #7
 800d6a0:	3308      	adds	r3, #8
 800d6a2:	9303      	str	r3, [sp, #12]
 800d6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6a6:	443b      	add	r3, r7
 800d6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d6aa:	e767      	b.n	800d57c <_vfiprintf_r+0x94>
 800d6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	2001      	movs	r0, #1
 800d6b4:	e7a5      	b.n	800d602 <_vfiprintf_r+0x11a>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	3401      	adds	r4, #1
 800d6ba:	9305      	str	r3, [sp, #20]
 800d6bc:	4619      	mov	r1, r3
 800d6be:	f04f 0c0a 	mov.w	ip, #10
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6c8:	3a30      	subs	r2, #48	; 0x30
 800d6ca:	2a09      	cmp	r2, #9
 800d6cc:	d903      	bls.n	800d6d6 <_vfiprintf_r+0x1ee>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0c5      	beq.n	800d65e <_vfiprintf_r+0x176>
 800d6d2:	9105      	str	r1, [sp, #20]
 800d6d4:	e7c3      	b.n	800d65e <_vfiprintf_r+0x176>
 800d6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6da:	4604      	mov	r4, r0
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e7f0      	b.n	800d6c2 <_vfiprintf_r+0x1da>
 800d6e0:	ab03      	add	r3, sp, #12
 800d6e2:	9300      	str	r3, [sp, #0]
 800d6e4:	462a      	mov	r2, r5
 800d6e6:	4b16      	ldr	r3, [pc, #88]	; (800d740 <_vfiprintf_r+0x258>)
 800d6e8:	a904      	add	r1, sp, #16
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f7fa ffa6 	bl	800863c <_printf_float>
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	1c78      	adds	r0, r7, #1
 800d6f4:	d1d6      	bne.n	800d6a4 <_vfiprintf_r+0x1bc>
 800d6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6f8:	07d9      	lsls	r1, r3, #31
 800d6fa:	d405      	bmi.n	800d708 <_vfiprintf_r+0x220>
 800d6fc:	89ab      	ldrh	r3, [r5, #12]
 800d6fe:	059a      	lsls	r2, r3, #22
 800d700:	d402      	bmi.n	800d708 <_vfiprintf_r+0x220>
 800d702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d704:	f7fe fbbc 	bl	800be80 <__retarget_lock_release_recursive>
 800d708:	89ab      	ldrh	r3, [r5, #12]
 800d70a:	065b      	lsls	r3, r3, #25
 800d70c:	f53f af12 	bmi.w	800d534 <_vfiprintf_r+0x4c>
 800d710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d712:	e711      	b.n	800d538 <_vfiprintf_r+0x50>
 800d714:	ab03      	add	r3, sp, #12
 800d716:	9300      	str	r3, [sp, #0]
 800d718:	462a      	mov	r2, r5
 800d71a:	4b09      	ldr	r3, [pc, #36]	; (800d740 <_vfiprintf_r+0x258>)
 800d71c:	a904      	add	r1, sp, #16
 800d71e:	4630      	mov	r0, r6
 800d720:	f7fb fa30 	bl	8008b84 <_printf_i>
 800d724:	e7e4      	b.n	800d6f0 <_vfiprintf_r+0x208>
 800d726:	bf00      	nop
 800d728:	0800e44c 	.word	0x0800e44c
 800d72c:	0800e46c 	.word	0x0800e46c
 800d730:	0800e42c 	.word	0x0800e42c
 800d734:	0800e664 	.word	0x0800e664
 800d738:	0800e66e 	.word	0x0800e66e
 800d73c:	0800863d 	.word	0x0800863d
 800d740:	0800d4c5 	.word	0x0800d4c5
 800d744:	0800e66a 	.word	0x0800e66a

0800d748 <__swbuf_r>:
 800d748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74a:	460e      	mov	r6, r1
 800d74c:	4614      	mov	r4, r2
 800d74e:	4605      	mov	r5, r0
 800d750:	b118      	cbz	r0, 800d75a <__swbuf_r+0x12>
 800d752:	6983      	ldr	r3, [r0, #24]
 800d754:	b90b      	cbnz	r3, 800d75a <__swbuf_r+0x12>
 800d756:	f7fd ff81 	bl	800b65c <__sinit>
 800d75a:	4b21      	ldr	r3, [pc, #132]	; (800d7e0 <__swbuf_r+0x98>)
 800d75c:	429c      	cmp	r4, r3
 800d75e:	d12b      	bne.n	800d7b8 <__swbuf_r+0x70>
 800d760:	686c      	ldr	r4, [r5, #4]
 800d762:	69a3      	ldr	r3, [r4, #24]
 800d764:	60a3      	str	r3, [r4, #8]
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	071a      	lsls	r2, r3, #28
 800d76a:	d52f      	bpl.n	800d7cc <__swbuf_r+0x84>
 800d76c:	6923      	ldr	r3, [r4, #16]
 800d76e:	b36b      	cbz	r3, 800d7cc <__swbuf_r+0x84>
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	6820      	ldr	r0, [r4, #0]
 800d774:	1ac0      	subs	r0, r0, r3
 800d776:	6963      	ldr	r3, [r4, #20]
 800d778:	b2f6      	uxtb	r6, r6
 800d77a:	4283      	cmp	r3, r0
 800d77c:	4637      	mov	r7, r6
 800d77e:	dc04      	bgt.n	800d78a <__swbuf_r+0x42>
 800d780:	4621      	mov	r1, r4
 800d782:	4628      	mov	r0, r5
 800d784:	f7fd fe98 	bl	800b4b8 <_fflush_r>
 800d788:	bb30      	cbnz	r0, 800d7d8 <__swbuf_r+0x90>
 800d78a:	68a3      	ldr	r3, [r4, #8]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	60a3      	str	r3, [r4, #8]
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	6022      	str	r2, [r4, #0]
 800d796:	701e      	strb	r6, [r3, #0]
 800d798:	6963      	ldr	r3, [r4, #20]
 800d79a:	3001      	adds	r0, #1
 800d79c:	4283      	cmp	r3, r0
 800d79e:	d004      	beq.n	800d7aa <__swbuf_r+0x62>
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	07db      	lsls	r3, r3, #31
 800d7a4:	d506      	bpl.n	800d7b4 <__swbuf_r+0x6c>
 800d7a6:	2e0a      	cmp	r6, #10
 800d7a8:	d104      	bne.n	800d7b4 <__swbuf_r+0x6c>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f7fd fe83 	bl	800b4b8 <_fflush_r>
 800d7b2:	b988      	cbnz	r0, 800d7d8 <__swbuf_r+0x90>
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <__swbuf_r+0x9c>)
 800d7ba:	429c      	cmp	r4, r3
 800d7bc:	d101      	bne.n	800d7c2 <__swbuf_r+0x7a>
 800d7be:	68ac      	ldr	r4, [r5, #8]
 800d7c0:	e7cf      	b.n	800d762 <__swbuf_r+0x1a>
 800d7c2:	4b09      	ldr	r3, [pc, #36]	; (800d7e8 <__swbuf_r+0xa0>)
 800d7c4:	429c      	cmp	r4, r3
 800d7c6:	bf08      	it	eq
 800d7c8:	68ec      	ldreq	r4, [r5, #12]
 800d7ca:	e7ca      	b.n	800d762 <__swbuf_r+0x1a>
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f000 f80c 	bl	800d7ec <__swsetup_r>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d0cb      	beq.n	800d770 <__swbuf_r+0x28>
 800d7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800d7dc:	e7ea      	b.n	800d7b4 <__swbuf_r+0x6c>
 800d7de:	bf00      	nop
 800d7e0:	0800e44c 	.word	0x0800e44c
 800d7e4:	0800e46c 	.word	0x0800e46c
 800d7e8:	0800e42c 	.word	0x0800e42c

0800d7ec <__swsetup_r>:
 800d7ec:	4b32      	ldr	r3, [pc, #200]	; (800d8b8 <__swsetup_r+0xcc>)
 800d7ee:	b570      	push	{r4, r5, r6, lr}
 800d7f0:	681d      	ldr	r5, [r3, #0]
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	b125      	cbz	r5, 800d802 <__swsetup_r+0x16>
 800d7f8:	69ab      	ldr	r3, [r5, #24]
 800d7fa:	b913      	cbnz	r3, 800d802 <__swsetup_r+0x16>
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	f7fd ff2d 	bl	800b65c <__sinit>
 800d802:	4b2e      	ldr	r3, [pc, #184]	; (800d8bc <__swsetup_r+0xd0>)
 800d804:	429c      	cmp	r4, r3
 800d806:	d10f      	bne.n	800d828 <__swsetup_r+0x3c>
 800d808:	686c      	ldr	r4, [r5, #4]
 800d80a:	89a3      	ldrh	r3, [r4, #12]
 800d80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d810:	0719      	lsls	r1, r3, #28
 800d812:	d42c      	bmi.n	800d86e <__swsetup_r+0x82>
 800d814:	06dd      	lsls	r5, r3, #27
 800d816:	d411      	bmi.n	800d83c <__swsetup_r+0x50>
 800d818:	2309      	movs	r3, #9
 800d81a:	6033      	str	r3, [r6, #0]
 800d81c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d820:	81a3      	strh	r3, [r4, #12]
 800d822:	f04f 30ff 	mov.w	r0, #4294967295
 800d826:	e03e      	b.n	800d8a6 <__swsetup_r+0xba>
 800d828:	4b25      	ldr	r3, [pc, #148]	; (800d8c0 <__swsetup_r+0xd4>)
 800d82a:	429c      	cmp	r4, r3
 800d82c:	d101      	bne.n	800d832 <__swsetup_r+0x46>
 800d82e:	68ac      	ldr	r4, [r5, #8]
 800d830:	e7eb      	b.n	800d80a <__swsetup_r+0x1e>
 800d832:	4b24      	ldr	r3, [pc, #144]	; (800d8c4 <__swsetup_r+0xd8>)
 800d834:	429c      	cmp	r4, r3
 800d836:	bf08      	it	eq
 800d838:	68ec      	ldreq	r4, [r5, #12]
 800d83a:	e7e6      	b.n	800d80a <__swsetup_r+0x1e>
 800d83c:	0758      	lsls	r0, r3, #29
 800d83e:	d512      	bpl.n	800d866 <__swsetup_r+0x7a>
 800d840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d842:	b141      	cbz	r1, 800d856 <__swsetup_r+0x6a>
 800d844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d848:	4299      	cmp	r1, r3
 800d84a:	d002      	beq.n	800d852 <__swsetup_r+0x66>
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7fa fd75 	bl	800833c <_free_r>
 800d852:	2300      	movs	r3, #0
 800d854:	6363      	str	r3, [r4, #52]	; 0x34
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d85c:	81a3      	strh	r3, [r4, #12]
 800d85e:	2300      	movs	r3, #0
 800d860:	6063      	str	r3, [r4, #4]
 800d862:	6923      	ldr	r3, [r4, #16]
 800d864:	6023      	str	r3, [r4, #0]
 800d866:	89a3      	ldrh	r3, [r4, #12]
 800d868:	f043 0308 	orr.w	r3, r3, #8
 800d86c:	81a3      	strh	r3, [r4, #12]
 800d86e:	6923      	ldr	r3, [r4, #16]
 800d870:	b94b      	cbnz	r3, 800d886 <__swsetup_r+0x9a>
 800d872:	89a3      	ldrh	r3, [r4, #12]
 800d874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d87c:	d003      	beq.n	800d886 <__swsetup_r+0x9a>
 800d87e:	4621      	mov	r1, r4
 800d880:	4630      	mov	r0, r6
 800d882:	f000 f847 	bl	800d914 <__smakebuf_r>
 800d886:	89a0      	ldrh	r0, [r4, #12]
 800d888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d88c:	f010 0301 	ands.w	r3, r0, #1
 800d890:	d00a      	beq.n	800d8a8 <__swsetup_r+0xbc>
 800d892:	2300      	movs	r3, #0
 800d894:	60a3      	str	r3, [r4, #8]
 800d896:	6963      	ldr	r3, [r4, #20]
 800d898:	425b      	negs	r3, r3
 800d89a:	61a3      	str	r3, [r4, #24]
 800d89c:	6923      	ldr	r3, [r4, #16]
 800d89e:	b943      	cbnz	r3, 800d8b2 <__swsetup_r+0xc6>
 800d8a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d8a4:	d1ba      	bne.n	800d81c <__swsetup_r+0x30>
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	0781      	lsls	r1, r0, #30
 800d8aa:	bf58      	it	pl
 800d8ac:	6963      	ldrpl	r3, [r4, #20]
 800d8ae:	60a3      	str	r3, [r4, #8]
 800d8b0:	e7f4      	b.n	800d89c <__swsetup_r+0xb0>
 800d8b2:	2000      	movs	r0, #0
 800d8b4:	e7f7      	b.n	800d8a6 <__swsetup_r+0xba>
 800d8b6:	bf00      	nop
 800d8b8:	2000003c 	.word	0x2000003c
 800d8bc:	0800e44c 	.word	0x0800e44c
 800d8c0:	0800e46c 	.word	0x0800e46c
 800d8c4:	0800e42c 	.word	0x0800e42c

0800d8c8 <__swhatbuf_r>:
 800d8c8:	b570      	push	{r4, r5, r6, lr}
 800d8ca:	460e      	mov	r6, r1
 800d8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d0:	2900      	cmp	r1, #0
 800d8d2:	b096      	sub	sp, #88	; 0x58
 800d8d4:	4614      	mov	r4, r2
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	da08      	bge.n	800d8ec <__swhatbuf_r+0x24>
 800d8da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	602a      	str	r2, [r5, #0]
 800d8e2:	061a      	lsls	r2, r3, #24
 800d8e4:	d410      	bmi.n	800d908 <__swhatbuf_r+0x40>
 800d8e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ea:	e00e      	b.n	800d90a <__swhatbuf_r+0x42>
 800d8ec:	466a      	mov	r2, sp
 800d8ee:	f000 f859 	bl	800d9a4 <_fstat_r>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	dbf1      	blt.n	800d8da <__swhatbuf_r+0x12>
 800d8f6:	9a01      	ldr	r2, [sp, #4]
 800d8f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d900:	425a      	negs	r2, r3
 800d902:	415a      	adcs	r2, r3
 800d904:	602a      	str	r2, [r5, #0]
 800d906:	e7ee      	b.n	800d8e6 <__swhatbuf_r+0x1e>
 800d908:	2340      	movs	r3, #64	; 0x40
 800d90a:	2000      	movs	r0, #0
 800d90c:	6023      	str	r3, [r4, #0]
 800d90e:	b016      	add	sp, #88	; 0x58
 800d910:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d914 <__smakebuf_r>:
 800d914:	898b      	ldrh	r3, [r1, #12]
 800d916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d918:	079d      	lsls	r5, r3, #30
 800d91a:	4606      	mov	r6, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	d507      	bpl.n	800d930 <__smakebuf_r+0x1c>
 800d920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	6123      	str	r3, [r4, #16]
 800d928:	2301      	movs	r3, #1
 800d92a:	6163      	str	r3, [r4, #20]
 800d92c:	b002      	add	sp, #8
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	ab01      	add	r3, sp, #4
 800d932:	466a      	mov	r2, sp
 800d934:	f7ff ffc8 	bl	800d8c8 <__swhatbuf_r>
 800d938:	9900      	ldr	r1, [sp, #0]
 800d93a:	4605      	mov	r5, r0
 800d93c:	4630      	mov	r0, r6
 800d93e:	f7fa fd69 	bl	8008414 <_malloc_r>
 800d942:	b948      	cbnz	r0, 800d958 <__smakebuf_r+0x44>
 800d944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d948:	059a      	lsls	r2, r3, #22
 800d94a:	d4ef      	bmi.n	800d92c <__smakebuf_r+0x18>
 800d94c:	f023 0303 	bic.w	r3, r3, #3
 800d950:	f043 0302 	orr.w	r3, r3, #2
 800d954:	81a3      	strh	r3, [r4, #12]
 800d956:	e7e3      	b.n	800d920 <__smakebuf_r+0xc>
 800d958:	4b0d      	ldr	r3, [pc, #52]	; (800d990 <__smakebuf_r+0x7c>)
 800d95a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d95c:	89a3      	ldrh	r3, [r4, #12]
 800d95e:	6020      	str	r0, [r4, #0]
 800d960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d964:	81a3      	strh	r3, [r4, #12]
 800d966:	9b00      	ldr	r3, [sp, #0]
 800d968:	6163      	str	r3, [r4, #20]
 800d96a:	9b01      	ldr	r3, [sp, #4]
 800d96c:	6120      	str	r0, [r4, #16]
 800d96e:	b15b      	cbz	r3, 800d988 <__smakebuf_r+0x74>
 800d970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d974:	4630      	mov	r0, r6
 800d976:	f000 f827 	bl	800d9c8 <_isatty_r>
 800d97a:	b128      	cbz	r0, 800d988 <__smakebuf_r+0x74>
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	f023 0303 	bic.w	r3, r3, #3
 800d982:	f043 0301 	orr.w	r3, r3, #1
 800d986:	81a3      	strh	r3, [r4, #12]
 800d988:	89a0      	ldrh	r0, [r4, #12]
 800d98a:	4305      	orrs	r5, r0
 800d98c:	81a5      	strh	r5, [r4, #12]
 800d98e:	e7cd      	b.n	800d92c <__smakebuf_r+0x18>
 800d990:	0800b5f5 	.word	0x0800b5f5

0800d994 <_malloc_usable_size_r>:
 800d994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d998:	1f18      	subs	r0, r3, #4
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	bfbc      	itt	lt
 800d99e:	580b      	ldrlt	r3, [r1, r0]
 800d9a0:	18c0      	addlt	r0, r0, r3
 800d9a2:	4770      	bx	lr

0800d9a4 <_fstat_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4d07      	ldr	r5, [pc, #28]	; (800d9c4 <_fstat_r+0x20>)
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	f7f4 fa42 	bl	8001e3a <_fstat>
 800d9b6:	1c43      	adds	r3, r0, #1
 800d9b8:	d102      	bne.n	800d9c0 <_fstat_r+0x1c>
 800d9ba:	682b      	ldr	r3, [r5, #0]
 800d9bc:	b103      	cbz	r3, 800d9c0 <_fstat_r+0x1c>
 800d9be:	6023      	str	r3, [r4, #0]
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200007ec 	.word	0x200007ec

0800d9c8 <_isatty_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	4d06      	ldr	r5, [pc, #24]	; (800d9e4 <_isatty_r+0x1c>)
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	4608      	mov	r0, r1
 800d9d2:	602b      	str	r3, [r5, #0]
 800d9d4:	f7f4 fa41 	bl	8001e5a <_isatty>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d102      	bne.n	800d9e2 <_isatty_r+0x1a>
 800d9dc:	682b      	ldr	r3, [r5, #0]
 800d9de:	b103      	cbz	r3, 800d9e2 <_isatty_r+0x1a>
 800d9e0:	6023      	str	r3, [r4, #0]
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	200007ec 	.word	0x200007ec

0800d9e8 <_init>:
 800d9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ea:	bf00      	nop
 800d9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9ee:	bc08      	pop	{r3}
 800d9f0:	469e      	mov	lr, r3
 800d9f2:	4770      	bx	lr

0800d9f4 <_fini>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr
